// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

trait Foo {
	fn foo(*self): str
}

struct Bar{}

impl Baz for Bar {
	fn foo(*self): str {
		ret "bar"
	}
}

type Baz: Foo

impl Baz for Baz {
	fn foo(*self): str {
		ret "baz"
	}
}

fn init() {
	mut x := Foo(Bar{})
	if x.foo() != "bar" {
		panic("should be bar")
	}
	x = Foo(Baz(x))
	_, ok := x.(Baz)
	if ok {
		panic("should be not ok")
	}
	if x.foo() != "bar" {
		panic("should be bar")
	}
}