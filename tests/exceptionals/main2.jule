// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

fn single(x: int)!: int {
	if x < 0 {
		error("foo")
	}
	ret x
}

fn singleRetTest()!: int {
	ret single(89)!
}

fn singleRetTest1()!: int {
	ret single(89) else { error(error) }
}
fn singleRetTest1F()!: int {
	ret single(89)?
}

fn singleRetTest2()!: int {
	ret single(-1) else { error(error) }
}
fn singleRetTest2F()!: int {
	ret single(-1)?
}

fn singleRetTest3()!: int {
	ret single(-1) else { use 90 }
}

fn singleRetTest4()!: int {
	ret single(-1) else { ret 34 }
}

fn singleRetTest5()!: int {
	ret single(-1) else {
		use single(-1) else {
			use single(28)!
		}
	}
}

fn singleRetTest6()!: int {
	ret single(-1) else {
		ret single(-1) else {
			ret single(28)!
		}
	}
}

fn init() {
	{
		x := singleRetTest() else {
			panic("singleRetTest returns exception")
		}
		if x != 89 {
			panic("x != 89")
		}
	}
	{
		x := singleRetTest1() else {
			panic("singleRetTest1 returns exception")
		}
		if x != 89 {
			panic("x != 89")
		}
	}
	{
		x := singleRetTest1F() else {
			panic("singleRetTest1F returns exception")
		}
		if x != 89 {
			panic("x != 89")
		}
	}
	{
		singleRetTest2() else {
			goto SRT2
		}
		panic("singleRetTest2 returns with not exception, expected exception")
	SRT2:
	}
	{
		singleRetTest2F() else {
			goto SRT2F
		}
		panic("singleRetTest2F returns with not exception, expected exception")
	SRT2F:
	}
	{
		x := singleRetTest3() else {
			panic("singleRetTest3 returns exception")
		}
		if x != 90 {
			panic("x != 90")
		}
	}
	{
		x := singleRetTest4() else {
			panic("singleRetTest4 returns exception")
		}
		if x != 34 {
			panic("x != 34")
		}
	}
	{
		x := singleRetTest5() else {
			panic("singleRetTest5 returns exception")
		}
		if x != 28 {
			panic("x != 28")
		}
	}
	{
		x := singleRetTest6() else {
			panic("singleRetTest6 returns exception")
		}
		if x != 28 {
			panic("x != 28")
		}
	}
	{
		mut x := single(923)!
		if x != 923 {
			panic("x != 923")
		}
		x = single(920)!
		if x != 920 {
			panic("x != 920")
		}
	}
	{
		mut x := single(-1) else {
			use 10
		}
		if x != 10 {
			panic("x != 10")
		}
		x = single(-1) else {
			use 20
		}
		if x != 20 {
			panic("x != 20")
		}
	}
	{
		mut x := single(14)!
		if x != 14 {
			panic("x != 14")
		}
		x += single(6)!
		if x != 20 {
			panic("x != 20")
		}
		x <<= single(1) else {
			use 2
		}
		if x != 40 {
			panic("x != 40")
		}
		x <<= single(-1) else {
			use 2
		}
		if x != 160 {
			panic("x != 160")
		}
		x <<= single(-1) else {
			use 64
		}
		if x != 0 {
			panic("x != 0")
		}
	}
}

fn multi(x: int, y: int)!: (int, int) {
	if x < 0 || y < 0 {
		error("foo")
	}
	ret x, y
}

fn multiRetTest()!: (int, int) {
	ret multi(98, 89)!
}

fn multiRetTest1()!: (int, int) {
	ret multi(98, 89) else { error(error) }
}

fn multiRetTest2()!: (int, int) {
	ret multi(-1, -1) else { error(error) }
}

fn multiRetTest3()!: (int, int) {
	ret multi(-1, -1) else { use 90, 20 }
}

fn multiRetTest4()!: (int, int) {
	ret multi(-1, -1) else { ret 34, 43 }
}

fn multiRetTest5()!: (int, int) {
	ret multi(-1, -1) else {
		use multi(-1, -1) else {
			use multi(82, 28)!
		}
	}
}

fn multiRetTest6()!: (int, int) {
	ret multi(-1, -1) else {
		ret multi(-1, -1) else {
			ret multi(82, 28)!
		}
	}
}

fn init() {
	{
		x, y := multiRetTest() else {
			panic("multiRetTest returns exception")
		}
		if x != 98 {
			panic("x != 98")
		}
		if y != 89 {
			panic("y != 89")
		}
	}
	{
		x, y := multiRetTest1() else {
			panic("multiRetTest1 returns exception")
		}
		if x != 98 {
			panic("x != 98")
		}
		if y != 89 {
			panic("y != 89")
		}
	}
	{
		multiRetTest2() else {
			goto MRT2
		}
		panic("multiRetTest2 returns with not exception, expected exception")
	MRT2:
	}
	{
		x, y := multiRetTest3() else {
			panic("multiRetTest3 returns exception")
		}
		if x != 90 {
			panic("x != 90")
		}
		if y != 20 {
			panic("x != 20")
		}
	}
	{
		x, y := multiRetTest4() else {
			panic("multiRetTest4 returns exception")
		}
		if x != 34 {
			panic("x != 34")
		}
		if y != 43 {
			panic("y != 43")
		}
	}
	{
		x, y := multiRetTest5() else {
			panic("multiRetTest5 returns exception")
		}
		if x != 82 {
			panic("x != 82")
		}
		if y != 28 {
			panic("y != 28")
		}
	}
	{
		x, y := multiRetTest6() else {
			panic("multiRetTest6 returns exception")
		}
		if x != 82 {
			panic("x != 82")
		}
		if y != 28 {
			panic("y != 28")
		}
	}
	{
		mut x, mut y := multi(923, 89)!
		if x != 923 {
			panic("x != 923")
		}
		if y != 89 {
			panic("y != 89")
		}
		x, y = multi(920, 98)!
		if x != 920 {
			panic("x != 920")
		}
		if y != 98 {
			panic("y != 98")
		}
	}
	{
		mut x, mut y := multi(-1, -1) else {
			use 10, 20
		}
		if x != 10 {
			panic("x != 10")
		}
		if y != 20 {
			panic("x != 20")
		}
		x, y = multi(-1, -1) else {
			use 50, 100
		}
		if x != 50 {
			panic("x != 50")
		}
		if y != 100 {
			panic("x != 100")
		}
	}
}