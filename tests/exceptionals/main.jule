// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

fn successVoid()! {
	println("success void")
}

fn failVoid()! {
	error("not implemented")
}

fn successRet()!: int {
	ret 20
}

fn failRet()!: int {
	error("not implemented")
}

fn successRet1()!: (a: int) {
	a = 40
	ret
}

fn failRet1()!: (a: int) {
	error("not implemented")
}

fn successRet2()!: (a: int, b: int) {
	a = 40
	b = 50
	ret
}

fn failRet2()!: (a: int, b: int) {
	error("not implemented")
}

fn err()! { error("bar") }

fn anonForward()! {
	fn()! {
		err()?
	}()?
}

fn anonForward1()! {
	fn()! {
		err() else { error(error) }
	}()?
}

fn closureForward()! {
	fn()! {
		err()?
	}() else {
		fn()! {
			error(error)
		}()?
	}
}

fn closureForward1()! {
	fn()! {
		error("cf1")
	}() else {
		fn()! {
			err() else {
				error(error)
			}
		}()?
	}
}

fn closureForward2()! {
	fn()! {
		error("cf2")
	}() else {
		fn()! {
			error(error)
		}()?
	}
}

fn main() {
	successVoid() else {
		panic("successVoid failed, should be success")
	}
	failVoid() else {
		println("handled error of failVoid")
	}

	successRet() else {
		panic("successRet failed, should be success")
	}
	failRet() else {
		println("handled error of failRet")
	}

	successRet1() else {
		panic("successRet1 failed, should be success")
	}
	failRet1() else {
		println("handled error of failRet1")
	}

	successRet2() else {
		panic("success_ret2 failed, should be success")
	}
	failRet2() else {
		println("handled error of failRet2")
	}

	anonForward() else {
		if error != "bar" {
			panic("expected \"bar\"")
		}
		goto AF
	}
	panic("expected exceptional for anonForward")
AF:
	anonForward1() else {
		if error != "bar" {
			panic("expected \"bar\"")
		}
		goto AF1
	}
	panic("expected exceptional for anonForward1")
AF1:
	closureForward() else {
		if error != "bar" {
			panic("expected \"bar\"")
		}
		goto CF
	}
	panic("expected exceptional for closureForward")
CF:
	closureForward1() else {
		if error != "bar" {
			panic("expected \"bar\"")
		}
		goto CF1
	}
	panic("expected exceptional for closureForward1")
CF1:
	closureForward2() else {
		if error != "cf2" {
			panic("expected \"bar\"")
		}
		goto CF2
	}
	panic("expected exceptional for closureForward2")
CF2:
}