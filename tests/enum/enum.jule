// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"

// Common test.
enum Ordinary {
	copyA: 90,
	copyB,
	copyC,
}

fn init() {
	if int(Ordinary.copyA) != 90 {
		panic("copyA != 90")
	}
	if int(Ordinary.copyB) != 91 {
		panic("copyB != 91")
	}
	if int(Ordinary.copyC) != 92 {
		panic("copyC != 92")
	}
}

// Ordinary string test.
enum OrdinaryStr: str {
	copyD: "foo",
	copyE,
	copyF,
}

fn init() {
	if str(OrdinaryStr.copyD) != "foo" {
		panic("copyD != foo")
	}
	if str(OrdinaryStr.copyE) != "copyE" {
		panic("copyE != copyE")
	}
	if str(OrdinaryStr.copyF) != "copyF" {
		panic("copyF != copyF")
	}
}

enum OrdinaryStrictStr: String {
	copyG: "foo",
	copyH,
	copyI,
}

fn init() {
	if str(OrdinaryStrictStr.copyG) != "foo" {
		panic("copyG != foo")
	}
	if str(OrdinaryStrictStr.copyH) != "copyH" {
		panic("copyH != copyH")
	}
	if str(OrdinaryStrictStr.copyI) != "copyI" {
		panic("copyI != copyI")
	}
}

// Plain iota test.
enum EnumIota {
	iotaA,
	iotaB,
	iotaC,
}

fn init() {
	if int(EnumIota.iotaA) != 0 {
		panic("iotaA != 0")
	}
	if int(EnumIota.iotaB) != 1 {
		panic("iotaB != 1")
	}
	if int(EnumIota.iotaC) != 2 {
		panic("iotaC != 2")
	}
}

// Iota test.
enum EnumIota2 {
	iotaA: iota,
	iotaB,
	iotaC,
}

fn init() {
	if int(EnumIota2.iotaA) != 0 {
		panic("iotaA != 0")
	}
	if int(EnumIota2.iotaB) != 1 {
		panic("iotaB != 1")
	}
	if int(EnumIota2.iotaC) != 2 {
		panic("iotaC != 2")
	}
}

// Iota binary test.
enum EnumIotaBin {
	iotaBinA: 10 + iota,
	iotaBinB,
	iotaBinC,
}

fn init() {
	if int(EnumIotaBin.iotaBinA) != 10 {
		panic("iotaBinA != 10")
	}
	if int(EnumIotaBin.iotaBinB) != 11 {
		panic("iotaBinB != 11")
	}
	if int(EnumIotaBin.iotaBinC) != 12 {
		panic("iotaBinC != 12")
	}
}

// Iota with breaks test.
enum EnumIotaBrk {
	iotaBrkA: iota,
	iotaBrkB,
	iotaBrkC,
	BrkA: 90,
	BrkB,
	iotaBrkD: iota + 90,
	iotaBrkE,
	iotaBrkF,
}

fn init() {
	if int(EnumIotaBrk.iotaBrkA) != 0 {
		panic("iotaBrkA != 0")
	}
	if int(EnumIotaBrk.iotaBrkB) != 1 {
		panic("iotaBrkB != 1")
	}
	if int(EnumIotaBrk.iotaBrkC) != 2 {
		panic("iotaBrkC != 2")
	}
	if int(EnumIotaBrk.BrkA) != 90 {
		panic("BrkA != 90")
	}
	if int(EnumIotaBrk.BrkB) != 91 {
		panic("BrkB != 91")
	}
	if int(EnumIotaBrk.iotaBrkD) != 95 {
		panic("iotaBrkD != 95")
	}
	if int(EnumIotaBrk.iotaBrkE) != 96 {
		panic("iotaBrkE != 96")
	}
	if int(EnumIotaBrk.iotaBrkF) != 97 {
		panic("iotaBrkF != 97")
	}
}

enum EnumMixIota {
	A: -20,
	B,
	C,
	D: 20,
	E,
	F: 1,
	G,
	H,
}

fn init() {
	if int(EnumMixIota.A) != -20 {
		panic("A != -20")
	}
	if int(EnumMixIota.B) != -19 {
		panic("B != -19")
	}
	if int(EnumMixIota.C) != -18 {
		panic("A != -18")
	}
	if int(EnumMixIota.D) != 20 {
		panic("D != 20")
	}
	if int(EnumMixIota.E) != 21 {
		panic("E != 21")
	}
	if int(EnumMixIota.F) != 1 {
		panic("F != 1")
	}
	if int(EnumMixIota.G) != 2 {
		panic("G != 2")
	}
	if int(EnumMixIota.H) != 3 {
		panic("H != 3")
	}
}