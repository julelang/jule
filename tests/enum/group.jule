// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"

// Copy test.
const (
	copyA = 90
	copyB
	copyC
)

fn init() {
	if copyA != 90 {
		panic("copyA != 90")
	}
	if copyB != 90 {
		panic("copyB != 90")
	}
	if copyC != 90 {
		panic("copyC != 90")
	}
}

fn init() {
	const (
		copyA = 90
		copyB
		copyC
	)

	if copyA != 90 {
		panic("copyA != 90")
	}
	if copyB != 90 {
		panic("copyB != 90")
	}
	if copyC != 90 {
		panic("copyC != 90")
	}
}

// Copy string test.
const (
	copyD = "foo"
	copyE
	copyF
)

fn init() {
	if copyD != "foo" {
		panic("copyD != foo")
	}
	if copyE != "foo" {
		panic("copyE != foo")
	}
	if copyF != "foo" {
		panic("copyF != foo")
	}
}

fn init() {
	const (
		copyD = "foo"
		copyE
		copyF
	)

	if copyD != "foo" {
		panic("copyD != foo")
	}
	if copyE != "foo" {
		panic("copyE != foo")
	}
	if copyF != "foo" {
		panic("copyF != foo")
	}
}

// Copy with strict type alias test.
type String: str

const (
	copyG: String = "foo"
	copyH
	copyI
)

fn init() {
	if copyG != "foo" {
		panic("copyG != foo")
	}
	if copyH != "foo" {
		panic("copyH != foo")
	}
	if copyI != "foo" {
		panic("copyI != foo")
	}
	const st = comptime::TypeOf(String)
	const match {
	| comptime::TypeOf(copyG) != st:
		panic("copyG type is not String")
	| comptime::TypeOf(copyH) != st:
		panic("copyH type is not String")
	| comptime::TypeOf(copyI) != st:
		panic("copyI type is not String")
	}
}

fn init() {
	const (
		copyG: String = "foo"
		copyH
		copyI
	)

	if copyG != "foo" {
		panic("copyG != foo")
	}
	if copyH != "foo" {
		panic("copyH != foo")
	}
	if copyI != "foo" {
		panic("copyI != foo")
	}
	const st = comptime::TypeOf(String)
	const match {
	| comptime::TypeOf(copyG) != st:
		panic("copyG type is not String")
	| comptime::TypeOf(copyH) != st:
		panic("copyH type is not String")
	| comptime::TypeOf(copyI) != st:
		panic("copyI type is not String")
	}
}

// Iota test.
const (
	iotaA = iota
	iotaB
	iotaC
)

fn init() {
	if iotaA != 0 {
		panic("iotaA != 0")
	}
	if iotaB != 1 {
		panic("iotaB != 1")
	}
	if iotaC != 2 {
		panic("iotaC != 2")
	}
}

fn init() {
	const (
		iotaA = iota
		iotaB
		iotaC
	)

	if iotaA != 0 {
		panic("iotaA != 0")
	}
	if iotaB != 1 {
		panic("iotaB != 1")
	}
	if iotaC != 2 {
		panic("iotaC != 2")
	}
}

// Iota binary test.
const (
	iotaBinA = 10 + iota
	iotaBinB
	iotaBinC
)

fn init() {
	if iotaBinA != 10 {
		panic("iotaBinA != 10")
	}
	if iotaBinB != 11 {
		panic("iotaBinB != 11")
	}
	if iotaBinC != 12 {
		panic("iotaBinC != 12")
	}
}

fn init() {
	const (
		iotaBinA = 10 + iota
		iotaBinB
		iotaBinC
	)

	if iotaBinA != 10 {
		panic("iotaBinA != 10")
	}
	if iotaBinB != 11 {
		panic("iotaBinB != 11")
	}
	if iotaBinC != 12 {
		panic("iotaBinC != 12")
	}
}

const (
	iotaBinSA = 1 << iota
	iotaBinSB
	iotaBinSC
)

fn init() {
	if iotaBinSA != 1 {
		panic("iotaBinSA != 1")
	}
	if iotaBinSB != 2 {
		panic("iotaBinSB != 2")
	}
	if iotaBinSC != 4 {
		panic("iotaBinSC != 4")
	}
}

fn init() {
	const (
		iotaBinA = 1 << iota
		iotaBinB
		iotaBinC
	)

	if iotaBinSA != 1 {
		panic("iotaBinSA != 1")
	}
	if iotaBinSB != 2 {
		panic("iotaBinSB != 2")
	}
	if iotaBinSC != 4 {
		panic("iotaBinSC != 4")
	}
}

// Iota with type test.
const (
	iotaD: byte = iota
	iotaE
	iotaF
)

fn init() {
	if iotaD != 0 {
		panic("iotaD != 0")
	}
	if iotaE != 1 {
		panic("iotaE != 1")
	}
	if iotaF != 2 {
		panic("iotaF != 2")
	}
	const st = comptime::TypeOf(byte)
	const match {
	| comptime::TypeOf(iotaD) != st:
		panic("iotaD type is not byte")
	| comptime::TypeOf(iotaE) != st:
		panic("iotaE type is not byte")
	| comptime::TypeOf(iotaF) != st:
		panic("iotaF type is not byte")
	}
}

fn init() {
	const (
		iotaD: byte = iota
		iotaE
		iotaF
	)

	if iotaD != 0 {
		panic("iotaD != 0")
	}
	if iotaE != 1 {
		panic("iotaE != 1")
	}
	if iotaF != 2 {
		panic("iotaF != 2")
	}
	const st = comptime::TypeOf(byte)
	const match {
	| comptime::TypeOf(iotaD) != st:
		panic("iotaD type is not byte")
	| comptime::TypeOf(iotaE) != st:
		panic("iotaE type is not byte")
	| comptime::TypeOf(iotaF) != st:
		panic("iotaF type is not byte")
	}
}

// Iota with breaks test.
const (
	iotaBrkA = iota
	iotaBrkB
	iotaBrkC
	BrkA = "foo"
	BrkB
	iotaBrkD = iota
	iotaBrkE
	iotaBrkF
)

fn init() {
	if iotaBrkA != 0 {
		panic("iotaBrkA != 0")
	}
	if iotaBrkB != 1 {
		panic("iotaBrkB != 1")
	}
	if iotaBrkC != 2 {
		panic("iotaBrkC != 2")
	}
	if BrkA != "foo" {
		panic("BrkA != foo")
	}
	if BrkB != "foo" {
		panic("BrkB != foo")
	}
	if iotaBrkD != 5 {
		panic("iotaBrkD != 5")
	}
	if iotaBrkE != 6 {
		panic("iotaBrkE != 6")
	}
	if iotaBrkF != 7 {
		panic("iotaBrkF != 7")
	}
}

fn init() {
	const (
		iotaBrkA = iota
		iotaBrkB
		iotaBrkC
		BrkA = "foo"
		BrkB
		iotaBrkD = iota
		iotaBrkE
		iotaBrkF
	)

	if iotaBrkA != 0 {
		panic("iotaBrkA != 0")
	}
	if iotaBrkB != 1 {
		panic("iotaBrkB != 1")
	}
	if iotaBrkC != 2 {
		panic("iotaBrkC != 2")
	}
	if BrkA != "foo" {
		panic("BrkA != foo")
	}
	if BrkB != "foo" {
		panic("BrkB != foo")
	}
	if iotaBrkD != 5 {
		panic("iotaBrkD != 5")
	}
	if iotaBrkE != 6 {
		panic("iotaBrkE != 6")
	}
	if iotaBrkF != 7 {
		panic("iotaBrkF != 7")
	}
}

fn main() {}