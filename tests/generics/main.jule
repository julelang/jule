// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Reports index of x in s.
// Returns -1 if x is not exist in s.
fn find[T](s: []T, x: T): int {
	for i, y in s {
		if y == x {
			ret i
		}
	}
	ret -1
}

// Reports whether x exist in s.
fn exist[T](s: []T, x: T): bool {
	ret find[T](s, x) != -1
}

// Utils for slices.
struct Slice[T]{}

impl Slice {
	// Forwards to exist function.
	fn exist(s: []T, x: T): bool {
		ret exist[T](s, x)
	}

	// Forwats to find function.
	fn find(s: []T, x: T): int {
		ret find[T](s, x)
	}
}

struct MyStruct[T1, T2] {
	x: T1
	y: T2
}

impl MyStruct {
	fn Foo[E: numeric](*self, f: fn(): E) {
		let mut x: E
		x = f()
	}
}

fn NewMyStruct[T1, T2](x: T1, y: T2): MyStruct[T1, T2] {
	ret MyStruct[T1, T2]{x, y}
}

fn Inference[T](f: fn(x: int, y: int): T) {
	_ = f(10, 20)
}

fn Inference2[T](f: fn(x: int, y: int): (T, int)) {
	_, _ = f(10, 20)
}

fn Inference3[T](x: ...T) {}
fn Inference4[T](x: T, y: ...T) {}

struct Foo[E: comparable, T]{}

impl Foo {
	// Returns maximum value of the groups by result of f.
	fn Infer[M: numeric](*self, f: fn(T): M): map[E]M {
		ret nil
	}
}

type Nums[E: numeric]: []E

impl Nums {
	fn foo(*self): E {
		ret 10
	}
}

fn InferenceSTA[E: numeric](&s: *Nums[E]) {}

fn main() {
	let mut n: Nums[int]
	InferenceSTA(&n)

	let s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
	println(exist(s, 20))
	println(exist[int](s, 4))
	println(Slice[int].exist(s, 20))
	println(Slice[int].exist(s, 4))
	println(find(s, 20))
	println(find[int](s, 4))
	println(Slice[int].find(s, 20))
	println(Slice[int].find(s, 4))
	mc := NewMyStruct(123, 789)
	mc.Foo(fn|| i64(10))
	println(mc)
	Inference(fn(x: int, y: int): int { ret x * y })
	Inference(fn|x, y| x * y)
	Inference2(fn(x: int, y: int): (int, int) { ret x * y, y })
	Inference2(fn|x, y| (x * y, y))
	f := Foo[str, str]{}
	f.Infer(fn|s| len(s))
	Inference3(1, 2, 3, 4)
	Inference3([1, 2, 3, 4]...)
	Inference4(1, 2, 3, 4)
	Inference4(1, [1, 2, 3, 4]...)
}