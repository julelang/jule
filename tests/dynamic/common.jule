// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

enum FooC: type {
	int,
	bool,
}

type Bar: FooC
type Bar2: FooC

enum Baz: type {
	Bar,
	Bar2,
}

fn init() {
	let a: Baz = Bar(20)
	x := a.(Bar)
	if x.(int) != 20 {
		panic("should be 20")
	}
}

fn init() {
	a := Baz(Bar(20))
	x := a.(Bar)
	if x.(int) != 20 {
		panic("should be 20")
	}
}

fn init() {
	a := any(Bar(20))
	x := a.(Bar)
	if x.(int) != 20 {
		panic("should be 20")
	}
}

type FooC2: any
type Bar3: any
type Bar4: any

fn init() {
	a := FooC2(Bar3(20)).(int)
	if a != 20 {
		panic("should be 20")
	}
}