// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"

type TestTypeAlias: i32

// Test for global variable.
static TestGlobal: int = 10

// Test for global constant variable.
const TestConst = 20

fn testPlainTypeParameters(integ::Int, integ::Int) {}
fn testPlainTypeParameters1(_: integ::Int, _: integ::Int) {}
fn testPlainTypeParameters2(&_: integ::Int, &_: integ::Int) {}

fn testStringConcat() {
	_ = "Hello" + " " + "World!"
}

fn testIntegers() {
	_ = 13e+1
	_ = 3536
	_ = 0x0FDDA24
	_ = 05353
}

fn testVariable() {
	let a: int = 0
	_ = a
	let mut x = 10
	x = 100
	println(x)
	b := 20
	&c := a
	mut z := 20
	mut &k := x
	_ = b, c, z, k
}

fn testAssignment() {
	let mut x = 10
	x += 100
}

fn testSlice() {
	let my_slice = [
		["Apple", "Banana"],
		["Bred", "Cheese"],
	]
	println(
		my_slice[0])
}

fn testArray() {
	let my_array: [2][3]str = [
		["Apple", "Banana", "TEST"],
		["Bred", "Cheese", "BLA"],
	]
	println(
		my_array[0])
}

fn testAnonymousFunction() {
	let myFunc: fn() = fn() {
		println("Hello World!")
	}
	myFunc()
	let rf = fn(): i32 {
		ret 90
	}()
	_ = rf
	fn() {
		println("Anonymous Outln")
	}()
	let a = 0
	_ = a
}

fn testAnonymousFunction2(): (int, ok: bool) {
	f := fn(): bool {
		ok = true
		ret ok
	}
	ret 0, f()
}

fn testMultipleVariable() {
	let (mut a, mut b, _, c) = 100, 200, nil, false
	_ = c
	a, b = 10, 20
	a, b = b, a
	println(a)
	println(b)
	a, b, _ = testMultipleReturn()
}

fn testMultipleReturn(): (int, int, bool) { ret 5, 5, false }

fn testIter() {
	// Infinity iteration
	for {
		break
		continue
	}

	// While iteration
	for !false {
		break
	}

	// Foreach iteration
	for in "Hello" {
		println("Jule")
	}

	for index in "Hello" {
		println(index)
	}

	for _, c in "Hello" {
		println(c)
	}

	for _, element in ["The", "Jule", "Programming", "Language"] {
		println(element)
	}

	for index in "TEST" {
		_ = index
	}

	for {
		break
	}

	let mut a = 0
	for a <= 3; a++ {
		println(a)
	}
}

fn testIfExpressions() {
	if true {
		println("IF")
	} else if true {
		println("ELSE_IF0")
	} else if false {
		println("ELSE_IF_1")
		if true == true {
			println("ELSE_IF_1_IF")
		} else {
			println("ELSE")
		}
	} else {
		println("ELSE")
	}
}

fn testParameters(a: i32, b: bool) {}

fn testParameters2(a: i32, b: i32, c: bool, d: bool) {}

fn testVariadicParameters(lnEvery: bool, values: ...i32) {
	for _, i in values {
		if lnEvery {
			println(i)
		} else {
			print(i)
		}
	}
}

fn testVariadicParameters2(...str) {}

fn testCasting() {
	let a: *int = nil
	_ = uintptr(a)
	_ = f32(5000)
	let bytes = []byte("Hello Bytes")
	println(bytes)
	println(str(bytes))
}

fn testRawString() {
	_ = `Hello
    raw`

	_ = `
  strings`
}

fn testMap() {
	let mut m: map[int]str = {
		0: "The",
		1: "Jule",
		2: "Programming",
		3: "Language",
	}
	m[4] = "Maps"
	println(m)
	for key, value in m {
		print(key)
		print(": ")
		println(value)
	}
}

fn testInblockTypeAlias() {
	type integer: i32
	let x: integer = 10
	_ = x
}

fn testInblockBlock() {
	{
		println("INBLOCK_BLOCK")
	}
}

fn testGoto() {
	let s = "Hello World"
	{
		let mut ok = false
		{
			if !ok {
				ok = true
				goto bla
			}
			goto test
		}
	bla:
		println(ok)
	}
test:
	{
		println("TEST")
		goto end
	}
	println(s)
end:
}

enum testEnum {
	item1,
	item2,
	item3: 369,
	item4,
}

struct testStruct {
	a: str
	b: i32
	c: byte
	d: bool
}

impl testStruct {
	fn func1(mut self) {
		self.a = "test"
	}

	fn func2[T1](mut self) {
		self.d = !self.d
	}
}

fn testGenericFunc[T](a: T, b: T): T { ret a + b }

fn testRetVars(): (x: int) { ret }

fn testPostfix() {
	let mut a = 10
	a++
	a--
}

fn testMatchCase() {
	match 10 {
	| 1:
		println("one")
	| 2:
		println("two")
	|:
		println("default")
	}

	match {
	| false:
		println("false")
	| !true:
		println("!true")
	| false | true:
		println("false, true")
	|:
		println("default")
	}
}

fn test3indexSlicing() {
	mut x := make([]int, 0, 10)
	x = append(x, 1, 2, 3, 4, 5)
	println(x)
	mut y := x[:len(x):len(x)]
	y = append(y, 10, 20, 30, 40, 50)
	println(y)
	println(x[:cap(x)])
}

fn init() {
	println("Syntax Test")
}

// Entry point function of program.
fn main() {
	_ = map[int]&int{}

	testIntegers()
	testStringConcat()
	testVariable()
	testAssignment()
	testSlice()
	testArray()
	testAnonymousFunction()
	testAnonymousFunction2()
	testMultipleVariable()
	testIter()
	testIfExpressions()
	testParameters(24, false)
	testParameters2(24, 52, true, false)
	testVariadicParameters(true)
	testVariadicParameters(true, 10, 20)
	testVariadicParameters(!false, [i32(1), 2, 3, 4, 5]...)
	testVariadicParameters2()
	testVariadicParameters2("TEST", "TEST_1")
	testCasting()
	testRawString()
	testMap()
	testInblockTypeAlias()
	testInblockBlock()
	testGoto()
	println(testEnum.item3)
	testGenericFunc[int](2, -30)
	testGenericFunc[uint](6, 2)
	testGenericFunc[f64](4.2, 35.23)
	testMatchCase()
	test3indexSlicing()
}