// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule"
use "std/jule/build"
use "std/os"
use "std/os/filepath"
use "std/strings"
use "std/unsafe"

// Searches module file in path.
// Reports whether module file is exist in given directory.
fn FindModuleFile(&dirents: []os::DirEntry): bool {
	for _, d in dirents {
		if !d.Stat.IsDir() && d.Name == jule::ModuleFile {
			ret true
		}
	}
	ret false
}

// Searches module file in path, and their parent paths.
// Returns empty string if any module file is not exist.
// Returns directory path of module file if exist.
fn FindModuleFileDeep(mut path: str): str {
	for {
		mut dirents := os::ReadDir(path) else { break }
		exist := FindModuleFile(dirents)
		if exist {
			ret path
		}
		n := len(path)
		path = filepath::Dir(path)
		if len(path) == n { // Same path, no difference.
			break
		}
	}
	ret ""
}

// Checks module file of given directory.
fn CheckModuleFile(&path: str): []build::Log {
	bytes := os::ReadFile(filepath::Join(path, jule::ModuleFile)) else {
		ret [{
				Kind: build::LogKind.Flat,
				Text: "module file could not checked because of a problem",
			}]
	}
	s := strings::Trim(unsafe::BytesStr(bytes), " \n\r\t\v")
	if len(s) != 0 {
		ret [{
				Kind: build::LogKind.Flat,
				Text: "module file has syntax error(s)",
			}]
	}
	ret nil
}