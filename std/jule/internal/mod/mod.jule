// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule"
use "std/os"
use "std/os/filepath"

// Searches module file in path.
// Reports whether module file is exist in given directory.
fn FindModuleFile(dirents: []os::DirEntry): bool {
	for _, d in dirents {
		if d.Stat.Mode().IsRegular() && d.Name == jule::ModuleFile {
			ret true
		}
	}
	ret false
}

// Searches module file in path, and their parent paths.
// Returns empty string if any module file is not exist.
// Returns directory path of module file if exist.
fn FindModuleFileDeep(mut path: str): str {
	for {
		mut dirents := os::ReadDir(path) else { break }
		exist := FindModuleFile(dirents)
		if exist {
			ret path
		}
		n := len(path)
		path = filepath::Dir(path)
		if len(path) == n { // Same path, no difference.
			break
		}
	}
	ret ""
}