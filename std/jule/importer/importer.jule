// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule"
use "std/jule/ast"
use "std/jule/build"
use "std/jule/directive"
use "std/jule/internal/mod"
use "std/jule/log"
use "std/jule/parser"
use "std/jule/sema"
use "std/jule/token"
use "std/os"
use "std/os/filepath"
use "std/strings"

// Read buffer by file path.
fn readBuff(path: str): []byte {
	ret os::ReadFile(path) else {
		println("error: file cannot read")
		const ErrorExitCode = 1
		os::Exit(ErrorExitCode)
		ret nil // Avoid error
	}
}

// Make compiler error, just text.
// Does not includes information about row, column, and etc.
fn flatCompilerErr(text: str): log::Log {
	ret log::Log{
		Kind: log::Error,
		Text: text,
	}
}

// Default importer for the reference Jule compiler.
struct Importer {
	mods: []str
	mod:  str
	pkgs: []&sema::ImportInfo
	vars: []str
}

impl Importer {
	// Returns new importer instance by compile information.
	fn New(info: CompileInfo): &Importer {
		mut imp := &Importer{
			mods: [build::PathStdlib()],
		}
		initVars(imp.vars, info)
		ret imp
	}

	// Returns all imported packages.
	// The return value is mutable reference to internal buffer.
	// You should be care about using that copy.
	fn AllPackages(mut self): []&sema::ImportInfo {
		ret self.pkgs
	}
}

impl sema::Importer for Importer {
	fn SetModPath(mut self, path: str) {
		self.mod = path
	}

	fn GetModPath(self): str {
		ret self.mod
	}

	fn ModById(self, id: int): str {
		ret self.mods[id]
	}

	fn GetImport(mut self, path: str): &sema::ImportInfo {
		for (_, mut p) in self.pkgs {
			// avoid case sensitivity for fair comparison
			if strings::EqualFold(p.Path, path) {
				ret p
			}
		}
		ret nil
	}

	fn ImportPackage(mut self, path: str, updateMod: bool): ([]&ast::AST, []log::Log) {
		mut dirents := os::ReadDir(path) else {
			ret nil, [flatCompilerErr("cannot read package directory: " + path)]
		}

		if updateMod {
			newMod := mod::FindModuleFileDeep(path)
			if newMod != self.mod {
				self.mod = newMod
				mut errs := mod::CheckModuleFile(self.mod)
				if len(errs) != 0 {
					ret nil, errs
				}
			}
		}

		mut asts := make([]&ast::AST, 0, len(dirents))
		for _, dirent in dirents {
			// Skip directories, and non-jule files.
			if !dirent.Stat.Mode().IsRegular() || !strings::HasSuffix(dirent.Name, jule::Ext) {
				continue
			}

			_path := filepath::Join(path, dirent.Name)
			mut file := token::FileSet.New(_path)
			unsafe { file.FillMut(readBuff(file.Path)) }
			mut errors := token::ScanAll(file, token::Standard)
			if len(errors) > 0 {
				ret nil, errors
			}

			mut finfo := parser::ParseFile(file)
			if len(finfo.Errors) > 0 {
				ret nil, finfo.Errors
			}

			// Skip this source file if file annotation is failed.
			if !self.isPassFileAnnotation(dirent.Name) {
				continue
			}

			r, mut logs := self.isPassBuildDirectives(finfo.AST)
			if len(logs) > 0 {
				ret nil, logs
			}

			// Skip file if can't pass build directives.
			if !r {
				continue
			}

			asts = append(asts, finfo.AST)
		}

		ret asts, nil
	}

	fn Imported(mut self, mut imp: &sema::ImportInfo) {
		// Already imported?
		for _, p in self.pkgs {
			// avoid case sensitivity for fair comparison
			if p.Bind == imp.Bind && strings::EqualFold(p.Path, imp.Path) {
				ret
			}
		}

		if len(self.mod) != 0 {
			for i, mod in self.mods {
				if self.mod == mod {
					imp.ModId = i
					goto set
				}
			}
			imp.ModId = len(self.mods)
			self.mods = append(self.mods, self.mod)
		set:
		}

		self.pkgs = append(self.pkgs, imp)
	}
}

impl Importer {
	// Reports whether file passes build directives.
	fn isPassBuildDirectives(mut self, mut &file: &ast::AST): (bool, []log::Log) {
		for (_, mut td) in file.TopDirectives {
			if td.Tag.Kind != directive::Build {
				continue
			}
			mut de := directiveEval{
				d: td,
				vars: self.vars,
			}
			result := de.eval()
			if len(de.logs) > 0 {
				ret false, de.logs
			}
			if !result {
				ret false, nil
			}
		}
		ret true, nil
	}
}