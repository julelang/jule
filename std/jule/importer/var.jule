// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/build"
use "std/jule/dist"

// Standard back-end compilers.
enum Compiler: str {
	Clang: "clang",
	GCC: "gcc",
}

// Supported C++ standards.
enum CppStd: str {
	Cpp14: "cpp14",
	Cpp17: "cpp17",
	Cpp20: "cpp20",
}

// Compile information.
struct CompileInfo {
	// Production compilation.
	Prod: bool

	// Test compilation.
	Test: bool

	// Back-end compiler to use.
	Compiler: Compiler

	// C++ standard to use.
	CppStd: CppStd
}

// Set operating system variables by native operating system.
fn setOsVars(mut &vars: []str) {
	vars = append(vars, build::OS)
	if dist::IsUnix(build::OS) {
		vars = append(vars, "unix")
	}
}

// Set architecture variables by native architecture.
fn setArchVars(mut &vars: []str) {
	vars = append(vars, build::Arch)
	if dist::Is64bit(build::Arch) {
		vars = append(vars, "x64")
	}
	if dist::Is32bit(build::Arch) {
		vars = append(vars, "x32")
	}
}

// Initialize directive eval variables by compile info.
fn initVars(mut &vars: []str, &info: CompileInfo) {
	setOsVars(vars)
	setArchVars(vars)

	if info.Prod {
		vars = append(vars, "production")
	}

	if info.Test {
		vars = append(vars, "test")
	}

	match info.Compiler {
	| Compiler.Clang:
		vars = append(vars, "clang")
	| Compiler.GCC:
		vars = append(vars, "gcc")
	}

	match info.CppStd {
	| CppStd.Cpp14:
		vars = append(vars, "cpp14")
	| CppStd.Cpp17:
		vars = append(vars, "cpp17")
	| CppStd.Cpp20:
		vars = append(vars, "cpp20")
	}
}

fn findVar(vars: []str, ident: str): int {
	if ident == "" {
		ret -1
	}
	for i, var in vars {
		if var == ident {
			ret i
		}
	}
	ret -1
}