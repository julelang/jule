// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/build"
use "std/jule/dist"
use "std/os/filepath"
use "std/strings"

fn checkOs(arg: str): (ok: bool, exist: bool) {
	ok = false
	exist = true
	match arg {
	| dist::Windows:
		ok = dist::IsWindows(build::OS)
	| dist::Darwin:
		ok = dist::IsDarwin(build::OS)
	| dist::Linux:
		ok = dist::IsLinux(build::OS)
	| dist::Unix:
		ok = dist::IsUnix(build::OS)
	|:
		ok = true
		exist = false
	}
	ret
}

fn checkArch(arg: str): (ok: bool, exist: bool) {
	ok = false
	exist = true
	match arg {
	| dist::I386:
		ok = dist::IsI386(build::Arch)
	| dist::AMD64:
		ok = dist::IsAMD64(build::Arch)
	| dist::ARM64:
		ok = dist::IsARM64(build::Arch)
	| dist::X64:
		ok = dist::Is64bit(build::Arch)
	| dist::X32:
		ok = dist::Is32bit(build::Arch)
	|:
		ok = true
		exist = false
	}
	ret
}

impl importer {
	// Reports whether file path passes file annotation by current system.
	fn isPassFileAnnotation(*self, mut p: str): bool {
		p = filepath::Base(p)
		n := len(p)
		p = p[:n-len(filepath::Ext(p))]

		if strings::HasSuffix(p, "_test") {
			if findVar(self.vars, "test") == -1 {
				// file have _test suffix and test compilation is not enabled
				// so this file should be ignored
				ret false
			}
			p = p[:len(p)-len("_test")]
		}

		// a1 is the second annotation.
		// Should be architecture annotation if exist annotation 2 (aka a2),
		// can operating system or architecture annotation if not.
		mut a1 := ""
		// a2 is first filter.
		// Should be operating system filter if exist and valid annotation.
		mut a2 := ""

		// Annotation 1
		mut i := strings::LastIndexByte(p, '_')
		if i == -1 {
			// Check file name directly if not exist any _ character.
			mut ok, mut exist := checkOs(p)
			if exist {
				ret ok
			}
			ok, exist = checkArch(p)
			ret !exist || ok
		}
		if i+1 >= n {
			ret true
		}
		a1 = p[i+1:]

		p = p[:i]

		// Annotation 2
		i = strings::LastIndexByte(p, '_')
		if i != -1 {
			a2 = p[i+1:]
		}

		if a2 == "" {
			mut ok, mut exist := checkOs(a1)
			if exist {
				ret ok
			}
			ok, exist = checkArch(a1)
			ret !exist || ok
		}

		mut ok, mut exist := checkArch(a1)
		if exist {
			if !ok {
				ret false
			}
			ok, exist = checkOs(a2)
			ret !exist || ok
		}

		// a1 is not architecture, for this reason bad couple pattern.
		// Accept as one pattern, so a1 can be platform.
		ok, exist = checkOs(a1)
		ret !exist || ok
	}
}