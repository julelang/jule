// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/log"
use "std/jule/token"

// Eval directive expression.
// Directive expressions are logical expressions and uses variables.
//
// Read manual for more information about syntax or etc:
// https://manual.jule.dev/compiler/directives.html#directive-expressions
struct directiveEval {
	logs: []log::Log
	d:    &ast::Directive
	vars: []str
}

impl directiveEval {
	fn pushErr(mut *self, t: &token::Token, fmt: str, args: ...any) {
		self.logs = append(self.logs, log::Log{
			Kind: log::Error,
			Row: t.Row,
			Column: t.Column,
			Path: t.File.Path,
			Text: log::Logf(fmt, args...),
		})
	}

	// Split operans by binary operators.
	// Skips range of parentheses.
	fn splitOperans(mut *self, op: int, mut tokens: []&token::Token): [][]&token::Token {
		mut parts := make([][]&token::Token, 0, 10)
		mut i := 0
		mut rangeN := 0
		mut last := 0
		for i < len(tokens)-1; i++ {
			b := tokens[i]
			match b.ID {
			| token::LPAREN:
				rangeN++
				continue
			| token::RPAREN:
				rangeN--
			}
			if rangeN > 0 || b.ID != op {
				continue
			}
			parts = append(parts, tokens[last:i])
			last = i + 1
		}
		if last < len(tokens) {
			parts = append(parts, tokens[last:])
		} else {
			// Missing operand.
			self.pushErr(tokens[last-1], "expected operand")
			ret nil
		}
		ret parts
	}

	// Eval directive variable.
	fn evalDirectiveName(*self, name: str): bool {
		ret findVar(self.vars, name) >= 0
	}

	// Eval directive expression part.
	// Accepts unary operators.
	fn evalDirectivePart(mut *self, mut part: []&token::Token): bool {
		logicalNot := part[0].ID == token::NOT
		if logicalNot {
			part = part[1:]
		}

		if len(part) > 1 {
			self.pushErr(part[1], "invalid syntax")
			ret false
		}

		mut result := self.evalDirectiveName(part[0].Kind)
		if logicalNot {
			result = !result
		}
		ret result
	}

	fn eval(mut *self): bool {
		if len(self.d.Args) == 0 {
			self.pushErr(self.d.Tag, "missing expression")
			ret false
		}

		mut result := false

		mut logicalOrParts := self.splitOperans(token::LOR, self.d.Args)
		if logicalOrParts == nil {
			ret false
		}

		for (_, mut part) in logicalOrParts {
			mut and := true
			mut logicalAndParts := self.splitOperans(token::LAND, part)
			if logicalAndParts == nil {
				ret false
			}

			for (_, mut andPart) in logicalAndParts {
				first := andPart[0]
				if first.ID == token::LPAREN {
					end := andPart[len(andPart)-1]

					// Missing close.
					if end.ID != token::RPAREN {
						self.pushErr(first, "parentheses open but not closed, expected )")
						ret false
					}

					andPart = andPart[1 : len(andPart)-1] // Remove parentheses.
				}
				and = and && self.evalDirectivePart(andPart)
			}

			result = result || and
		}

		ret result
	}
}