// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule"
use "std/jule/token"

// Type of AST Node's data.
enum NodeData: type {
	&Enum,
	&TypeEnum,
	&Func,
	&Struct,
	&Trait,
	&TypeAlias,
	&Var,
	&Impl,
}

// AST Node.
struct Node {
	Token: &token::Token
	Data:  NodeData
}

// Directive.
struct Directive {
	Tag:  &token::Token
	Args: []&token::Token
}

// Channel directions.
const (
	SEND = 1 << iota
	RECV
)

// Channel type.
struct ChanType {
	Arrow: &token::Token // Token of arrow.
	Dir:   int           // Direction.
	Value: &Expr         // Value type.
}

// Slice type.
struct SliceType {
	Value: &Expr // Value type.
}

// Array type.
// Size expression is nil for auto-sized array.
struct ArrayType {
	Value: &Expr // Value type.
	Size:  &Expr
}

impl ArrayType {
	// Reports whether array is auto-sized.
	fn IsAutoSized(self): bool {
		ret self.Size == nil
	}
}

// Map type.
struct MapType {
	Key:   &Expr
	Value: &Expr
}

// Return type.
// Field are nil for the void type.
struct RetType {
	Type:  &Expr
	Names: []&token::Token
}

// Type of Expr's data.
enum ExprData: type {
	&RangeExpr,
	&TupleExpr,
	&LitExpr,
	&NameExpr,
	&UnaryExpr,
	&SelectorExpr,
	&NamespaceExpr,
	&VariadicExpr,
	&CallExpr,
	&TypedBraceLit,
	&BraceLit,
	&SlicingExpr,
	&SliceExpr,
	&BinaryExpr,
	&UnsafeExpr,
	&IndexExpr,
	&Func,
	&KeyValueExpr,
	&ChanSend,
	&TypeAssertionExpr,
	&ChanType,
	&ArrayType,
	&MapType,
	&SliceType,
}

// Expression.
struct Expr {
	Token: &token::Token
	End:   &token::Token
	Data:  ExprData
}

// Range expression represents an expression between parentheses.
struct RangeExpr {
	X: &Expr // Expression.
}

// Use expression.
struct UseExpr {
	Token: &token::Token
	X:     &Expr // Expression.
}

// Tuple expression.
struct TupleExpr {
	X: []&Expr // Expressions.
}

// Literal expression.
struct LitExpr {
	Token: &token::Token
	Value: str
}

// Unsafe expression.
struct UnsafeExpr {
	Token: &token::Token // Token of the unsafe keyword.
	X:     &Expr         // Expression.
}

// Identifier expression.
struct NameExpr {
	Token: &token::Token // Token of identifier.
	Name:  str           // The name.
	Bind:  bool          // It is in the bind namespace.
}

impl NameExpr {
	// Reports whether identifier is self keyword.
	fn IsSelf(self): bool {
		ret self.Name == "self"
	}
}

// Unary expression.
// For the unsafe pointer (*unsafe) type, Op is star and Expr is nil.
struct UnaryExpr {
	Op: &token::Token // Token of the operator.
	X:  &Expr         // Expression.
}

impl UnaryExpr {
	// Reports whether the unary expression is the unsafe pointer type declaration.
	fn IsUnsafePtr(self): bool {
		ret self.Op.Id == token::MUL && self.X == nil
	}
}

// Variadiced expression.
struct VariadicExpr {
	Token: &token::Token
	X:     &Expr // Expression to variadic.
}

// Type assertion expression.
struct TypeAssertionExpr {
	Type: &Expr
	X:    &Expr // Expression to assert.
}

// Namespace identifier selection expression.
struct NamespaceExpr {
	Namespace: &token::Token // Tokens of the namespace identifier.
	Name:      &token::Token // Token of the selected identifier.
}

// Identifier selector expression.
struct SelectorExpr {
	X:    &Expr         // Memory selection based on.
	Name: &token::Token // Token of the selected identifier.
}

// Binary operation.
struct BinaryExpr {
	X:  &Expr         // Left operand.
	Y:  &Expr         // Right operand.
	Op: &token::Token // Operator.
}

// Function call expression kind.
struct CallExpr {
	Token:     &token::Token
	Func:      &Expr      // Function expression.
	Args:      []&Expr    // Function arguments, or nil.
	Exception: &ScopeTree // Exception handling scope, or nil.
	IsCo:      bool       // Whether this is the concurrent call.
}

impl CallExpr {
	// Reports whether exception is not handled.
	fn Unhandled(self): bool {
		ret self.Exception == nil
	}

	// Reports whether exception is ignored.
	fn Ignored(self): bool {
		// Return true if deferred field is true.
		// Deferred field used mark for exception ignored calls like: x()!
		ret self.Exception != nil && self.Exception.Deferred
	}
}

// Typed brace instantiating expression.
struct TypedBraceLit {
	Type: &Expr
	Lit:  &BraceLit
}

// Anonymous brace instantiating expression.
struct BraceLit {
	Token: &token::Token
	End:   &token::Token
	X:     []&Expr // Expression.
}

impl BraceLit {
	// Reports whether literal is empty ( {} ).
	fn IsEmpty(self): bool {
		ret len(self.X) == 0
	}
}

// Key-value expression.
struct KeyValueExpr {
	Key:   &Expr
	Value: &Expr
	Colon: &token::Token
}

// Slice initiating expression.
// Also represents array initiating expression.
struct SliceExpr {
	Token: &token::Token
	End:   &token::Token
	X:     []&Expr // Elements.
}

impl SliceExpr {
	// Reports whether slice is empty.
	fn IsEmpty(self): bool {
		ret len(self.X) == 0
	}
}

// Index expression.
struct IndexExpr {
	Token: &token::Token
	End:   &token::Token
	X:     &Expr // Value expression to indexing.
	Index: &Expr // Index value expression.
}

// Slicing expression.
struct SlicingExpr {
	Token: &token::Token
	End:   &token::Token
	X:     &Expr // Value expression to slicing.
	Low:   &Expr // Low index value expression, or nil.
	High:  &Expr // High index value expression, or nil.
	Max:   &Expr // Max index value expression, or nil.
}

// Constraint.
struct Constraint {
	Mask: []&Expr
}

// Generic type declaration.
struct Generic {
	Token:      &token::Token
	Name:       str
	Constraint: &Constraint
}

// Label statement.
struct Label {
	Token: &token::Token
	Name:  str
}

// Goto statement.
struct Goto {
	Token: &token::Token
	Label: &token::Token
}

// Fall statement.
struct Fall {
	Token: &token::Token
}

// Left expression of assign statement.
struct AssignLeft {
	Token:     &token::Token
	Mutable:   bool
	Reference: bool
	Name:      str
	X:         &Expr // Expression.
}

// Assign statement.
struct Assign {
	Decl: bool          // Whether the assignment may declare variable.
	Op:   &token::Token // Setter operator.
	X:    []&AssignLeft // Lvalue expressions.
	Y:    &Expr         // Expression to be assigned.
}

// Type of Stmt's data.
enum StmtData: type {
	&Var,
	&Ret,
	&Goto,
	&Break,
	&Continue,
	&Expr,
	&Conditional,
	&Match,
	&Iter,
	&Assign,
	&Fall,
	&Label,
	&ScopeTree,
	&TypeAlias,
	&UseExpr,
	&Select,
}

// Statement.
struct Stmt {
	Token: &token::Token
	End:   &token::Token
	Data:  StmtData
}

// Scope tree.
struct ScopeTree {
	Parent:   &ScopeTree // Nil if scope is root.
	Unsafe:   bool
	Deferred: bool
	Stmts:    []Stmt
	End:      &token::Token
}

// Channel send data statement.
struct ChanSend {
	Chan: &Expr
	X:    &Expr // Expression.
}

// Parameter.
struct Param {
	Token:     &token::Token
	Mutable:   bool
	Variadic:  bool
	Reference: bool
	Type:      &Expr
	Name:      str
}

impl Param {
	// Reports whether parameter is self (receiver) parameter.
	fn IsSelf(self): bool {
		ret self.Name == "&self" || self.Name == "self"
	}

	// Reports whether self (receiver) parameter is reference.
	fn IsRef(self): bool {
		ret self.Name != "" && self.Name[0] == '&'
	}
}

// Function declaration.
// Also represents anonymous function expression and function type declarations.
struct Func {
	Token:       &token::Token
	Global:      bool
	Unsafe:      bool
	Public:      bool
	Bind:        bool
	Static:      bool
	Exceptional: bool
	Name:        str
	Directives:  []&Directive
	Scope:       &ScopeTree
	Generics:    []&Generic
	Result:      &RetType
	Params:      []&Param
}

impl Func {
	// Reports whether function is anonymous.
	fn IsAnon(self): bool {
		ret self.Name == jule::Anon
	}

	// Reports whether function is type declaration.
	fn IsDecl(self): bool {
		ret self.Scope == nil
	}
}

// Variable declaration.
struct Var {
	Scope:      &ScopeTree // nil for global scopes
	Token:      &token::Token
	Op:         &token::Token // Expression assign operator token.
	Name:       str
	Bind:       bool
	Public:     bool
	Mutable:    bool
	Const:      bool
	Static:     bool
	Reference:  bool
	Directives: []&Directive
	Type:       &Expr // Type declaration, or nil if type inferred.
	X:          &Expr // Initializer expression, or nil.

	// See developer reference (12).
	GroupIndex: int    // Index of variable in the group, if variable is grouped.
	Group:      []&Var // All variables of group in define order, if variable is grouped.
}

// Return statement.
struct Ret {
	Token: &token::Token
	X:     &Expr // Expression.
}

// Type of Iter's kind.
enum IterKind: type {
	&WhileKind,
	&RangeKind,
}

// Iteration.
struct Iter {
	Comptime: bool
	Token:    &token::Token
	Kind:     IterKind
	Scope:    &ScopeTree
}

impl Iter {
	// Reports whether iteration is infinite.
	fn IsInfinite(self): bool { ret self.Kind == nil }
}

// While iteration kind.
struct WhileKind {
	X:         &Expr    // Condition expression.
	Next:      StmtData // Nil if kind is while-next iteration.
	NextToken: &token::Token
}

impl WhileKind {
	// Reports whether kind is while-next iteration.
	fn IsWhileNext(self): bool {
		ret self.Next != nil
	}
}

// Range iteration kind.
struct RangeKind {
	InToken: &token::Token // Token of "in" keyword
	X:       &Expr         // Range expression.
	A:       &Var          // First key of range.
	B:       &Var          // Second key of range.
}

// Break statement.
struct Break {
	Token: &token::Token
	Label: &token::Token // Label to break, or nil.
}

// Continue statement.
struct Continue {
	Token: &token::Token
	Label: &token::Token // Label to continue, or nil.
}

// If condition.
struct If {
	Token: &token::Token
	Scope: &ScopeTree
	X:     &Expr
}

// Else condition.
struct Else {
	Token: &token::Token
	Scope: &ScopeTree
}

// Condition chain.
struct Conditional {
	Tail:    []&If // First one is the head condition.
	Default: &Else
}

// Type alias declaration.
struct TypeAlias {
	Scope:  &ScopeTree
	Public: bool
	Bind:   bool
	Token:  &token::Token
	Name:   str
	Strict: bool
	Type:   &Expr
}

// Case of match-case.
struct Case {
	Token: &token::Token
	Scope: &ScopeTree

	// Holds expression.
	// Expressions holds *Type if If type matching.
	X: []&Expr
}

// Match statement.
struct Match {
	Comptime: bool
	Token:    &token::Token
	End:      &token::Token
	Type:     bool    // Type matching.
	X:        &Expr   // Expression to match.
	Cases:    []&Case // First one is the head case.
	Default:  &Else
}

// Select statement.
struct Select {
	Token:   &token::Token
	End:     &token::Token
	Cases:   []&Case // First one is the head condition.
	Default: &Else
}

// Use declaration statement.
struct Use {
	Token: &token::Token
	Path:  &token::Token // Use declaration path token.
	Alias: &token::Token // Custom alias. Nil if not given.
	Bind:  bool          // Bind use declaration.
}

// Enum item.
struct EnumItem {
	Token: &token::Token
	Name:  str
	X:     &Expr // Nil for auto expression.
}

impl EnumItem {
	// Reports whether item has auto expression.
	fn IsAutoExpr(self): bool {
		ret self.X == nil
	}
}

// Enum declaration.
struct Enum {
	Token:  &token::Token
	Public: bool
	Name:   str
	Type:   &Expr
	Items:  []&EnumItem
	End:    &token::Token
}

impl Enum {
	// Reports whether enum's type is default.
	fn IsDefaultTyped(self): bool {
		ret self.Type == nil
	}
}

// TypeEnum item.
struct TypeEnumItem {
	Token: &token::Token
	Type:  &Expr
}

// TypeEnum declaration.
struct TypeEnum {
	Token:  &token::Token
	Public: bool
	Name:   str
	Items:  []&TypeEnumItem
	End:    &token::Token
}

// Field declaration.
struct Field {
	Token:   &token::Token
	Public:  bool
	Mutable: bool // Interior mutability.
	Name:    str
	Type:    &Expr
	Tag:     &token::Token // Nil if not given.
}

// Structure declaration.
struct Struct {
	Token:      &token::Token
	End:        &token::Token
	Name:       str
	Fields:     []&Field
	Public:     bool
	Bind:       bool
	Directives: []&Directive
	Generics:   []&Generic
}

struct Trait {
	// Trait declaration.
	Token:    &token::Token
	End:      &token::Token
	Name:     str
	Public:   bool
	Inherits: []&Expr
	Methods:  []&Func
}

// Implementation.
struct Impl {
	End: &token::Token

	// This token available for these cases:
	//	- Implementation trait to structure, represents trait's type.
	Base: &Expr

	// This token available for these cases:
	//	- Implementation trait to structure, represents structure's type.
	//	- Implementation to structure, represents structure's type.
	Dest: &Expr

	// Given methods to implement.
	Methods: []&Func
}

impl Impl {
	// Reports whether implementation type is trait to structure.
	fn IsTraitImpl(self): bool {
		ret self.Base != nil
	}

	// Reports whether implementation type is append to destination structure.
	fn IsStructImpl(self): bool {
		ret self.Base == nil
	}
}

// Returns the expression with any enclosing parentheses removed.
fn Unparen(mut e: &Expr): &Expr {
	for {
		mut paren, ok := e.Data.(&RangeExpr)
		if !ok {
			ret e
		}
		e = paren.X
	}
}