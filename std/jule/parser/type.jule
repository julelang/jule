// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/log"
use "std/jule/token"

struct typeBuilder {
	p:      &parser
	tokens: []&token::Token
	i:      *int
	err:    bool
}

impl typeBuilder {
	fn pushErr(mut self, token: &token::Token, fmt: str, args: ...any) {
		if self.err {
			self.p.pushErr(token, fmt, args...)
		}
	}

	// Push suggestion to last log.
	fn pushSuggestion(mut self, fmt: str, args: ...any) {
		if self.err {
			self.p.pushSuggestion(fmt, args...)
		}
	}

	unsafe fn buildNamespace(mut self): &ast::Expr {
		mut token := self.tokens[*self.i]
		mut ns := new(ast::NamespaceExpr)
		ns.Namespace = self.tokens[*self.i]
		if ns.Namespace.Id != token::Name && ns.Namespace.Id != token::Unsafe {
			self.pushErr(ns.Namespace, log::InvalidSyntax)
			self.pushSuggestion(log::ExpectedIdentifier)
		}
		*self.i++
		if len(self.tokens) <= *self.i {
			self.pushErr(ns.Namespace, log::InvalidSyntax)
			self.pushSuggestion(log::ExpectedDblColon)
			ret nil
		}
		if self.tokens[*self.i].Id != token::DblColon {
			self.pushErr(self.tokens[*self.i], log::InvalidSyntax)
			self.pushSuggestion(log::ExpectedDblColon)
			ret nil
		}
		*self.i++
		if len(self.tokens) <= *self.i || self.tokens[*self.i].Id != token::Name {
			self.pushErr(self.tokens[*self.i-1], log::InvalidSyntax)
			self.pushSuggestion(log::ExpectedIdentifier)
			ret nil
		}
		ns.Name = self.tokens[*self.i]
		mut typ := &ast::Expr{
			Token: token,
			End: ns.Name,
			Data: ns,
		}
		*self.i++
		if *self.i < len(self.tokens) && self.tokens[*self.i].Id == token::LBracket {
			ret self.buildGenericType(typ)
		}
		ret typ
	}

	unsafe fn buildIdent(mut self): &ast::Expr {
		mut next := *self.i+1 < len(self.tokens)
		if next && self.tokens[*self.i+1].Id == token::DblColon {
			ret self.buildNamespace()
		}
		mut token := self.tokens[*self.i]
		mut name := &ast::NameExpr{
			Token: token,
			Name: token.Kind,
			Bind: false,
		}
		mut typ := &ast::Expr{
			Token: token,
			End: token,
			Data: name,
		}
		*self.i++
		if *self.i < len(self.tokens) && self.tokens[*self.i].Id == token::LBracket {
			ret self.buildGenericType(typ)
		}
		ret typ
	}

	unsafe fn buildGenericType(mut self, mut &lead: &ast::Expr): &ast::Expr {
		// There is no need to check unclosed range of token '[', because already checked.
		mut types := make([]&ast::Expr, 0, 1)
		mut exprToken := self.tokens[*self.i]
		mut rangeN := 1 // leading '['
		for {
			*self.i++
			mut typ := self.step()
			if typ != nil {
				types = append(types, typ)
			} else {
				ret nil
			}
			mut token := self.tokens[*self.i]
			match token.Id {
			| token::Comma:
				continue
			| token::LBracket:
				rangeN++
			| token::RBracket:
				rangeN--
				if rangeN > 0 {
					continue
				}
				*self.i++
				mut indx := (&ast::Expr)(nil)
				if len(types) > 1 {
					indx = &ast::Expr{
						Token: exprToken,
						End: token,
					}
					indx.Data = &ast::TupleExpr{
						X: types,
					}
				} else if len(types) == 1 {
					indx = types[0]
				} else {
					panic("unreachable")
				}
				ret &ast::Expr{
					Token: lead.Token,
					End: token,
					Data: &ast::IndexExpr{
						Token: lead.Token,
						End: token,
						X: lead,
						Index: indx,
					},
				}
			|:
				self.pushErr(token, log::ExpectedXorZFoundY, "','", "']'", "'"+token.Kind+"'")
				ret nil
			}
		}
	}

	unsafe fn buildCppLink(mut self): &ast::Expr {
		if *self.i+1 >= len(self.tokens) || self.tokens[*self.i+1].Id != token::Dot {
			self.pushErr(self.tokens[*self.i], log::InvalidSyntax)
			ret nil
		}
		*self.i += 2 // Skip the bind keyword and dot token.
		mut t := self.buildIdent()
		if t != nil {
			match type t.Data {
			| &ast::NameExpr:
				t.Data.(&ast::NameExpr).Bind = true
			| &ast::IndexExpr:
				t.Data.(&ast::IndexExpr).X.Data.(&ast::NameExpr).Bind = true
			|:
				panic("unreachable")
			}
		}
		ret t
	}

	unsafe fn buildFunc(mut self): &ast::Expr {
		mut token := self.tokens[*self.i]
		mut f := self.p.buildFuncPrototype(self.tokens, *self.i, false)
		if f == nil {
			ret nil
		}
		if !f.IsAnon() {
			self.pushErr(f.Token, log::InvalidSyntax)
		}
		ret &ast::Expr{
			Token: token,
			End: self.tokens[*self.i-1],
			Data: f,
		}
	}

	unsafe fn buildPtr(mut self): &ast::Expr {
		mut token := self.tokens[*self.i]
		if *self.i+1 >= len(self.tokens) {
			self.pushErr(token, log::InvalidSyntax)
			ret nil
		}

		*self.i++
		if self.tokens[*self.i].Id == token::Unsafe {
			*self.i++
			ret &ast::Expr{
				Token: token,
				End: self.tokens[*self.i-1],
				Data: &ast::UnaryExpr{
					Op: token,
					X: nil, // Set Expr as nil for unsafe pointer (*unsafe) type.
				},
			}
		}

		mut valueTyp := self.step()
		if valueTyp == nil {
			ret nil
		}

		ret &ast::Expr{
			Token: token,
			End: self.tokens[*self.i-1],
			Data: &ast::UnaryExpr{
				Op: token,
				X: valueTyp,
			},
		}
	}

	unsafe fn buildSptr(mut self): &ast::Expr {
		mut token := self.tokens[*self.i]
		if *self.i+1 >= len(self.tokens) {
			self.pushErr(token, log::InvalidSyntax)
			ret nil
		}

		*self.i++
		mut valueTyp := self.step()
		if valueTyp == nil {
			ret nil
		}

		ret &ast::Expr{
			Token: token,
			End: self.tokens[*self.i-1],
			Data: &ast::UnaryExpr{
				Op: token,
				X: valueTyp,
			},
		}
	}

	unsafe fn buildSlice(mut self): &ast::Expr {
		mut token := self.tokens[*self.i]
		*self.i++ // skip right bracket
		mut valueTyp := self.step()
		if valueTyp == nil {
			ret nil
		}
		ret &ast::Expr{
			Token: token,
			End: self.tokens[*self.i-1],
			Data: &ast::SliceType{
				Value: valueTyp,
			},
		}
	}

	unsafe fn buildArr(mut self): &ast::Expr {
		mut exprTokens := range(*self.i, token::LBracket, token::RBracket, self.tokens)
		if *self.i >= len(self.tokens) {
			self.pushErr(self.tokens[*self.i-1], log::MissingType)
			ret nil
		}

		mut valueTyp := self.step()
		if valueTyp == nil {
			ret nil
		}

		mut arrayTyp := &ast::ArrayType{
			Value: valueTyp,
		}

		mut token := exprTokens[0]
		if len(exprTokens) == 1 && token.Id == token::TripleDot {
			// Ignore.
		} else {
			arrayTyp.Size = self.p.buildExpr(exprTokens)
		}

		ret &ast::Expr{
			Token: token,
			End: self.tokens[*self.i-1],
			Data: arrayTyp,
		}
	}

	unsafe fn buildMap(mut self): &ast::Expr {
		mut mapToken := self.tokens[*self.i]
		*self.i++ // Skip map token.
		if *self.i >= len(self.tokens) {
			self.pushErr(mapToken, log::MissingType)
			ret nil
		}

		// Get key type tokens without brackets.
		mut keyTokens := range(*self.i, token::LBracket, token::RBracket, self.tokens)
		if *self.i >= len(self.tokens) {
			self.pushErr(self.tokens[*self.i-1], log::MissingType)
			ret nil
		} else if len(keyTokens) == 0 {
			self.pushErr(mapToken, log::MissingType)
			ret nil
		}

		mut mapTyp := new(ast::MapType)
		mut j := 0
		mut keyTyp, mut ok := self.p.buildType(keyTokens, &j, self.err)
		if !ok {
			ret nil
		} else if j < len(keyTokens) {
			self.pushErr(keyTokens[j], log::InvalidSyntax)
		}
		mapTyp.Key = keyTyp

		mut valueTyp, ok := self.p.buildType(self.tokens, self.i, self.err)
		if !ok {
			ret nil
		}
		mapTyp.Value = valueTyp
		ret &ast::Expr{
			Token: mapToken,
			End: self.tokens[*self.i-1],
			Data: mapTyp,
		}
	}

	unsafe fn buildEnumerable(mut self): &ast::Expr {
		mut token := self.tokens[*self.i]
		if *self.i+2 >= len(self.tokens) {
			self.pushErr(token, log::InvalidSyntax)
			ret nil
		}
		*self.i++
		token = self.tokens[*self.i]
		if token.Id == token::RBracket {
			ret self.buildSlice()
		}
		*self.i-- // Point to left bracket.
		ret self.buildArr()
	}

	unsafe fn buildChan(mut self): &ast::Expr {
		mut token := self.tokens[*self.i]
		if *self.i+1 >= len(self.tokens) {
			self.pushErr(token, log::InvalidSyntax)
			ret nil
		}
		*self.i++

		mut recv := true
		mut send := true

		if token.Id == token::RArrow {
			send = false
			if *self.i+1 >= len(self.tokens) {
				self.pushErr(token, log::InvalidSyntax)
				ret nil
			}
			token = self.tokens[*self.i]
			*self.i++
		}

		if token.Id != token::Chan {
			self.pushErr(token, log::InvalidSyntax)
			ret nil
		}

		// Check send-only probability if channel is not recv-only.
		// Otherwise, accept arrow for element type if exist.
		if send && self.tokens[*self.i].Id == token::RArrow {
			recv = false
			if *self.i+1 >= len(self.tokens) {
				self.pushErr(self.tokens[*self.i], log::InvalidSyntax)
				ret nil
			}
			*self.i++
		}

		mut valueTyp := (&ast::Expr)(nil)
		if send && recv && self.tokens[*self.i].Id == token::LParent {
			valueTyp = self.buildParenthesesRange()
		} else {
			valueTyp = self.step()
		}
		if valueTyp == nil {
			ret nil
		}

		ret &ast::Expr{
			Token: token,
			End: self.tokens[*self.i-1],
			Data: &ast::ChanType{
				Recv: recv,
				Send: send,
				Value: valueTyp,
			},
		}
	}

	unsafe fn buildParenthesesRange(mut self): &ast::Expr {
		token := self.tokens[*self.i] // Save token for error log.
		mut rangeTokens := range(*self.i, token::LParent, token::RParent, self.tokens)
		if len(rangeTokens) == 0 {
			// Empty range.
			self.pushErr(token, log::MissingType)
			ret nil
		}
		oldOffset := *self.i
		mut oldTokens := self.tokens
		self.tokens = rangeTokens
		*self.i = 0
		mut t := self.step()
		*self.i = oldOffset
		self.tokens = oldTokens
		ret t
	}

	unsafe fn step(mut self): &ast::Expr {
		mut token := self.tokens[*self.i]
		match token.Id {
		| token::Name:
			ret self.buildIdent()
		| token::Cpp:
			ret self.buildCppLink()
		| token::Chan | token::RArrow:
			ret self.buildChan()
		| token::Unsafe:
			if len(self.tokens)-*self.i > 1 {
				match self.tokens[*self.i+1].Id {
				| token::Fn:
					// unsafe function
					*self.i++ // point to function keyword
					mut f := self.buildFunc()
					if f != nil {
						f.Data.(&ast::Func).Unsafe = true
					}
					ret f
				| token::DblColon:
					// unsafe namespace
					ret self.buildNamespace()
				}
			}
		| token::Fn:
			ret self.buildFunc()
		| token::Star:
			ret self.buildPtr()
		| token::Amper:
			ret self.buildSptr()
		| token::DblAmper:
			mut sptr := self.buildSptr()
			ret &ast::Expr{
				Token: token,
				End: sptr.End,
				Data: &ast::UnaryExpr{
					Op: token,
					X: sptr,
				},
			}
		| token::LBracket:
			ret self.buildEnumerable()
		| token::Map:
			ret self.buildMap()
		}
		*self.i++
		self.pushErr(token, log::InvalidSyntax)
		ret nil
	}

	// Builds type.
	// Returns void if error occurs.
	unsafe fn build(mut self): (&ast::Expr, ok: bool) {
		mut root := self.step()
		if root == nil {
			ret nil, false
		}
		ret root, true
	}
}