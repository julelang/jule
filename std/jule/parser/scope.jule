// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/log"
use "std/jule/token"
use "std/slices"

fn newScope(): &ast::ScopeTree {
	ret new(ast::ScopeTree)
}

// Reports whether token is statement finish point.
fn isSt(current: &token::Token, prev: &token::Token): (ok: bool, terminated: bool) {
	ok = current.Id == token::SEMICOLON || prev.Row < current.Row
	terminated = current.Id == token::SEMICOLON
	ret
}

fn prevIsIncompleteExpr(&tokens: []&token::Token, &i: int): bool {
	// Ignore namespaces.
	if i > 1 && tokens[i-2].Id == token::SEP {
		ret false
	}
	unsafe {
		prev := tokens[i-1]
		ret prev.Id == token::PERIOD ||
			prev.Id == token::COMMA ||
			(token::IsBinOp(prev.Id) && prev.Row < tokens[i].Row)
	}
}

// Reports position of the next statement if exist, len(toks) if not.
fn nextStPos(&tokens: []&token::Token, start: int): (int, bool) {
	mut braceN := 0
	mut i := start
	for i < len(tokens); i++ {
		mut ok := false
		mut terminated := false
		tok := tokens[i]
		match tok.Id {
		| token::LBRACE
		| token::LBRACK
		| token::LPAREN:
			if braceN == 0 && i > start {
				if !prevIsIncompleteExpr(tokens, i) {
					ok, terminated = isSt(tok, tokens[i-1])
					if ok {
						goto return
					}
				}
			}
			braceN++
			continue
		| token::RBRACE
		| token::RBRACK
		| token::RPAREN:
			braceN--
			if braceN == 0 && i+1 < len(tokens) {
				ok, terminated = isSt(tokens[i+1], tok)
				if ok {
					i++
					goto return
				}
			}
			continue
		}

		if braceN != 0 {
			continue
		}

		if i > start {
			if prevIsIncompleteExpr(tokens, i) {
				continue
			}
			ok, terminated = isSt(tok, tokens[i-1])
		} else {
			ok, terminated = isSt(tok, tok)
		}
		if !ok {
			continue
		}

	return:
		if terminated {
			i++
		}
		ret i, terminated
	}
	ret i, false
}

// Returns current statement tokens.
// Starts selection at i.
fn skipSt(mut &i: int, mut tokens: []&token::Token): ([]&token::Token, bool) {
	start := i
	mut terminated := false
	i, terminated = nextStPos(tokens, start)
	mut stTokens := tokens[start:i]
	if terminated {
		if len(stTokens) == 1 {
			ret skipSt(i, tokens)
		}
		// -1 for eliminate the statement terminator.
		stTokens = stTokens[:len(stTokens)-1]
	}
	ret stTokens, terminated
}

struct stmt {
	tokens:     []&token::Token
	terminated: bool
}

// Splits all statements.
fn splitStmts(mut &tokens: []&token::Token): []&stmt {
	mut stmts := make([]&stmt, 0, 20)
	mut pos := 0
	for pos < len(tokens) {
		mut stmt, terminated := skipSt(pos, tokens)
		stmts = append(stmts, &stmt{
			tokens: stmt,
			terminated: terminated,
		})
	}
	ret stmts
}

struct scopeParser {
	p:     &parser
	s:     &ast::ScopeTree
	stmts: []&stmt
	pos:   int
}

impl scopeParser {
	fn stop(mut self) {
		self.pos = -1
	}

	fn stopped(self): bool {
		ret self.pos == -1
	}

	fn finished(self): bool {
		ret self.pos >= len(self.stmts)
	}

	fn isLastSt(self): bool {
		ret self.pos+1 >= len(self.stmts)
	}

	fn pushErr(mut self, token: &token::Token, fmt: str, args: ...any) {
		self.p.pushErr(token, fmt, args...)
	}

	// Push suggestion to last log.
	fn pushSuggestion(mut self, fmt: str, args: ...any) {
		self.p.pushSuggestion(fmt, args...)
	}

	fn insertAsNext(mut self, mut &tokens: []&token::Token) {
		self.stmts = slices::Insert(self.stmts, self.pos+1, &stmt{tokens: tokens})
	}

	fn next(mut self): &stmt {
		self.pos++
		ret self.stmts[self.pos]
	}

	fn buildScope(mut self, mut &tokens: []&token::Token, mut end: &token::Token): &ast::ScopeTree {
		mut s := newScope()
		s.Parent = self.s
		s.End = end
		mut ssp := scopeParser{
			p: self.p,
		}
		ssp.build(tokens, s)
		ret s
	}

	fn buildVarSt(mut self, mut &tokens: []&token::Token): &ast::Var {
		mut v := self.p.buildVar(tokens)
		if v != nil {
			v.Scope = self.s
		}
		ret v
	}

	fn buildRetSt(mut self, mut tokens: []&token::Token): &ast::Ret {
		mut st := &ast::Ret{
			Token: tokens[0],
		}
		if len(tokens) > 1 {
			tokens = tokens[1:] // Remove ret keyword.
			st.X = self.p.buildExpr(tokens)
		}
		ret st
	}

	fn buildWhileNextIter(mut self, mut &s: &stmt): &ast::Iter {
		mut it := &ast::Iter{
			Token: s.tokens[0],
		}
		mut tokens := s.tokens[1:] // Skip "iter" keyword.
		mut kind := new(ast::WhileKind)

		if len(tokens) > 0 {
			kind.X = self.p.buildExpr(tokens)
		}

		if self.isLastSt() {
			self.pushErr(it.Token, log::InvalidSyntax)
			ret nil
		}

		tokens = self.next().tokens
		mut stTokens := getBlockExpr(tokens)
		if len(stTokens) > 0 {
			mut stmt := &stmt{
				terminated: s.terminated,
				tokens: stTokens,
			}
			kind.NextToken = stTokens[0]
			kind.Next = self.buildSt(stmt)
		}

		mut i := len(stTokens)
		mut blockTokens := range(i, token::LBRACE, token::RBRACE, tokens)
		if blockTokens == nil {
			self.stop()
			self.pushErr(it.Token, log::BodyNotExist)
			self.pushSuggestion(log::ExpectedBody)
			ret nil
		}
		if i < len(tokens) {
			self.pushErr(tokens[i], log::InvalidSyntax)
		}

		it.Scope = self.buildScope(blockTokens, tokens[i-1])
		it.Kind = kind

		ret it
	}

	fn buildWhileIterKind(mut self, mut &tokens: []&token::Token): &ast::WhileKind {
		ret &ast::WhileKind{
			X: self.p.buildExpr(tokens),
		}
	}

	fn getRangeKindKeysTokens(mut self, mut &toks: []&token::Token): [][]&token::Token {
		mut vars, errs := parts(toks, token::COMMA, true)
		self.p.errors = append(self.p.errors, errs...)
		ret vars
	}

	fn buildRangeKindKey(mut self, mut &tokens: []&token::Token): &ast::Var {
		if len(tokens) == 0 {
			ret nil
		}
		mut key := &ast::Var{
			Token: tokens[0],
			Op: tokens[0],
		}
		if key.Token.Id == token::MUT {
			key.Mutable = true
			if len(tokens) == 1 {
				self.pushErr(key.Token, log::InvalidSyntax)
			}
			key.Token = tokens[1]
		} else if len(tokens) > 1 {
			self.pushErr(tokens[1], log::InvalidSyntax)
		}
		if key.Token.Id != token::NAME {
			self.pushErr(key.Token, log::InvalidSyntax)
			self.pushSuggestion(log::ExpectedIdentifier)
			ret nil
		}
		key.Name = key.Token.Kind
		ret key
	}

	fn buildRangeKindKeys(mut self, mut &parts: [][]&token::Token): []&ast::Var {
		mut keys := ([]&ast::Var)(nil)
		for (_, mut tokens) in parts {
			keys = append(keys, self.buildRangeKindKey(tokens))
		}
		ret keys
	}

	fn setupRangeKindKeysPlain(mut self, mut &rng: &ast::RangeKind, mut &tokens: []&token::Token) {
		mut keyTokens := self.getRangeKindKeysTokens(tokens)
		if len(keyTokens) == 0 {
			ret
		}
		if len(keyTokens) > 2 {
			self.pushErr(rng.InToken, log::MuchRangeVars)
		}
		mut keys := self.buildRangeKindKeys(keyTokens)
		rng.A = keys[0]
		if len(keys) > 1 {
			rng.B = keys[1]
		}
	}

	fn setupRangeKindKeysExplicit(mut self, mut &rng: &ast::RangeKind, mut &tokens: []&token::Token) {
		mut i := 0
		mut rang := range(i, token::LPAREN, token::RPAREN, tokens)
		if i < len(tokens) {
			self.pushErr(rng.InToken, log::InvalidSyntax)
		}
		self.setupRangeKindKeysPlain(rng, rang)
	}

	fn setupRangeKindKeys(mut self, mut &rng: &ast::RangeKind, mut &tokens: []&token::Token) {
		if tokens[0].Id == token::LPAREN {
			self.setupRangeKindKeysExplicit(rng, tokens)
			ret
		}
		self.setupRangeKindKeysPlain(rng, tokens)
	}

	fn buildRangeIterKind(mut self, mut &varTokens: []&token::Token,
		mut &exprTokens: []&token::Token, mut &inToken: &token::Token): &ast::RangeKind {
		mut rng := &ast::RangeKind{
			InToken: inToken,
		}
		if len(exprTokens) == 0 {
			self.pushErr(rng.InToken, log::MissingExpr)
			ret rng
		}
		rng.X = self.p.buildExpr(exprTokens)
		if len(varTokens) > 0 {
			self.setupRangeKindKeys(rng, varTokens)
		}
		ret rng
	}

	fn buildCommonIterKind(mut self, mut &tokens: []&token::Token, &errTok: &token::Token): ast::IterKind {
		mut braceN := 0
		for (i, mut tok) in tokens {
			match tok.Id {
			| token::LBRACE
			| token::LBRACK
			| token::LPAREN:
				braceN++
				continue
			| token::RBRACE
			| token::RBRACK
			| token::RPAREN:
				braceN--
			}
			if braceN != 0 {
				continue
			}
			match tok.Id {
			| token::IN:
				mut declTokens := tokens[:i]
				mut exprTokens := tokens[i+1:]
				ret self.buildRangeIterKind(declTokens, exprTokens, tok)
			}
		}
		ret self.buildWhileIterKind(tokens)
	}

	fn buildCommonIter(mut self, mut tokens: []&token::Token): &ast::Iter {
		mut it := &ast::Iter{
			Token: tokens[0],
		}
		tokens = tokens[1:] // Skip "iter" keyword.
		if len(tokens) == 0 {
			self.stop()
			self.pushErr(it.Token, log::BodyNotExist)
			self.pushSuggestion(log::ExpectedBody)
			ret nil
		}
		mut exprTokens := getBlockExpr(tokens)
		if len(exprTokens) > 0 {
			it.Kind = self.buildCommonIterKind(exprTokens, it.Token)
		}
		mut i := len(exprTokens)
		mut scopeTokens := range(i, token::LBRACE, token::RBRACE, tokens)
		if scopeTokens == nil {
			self.stop()
			self.pushErr(it.Token, log::BodyNotExist)
			self.pushSuggestion(log::ExpectedBody)
			ret nil
		}
		if i < len(tokens) {
			self.pushErr(tokens[i], log::InvalidSyntax)
		}
		it.Scope = self.buildScope(scopeTokens, tokens[i-1])
		ret it
	}

	fn buildIterSt(mut self, mut &st: &stmt): &ast::Iter {
		if st.terminated {
			ret self.buildWhileNextIter(st)
		}
		ret self.buildCommonIter(st.tokens)
	}

	fn buildBreak(mut self, mut &tokens: []&token::Token): &ast::Break {
		mut brk := &ast::Break{
			Token: tokens[0],
		}
		if len(tokens) > 1 {
			if tokens[1].Id != token::NAME {
				self.pushErr(tokens[1], log::InvalidSyntax)
				self.pushSuggestion(log::ExpectedLabelIdent)
			} else {
				brk.Label = tokens[1]
				if len(tokens) > 2 {
					self.pushErr(tokens[1], log::InvalidSyntax)
				}
			}
		}
		ret brk
	}

	fn buildContSt(mut self, mut &tokens: []&token::Token): &ast::Continue {
		mut cont := &ast::Continue{
			Token: tokens[0],
		}
		if len(tokens) > 1 {
			if tokens[1].Id != token::NAME {
				self.pushErr(tokens[1], log::InvalidSyntax)
				self.pushSuggestion(log::ExpectedLabelIdent)
			} else {
				cont.Label = tokens[1]
				if len(tokens) > 2 {
					self.pushErr(tokens[1], log::InvalidSyntax)
				}
			}
		}
		ret cont
	}

	fn buildIf(mut self, mut &tokens: []&token::Token): &ast::If {
		mut model := &ast::If{
			Token: tokens[0],
		}
		tokens = tokens[1:]
		mut exprTokens := getBlockExpr(tokens)
		mut i := 0
		if len(exprTokens) == 0 {
			self.pushErr(model.Token, log::MissingExpr)
		} else {
			i = len(exprTokens)
		}
		mut scopeTokens := range(i, token::LBRACE, token::RBRACE, tokens)
		if scopeTokens == nil {
			self.stop()
			self.pushErr(model.Token, log::BodyNotExist)
			self.pushSuggestion(log::ExpectedBody)
			ret nil
		}
		mut end := tokens[i-1]
		if i < len(tokens) {
			if tokens[i].Id == token::ELSE {
				tokens = tokens[i:]
			} else {
				self.pushErr(tokens[i], log::InvalidSyntax)
				tokens = nil
			}
		}
		model.X = self.p.buildExpr(exprTokens)
		model.Scope = self.buildScope(scopeTokens, end)
		ret model
	}

	fn buildElse(mut self, mut &tokens: []&token::Token): &ast::Else {
		mut els := &ast::Else{
			Token: tokens[0],
		}
		tokens = tokens[1:] // Remove "else" keyword.
		mut i := 0
		mut scopeTokens := range(i, token::LBRACE, token::RBRACE, tokens)
		if scopeTokens == nil {
			if i < len(tokens) {
				self.pushErr(els.Token, log::ElseHaveExpr)
			} else {
				self.stop()
				self.pushErr(els.Token, log::BodyNotExist)
				self.pushSuggestion(log::ExpectedBody)
			}
			ret nil
		}
		if i < len(tokens) {
			self.pushErr(tokens[i], log::InvalidSyntax)
		}
		els.Scope = self.buildScope(scopeTokens, tokens[i-1])
		ret els
	}

	fn buildIfElseChain(mut self, mut tokens: []&token::Token): &ast::Conditional {
		mut chain := new(ast::Conditional)
		chain.Tail = append(chain.Tail, self.buildIf(tokens))
		if len(chain.Tail) == 0 || chain.Tail[0] == nil {
			ret nil
		}
		for len(tokens) != 0 {
			if tokens[0].Id != token::ELSE {
				break
			}
			if len(tokens) > 1 && tokens[1].Id == token::IF {
				tokens = tokens[1:] // Remove else token
				mut elif := self.buildIf(tokens)
				chain.Tail = append(chain.Tail, elif)
				continue
			}
			chain.Default = self.buildElse(tokens)
			break
		}
		ret chain
	}

	fn buildCoCallSt(mut self, mut tokens: []&token::Token): &ast::Expr {
		token := tokens[0]
		tokens = tokens[1:] // Start 1 to skip "co" token.
		if len(tokens) == 0 {
			self.pushErr(token, log::InvalidSyntax)
			ret nil
		}
		mut e := self.p.buildExpr(tokens)
		if e == nil {
			ret e
		}
		match type e.Data {
		| &ast::CallExpr:
			e.Data.(&ast::CallExpr).IsCo = true
		|:
			self.pushErr(token, log::ExprNotFuncCall)
		}
		ret e
	}

	fn buildGoto(mut self, mut &tokens: []&token::Token): &ast::Goto {
		mut gt := &ast::Goto{
			Token: tokens[0],
		}
		if len(tokens) == 1 {
			self.pushErr(gt.Token, log::MissingGotoLabel)
			ret nil
		} else if len(tokens) > 2 {
			self.pushErr(tokens[2], log::InvalidSyntax)
		}
		mut identToken := tokens[1]
		if identToken.Id != token::NAME {
			self.pushErr(identToken, log::InvalidSyntax)
			self.pushSuggestion(log::ExpectedIdentifier)
			ret gt
		}
		gt.Label = identToken
		ret gt
	}

	fn buildFall(mut self, mut &tokens: []&token::Token): &ast::Fall {
		mut fll := &ast::Fall{
			Token: tokens[0],
		}
		if len(tokens) > 1 {
			self.pushErr(tokens[1], log::InvalidSyntax)
		}
		ret fll
	}

	fn buildTypeAliasSt(mut self, mut &tokens: []&token::Token): &ast::TypeAlias {
		mut tad := self.p.buildTypeAliasDecl(tokens)
		tad.Scope = self.s
		ret tad
	}

	fn pushCaseExpr(mut self, mut tokens: []&token::Token, mut token: &token::Token,
		typeMatch: bool, mut &exprs: []&ast::Expr) {
		if len(tokens) == 0 {
			ret
		}
		if typeMatch {
			mut i := 0
			mut t, ok := unsafe { self.p.buildType(tokens, &i, true) }
			if ok {
				exprs = append(exprs, t)
				if i < len(tokens) {
					self.pushErr(tokens[i], log::InvalidSyntax)
				}
			}
			ret
		}
		exprs = append(exprs, self.p.buildExpr(tokens))
	}

	fn buildCaseExprs(mut self, mut &tokens: []&token::Token, mut &colon: &token::Token, typeMatch: bool): ([]&ast::Expr, bool) {
		mut exprs := make([]&ast::Expr, 0, 1)
		mut braceN := 0
		mut j := 0
		for (i, mut tok) in tokens {
			match tok.Id {
			| token::LPAREN
			| token::LBRACE
			| token::LBRACK:
				braceN++
				continue
			| token::RPAREN
			| token::RBRACE
			| token::RBRACK:
				braceN--
				continue
			}

			if braceN != 0 {
				continue
			}
			match {
			| tok.Id == token::OR:
				mut exprTokens := tokens[j:i]
				if len(exprTokens) == 0 {
					self.pushErr(tok, log::MissingExpr)
				} else {
					self.pushCaseExpr(exprTokens, tok, typeMatch, exprs)
				}
				j = i + 1
			| tok.Id == token::COLON:
				colon = tok
				mut exprTokens := tokens[j:i]
				if len(exprTokens) == 0 && j != 0 {
					// If we have expression already for this case,
					// disallow expressionless case. For default case,
					// allow this, if case is just completely empty.
					self.pushErr(tok, log::MissingExpr)
				}
				self.pushCaseExpr(exprTokens, tok, typeMatch, exprs)
				tokens = tokens[i+1:]
				ret exprs, i-j == 0 || len(exprs) != 0
			}
		}
		self.pushErr(tokens[0], log::InvalidSyntax)
		tokens = nil
		ret nil, false
	}

	fn buildCaseScope(mut self, mut &tokens: []&token::Token): &ast::ScopeTree {
		mut n := 0
		for {
			mut i := 0
			mut next, _ := skipSt(i, tokens[n:])
			if len(next) == 0 {
				break
			}
			tok := next[0]
			if tok.Id != token::OR {
				n += i
				continue
			}
			mut scopeTokens := tokens[:n]
			mut scope := self.buildScope(scopeTokens, tokens[n])
			tokens = tokens[n:]
			ret scope
		}
		let mut end: &token::Token
		if len(tokens) > 0 {
			end = tokens[len(tokens)-1]
		}
		mut scope := self.buildScope(tokens, end)
		tokens = nil
		ret scope
	}

	fn buildCase(mut self, mut &tokens: []&token::Token, typeMatch: bool): (&ast::Case, bool) {
		mut c := &ast::Case{
			Token: tokens[0],
		}
		tokens = tokens[1:] // Remove case prefix.
		let mut colon: &token::Token = nil
		if len(tokens) == 0 {
			self.pushErr(c.Token, log::InvalidSyntax)
			ret nil, false
		}
		c.X, ok := self.buildCaseExprs(tokens, colon, typeMatch)
		c.Scope = self.buildCaseScope(tokens)
		if c.Scope.End == nil {
			c.Scope.End = colon
		}
		isDefault := ok && len(c.X) == 0
		ret c, isDefault
	}

	fn buildCases(mut self, mut tokens: []&token::Token, typeMatch: bool): ([]&ast::Case, &ast::Else) {
		let mut cases: []&ast::Case = nil
		let mut def: &ast::Else = nil
		mut defNotLast := false
		for len(tokens) > 0 {
			mut tok := tokens[0]
			if tok.Id != token::OR {
				self.pushErr(tok, log::InvalidSyntax)
				break
			}
			mut c, isDefault := self.buildCase(tokens, typeMatch)
			if isDefault {
				c.Token = tok
				if def == nil {
					def = &ast::Else{
						Token: c.Token,
						Scope: c.Scope,
					}
				} else {
					self.pushErr(tok, log::InvalidSyntax)
				}
			} else {
				defNotLast = defNotLast || def != nil
				cases = append(cases, c)
			}
		}

		if defNotLast {
			self.pushErr(def.Token, log::DefaultNotLast)
		}

		ret cases, def
	}

	fn buildMatch(mut self, mut tokens: []&token::Token): &ast::Match {
		mut m := &ast::Match{
			Token: tokens[0],
		}
		tokens = tokens[1:] // Remove "match" keyword.

		if len(tokens) > 0 && tokens[0].Id == token::TYPE {
			m.Type = true
			tokens = tokens[1:] // Skip "type" keyword
		}

		mut exprTokens := getBlockExpr(tokens)
		if len(exprTokens) > 0 {
			m.X = self.p.buildExpr(exprTokens)
		} else if m.Type {
			self.pushErr(m.Token, log::MissingExpr)
		}

		mut i := len(exprTokens)
		mut blockToks := range(i, token::LBRACE, token::RBRACE, tokens)
		if blockToks == nil {
			self.stop()
			self.pushErr(m.Token, log::BodyNotExist)
			self.pushSuggestion(log::ExpectedBody)
			ret nil
		} else if i < len(tokens) {
			self.pushErr(tokens[i], log::InvalidSyntax)
		}
		m.End = tokens[i-1]
		m.Cases, m.Default = self.buildCases(blockToks, m.Type)
		ret m
	}

	fn buildSelectCaseExpr(mut self, mut &tokens: []&token::Token, mut &colon: &token::Token): ([]&ast::Expr, bool) {
		mut exprs := make([]&ast::Expr, 0, 1)
		mut braceN := 0
		mut j := 0
		for (i, mut tok) in tokens {
			match tok.Id {
			| token::LPAREN
			| token::LBRACE
			| token::LBRACK:
				braceN++
				continue
			| token::RPAREN
			| token::RBRACE
			| token::RBRACK:
				braceN--
				continue
			}

			if braceN != 0 {
				continue
			}
			match {
			| tok.Id == token::OR:
				self.pushErr(tok, log::ExpectedNExpr, "1")
				tokens = nil
				ret nil, false
			| tok.Id == token::COLON:
				colon = tok
				mut exprTokens := tokens[j:i]
				if len(exprTokens) > 0 {
					mut stmt, ok := self.buildAssignSt(exprTokens)
				StmtCheck:
					match {
					| ok:
						mut expr, _ := stmt.(&ast::Expr)
						if expr != nil {
							exprs = append(exprs, expr)
							break StmtCheck
						}
						fall
					|:
						exprs = append(exprs, self.p.buildExpr(exprTokens))
					}
				}
				tokens = tokens[i+1:]
				ret exprs, i-j == 0 || len(exprs) != 0
			}
		}
		self.pushErr(tokens[0], log::InvalidSyntax)
		tokens = nil
		ret nil, false
	}

	fn buildSelectCase(mut self, mut &tokens: []&token::Token): (&ast::Case, bool) {
		mut c := &ast::Case{
			Token: tokens[0],
		}
		tokens = tokens[1:] // Remove case prefix.
		let mut colon: &token::Token = nil
		if len(tokens) == 0 {
			self.pushErr(c.Token, log::InvalidSyntax)
			ret nil, false
		}
		c.X, ok := self.buildSelectCaseExpr(tokens, colon)
		c.Scope = self.buildCaseScope(tokens)
		if c.Scope.End == nil {
			c.Scope.End = colon
		}
		isDefault := ok && len(c.X) == 0
		ret c, isDefault
	}

	fn buildSelectCases(mut self, mut tokens: []&token::Token): ([]&ast::Case, &ast::Else) {
		let mut cases: []&ast::Case = nil
		let mut def: &ast::Else = nil
		mut defNotLast := false
		for len(tokens) > 0 {
			mut tok := tokens[0]
			if tok.Id != token::OR {
				self.pushErr(tok, log::InvalidSyntax)
				break
			}
			mut c, isDefault := self.buildSelectCase(tokens)
			if isDefault {
				c.Token = tok
				if def == nil {
					def = &ast::Else{
						Token: c.Token,
						Scope: c.Scope,
					}
				} else {
					self.pushErr(tok, log::InvalidSyntax)
				}
			} else {
				defNotLast = defNotLast || def != nil
				cases = append(cases, c)
			}
		}
		if defNotLast {
			self.pushErr(def.Token, log::DefaultNotLast)
		}
		ret cases, def
	}

	fn buildSelect(mut self, mut tokens: []&token::Token): &ast::Select {
		mut m := &ast::Select{
			Token: tokens[0],
		}
		mut i := 1 // Start at 1 to skip the "select" keyword.
		mut blockToks := range(i, token::LBRACE, token::RBRACE, tokens)
		if blockToks == nil {
			self.stop()
			self.pushErr(m.Token, log::BodyNotExist)
			self.pushSuggestion(log::ExpectedBody)
			ret nil
		} else if i < len(tokens) {
			self.pushErr(tokens[i], log::InvalidSyntax)
		}
		m.End = tokens[i-1]
		m.Cases, m.Default = self.buildSelectCases(blockToks)
		ret m
	}

	fn buildScopeSt(mut self, mut tokens: []&token::Token): &ast::ScopeTree {
		mut isUnsafe := false
		mut isDeferred := false
		mut token := tokens[0]
		if token.Id == token::UNSAFE {
			isUnsafe = true
			tokens = tokens[1:]
			if len(tokens) == 0 {
				self.pushErr(token, log::InvalidSyntax)
				ret nil
			}
			token = tokens[0]
			if token.Id == token::DEFER {
				isDeferred = true
				tokens = tokens[1:]
				if len(tokens) == 0 {
					self.pushErr(token, log::InvalidSyntax)
					ret nil
				}
			}
		} else if token.Id == token::DEFER {
			isDeferred = true
			tokens = tokens[1:]
			if len(tokens) == 0 {
				self.pushErr(token, log::InvalidSyntax)
				ret nil
			}
		}

		mut i := 0
		mut scopeTokens := range(i, token::LBRACE, token::RBRACE, tokens)
		if scopeTokens == nil {
			self.pushErr(token, log::InvalidSyntax)
			ret nil
		} else if i < len(tokens) {
			self.pushErr(tokens[i], log::InvalidSyntax)
		}
		mut scope := self.buildScope(scopeTokens, tokens[i-1])
		scope.Unsafe = isUnsafe
		scope.Deferred = isDeferred
		ret scope
	}

	fn buildLabel(mut self, mut &tokens: []&token::Token): &ast::Label {
		mut lbl := &ast::Label{
			Token: tokens[0],
			Name: tokens[0].Kind,
		}

		// Save followed statement
		if len(tokens) > 2 {
			tokens = tokens[2:] // Remove label identifier and colon.
			self.insertAsNext(tokens)
		}

		ret lbl
	}

	fn buildIdSt(mut self, mut &tokens: []&token::Token): (ast::StmtData, ok: bool) {
		if len(tokens) == 1 {
			ret
		}

		mut token := tokens[1]
		match token.Id {
		| token::COLON:
			ret self.buildLabel(tokens), true
		}

		ret
	}

	fn buildAssignInfo(mut self, mut &tokens: []&token::Token): &assignInfo {
		mut info := &assignInfo{
			ok: true,
		}
		mut braceN := 0
		for (i, mut token) in tokens {
			match token.Id {
			| token::LBRACE
			| token::LBRACK
			| token::LPAREN:
				braceN++
			| token::RBRACE
			| token::RBRACK
			| token::RPAREN:
				braceN--
			}
			match {
			| braceN > 0:
				continue
			| !token::IsAssignOp(token.Id) &&
				token.Id != token::DEFINE && token.Id != token::ARROW:
				continue
			}

			info.l = tokens[:i]
			if len(info.l) == 0 {
				info.ok = false
			}
			info.setter = token
			if i+1 >= len(tokens) {
				info.r = nil
				info.ok = token::IsPostfixOp(info.setter.Id)
				break
			}
			info.r = tokens[i+1:]
			if token::IsPostfixOp(info.setter.Id) {
				if len(info.r) > 0 {
					self.pushErr(info.r[0], log::InvalidSyntax)
					info.r = nil
				}
			}
			break
		}
		ret info
	}

	fn buildAssignL(mut self, mut &tokens: []&token::Token): &ast::AssignLeft {
		mut l := &ast::AssignLeft{
			Token: tokens[0],
		}
		if tokens[0].Id == token::NAME {
			l.Name = l.Token.Kind
		}
		l.X = self.p.buildExpr(tokens)
		ret l
	}

	fn buildAssignLs(mut self, mut &parts: [][]&token::Token): []&ast::AssignLeft {
		let mut lefts: []&ast::AssignLeft = nil
		for (_, mut part) in parts {
			mut l := self.buildAssignL(part)
			lefts = append(lefts, l)
		}
		ret lefts
	}

	fn buildChanSend(mut self, mut &info: &assignInfo): (ast::StmtData, bool) {
		mut ch := self.p.buildExpr(info.l)
		if ch == nil {
			ret nil, false
		}
		mut data := self.p.buildExpr(info.r)
		if data == nil {
			ret nil, false
		}
		ret &ast::Expr{
			Token: info.l[0],
			End: info.r[len(info.r)-1],
			Data: &ast::ChanSend{Chan: ch, X: data},
		}, true
	}

	fn buildPlainAssign(mut self, mut &tokens: []&token::Token): (ast::StmtData, bool) {
		mut info := self.buildAssignInfo(tokens)
		if !info.ok {
			ret nil, false
		}

		// Caught channel data sends.
		if info.setter.Id == token::ARROW {
			ret self.buildChanSend(info)
		}

		mut assign := &ast::Assign{
			Op: info.setter,
		}

		// Caught declaration assignments.
		if info.setter.Id == token::DEFINE {
			assign.Decl = true
			assign.Y = self.p.buildExpr(info.r)
			ok := self.buildDeclAssign1(info.l, assign)
			if !ok {
				// Return with true to avoid duplicate error.
				ret nil, true
			}
			if len(assign.X) > 1 {
				ret assign, true
			}
			// Single left, use &Var instead if possible.
			mut left := assign.X[0]
			_, isIdent := left.X.Data.(&ast::NameExpr)
			if isIdent {
				mut decl := &ast::Var{
					Token: left.Token,
					Op: assign.Op,
					Name: left.Name,
					Mutable: left.Mutable,
					Reference: left.Reference,
					Scope: self.s,
					X: assign.Y,
				}
				ret decl, true
			}
			ret assign, true
		}

		mut parts, errs := parts(info.l, token::COMMA, true)
		if len(errs) > 0 {
			self.p.errors = append(self.p.errors, errs...)
			ret nil, false
		}

		assign.X = self.buildAssignLs(parts)
		if info.r != nil {
			assign.Y = self.p.buildExpr(info.r)
		}

		ret assign, true
	}

	fn buildDeclAssign1(mut self, mut &lefts: []&token::Token, mut &assign: &ast::Assign): bool {
		// Lefts
		mut parts, errs := parts(lefts, token::COMMA, true)
		if len(errs) > 0 {
			self.p.errors = append(self.p.errors, errs...)
			ret false
		}

		for (_, mut part) in parts {
			mut isMut := false
			mut isRef := false

			token := part[0]
			if token.Id == token::MUT {
				isMut = true
				part = part[1:]
				if len(part) == 0 {
					self.pushErr(token, log::InvalidSyntax)
					ret false
				}
			}

			if part[0].Id == token::AND {
				isRef = true
				part = part[1:]
				if len(part) == 0 {
					self.pushErr(token, log::InvalidSyntax)
					ret false
				}
			}

			if part[0].Id != token::NAME && part[0].Id != token::LPAREN {
				self.pushErr(token, log::InvalidSyntax)
				ret false
			}

			mut x := self.buildAssignL(part)
			if x.X == nil {
				ret false
			}
			x.Mutable = isMut
			x.Reference = isRef
			assign.X = append(assign.X, x)
		}

		ret true
	}

	fn buildDeclAssign(mut self, mut tokens: []&token::Token): (&ast::Assign, bool) {
		if len(tokens) < 1 {
			ret nil, false
		}

		tokens = tokens[1:] // Skip "let" keyword
		mut token := tokens[0]
		if token.Id != token::LPAREN {
			ret nil, false
		}

		mut assign := &ast::Assign{
			Decl: true,
		}

		mut i := 0
		mut rang := range(i, token::LPAREN, token::RPAREN, tokens)
		if rang == nil {
			self.pushErr(token, log::InvalidSyntax)
			ret nil, false
		} else if i+1 < len(tokens) {
			assign.Op = tokens[i]
			if assign.Op.Id != token::ASSIGN {
				self.pushErr(assign.Op, log::InvalidSyntax)
			}
			i++
			mut exprTokens := tokens[i:]
			assign.Y = self.p.buildExpr(exprTokens)
		}

		ok := self.buildDeclAssign1(rang, assign)
		ret assign, ok
	}

	fn buildAssignSt(mut self, mut &tokens: []&token::Token): (st: ast::StmtData, ok: bool) {
		if !checkAssignTokens(tokens) {
			ret nil, false
		}
		match tokens[0].Id {
		| token::LET:
			st, ok = self.buildDeclAssign(tokens)
		|:
			st, ok = self.buildPlainAssign(tokens)
		}
		ret
	}

	fn buildUseExpr(mut self, mut &tokens: []&token::Token): &ast::UseExpr {
		if len(tokens) == 1 {
			self.pushErr(tokens[0], log::MissingExpr)
			ret nil
		}
		mut ue := &ast::UseExpr{
			Token: tokens[0],
		}
		tokens = tokens[1:] // Ignore "use" keyword.
		ue.X = self.p.buildExpr(tokens)
		ret ue
	}

	fn buildConstSt(mut self, mut &st: &stmt): ast::StmtData {
		if len(st.tokens) == 1 {
			self.pushErr(st.tokens[0], log::InvalidSyntax)
			ret nil
		}
		match st.tokens[1].Id {
		| token::FOR:
			st.tokens = st.tokens[1:]
			mut iter := self.buildIterSt(st)
			if iter != nil {
				iter.Comptime = true
			}
			ret iter
		| token::MATCH:
			st.tokens = st.tokens[1:]
			mut mt := self.buildMatch(st.tokens)
			if mt != nil {
				mt.Comptime = true
			}
			ret mt
		|:
			ret self.buildVarSt(st.tokens)
		}
	}

	fn buildSt(mut self, mut &st: &stmt): ast::StmtData {
		if len(st.tokens) == 0 {
			// Empty statement, skip immediately.
			// Typically caused by empty statements explicitly terminated by semicolon.
			ret nil
		}
		mut token := st.tokens[0]
		if token.Id == token::NAME {
			mut s, ok := self.buildIdSt(st.tokens)
			if ok {
				ret s
			}
		}

		mut s, ok := self.buildAssignSt(st.tokens)
		if ok {
			ret s
		}

		match token.Id {
		| token::USE:
			ret self.buildUseExpr(st.tokens)
		| token::CONST:
			ret self.buildConstSt(st)
		| token::LET
		| token::MUT:
			ret self.buildVarSt(st.tokens)
		| token::RET:
			ret self.buildRetSt(st.tokens)
		| token::FOR:
			ret self.buildIterSt(st)
		| token::BREAK:
			ret self.buildBreak(st.tokens)
		| token::CONTINUE:
			ret self.buildContSt(st.tokens)
		| token::IF:
			ret self.buildIfElseChain(st.tokens)
		| token::CO:
			ret self.buildCoCallSt(st.tokens)
		| token::GOTO:
			ret self.buildGoto(st.tokens)
		| token::FALL:
			ret self.buildFall(st.tokens)
		| token::TYPE:
			ret self.buildTypeAliasSt(st.tokens)
		| token::MATCH:
			ret self.buildMatch(st.tokens)
		| token::SELECT:
			ret self.buildSelect(st.tokens)
		| token::UNSAFE:
			if len(st.tokens) < 1 {
				break
			}
			if st.tokens[1].Id == token::DEFER ||
				st.tokens[1].Id == token::LBRACE { // Scope.
				ret self.buildScopeSt(st.tokens)
			}
		| token::DEFER:
			ret self.buildScopeSt(st.tokens)
		| token::LBRACE:
			ret self.buildScopeSt(st.tokens)
		}
		mut expr := self.p.buildExpr(st.tokens)
		// Return expression if not nil, otherwise return nil StmtData.
		// Avoid to return StmtData with nil &ast::Expr.
		if expr != nil {
			ret expr
		}
		// Do not log any error. Expression parsing will log error, if any.
		ret nil
	}

	fn build(mut self, mut &tokens: []&token::Token, mut &s: &ast::ScopeTree) {
		if s == nil {
			ret
		}
		self.stmts = splitStmts(tokens)
		self.pos = -1 // sp.next() first increase position
		self.s = s
		for !self.isLastSt() && !self.finished() {
			mut st := self.next()
			mut data := self.buildSt(st)
			if data != nil {
				self.s.Stmts = append(self.s.Stmts, ast::Stmt{
					Token: st.tokens[0],
					End: st.tokens[len(st.tokens)-1],
					Data: data,
				})
			}
			if self.stopped() {
				break
			}
		}
	}
}