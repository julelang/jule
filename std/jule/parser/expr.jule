// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule"
use "std/jule/ast"
use "std/jule/build"
use "std/jule/log"
use "std/jule/token"
use "std/strings"

// Lowest operator precedence, no-operator.
const lowestPrec = 0

struct exprBuilder {
	p:   &parser
	l:   []&token::Token // token list to scan
	i:   int             // current scanning position
	t:   &token::Token   // current token, nil for EOF
	lt:  &token::Token   // last token
	err: bool            // error logging enable state
}

impl exprBuilder {
	fn new(mut &p: &parser): exprBuilder {
		ret exprBuilder{
			err: true,
			p: p,
		}
	}

	fn pushErr(mut self, token: &token::Token, fmt: str, args: ...any) {
		if self.err {
			self.p.pushErr(token, fmt, args...)
		}
	}

	// Push suggestion to last log.
	fn pushSuggestion(mut self, fmt: str, args: ...any) {
		if self.err {
			self.p.pushSuggestion(fmt, args...)
		}
	}

	// Scanning reached to EOF.
	fn eof(self): bool {
		ret self.t == nil
	}

	// Advance to the next token.
	fn next(mut self) {
		self.i++
		if self.i < len(self.l) {
			self.t = self.l[self.i]
		} else {
			self.i = len(self.l)
			self.t = nil
		}
		if self.i > 0 {
			self.lt = self.l[self.i-1]
		}
	}

	// Expects token, reports error if needed.
	// Reports whether there is error.
	// Advances to the next token.
	fn expect(mut self, tok: int, msg: str): (err: bool) {
		if self.eof() {
			self.pushErr(self.lt, msg)
			err = true
		} else if self.t.ID != tok {
			self.pushErr(self.t, msg)
			err = true
		}
		self.next()
		ret
	}

	// Caller should pass the leading namespace token, scanning must be point to the separator token.
	fn parseNamespaceExpr(mut self, mut name: &token::Token): &ast::Expr {
		mut ns := new(ast::NamespaceExpr)
		ns.Namespace = name
		self.next() // separator is already checked before the calling function
		name = self.t
		self.expect(token::NAME, "expected identifier")
		ns.Name = name
		ret &ast::Expr{
			Token: ns.Namespace,
			End: name,
			Data: ns,
		}
	}

	fn parseTypeInstance(mut self, mut typ: &ast::Expr): &ast::Expr {
		mut lbrack := self.t
		let mut list: []&ast::Expr
		for !self.eof() && self.t.ID != token::RBRACK {
			self.next()
			if !self.eof() && self.t.ID != token::RBRACK {
				if len(list) == 0 && self.t.ID == token::ELLIPSIS {
					// Array type.
					self.i-- // back to [
					ret self.parseType()
				}
				list = append(list, self.parse())
			}
			if self.eof() || self.t.ID != token::COMMA && self.t.ID != token::RBRACK {
				self.pushErr(self.t, "expected , or ]")
			}
		}
		mut rbrack := self.t
		self.expect(token::RBRACK, "expected ]")
		ret packIndexExpr(typ, lbrack, list, rbrack)
	}

	fn parseSmartPointerType(mut self): &ast::Expr {
		mut t := self.t
		self.next()
		mut base := self.parseType()
		ret &ast::Expr{
			Token: t,
			End: avoidNilExpr2(base),
			Data: &ast::UnaryExpr{
				Op: t,
				X: base,
			},
		}
	}

	fn parsePointerType(mut self): &ast::Expr {
		mut t := self.t
		self.next()
		let mut end: &token::Token
		let mut base: &ast::Expr
		if !self.eof() && self.t.ID == token::UNSAFE {
			end = self.t
			// No extra operation needed for the value type.
			// To represent unsafe pointer types, use nil expression as value type.
			self.next()
		} else {
			base = self.parseType()
			end = avoidNilExpr2(base)
		}
		ret &ast::Expr{
			Token: t,
			End: end,
			Data: &ast::UnaryExpr{
				Op: t,
				X: base,
			},
		}
	}

	fn parseFuncType(mut self): &ast::Expr {
		mut t := self.t
		mut f := self.p.buildFuncPrototype(self.l, self.i, false)
		self.i-- // back to next token to advance properly
		self.next()
		ret &ast::Expr{
			Token: t,
			End: self.lt,
			Data: f,
		}
	}

	fn parseArrayType(mut self, mut lbrack: &token::Token, mut len: &ast::Expr): &ast::Expr {
		if self.eof() {
			self.pushErr(self.t, "unexpected EOF; expecting ]")
			ret &ast::Expr{} // bad expression
		}
		mut autoSized := false
		if len == nil {
			// Always permit ellipsis for more fault-tolerant parsing.
			if self.t.ID == token::ELLIPSIS {
				len = nil // size expression must be nil for auto-size
				autoSized = true
				self.next()
			} else if self.t.ID != token::RBRACK {
				len = self.parse()
			}
		}
		if !self.eof() && self.t.ID == token::COMMA {
			// Trailing commas are accepted in type parameter
			// lists but not in array type declarations.
			// Accept for better error handling but complain.
			self.pushErr(self.t, "unexpected comma; expecting ]")
			self.next()
		}
		self.expect(token::RBRACK, "expected ]")
		mut valueTyp := self.parseType()
		mut typ := &ast::Expr{
			Token: lbrack,
			End: avoidNilExpr2(valueTyp),
		}

		// If it is not auto-sized and length is nil, then this is a slice type.
		// Otherwise, this is an array.
		if autoSized || len != nil {
			typ.Data = &ast::ArrayType{
				Value: valueTyp,
				Size: len,
			}
		} else {
			typ.Data = &ast::SliceType{
				Value: valueTyp,
			}
		}
		ret typ
	}

	fn parseMapType(mut self): &ast::Expr {
		mut t := self.t
		self.next() // skip map keyword
		self.expect(token::LBRACK, "expected [")
		mut key := self.parseType()
		self.expect(token::RBRACK, "expected ]")
		mut value := self.parseType()
		ret &ast::Expr{
			Token: t,
			End: avoidNilExpr2(value),
			Data: &ast::MapType{
				Key: key,
				Value: value,
			},
		}
	}

	fn parseChanType(mut self): &ast::Expr {
		mut t := self.t
		mut dir := ast::SEND | ast::RECV
		let mut arrow: &token::Token
		if self.t.ID == token::CHAN {
			self.next()
			if !self.eof() && self.t.ID == token::ARROW {
				arrow = self.t
				self.next()
				dir = ast::SEND
			}
		} else {
			arrow = self.t
			self.next()
			self.expect(token::CHAN, "expected chan keyword")
			dir = ast::RECV
		}
		mut valueTyp := self.parseType()
		ret &ast::Expr{
			Token: t,
			End: avoidNilExpr2(valueTyp),
			Data: &ast::ChanType{
				Arrow: arrow,
				Dir: dir,
				Value: valueTyp,
			},
		}
	}

	fn parseNameType(mut self, mut t: &token::Token, name: str): &ast::Expr {
		if !self.eof() && self.t.ID == token::SEP {
			// Namespace selection.
			mut typ := self.parseNamespaceExpr(t)
			if !self.eof() && self.t.ID == token::LBRACK {
				typ = self.parseTypeInstance(typ)
			}
			ret typ
		}
		mut typ := &ast::Expr{
			Token: t,
			End: t,
			Data: &ast::NameExpr{
				Token: t,
				Name: name,
				Bind: false,
			},
		}

		if !self.eof() && self.t.ID == token::LBRACK {
			typ = self.parseTypeInstance(typ)
		}
		ret typ
	}

	fn tryIdentOrType(mut self): &ast::Expr {
		if self.eof() {
			// no type found
			ret nil
		}
		match self.t.ID {
		| token::BIND:
			t := self.t
			self.next()
			if !self.expect(token::PERIOD, "expected period") {
				if self.eof() {
					self.pushErr(t, "unexpected EOF; expected identifier")
					ret &ast::Expr{} // bad expression
				}
				mut name := self.t
				self.next()
				// Special case: allow using keywords as identifier for bind defines.
				if name.ID != token::NAME && !token::IsKeyword(name.Kind) {
					self.pushErr(name, "expected identifier for bind namespace type")
					ret &ast::Expr{} // bad expression
				}
				mut typ := self.parseNameType(name, name.Kind)
				if typ != nil {
					match type typ.Data {
					| &ast::NameExpr:
						// Plain identifier.
						typ.Data.(&ast::NameExpr).Bind = true
					| &ast::IndexExpr:
						// Identifier with generics.
						typ.Data.(&ast::IndexExpr).X.Data.(&ast::NameExpr).Bind = true
					|:
						self.pushErr(t, "expected identifier for bind namespace type")
					}
				}
				ret typ
			}
			ret &ast::Expr{} // bad expression
		| token::NAME:
			mut t := self.t
			name := self.parseIdent()
			ret self.parseNameType(t, name)
		| token::LAND:
			// First, make the logical and `&&` operator the and `&` operator.
			mut t := new(token::Token, *self.t)
			t.ID = token::AND
			t.Kind = "&"
			self.t = t

			mut valueTyp := self.parseSmartPointerType()
			mut p := &ast::Expr{
				Token: t,
				End: avoidNilExpr2(valueTyp),
				Data: &ast::UnaryExpr{
					Op: t,
					X: valueTyp,
				},
			}
			ret p
		| token::AND:
			ret self.parseSmartPointerType()
		| token::MUL:
			ret self.parsePointerType()
		| token::FN:
			ret self.parseFuncType()
		| token::LBRACK:
			mut lbrack := self.t
			self.next()
			ret self.parseArrayType(lbrack, nil)
		| token::MAP:
			ret self.parseMapType()
		| token::CHAN | token::ARROW:
			ret self.parseChanType()
		| token::UNSAFE:
			mut t := self.t
			self.next()
			if self.eof() {
				break
			}
			match self.t.ID {
			| token::FN:
				// Back to unsafe to handle function properly.
				self.i--
				self.t = self.lt
				ret self.parseFuncType()
			| token::SEP:
				// Unsafe namespace.
				ret self.parseNamespaceExpr(t)
			}
		| token::LPAREN:
			mut lparen := self.t
			self.next()
			mut x := self.parseType()
			mut rparen := self.t
			self.expect(token::RPAREN, "expected )")
			ret &ast::Expr{
				Token: lparen,
				End: rparen,
				Data: &ast::RangeExpr{
					X: x,
				},
			}
		}

		// no type found
		ret nil
	}

	fn parseType(mut self): &ast::Expr {
		mut typ := self.tryIdentOrType()
		if typ == nil {
			if self.eof() {
				self.pushErr(self.lt, "expected type")
			} else {
				self.pushErr(self.t, "expected type")
			}
		}
		ret typ
	}

	fn parseIdent(mut self): str {
		mut name := "_"
		if self.t.ID == token::NAME ||
			self.t.ID == token::ERROR ||
			self.t.ID == token::SELF ||
			self.p.isIdent(self.t) {
			name = self.t.Kind
			self.next()
		} else {
			self.pushErr(self.t, "expected identifier")
		}
		ret name
	}

	fn parseSelector(mut self, mut x: &ast::Expr): &ast::Expr {
		mut t := self.t
		_ = self.parseIdent()
		ret &ast::Expr{
			Token: t,
			End: t,
			Data: &ast::SelectorExpr{
				Name: t,
				X: x,
			},
		}
	}

	fn parseTypeAssertion(mut self, mut x: &ast::Expr): &ast::Expr {
		mut lparen := self.t
		let mut typ: &ast::Expr
		self.next()
		if self.eof() {
			self.pushErr(lparen, "expected )")
			ret nil
		}
		if self.t.ID == token::TYPE {
			// type switch: typ == nil
			self.next()
		} else {
			typ = self.parseType()
		}
		mut rparen := self.t
		if self.expect(token::RPAREN, "expected )") {
			ret nil
		}
		ret &ast::Expr{
			Token: avoidNilExpr(x),
			End: rparen,
			Data: &ast::TypeAssertionExpr{
				X: x,
				Type: typ,
			},
		}
	}

	fn parseIndexOrSlicingInstance(mut self, mut x: &ast::Expr): &ast::Expr {
		mut lbrack := self.t
		self.next()
		if self.eof() {
			self.pushErr(lbrack, "expected operand")
			ret nil
		}
		if self.t.ID == token::RBRACK {
			// Empty index, slicing or index expressions are not permitted; complain.
			self.pushErr(lbrack, "expected operand")
			self.next()
			ret nil
		}
		const N = 3
		let mut args: []&ast::Expr
		let mut index: [N]&ast::Expr
		let mut colons: [N - 1]&token::Token
		if self.t.ID != token::COLON && self.t.ID != token::SEP {
			// We can't know if we have an index expression or a type instantiation;
			// so even if we see a (named) type we are not going to be in type context.
			index[0] = self.parse()
			if self.eof() {
				self.pushErr(lbrack, "expected ]")
			}
		}
		mut ncolons := 0
		match self.t.ID {
		| token::COLON | token::SEP:
			// Slicing expression.
			for (self.t.ID == token::COLON || self.t.ID == token::SEP) && ncolons < len(colons) {
				colons[ncolons] = self.t
				ncolons++
				if self.t.ID == token::SEP {
					ncolons++
				}
				self.next()
				if !self.eof() && self.t.ID != token::COLON && self.t.ID != token::SEP && self.t.ID != token::RBRACK {
					index[ncolons] = self.parse()
				}
			}
		| token::COMMA:
			// Instance expression.
			args = append(args, index[0])
			for !self.eof() && self.t.ID == token::COMMA {
				self.next()
				if !self.eof() && self.t.ID != token::RBRACK {
					args = append(args, self.parseType())
				}
			}
		}

		mut rbrack := self.t
		if self.expect(token::RBRACK, "expected ]") {
			ret nil
		}

		if ncolons > 0 {
			// Slicing expression.
			if ncolons == 2 {
				// Check presence of middle and final index here than during type-checking
				// to prevent erroneous programs from parsing through julefmt.
				if index[1] == nil {
					self.pushErr(colons[0], "middle index required in 3-index slice")
				}
				if index[2] == nil {
					self.pushErr(colons[1], "final index required in 3-index slice")
				}
			}
			ret &ast::Expr{
				Token: avoidNilExpr(x),
				End: rbrack,
				Data: &ast::SlicingExpr{
					Token: lbrack,
					X: x,
					Low: index[0],
					High: index[1],
					Max: index[2],
				},
			}
		}

		if len(args) == 0 {
			// Index expression.
			ret &ast::Expr{
				Token: avoidNilExpr(x),
				End: rbrack,
				Data: &ast::IndexExpr{
					Token: lbrack,
					X: x,
					Index: index[0],
				},
			}
		}

		// Instance expression.
		ret packIndexExpr(x, lbrack, args, rbrack)
	}

	fn parseCallOrConversion(mut self, mut x: &ast::Expr): &ast::Expr {
		mut lparen := self.t
		let mut list: []&ast::Expr
		for !self.eof() && self.t.ID != token::RPAREN {
			self.next()
			if !self.eof() && self.t.ID != token::COMMA && self.t.ID != token::RPAREN {
				list = append(list, self.parse()) // builtins may expect a type: make(some type, ...)
			}
			if self.eof() || self.t.ID != token::COMMA && self.t.ID != token::RPAREN {
				self.pushErr(self.lt, "expected , or )")
				ret nil
			}
		}
		mut rparen := self.t
		if self.expect(token::RPAREN, "expected )") {
			ret nil
		}
		ret &ast::Expr{
			Token: avoidNilExpr(x),
			End: rparen,
			Data: &ast::CallExpr{
				Token: lparen,
				Func: x,
				Args: list,
			},
		}
	}

	fn parseValue(mut self): &ast::Expr {
		if !self.eof() && self.t.ID == token::LBRACE {
			ret self.parseUntypedLiteralValue()
		}
		ret self.parse()
	}

	fn parseElement(mut self): &ast::Expr {
		mut x := self.parseValue()
		if !self.eof() && self.t.ID == token::COLON {
			self.next()
			mut value := self.parseValue()
			x = &ast::Expr{
				Token: avoidNilExpr(x),
				End: avoidNilExpr2(value),
				Data: &ast::KeyValueExpr{Key: x, Value: value},
			}
		}
		ret x
	}

	fn parseUntypedLiteralValue(mut self): &ast::Expr {
		mut lbrace := self.t
		let mut list: []&ast::Expr
		for !self.eof() && self.t.ID != token::RBRACE {
			self.next()
			if !self.eof() && self.t.ID != token::COMMA && self.t.ID != token::RBRACE {
				list = append(list, self.parseElement())
			}
			if self.eof() || self.t.ID != token::COMMA && self.t.ID != token::RBRACE {
				self.pushErr(self.lt, "expected , or }")
				ret nil
			}
		}
		mut rbrace := self.t
		if self.expect(token::RBRACE, "expected }") {
			ret nil
		}
		ret &ast::Expr{
			Token: lbrace,
			End: rbrace,
			Data: &ast::BraceLit{
				Token: lbrace,
				End: rbrace,
				X: list,
			},
		}
	}

	fn parseLiteralValue(mut self, mut typ: &ast::Expr): &ast::Expr {
		mut lit := self.parseUntypedLiteralValue()
		if lit == nil {
			ret nil
		}
		ret &ast::Expr{
			Token: avoidNilExpr(typ),
			End: avoidNilExpr2(lit),
			Data: &ast::TypedBraceLit{
				Type: typ,
				Lit: lit.Data.(&ast::BraceLit),
			},
		}
	}

	fn trySliceOrArrayType(mut self, mut lbrack: &token::Token, mut list: []&ast::Expr): (typ: &ast::Expr, isTyp: bool) {
		if self.eof() {
			ret nil, false
		}
		err := self.err
		self.err = true
		n := len(self.p.errors)
		i := self.i
		match self.t.ID {
		| token::LBRACK:
			// We do not know whether if it is type or literal.
			// We have to try for type.
			self.err = false
			fall
		| token::LAND | token::AND | token::MUL | token::ARROW
		| token::NAME | token::CHAN | token::MAP | token::FN | token::BIND | token::UNSAFE:
			isTyp = true
			self.i--         // Back to ]
			self.t = self.lt // Back to ]
			if len(list) > 0 {
				// Array type.
				if len(list) > 1 {
					self.pushErr(list[1].Token, "array expression needs only single constant expression")
				}
				typ = self.parseArrayType(lbrack, list[0])
			} else {
				// Slice type.
				typ = self.parseArrayType(lbrack, nil)
			}
		}
		self.err = err
		if isTyp && typ == nil && !err && len(self.p.errors) == n {
			// We do not know expression is a type exactly,
			// type builder did not log any error but returns nil.
			// This is not a type. Recover the old state of parser.
			isTyp = false
			typ = nil
			self.i = i
		}
		ret
	}

	fn parseSliceLiteralOrType(mut self): &ast::Expr {
		mut lbrack := self.t
		let mut list: []&ast::Expr
		for !self.eof() && self.t.ID != token::RBRACK {
			self.next()
			if !self.eof() && self.t.ID != token::RBRACK {
				if len(list) < 2 && self.t.ID == token::ELLIPSIS {
					if len(list) == 0 {
						// Array type with auto-size.
						ret self.parseArrayType(lbrack, nil)
					} else if len(list) == 1 {
						mut t := self.t
						// Array-fill expression.
						self.next()
						mut rbrack := self.t
						self.expect(token::RBRACK, "expected ]")
						list = append(list, &ast::Expr{
							Token: t,
							End: t,
							Data: new(ast::VariadicExpr),
						})
						ret &ast::Expr{
							Token: lbrack,
							End: rbrack,
							Data: &ast::SliceExpr{
								Token: lbrack,
								End: rbrack,
								X: list,
							},
						}
					}
				}
				list = append(list, self.parse())
			}
			if self.eof() || self.t.ID != token::COMMA && self.t.ID != token::RBRACK {
				self.pushErr(self.t, "expected , or ]")
				ret nil
			}
		}
		mut rbrack := self.t
		if self.expect(token::RBRACK, "expected ]") {
			ret nil
		}
		mut typ, isTyp := self.trySliceOrArrayType(lbrack, list)
		if isTyp {
			ret typ
		}
		ret &ast::Expr{
			Token: lbrack,
			End: rbrack,
			Data: &ast::SliceExpr{
				Token: lbrack,
				End: rbrack,
				X: list,
			},
		}
	}

	// Parses (...) range.
	// If list is true, evaluates list expressions.
	// Since list expressions cannot be in range, returns list expression directly.
	fn parseParenRange(mut self, list: bool): &ast::Expr {
		mut lparen := self.t
		self.next()
		let mut x: &ast::Expr
		if list {
			x = self.parseExprList()
		} else {
			x = self.parse()
		}
		mut rparen := self.t
		if self.expect(token::RPAREN, "expected )") {
			ret nil
		}
		if list {
			ret x
		}
		ret &ast::Expr{
			Token: lparen,
			End: rparen,
			Data: &ast::RangeExpr{
				X: x,
			},
		}
	}

	fn parseShortFuncLit(mut self): &ast::Expr {
		mut f := new(ast::Func)
		f.Token = self.lt
		f.Name = jule::Anon
		f.Result = new(ast::RetType)
		f.Short = true
		// We have content between |...| range.
		// Build parameters.
		if self.t.ID == token::OR {
			for {
				self.next()
				if self.eof() {
					self.pushErr(self.lt, "unexpected EOF; expected identifier or |")
					ret nil
				}
				mut param := new(ast::Param)
				if self.t.ID == token::MUT {
					param.Mutable = true
					self.next()
				}
				if self.eof() {
					self.pushErr(self.lt, "expected identifier for the function parameter")
					ret nil
				}
				if self.t.ID != token::NAME {
					self.pushErr(self.lt, "expected identifier for the function parameter")
					ret nil
				}
				param.Token = self.t
				param.Name = self.t.Kind
				self.next()
				if self.eof() {
					self.pushErr(self.lt, "unexpected EOF; expected , or |")
					ret nil
				}
				f.Params = append(f.Params, param)
				if self.t.ID == token::COMMA {
					continue
				}
				if self.t.ID == token::OR {
					break
				}
				self.pushErr(self.t, "unexpected token; expected , or |")
				ret nil
			}
		}

		// We point to closer | token.
		// There is two case; inline or block body.
		// Advance to the next token see what we have.
		self.next()
		if self.eof() {
			self.pushErr(self.t, "unexpected EOF; expected function body")
			ret nil
		}
		inliner := self.t.ID != token::LBRACE
		if inliner {
			// We have one-line body.
			// Accept rest of the tokens as body.
			f.Scope = newScope()
			f.Scope.Deferred = true // Mark as one-line body.
			let mut e: &ast::Expr
			if self.t.ID == token::LPAREN {
				// Special case: allow list expressions for inliner short functions in (...) range.
				e = self.parseParenRange(true)
			} else {
				e = self.parse()
			}
			f.Scope.End = avoidNilExpr2(e)
			f.Scope.Stmts = append(f.Scope.Stmts, ast::Stmt{
				Token: avoidNilExpr(e),
				End: f.Scope.End,
				Data: e,
			})
		} else {
			// We have explicit block body.
			mut bodyTokens := range(self.i, token::LBRACE, token::RBRACE, self.l)
			self.i-- // back to }
			self.next()
			f.Scope = self.p.buildScope(bodyTokens, self.l[self.i-1])
		}
		ret &ast::Expr{
			Token: f.Token,
			End: self.lt,
			Data: f,
		}
	}

	fn parseFuncTypeOrLit(mut self): &ast::Expr {
		mut t := self.t
		self.next()
		if self.eof() {
			self.pushErr(t, "unexpected EOF; expected function type or literal")
			ret nil
		}
		if self.t.ID == token::OR || self.t.ID == token::LOR {
			ret self.parseShortFuncLit()
		}
		if self.t.ID != token::LPAREN {
			self.pushErr(t, "unexpected token; expected ( or |")
			ret nil
		}
		self.i -= 2 // back to previous token of the function keyword to advance properly
		self.next() // advance to the function keyword

		mut f := self.p.buildFuncPrototype(self.l, self.i, false)
		self.i-- // back to }
		self.next()
		if f == nil {
			ret nil
		}
		if self.eof() || self.t.ID != token::LBRACE {
			// Function type.
			// No extra attention needed.
		} else {
			// We found LBRACE, handle scope of the function literal.
			mut blockTokens := range(self.i, token::LBRACE, token::RBRACE, self.l)
			self.i-- // back to }
			self.next()
			f.Scope = self.p.buildScope(blockTokens, self.l[self.i-1])
		}
		ret &ast::Expr{
			Token: t,
			End: self.lt,
			Data: f,
		}
	}

	fn parseUnsafeExpr(mut self): &ast::Expr {
		mut lbrace := self.t
		self.next()
		mut x := self.parse()
		mut rbrace := self.t
		if self.expect(token::RBRACE, "expected }") {
			ret nil
		}
		ret &ast::Expr{
			Token: lbrace,
			End: rbrace,
			Data: &ast::UnsafeExpr{
				Token: lbrace,
				X: x,
			},
		}
	}

	// May return an expression or a raw type (incl. array
	// types of the form [...]T). Callers must verify the result.
	fn parseOperand(mut self): &ast::Expr {
		match self.t.ID {
		| token::SELF | token::NAME | token::ERROR:
			mut t := self.t
			name := self.parseIdent()
			if !self.eof() && self.t.ID == token::SEP {
				// Namespace selection.
				ret self.parseNamespaceExpr(t)
			}
			ret &ast::Expr{
				Token: t,
				End: t,
				Data: &ast::NameExpr{
					Token: t,
					Name: name,
					Bind: false,
				},
			}
		| token::STR | token::INT | token::FLOAT | token::RUNE:
			mut lit := self.t
			self.next()
			ret &ast::Expr{
				Token: lit,
				End: lit,
				Data: &ast::LitExpr{
					Token: lit,
					Value: lit.Kind,
				},
			}
		| token::LBRACK:
			// Slice [...] literal or type []name.
			ret self.parseSliceLiteralOrType()
		| token::LBRACE:
			// Untyped brace literal.
			ret self.parseUntypedLiteralValue()
		| token::LPAREN:
			// (...) expression.
			ret self.parseParenRange(false)
		| token::UNSAFE:
			mut t := self.t
			// Unsafe expression or unsafe function type declaration.
			self.next()
			if self.eof() {
				self.pushErr(t, "expected unsafe scope expression or unsafe function type/literal")
				ret nil
			}
			match self.t.ID {
			| token::LBRACE:
				// Unsafe scope expression.
				ret self.parseUnsafeExpr()
			| token::SEP:
				// Namespace.
				ret self.parseNamespaceExpr(t)
			| token::FN:
				// Function type.
				mut f := self.parseFuncTypeOrLit()
				if f != nil {
					mut fnc := f.Data.(&ast::Func)
					fnc.Unsafe = true
					if fnc.Scope != nil {
						fnc.Scope.Unsafe = fnc.Unsafe
					}
				}
				ret f
			|:
				self.pushErr(t, "expected unsafe scope expression or unsafe function type/literal")
			}
		| token::FN:
			ret self.parseFuncTypeOrLit()
		}

		// The self and other identifiers will be handled above.
		// But here is another case, cpp.name, or namespaces.
		// Catch such identifiers too. Also checks for types.
		mut typ := self.tryIdentOrType()
		if typ != nil {
			ret typ
		}

		self.pushErr(self.t, "expected operand")
		self.next()
		ret nil
	}

	fn parsePrimaryExpr(mut self, mut x: &ast::Expr): &ast::Expr {
		if x == nil {
			x = self.parseOperand()
			if x == nil {
				ret nil
			}
		}
		for {
			if self.eof() || x == nil {
				ret x
			}
			match self.t.ID {
			| token::ELLIPSIS:
				// Variadic expression.
				mut t := self.t
				self.next()
				x = &ast::Expr{
					Token: avoidNilExpr(x),
					End: t,
					Data: &ast::VariadicExpr{
						Token: t,
						X: x,
					},
				}
			| token::NOT:
				t := self.t
				self.next()
				// Trailing not operator.
				// It should be call expression to an exceptional function.
				mut f, isFunc := ast::Unparen(x).Data.(&ast::CallExpr)
				if !isFunc {
					self.pushErr(t, "trailing not operator expects a function call")
					break
				}
				f.Exception = &ast::ScopeTree{
					Deferred: true,
				}
			| token::ELSE:
				t := self.t
				self.next()
				// Trailing else keyword.
				// It should be call expression to an exceptional function.
				mut f, isFunc := ast::Unparen(x).Data.(&ast::CallExpr)
				if !isFunc {
					self.pushErr(t, "else keyword expects a function call")
					break
				}
				if f.Exception != nil {
					self.pushErr(t, "exceptional is already handled for this call")
				}
				if self.eof() || self.t.ID != token::LBRACE {
					self.pushErr(t, "expected {")
					ret nil
				}
				mut blockTokens := range(self.i, token::LBRACE, token::RBRACE, self.l)
				self.i-- // back to }, to advance properly
				self.next()
				mut rbrace := self.l[self.i-1]
				f.Exception = self.p.buildScope(blockTokens, rbrace)
				x.End = rbrace
			| token::PERIOD:
				mut t := self.t
				self.next()
				if self.eof() {
					self.pushErr(t, "expected selector or type assertion")
					ret nil
				}
				match self.t.ID {
				| token::NAME:
					x = self.parseSelector(x)
				| token::LPAREN:
					x = self.parseTypeAssertion(x)
				|:
					self.pushErr(self.t, "expected selector or type assertion")
					ret nil
				}
			| token::LBRACK:
				x = self.parseIndexOrSlicingInstance(x)
			| token::LPAREN:
				x = self.parseCallOrConversion(x)
			| token::LBRACE:
				// Operand may have returned a parenthesized complit
				// type; accept it but complain if we have a complit.
				mut t := ast::Unparen(x)
				// Determine if '{' belongs to a composite literal or a block statement.
				match type t.Data {
				| &ast::NameExpr | &ast::SelectorExpr | &ast::NamespaceExpr:
					// x is possibly a composite literal type.
				| &ast::IndexExpr:
					// x is possibly a composite literal type.
				| &ast::MapType:
					// x is a composite literal type..
				|:
					ret x
				}
				if t != x {
					self.pushErr(t.Token, "cannot parenthesize type in composite literal")
					// Already progressed, no need to advance.
				}
				x = self.parseLiteralValue(x)
			|:
				ret x
			}
		}
	}

	fn parseUnaryExpr(mut self): &ast::Expr {
		if self.eof() {
			self.pushErr(self.lt, "expected operand")
			ret nil
		}
		match self.t.ID {
		| token::ADD | token::SUB | token::NOT | token::XOR | token::AND:
			mut t := self.t
			self.next()
			mut x := self.parseUnaryExpr()
			if x == nil {
				ret nil
			}
			ret &ast::Expr{
				Token: t,
				End: avoidNilExpr2(x),
				Data: &ast::UnaryExpr{
					Op: t,
					X: x,
				},
			}
		| token::ARROW:
			// Channel type or receive expression.
			mut arrow := self.t
			self.next()

			// If the next token is token::CHAN we still don't know if it
			// is a channel type or a receive operation - we only know
			// once we have found the end of the unary expression. There
			// are two cases:
			//
			//   <- type  => (<-type) must be channel type
			//   <- expr  => <-(expr) is a receive from an expression
			//
			// In the first case, the arrow must be re-associated with
			// the channel type parsed already:
			//
			//   <- (chan type)    =>  (<-chan type)
			//   <- (chan<- type)  =>  (<-chan (<-type))

			mut x := self.parseUnaryExpr()
			if x == nil {
				ret nil
			}

			// Determine which case we have.
			mut typ, mut ok := x.Data.(&ast::ChanType)
			if ok {
				// (<-type)

				// Re-associate position info and <- token.
				mut dir := ast::SEND
				for ok && dir == ast::SEND {
					if typ.Dir == ast::RECV {
						// error: (<-type) is (<-(<-chan T))
						self.pushErr(typ.Arrow, "expected chan <-")
					}
					arrow, typ.Arrow = typ.Arrow, arrow
					dir, typ.Dir = typ.Dir, ast::RECV
					typ, ok = typ.Value.Data.(&ast::ChanType)
				}
				if dir == ast::SEND {
					self.pushErr(arrow, "expected channel type")
				}

				ret x
			}

			// <-(expr)
			ret &ast::Expr{
				Token: arrow,
				End: avoidNilExpr2(x),
				Data: &ast::UnaryExpr{
					Op: arrow,
					X: x,
				},
			}
		| token::MUL:
			// Pointer type or unary "*" expression.
			mut t := self.t
			self.next()
			// Check for the unsafe pointer type.
			if !self.eof() && self.t.ID == token::UNSAFE {
				mut _unsafe := self.t
				self.next()
				ret &ast::Expr{
					Token: t,
					End: _unsafe,
					Data: &ast::UnaryExpr{
						Op: t,
						X: nil, // Set Expr as nil for unsafe pointer (*unsafe) type.
					},
				}
			}
			mut x := self.parseUnaryExpr()
			if x == nil {
				ret nil
			}
			ret &ast::Expr{
				Token: t,
				End: avoidNilExpr2(x),
				Data: &ast::UnaryExpr{
					Op: t,
					X: x,
				},
			}
		}

		ret self.parsePrimaryExpr(nil)
	}

	// Parses a (possibly) binary expression.
	// If x is non-nil, it is used as the left operand.
	fn parseBinaryExpr(mut self, mut x: &ast::Expr, prec1: int): &ast::Expr {
		if x == nil {
			x = self.parseUnaryExpr()
		}
		for {
			if self.eof() {
				ret x
			}
			mut op := self.t
			oprec := op.Precedence()
			if oprec < prec1 {
				ret x
			}
			self.next()
			mut y := self.parseBinaryExpr(nil, oprec+1)
			x = &ast::Expr{
				Token: avoidNilExpr(x),
				End: avoidNilExpr2(y),
				Data: &ast::BinaryExpr{
					X: x,
					Y: y,
					Op: op,
				},
			}
		}
	}

	fn parse(mut self): &ast::Expr {
		ret self.parseBinaryExpr(nil, lowestPrec+1)
	}

	// Parses (possibly) expression list.
	fn parseExprList(mut self): &ast::Expr {
		mut t := self.t
		let mut list: []&ast::Expr
		list = append(list, self.parse())
		for !self.eof() && self.t.ID == token::COMMA {
			self.next()
			list = append(list, self.parse())
		}
		if len(list) == 1 {
			ret list[0]
		}
		ret &ast::Expr{
			Token: t,
			End: avoidNilExpr2(list[len(list)-1]),
			Data: &ast::TupleExpr{
				X: list,
			},
		}
	}

	fn setForNewTokens(mut self, mut tokens: []&token::Token) {
		self.i = -1
		self.t = nil
		self.l = tokens
		self.next()
	}

	fn parseFromTokens(mut self, mut tokens: []&token::Token): &ast::Expr {
		if len(tokens) == 0 {
			ret nil
		}
		self.setForNewTokens(tokens)
		mut expr := self.parseExprList()
		if !self.eof() {
			// All tokens must be consumed.
			self.pushErr(self.t, "invalid syntax")
		}
		ret expr
	}
}

// Returns expression tokens comes before block if exist, nil if not.
fn getBlockExpr(mut &tokens: []&token::Token): []&token::Token {
	mut braceN := 0
	mut skipToNextBraceClose := 0
	for i, tok in tokens {
		match tok.ID {
		| token::UNSAFE:
			if len(tokens)-i > 1 && tokens[i+1].ID == token::LBRACE {
				skipToNextBraceClose++
			}
		| token::LBRACE:
			if braceN > 0 || skipToNextBraceClose > 0 {
				if skipToNextBraceClose > 0 {
					skipToNextBraceClose--
				}
				braceN++
				break
			}
			ret tokens[:i]
		| token::LBRACK
		| token::LPAREN:
			braceN++
		| token::RBRACE
		| token::RBRACK
		| token::RPAREN:
			braceN--
		}
	}
	ret nil
}

fn packIndexExpr(mut x: &ast::Expr, mut lbrack: &token::Token, mut exprs: []&ast::Expr, mut rbrack: &token::Token): &ast::Expr {
	match len(exprs) {
	| 0:
		panic("internal error: packIndexExpr with empty expr slice")
	| 1:
		ret &ast::Expr{
			Token: lbrack,
			End: rbrack,
			Data: &ast::IndexExpr{
				Token: rbrack,
				X: x,
				Index: exprs[0],
			},
		}
	|:
		ret &ast::Expr{
			Token: lbrack,
			End: rbrack,
			Data: &ast::IndexExpr{
				Token: rbrack,
				X: x,
				Index: &ast::Expr{
					Token: avoidNilExpr(exprs[0]),
					End: avoidNilExpr(exprs[len(exprs)-1]),
					Data: &ast::TupleExpr{
						X: exprs,
					},
				},
			},
		}
	}
}

fn avoidNilExpr(mut e: &ast::Expr): &token::Token {
	if e == nil {
		ret nil
	}
	ret e.Token
}

fn avoidNilExpr2(mut e: &ast::Expr): &token::Token {
	if e == nil {
		ret nil
	}
	ret e.End
}