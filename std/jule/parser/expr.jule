// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/token"
use "std/strings"

struct exprBuilder {
	p: &parser
}

impl exprBuilder {
	fn pushErr(mut self, token: &token::Token, fmt: build::LogMsg, args: ...any) {
		self.p.pushErr(token, fmt, args...)
	}

	// Push suggestion to last log.
	fn pushSuggestion(mut self, fmt: build::LogMsg, args: ...any) {
		self.p.pushSuggestion(fmt, args...)
	}

	fn buildTuple(mut self, mut &parts: [][]&token::Token): &ast::TupleExpr {
		mut tuple := &ast::TupleExpr{
			Expr: make([]&ast::Expr, 0, len(parts)),
		}
		for (_, mut part) in parts {
			tuple.Expr = append(tuple.Expr, self.buildFromTokens(part))
		}
		ret tuple
	}

	fn buildLit(self, mut token: &token::Token): &ast::LitExpr {
		ret &ast::LitExpr{
			Token: token,
			Value: token.Kind,
		}
	}

	fn buildPrimitiveType(self, mut &token: &token::Token): &ast::Type {
		ret buildPrimType(token)
	}

	fn buildSingle(mut self, mut token: &token::Token): ast::ExprData {
		match token.Id {
		| token::Id.Lit:
			ret self.buildLit(token)
		| token::Id.TripleDot:
			ret &ast::VariadicExpr{
				Token: token,
			}
		| token::Id.Ident
		| token::Id.Self
		| token::Id.Error:
			ret buildIdentExpr(token)
		}
		self.pushErr(token, build::LogMsg.InvalidSyntax)
		ret nil
	}

	fn buildBindIdent(mut self, mut &tokens: []&token::Token): &ast::IdentExpr {
		if tokens[0].Id != token::Id.Cpp {
			ret nil
		} else if tokens[1].Id != token::Id.Dot {
			self.pushErr(tokens[1], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedDotForBind)
			ret nil
		}
		mut token := tokens[2]

		// Save parser mode and check whether token is identifier.
		// Allow keywords for checking, then restore the mode immediately.
		mode := self.p.mode
		self.p.mode |= allowKeywordIdentifiers
		isIdent := self.p.isIdent(token)
		self.p.mode = mode

		if !isIdent {
			self.pushErr(tokens[2], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
			ret nil
		}

		mut expr := buildIdentExpr(token)
		expr.Binded = true
		ret expr
	}

	fn buildUnary(mut self, mut tokens: []&token::Token): &ast::UnaryExpr {
		mut op := tokens[0]
		if len(tokens) == 1 {
			self.pushErr(op, build::LogMsg.MissingExprForUnary)
			ret nil
		} else if !token::IsUnaryOp(op.Id) {
			self.pushErr(op, build::LogMsg.InvalidOpForUnary, op.Kind)
			ret nil
		}

		// Length is 1 cause all length of operator tokens is 1.
		// Change "1" with length of token's value
		// if all operators length is not 1.
		tokens = tokens[1:]

		ret &ast::UnaryExpr{
			Op: op,
			Expr: self.buildFromTokens(tokens),
		}
	}

	fn buildObjSubIdent(mut self, mut tokens: []&token::Token): &ast::SubIdentExpr {
		mut i := len(tokens) - 1
		mut identToken := tokens[i]
		i--                 // Set offset to delimiter token.
		tokens = tokens[:i] // Remove dot token and selected identifier token.
		if len(tokens) == 0 {
			self.pushErr(identToken, build::LogMsg.InvalidSyntax)
			ret nil
		}
		ret &ast::SubIdentExpr{
			Ident: identToken,
			Expr: self.buildFromTokens(tokens),
		}
	}

	fn buildNamespace(mut self, mut &tokens: []&token::Token): &ast::NamespaceExpr {
		mut ns := new(ast::NamespaceExpr)
		if len(tokens) > 3 {
			self.pushErr(tokens[3], build::LogMsg.InvalidSyntax)
		}
		ns.Namespace = tokens[0]
		if ns.Namespace.Id != token::Id.Ident && ns.Namespace.Id != token::Id.Unsafe {
			self.pushErr(ns.Namespace, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
		}
		if len(tokens) < 2 {
			self.pushErr(ns.Namespace, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedDblColon)
			ret nil
		}
		if tokens[1].Id != token::Id.DblColon {
			self.pushErr(tokens[1], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedDblColon)
			ret nil
		}
		if len(tokens) < 3 {
			self.pushErr(tokens[1], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
			ret nil
		}
		ns.Ident = tokens[2]
		if ns.Ident.Id != token::Id.Ident {
			self.pushErr(ns.Ident, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
			ret nil
		}
		ret ns
	}

	fn buildType(mut self, mut &tokens: []&token::Token): &ast::Type {
		mut i := 0
		mut t, ok := unsafe { self.p.buildType(tokens, &i, true) }
		if !ok {
			ret nil
		}
		if i < len(tokens) {
			self.pushErr(tokens[i], build::LogMsg.InvalidSyntax)
		}
		ret t
	}

	fn buildSubIdent(mut self, mut &tokens: []&token::Token): ast::ExprData {
		i := len(tokens) - 2 // Set offset to delimiter token.
		token := tokens[i]
		match token.Id {
		| token::Id.Dot:
			ret self.buildObjSubIdent(tokens)
		| token::Id.DblColon:
			ret self.buildNamespace(tokens)
		| token::Id.RBracket:
			// Catch slice, array, and map types.
			ret self.buildType(tokens)
		}

		// Caught anonymous functions.
		if isAnonFuncHead(tokens) {
			ret self.buildType(tokens)
		}

		self.pushErr(token, build::LogMsg.InvalidSyntax)
		ret nil
	}

	fn buildVariadic(mut self, mut tokens: []&token::Token): &ast::VariadicExpr {
		mut token := tokens[len(tokens)-1] // Variadic operator token.
		tokens = tokens[:len(tokens)-1]    // Remove variadic operator token.
		ret &ast::VariadicExpr{
			Token: token,
			Expr: self.buildFromTokens(tokens),
		}
	}

	fn buildBetweenParentheses(mut self, mut tokens: []&token::Token): &ast::RangeExpr {
		if len(tokens) == 2 {
			self.pushErr(tokens[0], build::LogMsg.MissingExpr)
			self.pushSuggestion(build::LogMsg.EmptyParentNotValid)
			ret nil
		}
		tokens = tokens[1 : len(tokens)-1] // Remove parentheses.
		ret &ast::RangeExpr{
			Expr: self.buildFromTokens(tokens),
		}
	}

	fn tryBuildCast(mut self, mut &tokens: []&token::Token): &ast::CastExpr {
		mut rangeN := 0
		for i, token in tokens {
			match token.Id {
			| token::Id.LBrace
			| token::Id.LBracket
			| token::Id.LParent:
				rangeN++
				continue
			| token::Id.RBrace
			| token::Id.RBracket
			| token::Id.RParent:
				rangeN--
			}

			if rangeN > 0 {
				continue
			} else if i+1 == len(tokens) {
				ret nil
			}

			mut typeTokens := tokens[:i+1]
			mut exprTokens := tokens[i+1:]

			if len(exprTokens) == 0 {
				// Expression is parentheses group.
				ret nil
			}

			tok := exprTokens[0]
			if tok.Id != token::Id.LParent {
				ret nil
			}

			mut cast := &ast::CastExpr{}

			// Expression tokens just parentheses.
			if len(exprTokens) == 2 {
				self.pushErr(exprTokens[0], build::LogMsg.MissingExpr)
				self.pushSuggestion(build::LogMsg.GiveExprToCast)
			}

			// Type tokens just parentheses.
			if len(typeTokens) == 2 {
				self.pushErr(typeTokens[0], build::LogMsg.MissingType)
				self.pushSuggestion(build::LogMsg.GiveTypeForCast)
			} else {
				typeTokens = typeTokens[1 : len(typeTokens)-1] // Remove parentheses.
				mut typeIndex := 0
				mut t, ok := unsafe { self.p.buildType(typeTokens, &typeIndex, true) }
				if ok && typeIndex < len(typeTokens) {
					self.pushErr(typeTokens[typeIndex], build::LogMsg.InvalidSyntax)
				} else if !ok {
					ret cast
				}
				cast.Kind = t

				if len(exprTokens) > 2 {
					// Remove parentheses.
					mut j := 0
					mut exprTokens2 := range(j, token::Id.LParent, token::Id.RParent, exprTokens)
					if len(exprTokens2) == 0 || j < len(exprTokens) {
						ret nil
					}
					cast.Expr = self.buildFromTokens(exprTokens2)
				}
			}
			ret cast
		}

		ret nil
	}

	fn buildArgs(mut self, mut tokens: []&token::Token): []&ast::Expr {
		// No argument.
		if len(tokens) < 2 {
			ret nil
		}
		tokens = tokens[1 : len(tokens)-1] // Remove parentheses.
		mut parts, errs := parts(tokens, token::Id.Comma, true)
		self.p.errors = append(self.p.errors, errs...)
		mut args := make([]&ast::Expr, 0, len(parts))
		for (_, mut part) in parts {
			if len(part) > 0 {
				args = append(args, self.buildFromTokens(part))
			}
		}
		ret args
	}

	fn buildFuncCall(mut self, mut &token: &token::Token, mut &expr: []&token::Token, mut &args: []&token::Token): &ast::FuncCallExpr {
		ret &ast::FuncCallExpr{
			Token: token,
			Expr: self.buildFromTokens(expr),
			Args: self.buildArgs(args),
		}
	}

	fn buildTypeAssertion(mut self, mut &exprTokens: []&token::Token, mut &typeTokens: []&token::Token): &ast::TypeAssertionExpr {
		exprTokens = exprTokens[:len(exprTokens)-1] // Remove trailing dot.
		mut expr := self.buildFromTokens(exprTokens)
		if expr == nil {
			ret nil
		}
		typeTokens = typeTokens[1 : len(typeTokens)-1] // Remove parentheses.
		mut t := self.buildType(typeTokens)
		if t == nil {
			ret nil
		}
		ret &ast::TypeAssertionExpr{
			Expr: expr,
			Kind: t,
		}
	}

	fn buildParenthesesRange(mut self, mut &tokens: []&token::Token): ast::ExprData {
		mut token := tokens[0]
		if token.Id == token::Id.LParent {
			mut expr := self.tryBuildCast(tokens)
			if expr != nil {
				ret expr
			}
		}
		mut exprTokens, mut argsTokens := rangeLast(tokens)
		// Expression is parentheses group if exprTokens is zero.
		// argsTokens holds tokens of parentheses range (include parentheses).
		if len(exprTokens) == 0 {
			ret self.buildBetweenParentheses(argsTokens)
		}
		// Catch type assertions.
		if exprTokens[len(exprTokens)-1].Id == token::Id.Dot {
			ret self.buildTypeAssertion(exprTokens, argsTokens)
		}
		// Catch anonymous function types.
		if isAnonFuncHead(exprTokens) {
			ret self.buildType(tokens)
		}
		ret self.buildFuncCall(token, exprTokens, argsTokens)
	}

	fn buildUnsafeExpr(mut self, mut tokens: []&token::Token): &ast::UnsafeExpr {
		mut token := tokens[0]
		tokens = tokens[1:] // Remove unsafe keyword.
		mut i := 0
		mut rangeTokens := range(i, token::Id.LBrace, token::Id.RBrace, tokens)
		if len(rangeTokens) == 0 {
			self.pushErr(tokens[0], build::LogMsg.MissingExpr)
			ret nil
		}
		ret &ast::UnsafeExpr{
			Token: token,
			Expr: self.buildFromTokens(rangeTokens),
		}
	}

	fn buildAnonFunc(mut self, mut &tokens: []&token::Token): &ast::Func {
		mut f := self.p.buildFunc(tokens, false, false)
		if f != nil && !f.IsAnon() {
			self.pushErr(f.Token, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedAnonFunc)
		}
		ret f
	}

	fn buildUnsafe(mut self, mut &tokens: []&token::Token): ast::ExprData {
		match tokens[1].Id {
		| token::Id.Fn:
			// Unsafe anonymous function.
			ret self.buildAnonFunc(tokens)
		|:
			ret self.buildUnsafeExpr(tokens)
		}
	}

	fn pushRangeLitPart(mut self, mut part: []&token::Token,
		errorToken: &token::Token, mut &parts: [][]&token::Token) {
		if len(part) == 0 {
			self.pushErr(errorToken, build::LogMsg.MissingExpr)
			self.pushSuggestion(build::LogMsg.ExpectedExpr)
			ret
		}
		parts = append(parts, part)
	}

	// Tokens should include brace tokens.
	fn getBraceRangeLitExprParts(mut self, mut tokens: []&token::Token): [][]&token::Token {
		// No part.
		if len(tokens) < 2 {
			ret nil
		}

		let mut parts: [][]&token::Token = nil

		mut last := 0
		mut rangeN := 0
		tokens = tokens[1 : len(tokens)-1] // Remove parentheses.
		for i, token in tokens {
			match token.Id {
			| token::Id.LBrace
			| token::Id.LBracket
			| token::Id.LParent:
				rangeN++
			| token::Id.RBrace
			| token::Id.RBracket
			| token::Id.RParent:
				rangeN--
			}
			if rangeN > 0 || token.Id != token::Id.Comma {
				continue
			}
			self.pushRangeLitPart(tokens[last:i], token, parts)
			last = i + 1
		}

		if last < len(tokens) {
			if last == 0 {
				if len(tokens) > 0 {
					self.pushRangeLitPart(tokens[last:], tokens[last], parts)
				}
			} else {
				self.pushRangeLitPart(tokens[last:], tokens[last-1], parts)
			}
		}

		ret parts
	}

	fn buildTypedStructLiteral(mut self, mut tokens: []&token::Token): &ast::TypedBraceLit {
		mut i := 0
		mut t, ok := unsafe { self.p.buildType(tokens, &i, true) }
		if !ok {
			ret nil
		} else if i >= len(tokens) {
			self.pushErr(tokens[i], build::LogMsg.InvalidSyntax)
			ret nil
		}

		tokens = tokens[i:] // Remove type tokens.
		token := tokens[0]
		if token.Id != token::Id.LBrace {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret nil
		}
		ret &ast::TypedBraceLit{
			Kind: t,
			Lit: self.buildBraceLit(tokens),
		}
	}

	fn buildBraceLitPart(mut self, mut &tokens: []&token::Token): &ast::Expr {
		mut l, mut r := splitDelim(tokens, token::Id.Colon)
		// If left is not nil, colon token found.
		if l != nil {
			if len(r) == 0 {
				self.pushErr(tokens[len(l)], build::LogMsg.MissingExpr)
				self.pushSuggestion(build::LogMsg.ExpectedExpr)
				ret nil
			}
			ret &ast::Expr{
				Token: tokens[0],
				End: tokens[len(tokens)-1],
				Kind: &ast::KeyValPair{
					Colon: tokens[len(l)],
					Key: self.buildFromTokens(l),
					Val: self.buildFromTokens(r),
				},
			}
		}
		ret self.buildFromTokens(tokens)
	}

	fn buildBraceLit(mut self, mut &tokens: []&token::Token): &ast::BraceLit {
		mut lit := &ast::BraceLit{
			Token: tokens[0],
			End: tokens[len(tokens)-1],
		}

		mut parts := self.getBraceRangeLitExprParts(tokens)
		if parts == nil {
			ret lit
		}

		lit.Exprs = make([]&ast::Expr, 0, len(parts))
		for (_, mut part) in parts {
			lit.Exprs = append(lit.Exprs, self.buildBraceLitPart(part))
		}

		ret lit
	}

	fn buildBraceRange(mut self, mut &tokens: []&token::Token): ast::ExprData {
		mut exprTokens, rangeN := getRangeExprTokens(tokens)

		match {
		| len(exprTokens) == 0:
			ret self.buildBraceLit(tokens)
		| rangeN > 0:
			self.pushErr(tokens[0], build::LogMsg.InvalidSyntax)
			ret nil
		}

		// Exceptional handling.
		elseToken := exprTokens[len(exprTokens)-1]
		if exprTokens[len(exprTokens)-1].Id == token::Id.Else {
			exprTokens = exprTokens[:len(exprTokens)-1] // Ignore keyword "else"
			mut d := self.build(exprTokens)
			if d == nil {
				ret nil
			}
			mut model, ok := d.(&ast::FuncCallExpr)
			if !ok {
				self.pushErr(exprTokens[0], build::LogMsg.InvalidSyntax)
				ret nil
			}
			tokens = tokens[len(exprTokens)+1:] // Get range: {...}
			mut i := 0
			mut rangeTokens := range(i, token::Id.LBrace, token::Id.RBrace, tokens)
			if model.Ignored() {
				self.pushErr(elseToken, build::LogMsg.InvalidSyntax)
				self.pushSuggestion(build::LogMsg.JustIgnoreOrHandle)
			}
			model.Exception = self.p.buildScope(rangeTokens, tokens[i-1])
			ret d
		}

		match exprTokens[0].Id {
		| token::Id.Unsafe:
			ret self.buildUnsafe(tokens)
		| token::Id.Fn:
			ret self.buildAnonFunc(tokens)
		| token::Id.Map | token::Id.Ident | token::Id.Cpp:
			ret self.buildTypedStructLiteral(tokens)
		|:
			self.pushErr(exprTokens[0], build::LogMsg.InvalidSyntax)
			ret nil
		}
	}

	// Tokens is should be store enumerable range tokens.
	fn getEnumerableParts(mut self, mut tokens: []&token::Token): [][]&token::Token {
		tokens = tokens[1 : len(tokens)-1] // Remove range tokens.
		mut parts, errors := parts(tokens, token::Id.Comma, true)
		self.p.errors = append(self.p.errors, errors...)
		ret parts
	}

	fn buildSlice(mut self, mut tokens: []&token::Token): &ast::SliceExpr {
		mut slc := &ast::SliceExpr{
			Token: tokens[0],
			End: tokens[len(tokens)-1],
		}

		mut parts := self.getEnumerableParts(tokens)
		if len(parts) == 0 {
			ret slc
		}

		slc.Exprs = make([]&ast::Expr, 0, len(parts))
		for (_, mut p) in parts {
			if len(p) == 0 {
				continue
			}
			slc.Exprs = append(slc.Exprs, self.buildFromTokens(p))
		}

		ret slc
	}

	fn buildIndexing(mut self, mut exprTokens: []&token::Token,
		mut tokens: []&token::Token, mut errorToken: &token::Token): &ast::IndexingExpr {
		mut end := tokens[len(tokens)-1]
		tokens = tokens[1 : len(tokens)-1] // Remove brackets.
		if len(tokens) == 0 {
			self.pushErr(errorToken, build::LogMsg.MissingExpr)
			ret nil
		}
		mut expr := self.buildFromTokens(exprTokens)
		if expr == nil {
			ret nil
		}
		mut index := self.buildFromTokens(tokens)
		if index == nil {
			ret nil
		}
		ret &ast::IndexingExpr{
			Token: errorToken,
			End: end,
			Expr: expr,
			Index: index,
		}
	}

	fn buildSlicing(mut self, mut &exprTokens: []&token::Token, mut &start: []&token::Token,
		mut to: []&token::Token, mut &errorToken: &token::Token, mut end: &token::Token): &ast::SlicingExpr {
		mut slc := &ast::SlicingExpr{
			Token: errorToken,
			End: end,
			Expr: self.buildFromTokens(exprTokens),
		}
		if len(start) > 0 {
			slc.Start = self.buildFromTokens(start)
		}
		if len(to) > 0 {
			mut to2, mut cap := splitDelim(to, token::Id.Colon) // Catch cap-limit index.
			if len(to2) > 0 || len(cap) > 0 {
				if len(to2) > 0 {
					slc.To = self.buildFromTokens(to2)
				} else {
					panic("unreachable")
				}
				if len(cap) > 0 {
					slc.Cap = self.buildFromTokens(cap)
				} else {
					self.pushErr(errorToken, build::LogMsg.FinalIndexRequired)
				}
			} else {
				slc.To = self.buildFromTokens(to)
			}
		}
		ret slc
	}

	fn buildBracketRange(mut self, mut tokens: []&token::Token): ast::ExprData {
		mut errorToken := tokens[0]
		mut exprTokens, rangeN := getRangeExprTokens(tokens)

		if len(exprTokens) == 0 {
			ret self.buildSlice(tokens)
		} else if rangeN > 0 {
			self.pushErr(errorToken, build::LogMsg.InvalidSyntax)
			ret nil
		}

		// Remove expression tokens.
		// Holds only indexing tokens.
		// Includes brackets.
		tokens = tokens[len(exprTokens):]

		// Catch slicing expressions.
		mut splitTokens := tokens[1 : len(tokens)-1] // Remove brackets.
		mut start, mut to := splitDelim(splitTokens, token::Id.Colon)
		if start != nil || to != nil {
			ret self.buildSlicing(exprTokens, start, to, errorToken, tokens[len(tokens)-1])
		}
		if tokens[1].Id == token::Id.DblColon {
			// Special case: catch x[::] and x[::index3] like expressions.
			self.pushErr(errorToken, build::LogMsg.MiddleIndexRequired)
			ret nil
		}
		ret self.buildIndexing(exprTokens, tokens, errorToken)
	}

	fn buildExclRight(mut self, mut &tokens: []&token::Token): ast::ExprData {
		token := tokens[len(tokens)-1]
		tokens = tokens[:len(tokens)-1] // Ignore "!" token.
		mut d := self.build(tokens)
		if d == nil {
			ret nil
		}
		mut f, ok := d.(&ast::FuncCallExpr)
		if !ok {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret nil
		}
		// Catch already ignored exceptional calls.
		// Like: foo()!!!!
		//         the ^^^ part is unnecessary and invalid
		if f.Ignored() {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret nil
		} else {
			f.Exception = &ast::ScopeTree{
				Deferred: true,
			}
		}
		ret d
	}

	// First token should be "<-" of the tokens.
	fn buildChanRecv(mut self, mut &tokens: []&token::Token): &ast::ChanRecv {
		if len(tokens) == 1 {
			// Expression is just "<-", invalid syntax.
			self.pushErr(tokens[0], build::LogMsg.InvalidSyntax)
			ret nil
		}
		mut expr := self.buildFromTokens(tokens[1:])
		if expr == nil {
			ret nil
		}
		ret &ast::ChanRecv{
			Expr: expr,
		}
	}

	fn buildData(mut self, mut &tokens: []&token::Token): ast::ExprData {
		match len(tokens) {
		| 0:
			ret nil
		| 1:
			ret self.buildSingle(tokens[0])
		| 3:
			if tokens[0].Id == token::Id.Cpp {
				ret self.buildBindIdent(tokens)
			}
		}

		mut token := tokens[len(tokens)-1]
		if token.Id == token::Id.TripleDot {
			ret self.buildVariadic(tokens)
		}

		token = tokens[0]
		match token.Id {
		| token::Id.RArrow:
			if len(tokens) > 1 && tokens[1].Id != token::Id.Chan {
				ret self.buildChanRecv(tokens)
			}
			fall
		| token::Id.Chan:
			// Handle channel type declaration.
			ret self.buildType(tokens)
		}

		// Unary operators.
		if token::IsUnaryOp(token.Id) {
			// Handle pointer to primitive type.
			if len(tokens) > 1 {
				token = tokens[1]
				if token.Id == token::Id.Unsafe {
					ret self.buildType(tokens)
				}
			}
			ret self.buildUnary(tokens)
		}

		if len(tokens) >= 3 {
			token = tokens[0]
			match token.Id {
			| token::Id.LParent
			| token::Id.LBrace
			| token::Id.LBracket:
				// Catch type casting.
				if len(tokens) > 3 {
					t := tokens[len(tokens)-1]
					if t.Id == token::Id.RParent {
						break
					}
				}
				if tokens[1].Id == token::Id.RBracket {
					ret self.buildType(tokens)
				}
			}
		}

		token = tokens[len(tokens)-1]
		match token.Id {
		| token::Id.Ident:
			ret self.buildSubIdent(tokens)
		| token::Id.Excl:
			ret self.buildExclRight(tokens)
		| token::Id.RParent:
			ret self.buildParenthesesRange(tokens)
		| token::Id.RBrace:
			ret self.buildBraceRange(tokens)
		| token::Id.RBracket:
			ret self.buildBracketRange(tokens)
		}
		self.pushErr(token, build::LogMsg.InvalidSyntax)
		ret nil
	}

	fn buildBinary(mut self, mut &tokens: []&token::Token, i: int): ast::ExprData {
		mut op := tokens[i]
		mut leftTokens := tokens[:i]
		if isTypeOp(op.Id) && isTypeRange(leftTokens) {
			// Catch slice and array types.
			ret self.buildType(tokens)
		}
		if len(leftTokens) == 0 {
			self.pushErr(tokens[i], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedLeftOperand)
			ret nil
		}
		mut rightTokens := tokens[i+1:]
		if len(rightTokens) == 0 {
			self.pushErr(tokens[i], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedRightOperand)
			ret nil
		}
		ret &ast::BinaryExpr{
			Left: self.buildFromTokens(leftTokens),
			Right: self.buildFromTokens(rightTokens),
			Op: op,
		}
	}

	fn build(mut self, mut &tokens: []&token::Token): ast::ExprData {
		i := findLowestPrecOp(tokens)
		if i == -1 {
			ret self.buildData(tokens)
		}
		ret self.buildBinary(tokens, i)
	}

	fn buildKind(mut self, mut &tokens: []&token::Token): ast::ExprData {
		mut parts, errors := parts(tokens, token::Id.Comma, true)
		if errors != nil {
			self.p.errors = append(self.p.errors, errors...)
			ret nil
		} else if len(parts) > 1 {
			ret self.buildTuple(parts)
		}
		ret self.build(tokens)
	}

	fn buildFromTokens(mut self, mut tokens: []&token::Token): &ast::Expr {
		if len(tokens) == 0 {
			ret nil
		}
		mut kind := self.buildKind(tokens)
		if kind == nil {
			ret nil
		}
		ret &ast::Expr{
			Token: tokens[0],
			End: tokens[len(tokens)-1],
			Kind: kind,
		}
	}
}

// Reports whether kind is potentially part of a type declaration.
fn isTypeOp(&id: token::Id): bool {
	ret id == token::Id.Amper ||
		id == token::Id.DblAmper ||
		id == token::Id.Star ||
		id == token::Id.Chan ||
		id == token::Id.RArrow
}

// Reports whether range is potentially part of a type declaration.
fn isTypeRange(mut &tokens: []&token::Token): bool {
	mut op := false
	for i, token in tokens {
		if token.Id == token::Id.LBracket {
			if op {
				ret true
			}
			mut rangeN := 0
			mut lTokens := tokens[i:]
			for _, lToken in lTokens {
				match lToken.Id {
				| token::Id.LBracket:
					rangeN++
					continue
				| token::Id.RBracket:
					rangeN--
					continue
				}
				if rangeN == 0 {
					ret isTypeOp(lToken.Id)
				}
			}
			ret true
		}
		if !isTypeOp(token.Id) {
			ret false
		}
		op = true
	}
	ret true
}

// Returns expression tokens comes before block if exist, nil if not.
fn getBlockExpr(mut &tokens: []&token::Token): []&token::Token {
	mut braceN := 0
	mut skipToNextBraceClose := 0
	for i, tok in tokens {
		match tok.Id {
		| token::Id.Unsafe:
			if len(tokens)-i > 1 && tokens[i+1].Id == token::Id.LBrace {
				skipToNextBraceClose++
			}
		| token::Id.LBrace:
			if braceN > 0 || skipToNextBraceClose > 0 {
				if skipToNextBraceClose > 0 {
					skipToNextBraceClose--
				}
				braceN++
				break
			}
			ret tokens[:i]
		| token::Id.LBracket
		| token::Id.LParent:
			braceN++
		| token::Id.RBrace
		| token::Id.RBracket
		| token::Id.RParent:
			braceN--
		}
	}
	ret nil
}

// Returns delimiter index, left range and right range tokens.
// Returns nil slice and -1 if not found.
fn splitDelim(mut &tokens: []&token::Token, delim: token::Id): ([]&token::Token, []&token::Token) {
	mut func := -1
	mut rangeN := 0
	mut i := 0
	for i < len(tokens); i++ {
		token := tokens[i]
		match token.Id {
		| token::Id.Fn:
			func = rangeN
		| token::Id.LBrace
		| token::Id.LBracket
		| token::Id.LParent:
			rangeN++
			continue
		| token::Id.RParent:
			rangeN--
			if func == rangeN {
				func = -1
				// Skip colon token if function built.
				if len(tokens)-i > 1 && tokens[i+1].Id == token::Id.Colon {
					i++
					continue
				}
			}
		| token::Id.RBrace
		| token::Id.RBracket:
			rangeN--
		}
		if token.Id == delim && rangeN == 0 {
			mut l := tokens[:i]
			mut r := tokens[i+1:]
			ret l, r
		}
	}
	ret nil, nil
}

// Finds index of priority operator and returns index of operator
// if found, returns -1 if not.
fn findLowestPrecOp(tokens: []&token::Token): int {
	// Set to max byte value, there is nothing for precedence it.
	// It's provides optimization, avoid prec != -1 (if not set) checking.
	// Always greater than actual precedences.
	// So, It's will initialized by first precedence without any checking that if not set.
	const MaxPrec = byte(255)
	mut prec := MaxPrec
	mut precPos := -1
	mut op := true // Ready to read operator.

	mut braceN := 0
	mut skipToNextBraceOpen := false

	// Skips all unary operators of tokens by i and increases the i for each token.
	// At the end, i will point to last skipped unary operator, if any.
	// Reports whether any token skipped.
	skipunary := fn(mut &i: int): bool {
		mut inc := false
		for i < len(tokens) {
			if token::IsUnaryOp(tokens[i].Id) {
				i++
				inc = true
			} else {
				if inc {
					i--
				}
				break
			}
		}
		ret inc
	}

	mut i := 0
	// Skip the unary operators of the beginning.
	// If skipped any operator, point to correct start token.
	if skipunary(i) {
		i++
	}
	for i < len(tokens); i++ {
		token := tokens[i]
		match token.Id {
		| token::Id.LBrace:
			op = true
			skipToNextBraceOpen = false
			fall
		| token::Id.LParent
		| token::Id.LBracket:
			op = true
			braceN++
			skipunary(i) // Skip the unary expressions of the range's beginning.
			continue
		| token::Id.RParent:
			// For the closing parentheses range, it might be a function call.
			// Therefore, we need to handle ! operators.
			// Allow multiple EXCL operator here,
			// error logging should be handled by expression parser.
			i++ // Skip the range closer token.
			for i < len(tokens); i++ {
				if tokens[i].Id != token::Id.Excl {
					break
				}
			}
			i-- // Fallback to the range closer token or last skipped unary operator.
			fall // Fallback to ordinary range closing algorithm.
		| token::Id.RBrace
		| token::Id.RBracket:
			op = true
			braceN--
			continue
		| token::Id.If:
			skipToNextBraceOpen = true
			continue
		}
		match {
		| skipToNextBraceOpen:
			continue
		| i == 0:
			continue
		| braceN > 0:
			continue
		| !token::IsBinOp(token.Id):
			op = true
			continue
		| !op:
			continue
		}

		// Skip type annotations.
		left := tokens[i-1]
		if left.Id == token::Id.Colon {
			continue
		}
		if i > 1 && left.Id == token::Id.RBracket {
			lleft := tokens[i-2]
			if lleft.Id == token::Id.LBracket {
				// Skip potential type annotations.
				if token.Id == token::Id.Amper || token.Id == token::Id.Star {
					continue
				}
			}
		}

		op = false
		p := token.Prec()
		if p != 0 && p <= prec {
			prec = p
			precPos = i
		}

		// After binary expression, skip the unary operators of the following operand.
		skipunary(i)
	}
	ret precPos
}

fn buildIdentExpr(mut &token: &token::Token): &ast::IdentExpr {
	ret &ast::IdentExpr{
		Token: token,
		Ident: token.Kind,
		Binded: false,
	}
}

fn getRangeExprTokens(mut &tokens: []&token::Token): ([]&token::Token, int) {
	mut rangeN := 0
	mut i := len(tokens) - 1
	for i >= 0; i-- {
		tok := tokens[i]
		match tok.Id {
		| token::Id.RBrace
		| token::Id.RBracket
		| token::Id.RParent:
			rangeN++
		| token::Id.LBrace
		| token::Id.LBracket
		| token::Id.LParent:
			rangeN--
		}

		if rangeN == 0 {
			ret tokens[:i], rangeN
		}
	}
	ret nil, rangeN
}

fn isAnonFuncHead(&tokens: []&token::Token): bool {
	match tokens[0].Id {
	| token::Id.Unsafe:
		if len(tokens) == 1 || tokens[1].Id != token::Id.Fn {
			break
		}
		fall
	| token::Id.Fn:
		if tokens[len(tokens)-1].Id == token::Id.RBrace {
			// Not function type declaration, anonymous function expression.
			break
		}
		ret true
	}
	ret false
}