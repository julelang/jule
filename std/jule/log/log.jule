// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/conv"
use "std/strings"

// Log kinds.
const (
	Flat  = iota // Just text.
	Error        // Error message.
)

// Compiler log.
struct Log {
	Kind:       int
	Row:        int
	Column:     int
	Path:       str
	Text:       str
	Line:       str
	Suggestion: str
}

// Returns formatted error message by fmt and args.
fn Logf(fmt: str, args: ...any): str {
	ret applyFmt(fmt, args...)
}

fn argToStr(arg: any): str {
	match type arg {
	| str:
		ret arg.(str)
	| byte:
		ret str(arg.(byte))
	| rune:
		ret str(arg.(rune))
	| int:
		ret conv::Itoa(arg.(int))
	|:
		ret "<fmt?>"
	}
}

fn findNextFmt(fmt: str): int {
	for i, b in fmt {
		if b == '@' {
			ret i
		}
	}
	ret -1
}

fn applyFmt(mut fmt: str, args: ...any): str {
	mut s := strings::Builder{}
	s.Grow(1 << 5)
	for _, arg in args {
		i := findNextFmt(fmt)
		if i == -1 {
			break
		}
		s.WriteStr(fmt[:i])!
		s.WriteStr(argToStr(arg))!
		fmt = fmt[i+1:]
	}
	s.WriteStr(fmt)!
	ret s.Str()
}