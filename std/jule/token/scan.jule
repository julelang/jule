// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/ubuf"
use "std/jule/log"
use "std/unicode"
use "std/unicode/utf8"
use "std/unsafe"

// Lexer mode.
const (
	Standard = 1 << iota // Standard mode.
	Comments             // Standard mode + comments.
)

const (
	bom = 0xFEFF // byte order mark, only permitted as very first character
	eof = -1     // end of file
)

struct kindPair {
	kind: str
	id:   int
}

let keywords = map[str]int{
	"const": CONST,
	"ret": RET,
	"type": TYPE,
	"for": FOR,
	"break": BREAK,
	"continue": CONTINUE,
	"in": IN,
	"if": IF,
	"else": ELSE,
	"use": USE,
	"goto": GOTO,
	"enum": ENUM,
	"struct": STRUCT,
	"co": CO,
	"match": MATCH,
	"self": SELF,
	"trait": TRAIT,
	"impl": IMPL,
	"chan": CHAN,
	"cpp": BIND,
	"fall": FALL,
	"fn": FN,
	"let": LET,
	"unsafe": UNSAFE,
	"mut": MUT,
	"defer": DEFER,
	"error": ERROR,
	"map": MAP,
	"select": SELECT,
}

// Scanner scans tokens from FileSet data.
// Any log will be appended to [Scanner.Logs].
struct Scanner {
	opt:      int
	f:        &FileSet
	buf:      ubuf::Ubuf // buffer to scan
	offset:   int        // position of current rune
	rdOffset: int        // read position
	row:      int        // total count of rows
	col:      int        // current column
	r:        rune       // current rune

	Logs: []log::Log // Scan logs.
}

impl Scanner {
	// Returns new Scanner for the FileSet f.
	fn New(mut f: &FileSet, opt: int): &Scanner {
		mut scan := new(Scanner)
		if f != nil {
			scan.f = f
			scan.buf.SetData(f.data)
		}
		scan.opt = opt
		scan.row = 1
		scan.col = 0
		scan.r = ' '
		ret scan
	}

	// Pushes new error log to logs.
	fn pushErr(mut self, i: int, fmt: str, args: ...any) {
		self.Logs = append(self.Logs, log::Log{
			Kind: log::Error,
			Row: self.row,
			Column: i + 1,
			Path: self.f.Path,
			Text: log::Logf(fmt, args...),
		})
	}

	// Adds new line.
	fn addLine(mut self) {
		self.row++
		self.col = 0
	}

	// Returns the next rune without advance scanning.
	fn peek(mut self): rune {
		if self.rdOffset >= self.buf.Len() {
			ret eof
		}
		mut r := rune(self.buf.Get(self.rdOffset))
		// not ASCII
		if r >= utf8::RuneSelf {
			r, _ = utf8::DecodeRune(self.buf.Slice1(self.rdOffset))
		}
		ret r
	}

	// Returns the next rune without advance scanning.
	fn peek2(mut self): (rune, int) {
		if self.rdOffset >= self.buf.Len() {
			ret eof, 0
		}
		mut r, mut w := rune(self.buf.Get(self.rdOffset)), 1
		// not ASCII
		if r >= utf8::RuneSelf {
			r, w = utf8::DecodeRune(self.buf.Slice1(self.rdOffset))
		}
		ret r, w
	}

	// Read the next Unicode char into self.r.
	// self.r < 0 means end-of-file.
	//
	// For optimization, there is some overlap between this method and self.scanName.
	fn next(mut self) {
		if self.rdOffset >= self.buf.Len() {
			if self.r == '\n' {
				self.addLine()
			}
			self.offset = self.buf.Len()
			self.r = eof
			ret
		}
		if self.r == '\n' {
			self.addLine()
		}
		self.offset = self.rdOffset
		mut r, mut w := rune(self.buf.Get(self.rdOffset)), 1
		match {
		| r == 0:
			self.pushErr(self.offset, "illegal character NUL")
		| r >= utf8::RuneSelf:
			// not ASCII
			r, w = utf8::DecodeRune(self.buf.Slice1(self.rdOffset))
			if r == utf8::RuneError && w == 1 {
				self.pushErr(self.offset, "illegal UTF-8 encoding")
			} else if r == bom && self.offset > 0 {
				self.pushErr(self.offset, "illegal byte order mask")
			}
		}
		self.rdOffset += w
		self.col++
		self.r = r
	}

	fn skipWhitespace(mut self) {
		for self.r == ' ' || self.r == '\t' || self.r == '\n' || self.r == '\r' {
			self.next()
		}
	}

	fn scanLineComment(mut self, mut &token: &Token) {
		offs := self.offset - 1 // leading '/' consumed
		token.ID = COMMENT
		for {
			self.next()
			if self.r == eof || self.r == '\n' {
				token.Kind = unsafe::StrFromBytes(self.buf.Slice2(offs, self.offset))
				ret
			}
		}
	}

	fn scanRangeComment(mut self, mut &token: &Token) {
		offs := self.offset - 1 // leading '/' consumed
		for {
			self.next()
			if self.r == eof {
				break
			}
			if self.r == '*' {
				self.next()
				if self.r != eof && self.r == '/' {
					self.next()
					token.ID = COMMENT
					token.Kind = unsafe::StrFromBytes(self.buf.Slice2(offs, self.offset))
					ret
				}
			}
		}
		self.pushErr(offs, log::MissingBlockCommentClose)
	}

	// Reads the string of valid identifier characters at self.offset.
	// It must only be called when self.r is known to be a valid letter.
	//
	// Be careful when making changes to this function: it is optimized and affects
	// scanning performance significantly.
	fn scanName(mut self, mut &token: &Token): bool {
		offs := self.offset

		// Optimize for the common case of an ASCII identifier.
		//
		// Ranging over self.buf.Slice1(self.rdOffset) lets us avoid some bounds checks, and
		// avoids conversions to runes.
		//
		// In case we encounter a non-ASCII character, fall back on the slower path
		// of calling into self.next().
		for rdOffset, b in self.buf.Slice1(self.rdOffset) {
			if 'a' <= b && b <= 'z' || 'A' <= b && b <= 'Z' || b == '_' || '0' <= b && b <= '9' {
				// Avoid assigning a rune for the common case of an ascii character.
				continue
			}
			self.rdOffset += rdOffset
			self.col += rdOffset
			if 0 < b && b < utf8::RuneSelf {
				// Optimization: we've encountered an ASCII character that's not a letter
				// or number. Avoid the call into self.next() and corresponding set up.
				//
				// Note that self.next() does some line accounting if self.r is '\n', so this
				// shortcut is only possible because we know that the preceding character
				// is not '\n'.
				self.r = rune(b)
				self.offset = self.rdOffset
				self.rdOffset++
				self.col++
				goto exit
			}
			// We know that the preceding character is valid for an identifier because
			// scanName is only called when self.r is a letter, so calling self.next()
			// at self.rdOffset resets the scanner state.
			self.next()
			for isLetter(self.r) || isDigit(self.r) {
				self.next()
			}
			goto exit
		}
		self.offset = self.buf.Len()
		self.rdOffset = self.buf.Len()
		self.r = eof

	exit:
		token.ID = NAME
		token.Kind = unsafe::StrFromBytes(self.buf.Slice2(offs, self.offset))
		ret true
	}

	// digits accepts the sequence { digit | '_' }.
	// If base <= 10, digits accepts any decimal digit but records
	// the offset (relative to the source start) of a digit >= base
	// in *invalid, if *invalid < 0.
	// digits returns a bitset describing whether the sequence contained
	// digits (bit 0 is set), or separators '_' (bit 1 is set).
	fn digits(mut self, base: int, mut &invalid: int): (digsep: int) {
		if base <= 10 {
			max := rune('0' + base)
			for isDecimal(self.r) || self.r == '_' {
				mut ds := 1
				if self.r == '_' {
					ds = 2
				} else if self.r >= max && invalid < 0 {
					invalid = self.offset // record invalid rune offset
				}
				digsep |= ds
				self.next()
			}
		} else {
			for isHex(self.r) || self.r == '_' {
				mut ds := 1
				if self.r == '_' {
					ds = 2
				}
				digsep |= ds
				self.next()
			}
		}
		ret
	}

	fn scanNumber(mut self, mut &token: &Token) {
		offs := self.offset
		mut base := 10        // number base
		mut prefix := rune(0) // one of 0 (decimal), '0' (0-octal), 'x', 'o', or 'b'
		mut digsep := 0       // bit 0: digit present, bit 1: '_' present
		mut invalid := -1     // index of invalid digit in literal, or < 0
		mut float := false    // is floating-point literal

		// integer part
		if self.r != '.' {
			if self.r == '0' {
				self.next()
				match lower(self.r) {
				| 'x':
					self.next()
					base, prefix = 16, 'x'
				| 'o':
					self.next()
					base, prefix = 8, 'o'
				| 'b':
					self.next()
					base, prefix = 2, 'b'
				|:
					base, prefix = 8, '0'
					digsep = 1 // leading 0
				}
			}
			digsep |= self.digits(base, invalid)
		}

		// fractional part
		if self.r == '.' {
			float = true
			if prefix == 'o' || prefix == 'b' {
				self.pushErr(self.offset, "invalid radix point in "+litname(prefix))
			}
			self.next()
			digsep |= self.digits(base, invalid)
		}

		if digsep&1 == 0 {
			self.pushErr(self.offset, litname(prefix)+" has no digits")
		}

		// exponent
		e := lower(self.r)
		if e == 'e' || e == 'p' {
			match {
			| e == 'e' && prefix != 0 && prefix != '0':
				self.pushErr(self.offset, "{} exponent requires decimal mantissa", self.r)
			| e == 'p' && prefix != 'x':
				self.pushErr(self.offset, "{} exponent requires hexadecimal mantissa", self.r)
			}
			self.next()
			float = true
			if self.r == '+' || self.r == '-' {
				self.next()
			}
			mut _invalid := 0
			ds := self.digits(10, _invalid)
			digsep |= ds
			if ds&1 == 0 {
				self.pushErr(self.offset, "exponent has no digits")
			}
		} else if prefix == 'x' && float {
			self.pushErr(self.offset, "hexadecimal mantissa requires a 'p' exponent")
		}

		lit := unsafe::StrFromBytes(self.buf.Slice2(offs, self.offset))
		if !float && invalid >= 0 {
			self.pushErr(invalid, "invalid digit {} in {}", lit[invalid-offs], litname(prefix))
		}
		if digsep&2 != 0 {
			i := invalidSep(lit)
			if i >= 0 {
				self.pushErr(offs+i, "'_' must separate successive digits")
			}
		}

		token.ID = INT
		if float {
			token.ID = FLOAT
		}
		token.Kind = lit
	}

	// Scans an escape sequence where rune is the accepted
	// escaped quote. In case of a syntax error, it stops at the offending
	// character (without consuming it) and returns false. Otherwise
	// it returns true.
	fn scanEscape(mut self, quote: rune): bool {
		offs := self.offset

		let mut n: int
		let mut base: u32
		let mut max: u32
		match self.r {
		| 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | quote:
			self.next()
			ret true
		| '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7':
			n, base, max = 3, 8, 255
		| 'x':
			self.next()
			n, base, max = 2, 16, 255
		| 'u':
			self.next()
			n, base, max = 4, 16, unicode::MaxRune
		| 'U':
			self.next()
			n, base, max = 8, 16, unicode::MaxRune
		|:
			mut msg := "unknown escape sequence"
			if self.r < 0 {
				msg = "escape sequence not terminated"
			}
			self.pushErr(offs, msg)
			ret false
		}

		let mut x: u32
		for n > 0 {
			d := u32(digitVal(self.r))
			if d >= base {
				let mut msg: str
				if self.r >= 0 {
					msg = "illegal character " + str(self.r) + " in escape sequence"
				} else {
					msg = "escape sequence not terminated"
				}
				self.pushErr(self.offset, msg)
				ret false
			}
			x = x*base + d
			self.next()
			n--
		}

		if x > max || 0xD800 <= x && x < 0xE000 {
			self.pushErr(offs, "escape sequence is invalid Unicode code point")
			ret false
		}

		ret true
	}

	fn scanRune(mut self, mut &token: &Token) {
		// '\'' opening already consumed
		offs := self.offset - 1

		mut valid := true
		mut n := 0

		for {
			r := self.r
			if r == '\n' || r < 0 {
				// only report error if we don't have one already
				if valid {
					self.pushErr(offs, "rune literal not terminated")
					valid = false
				}
				break
			}
			self.next()
			if r == '\'' {
				break
			}
			n++
			if r == '\\' {
				if !self.scanEscape('\'') {
					valid = false
				}
				// continue to read to closing quote
			}
		}

		if valid {
			if n != 1 {
				self.pushErr(offs, "illegal rune literal")
			}
			token.ID = RUNE
			token.Kind = unsafe::StrFromBytes(self.buf.Slice2(offs, self.offset))
		}
	}

	fn scanStr(mut self, mut &token: &Token) {
		// '"' opening already consumed
		offs := self.offset - 1

		mut valid := true

		for {
			r := self.r
			if r == '\n' || r < 0 {
				self.pushErr(offs, "string literal not terminated")
				valid = false
				break
			}
			self.next()
			if r == '"' {
				break
			}
			if r == '\\' {
				valid = self.scanEscape('"') && valid
			}
		}

		if valid {
			token.ID = STR
			token.Kind = unsafe::StrFromBytes(self.buf.Slice2(offs, self.offset))
		}
	}

	fn scanRawStr(mut self, mut &token: &Token) {
		// '`' opening already consumed
		offs := self.offset - 1

		mut hasCR := false
		mut valid := true

		for {
			r := self.r
			if r < 0 {
				self.pushErr(offs, "raw string literal not terminated")
				valid = false
				break
			}
			self.next()
			if r == '`' {
				break
			}
			if r == '\r' {
				hasCR = true
			}
		}

		if valid {
			mut lit := self.buf.Slice2(offs, self.offset)
			if hasCR {
				lit = stripCR(lit, false)
			}
			token.ID = STR
			token.Kind = unsafe::StrFromBytes(lit)
		}
	}

	// Scans and returns new token, reports if EOF.
	// If and error appeared, returns nil token and not-EOF.
	fn Scan(mut self): (token: &Token, EOF: bool) {
		self.skipWhitespace()
		if self.r == eof {
			ret nil, true
		}
		token = new(Token)
		token.File = self.f
		token.ID = ILLEGAL
		token.Row = self.row
		token.Column = self.col
		match {
		| isLetter(self.r) && self.scanName(token):
			id, isKeyword := keywords[token.Kind]
			if isKeyword {
				token.ID = id
			}
		| isDecimal(self.r) || self.r == '.' && isDecimal(self.peek()):
			self.scanNumber(token)
		|:
			// Save the current rune and advance.
			r := self.r
			self.next()
			match r {
			| '"':
				self.scanStr(token)
			| '`':
				self.scanRawStr(token)
			| '\'':
				self.scanRune(token)
			| '/':
				if self.r == '/' {
					self.scanLineComment(token)
					if self.opt&Comments != Comments {
						ret self.Scan()
					}
				} else if self.r == '*' {
					self.scanRangeComment(token)
					if self.opt&Comments != Comments {
						ret self.Scan()
					}
				} else if self.r == '=' {
					token.ID = QUO_ASSIGN
					token.Kind = "/="
					self.next()
				} else {
					token.ID = QUO
					token.Kind = "/"
				}
			| ':':
				if self.r == ':' {
					token.ID = SEP
					token.Kind = "::"
					self.next()
				} else if self.r == '=' {
					token.ID = DEFINE
					token.Kind = ":="
					self.next()
				} else {
					token.ID = COLON
					token.Kind = ":"
				}
			| '?':
				token.ID = QMARK
				token.Kind = "?"
			| ';':
				token.ID = SEMICOLON
				token.Kind = ";"
			| ',':
				token.ID = COMMA
				token.Kind = ","
			| '#':
				token.ID = HASH
				token.Kind = "#"
			| '{':
				token.ID = LBRACE
				token.Kind = "{"
			| '}':
				token.ID = RBRACE
				token.Kind = "}"
			| '[':
				token.ID = LBRACK
				token.Kind = "["
			| ']':
				token.ID = RBRACK
				token.Kind = "]"
			| '(':
				token.ID = LPAREN
				token.Kind = "("
			| ')':
				token.ID = RPAREN
				token.Kind = ")"
			| '.':
				if self.r == '.' && self.peek() == '.' {
					token.ID = ELLIPSIS
					token.Kind = "..."
					self.next()
					self.next()
				} else {
					token.ID = PERIOD
					token.Kind = "."
				}
			| '<':
				if self.r == '-' {
					token.ID = ARROW
					token.Kind = "<-"
					self.next()
				} else if self.r == '<' {
					self.next()
					if self.r == '=' {
						token.ID = SHL_ASSIGN
						token.Kind = "<<="
						self.next()
					} else {
						token.ID = SHL
						token.Kind = "<<"
					}
				} else if self.r == '=' {
					token.ID = LEQ
					token.Kind = "<="
					self.next()
				} else {
					token.ID = LSS
					token.Kind = "<"
				}
			| '>':
				if self.r == '>' {
					self.next()
					if self.r == '=' {
						token.ID = SHR_ASSIGN
						token.Kind = ">>="
						self.next()
					} else {
						token.ID = SHR
						token.Kind = ">>"
					}
				} else if self.r == '=' {
					token.ID = GEQ
					token.Kind = ">="
					self.next()
				} else {
					token.ID = GTR
					token.Kind = ">"
				}
			| '+':
				if self.r == '=' {
					token.ID = ADD_ASSIGN
					token.Kind = "+="
					self.next()
				} else if self.r == '+' {
					token.ID = INC
					token.Kind = "++"
					self.next()
				} else {
					token.ID = ADD
					token.Kind = "+"
				}
			| '-':
				if self.r == '=' {
					token.ID = SUB_ASSIGN
					token.Kind = "-="
					self.next()
				} else if self.r == '-' {
					token.ID = DEC
					token.Kind = "--"
					self.next()
				} else {
					token.ID = SUB
					token.Kind = "-"
				}
			| '*':
				if self.r == '=' {
					token.ID = MUL_ASSIGN
					token.Kind = "*="
					self.next()
				} else {
					token.ID = MUL
					token.Kind = "*"
				}
			| '%':
				if self.r == '=' {
					token.ID = REM_ASSIGN
					token.Kind = "%="
					self.next()
				} else {
					token.ID = REM
					token.Kind = "%"
				}
			| '^':
				if self.r == '=' {
					token.ID = XOR_ASSIGN
					token.Kind = "^="
					self.next()
				} else {
					token.ID = XOR
					token.Kind = "^"
				}
			| '&':
				if self.r == '=' {
					token.ID = AND_ASSIGN
					token.Kind = "&="
					self.next()
				} else if self.r == '&' {
					token.ID = LAND
					token.Kind = "&&"
					self.next()
				} else {
					token.ID = AND
					token.Kind = "&"
				}
			| '|':
				if self.r == '=' {
					token.ID = OR_ASSIGN
					token.Kind = "|="
					self.next()
				} else if self.r == '|' {
					token.ID = LOR
					token.Kind = "||"
					self.next()
				} else {
					token.ID = OR
					token.Kind = "|"
				}
			| '!':
				if self.r == '=' {
					token.ID = NEQ
					token.Kind = "!="
					self.next()
				} else {
					token.ID = NOT
					token.Kind = "!"
				}
			| '=':
				if self.r == '=' {
					token.ID = EQL
					token.Kind = "=="
					self.next()
				} else {
					token.ID = ASSIGN
					token.Kind = "="
				}
			|:
				self.pushErr(self.offset, log::InvalidToken, self.r)
				self.next()
			}
		}
		EOF = self.r == eof
		if token.ID == ILLEGAL {
			token = nil
		}
		ret
	}
}

fn digitVal(ch: rune): int {
	match {
	| '0' <= ch && ch <= '9':
		ret int(ch - '0')
	| 'a' <= lower(ch) && lower(ch) <= 'f':
		ret int(lower(ch) - 'a' + 10)
	}
	ret 16 // larger than any legal digit val
}

fn lower(ch: rune): rune { ret ('a' - 'A') | ch }
fn isDecimal(ch: rune): bool { ret '0' <= ch && ch <= '9' }
fn isHex(ch: rune): bool { ret '0' <= ch && ch <= '9' || 'a' <= lower(ch) && lower(ch) <= 'f' }

fn isLetter(ch: rune): bool {
	ret 'a' <= lower(ch) && lower(ch) <= 'z' || ch == '_' || ch >= utf8::RuneSelf && unicode::IsLetter(ch)
}

fn isDigit(ch: rune): bool {
	ret isDecimal(ch) || ch >= utf8::RuneSelf && unicode::IsDigit(ch)
}

// Returns the index of the first invalid separator in z, or -1.
fn invalidSep(z: str): int {
	x := ubuf::Ubuf{}
	x.SetData(unsafe::StrBytes(z))
	mut x1 := rune(' ') // prefix char, we only care if it's 'x'
	mut d := rune('.')  // digit, one of '_', '0' (a digit), or '.' (anything else)
	mut i := 0

	// a prefix counts as a digit
	if x.Len() >= 2 && x.Get(0) == '0' {
		x1 = lower(rune(x.Get(1)))
		if x1 == 'x' || x1 == 'o' || x1 == 'b' {
			d = '0'
			i = 2
		}
	}

	// mantissa and exponent
	for i < x.Len(); i++ {
		p := d // previous digit
		d = rune(x.Get(i))
		match {
		| d == '_':
			if p != '0' {
				ret i
			}
		| isDecimal(d) || x1 == 'x' && isHex(d):
			d = '0'
		|:
			if p == '_' {
				ret i - 1
			}
			d = '.'
		}
	}
	if d == '_' {
		ret x.Len() - 1
	}

	ret -1
}

fn litname(prefix: rune): str {
	match prefix {
	| 'x':
		ret "hexadecimal literal"
	| 'o' | '0':
		ret "octal literal"
	| 'b':
		ret "binary literal"
	|:
		ret "decimal literal"
	}
}

fn stripCR(b: []byte, comment: bool): []byte {
	c := ubuf::Ubuf{}
	c.SetData(make([]byte, len(b)))
	mut i := 0
	for j, ch in b {
		// In a /*-style comment, don't strip \r from *\r/ (incl.
		// sequences of \r from *\r\r...\r/) since the resulting
		// */ would terminate the comment too early unless the \r
		// is immediately following the opening /* in which case
		// it's ok because /*/ is not closed yet (issue #11151).
		if ch != '\r' || comment && i > len("/*") && c.Get(i-1) == '*' && j+1 < len(b) && b[j+1] == '/' {
			c.Set(i, ch)
			i++
		}
	}
	// GC must be remain for the allocation, do not use c.Slice3 to slice.
	// For memory efficiency, new allocation might be used as result or etc.
	// Therefore avoid making allocation zero-reference and deallocation.
	ret c.GetData()[:i]
}

// Scans all tokens into FileSet f and returns error logs.
fn ScanAll(mut &f: &FileSet, opt: int): []log::Log {
	mut scan := Scanner.New(f, opt)
	mut i := 0
Loop:
	for {
		i++
		mut token, EOF := scan.Scan()
		if token != nil {
			f.Tokens = append(f.Tokens, token)
		}
		match {
		| EOF:
			break Loop
		| token == nil:
			// An error appeared, continue to scan.
			continue
		}
	}
	ret scan.Logs
}