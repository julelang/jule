// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/build"
use "std/jule/log"
use "std/strings"
use "std/unicode/utf8"
use "std/unsafe"

// Lexer mode.
const (
	Standard = 1 << iota // Standard mode.
	Comments             // Standard mode + comments.
)

struct kindPair {
	kind: str
	id:   int
}

static keywords: [...]kindPair = [
	{"const", Const},
	{"ret", Ret},
	{"type", Type},
	{"for", For},
	{"break", Break},
	{"continue", Cont},
	{"in", In},
	{"if", If},
	{"else", Else},
	{"use", Use},
	{"goto", Goto},
	{"enum", Enum},
	{"struct", Struct},
	{"co", Co},
	{"match", Match},
	{"self", Self},
	{"trait", Trait},
	{"impl", Impl},
	{"chan", Chan},
	{"cpp", Cpp},
	{"fall", Fall},
	{"fn", Fn},
	{"let", Let},
	{"unsafe", Unsafe},
	{"mut", Mut},
	{"defer", Defer},
	{"static", Static},
	{"error", Error},
	{"map", Map},
	{"select", Select},
]

static basicOps: [...]kindPair = [
	{"::", DblColon},
	{":=", ColonEq},
	{":", Colon},
	{";", Semicolon},
	{",", Comma},
	{"...", TripleDot},
	{".", Dot},
	{"<-", RArrow},
	{"+=", PlusEq},
	{"-=", MinusEq},
	{"*=", StarEq},
	{"/=", SolidusEq},
	{"%=", PercentEq},
	{"<<=", ShlEq},
	{">>=", ShrEq},
	{"^=", CaretEq},
	{"&=", AmperEq},
	{"|=", VlineEq},
	{"==", DblEq},
	{"!=", NotEq},
	{">=", GtEq},
	{"<=", LtEq},
	{"&&", DblAmper},
	{"||", DblVline},
	{"<<", Shl},
	{">>", Shr},
	{"++", DblPlus},
	{"--", DblMinus},
	{"+", Plus},
	{"-", Minus},
	{"*", Star},
	{"/", Solidus},
	{"%", Percent},
	{"&", Amper},
	{"|", Vline},
	{"^", Caret},
	{"!", Excl},
	{"<", Lt},
	{">", Gt},
	{"=", Eq},
	{"#", Hash},
	{"{", LBrace},
	{"}", RBrace},
	{"[", LBracket},
	{"]", RBracket},
	{"(", LParent},
	{")", RParent},
]

fn makeErr(row: int, col: int, &f: &Fileset, fmt: str, args: ...any): log::Log {
	ret log::Log{
		Kind: log::Error,
		Row: row,
		Column: col,
		Path: f.Path,
		Text: log::Logf(fmt, args...),
	}
}

fn bytesHasPrefix(&bytes: []byte, prefix: str): bool {
	ret len(bytes) >= len(prefix) && str(bytes[:len(prefix)]) == prefix
}

fn floatFmtE(&txt: []byte, mut i: int): (lit: str) {
	i++ // Skip E | e
	if i >= len(txt) {
		ret
	}

	mut b := txt[i]
	if b == '_' {
		ret
	}
	if b == '+' || b == '-' {
		i++ // Skip operator
		if i >= len(txt) {
			ret
		}
		if txt[i] == '_' {
			ret
		}
	}

	first := i
	for i < len(txt); i++ {
		b = txt[i]
		if b != '_' && !IsDecimal(rune(b)) {
			break
		}
	}

	if i == first {
		ret ""
	}
	ret unsafe::StrFromBytes(txt[:i])
}

fn floatFmtP(&txt: []byte, i: int): str {
	ret floatFmtE(txt, i)
}

fn floatFmtDotnp(&txt: []byte, mut i: int): str {
	if txt[i] != '.' {
		ret ""
	}

	i++
loop:
	for i < len(txt); i++ {
		b := txt[i]
		match {
		| b == '_' | IsDecimal(rune(b)):
			continue
		| isFloatFmtP(b, i):
			ret floatFmtP(txt, i)
		|:
			break loop
		}
	}
	ret ""
}

fn floatFmtDotfp(&txt: []byte, mut i: int): str {
	i += 2 // skip .f
	ret floatFmtE(txt, i)
}

fn floatFmtDotp(&txt: []byte, mut i: int): str {
	i++ // skip .
	ret floatFmtE(txt, i)
}

fn floatNum(&txt: []byte, mut i: int): (lit: str) {
	i++ // Skip dot
	if i >= len(txt) {
		ret unsafe::StrFromBytes(txt)
	}
	if txt[i] == '_' {
		i--
		ret unsafe::StrFromBytes(txt[:i])
	}
	for i < len(txt); i++ {
		b := txt[i]
		if i > 1 && (b == 'e' || b == 'E') {
			ret floatFmtE(txt, i)
		}
		if b != '_' && !IsDecimal(rune(b)) {
			break
		}
	}

	if i == 1 { // Just dot
		ret
	}
	ret unsafe::StrFromBytes(txt[:i])
}

fn commonNum(&txt: []byte): (lit: str) {
	mut i := 0
loop:
	for i < len(txt); i++ {
		b := txt[i]
		match {
		| b == '.':
			ret floatNum(txt, i)
		| b == '_':
			continue
		| isFloatFmtE(b, i):
			ret floatFmtE(txt, i)
		| !IsDecimal(rune(b)):
			break loop
		}
	}

	if i == 0 {
		ret
	}
	ret unsafe::StrFromBytes(txt[:i])
}

fn binaryNum(&txt: []byte): (lit: str) {
	if !bytesHasPrefix(txt, "0b") {
		ret ""
	}
	if len(txt) < 2 {
		ret
	}

	const BinaryStart = 2
	mut i := BinaryStart
	for i < len(txt); i++ {
		if txt[i] != '_' && !IsBinary(rune(txt[i])) {
			break
		}
	}

	if i == BinaryStart {
		ret
	}
	ret unsafe::StrFromBytes(txt[:i])
}

fn isFloatFmtE(b: byte, i: int): bool {
	ret i > 0 && (b == 'e' || b == 'E')
}

fn isFloatFmtP(b: byte, i: int): bool {
	ret i > 0 && (b == 'p' || b == 'P')
}

fn isFloatFmtDotnp(&txt: []byte, mut i: int): bool {
	if txt[i] != '.' {
		ret false
	}
	i++
loop:
	for i < len(txt); i++ {
		b := txt[i]
		match {
		| b == '_' | IsDecimal(rune(b)):
			continue
		| isFloatFmtP(b, i):
			ret true
		|:
			break loop
		}
	}

	ret false
}

fn isFloatFmtDotp(&txt: []byte, i: int): bool {
	match {
	| len(txt) < 3:
		fall
	| txt[i] != '.':
		fall
	| txt[i+1] != 'p' && txt[i+1] != 'P':
		ret false
	|:
		ret true
	}
}

fn isFloatFmtDotfp(&txt: []byte, i: int): bool {
	match {
	| len(txt) < 4:
		fall
	| txt[i] != '.':
		fall
	| txt[i+1] != 'f' && txt[i+1] != 'F':
		fall
	| txt[i+2] != 'p' && txt[i+1] != 'P':
		ret false
	|:
		ret true
	}
}

fn octalNum(&txt: []byte): (lit: str) {
	if txt[0] != '0' {
		ret ""
	}
	if len(txt) < 2 {
		ret
	}

	mut octalStart := 1

	mut o := false
	if txt[1] == 'o' {
		if len(txt) < 3 {
			ret
		}
		octalStart++
		o = true
	}

	mut i := octalStart
	for i < len(txt); i++ {
		b := txt[i]
		if b == '.' {
			if o {
				ret ""
			}
			ret floatNum(txt, i)
		}
		if isFloatFmtE(b, i) {
			ret floatFmtE(txt, i)
		}
		if b != '_' && !IsOctal(rune(b)) {
			break
		}
	}

	if i == octalStart {
		ret
	}
	ret unsafe::StrFromBytes(txt[:i])
}

fn hexNum(&txt: []byte): (lit: str) {
	if len(txt) < 3 {
		ret
	}
	if txt[0] != '0' || (txt[1] != 'x' && txt[1] != 'X') {
		ret
	}

	const HexStart = 2
	mut i := HexStart
loop:
	for i < len(txt); i++ {
		b := txt[i]
		match {
		| isFloatFmtDotp(txt, i):
			ret floatFmtDotp(txt, i)
		| isFloatFmtDotfp(txt, i):
			ret floatFmtDotfp(txt, i)
		| isFloatFmtP(b, i):
			ret floatFmtP(txt, i)
		| isFloatFmtDotnp(txt, i):
			ret floatFmtDotnp(txt, i)
		| b != '_' && !IsHex(rune(b)):
			break loop
		}
	}

	if i == HexStart {
		ret
	}
	ret unsafe::StrFromBytes(txt[:i])
}

fn hexEscape(&txt: []byte, n: int): (seq: str) {
	if len(txt) < n {
		ret
	}

	const HexStart = 2
	mut i := HexStart
	for i < n; i++ {
		if !IsHex(rune(txt[i])) {
			ret
		}
	}

	seq = unsafe::StrFromBytes(txt[:n])
	ret
}

// Pattern: \Uhhhhhhhh
fn bigUnicodePointEscape(&txt: []byte): str {
	ret hexEscape(txt, 10)
}

// Pattern: \uhhhh
fn littleUnicodePointEscape(&txt: []byte): str {
	ret hexEscape(txt, 6)
}

// Pattern: \xhh
fn hexByteEscape(&txt: []byte): str {
	ret hexEscape(txt, 4)
}

// Pattern: \nnn
fn byteEscape(&txt: []byte): (seq: str) {
	if len(txt) < 4 {
		ret
	}
	if !IsOctal(rune(txt[1])) || !IsOctal(rune(txt[2])) || !IsOctal(rune(txt[3])) {
		ret
	}
	ret unsafe::StrFromBytes(txt[:4])
}

struct lex {
	mode:   int
	tokens: []&Token
	file:   &Fileset
	pos:    int
	column: int
	row:    int
	errors: []log::Log
}

impl lex {
	fn pushErr(mut self, fmt: str, args: ...any) {
		self.errors = append(self.errors,
			makeErr(self.row, self.column, self.file, fmt, args...))
	}

	fn pushErrTok(mut self, &token: &Token, fmt: str) {
		self.errors = append(self.errors,
			makeErr(token.Row, token.Column, self.file, fmt))
	}

	// Lexs all source content.
	fn lex(mut self) {
		self.errors = nil
		self.newLine()
		for self.pos < len(self.file.data) {
			mut token := self.token()
			if token.Id != Illegal {
				self.tokens = append(self.tokens, token)
			}
		}
	}

	// Returns identifier if next token is identifier,
	// returns empty string if not.
	fn name(mut self, &ln: []byte): str {
		if len(ln) == 0 {
			ret ""
		}
		r, mut i := utf8::DecodeRune(ln)
		if r != '_' && !IsLetter(r) {
			ret ""
		}

		for i < len(ln) {
			pr, n := utf8::DecodeRune(ln[i:])
			if pr != '_' && !IsDecimal(pr) && !IsLetter(pr) {
				self.pos += i
				ret unsafe::StrFromBytes(ln[:i])
			}
			i += n
		}

		self.pos += len(ln)
		ret unsafe::StrFromBytes(ln)
	}

	// Resume to lex from position.
	fn resume(mut self): []byte {
		// Skip spaces.
		mut i := self.pos
		for i < len(self.file.data); i++ {
			r := rune(self.file.data[i])
			if IsSpace(r) {
				self.pos++
				match r {
				| '\n':
					self.newLine()
				|:
					self.column++
				}
				continue
			}

			mut j := i
			for j < len(self.file.data); j++ {
				if self.file.data[j] == '\n' {
					break
				}
			}
			ret self.file.data[i:j]
		}
		ret nil
	}

	fn lexLineComment(mut self, mut &token: &Token) {
		start := self.pos
		self.pos += 2
		for self.pos < len(self.file.data); self.pos++ {
			r := self.file.data[self.pos]
			if r == '\n' || r == '\r' {
				break
			}
		}
		if self.mode&Comments == Comments {
			token.Id = Comment
			token.Kind = unsafe::StrFromBytes(self.file.data[start:self.pos])
		}
	}

	fn lexRangeComment(mut self, mut &token: &Token) {
		start := self.pos
		self.pos += 2
		for self.pos < len(self.file.data); self.pos++ {
			r := self.file.data[self.pos]
			if r == '\r' {
				continue
			}
			if r == '\n' {
				self.newLine()
				continue
			}
			self.column += 1
			if self.pos+1 < len(self.file.data) && r == '*' &&
				self.file.data[self.pos+1] == '/' {
				self.column += 2
				self.pos += 2
				if self.mode&Comments == Comments {
					token.Id = Comment
					token.Kind = unsafe::StrFromBytes(self.file.data[start:self.pos])
				}
				ret
			}
		}
		self.pushErr(log::MissingBlockCommentClose)
	}

	// Returns literal if next token is numeric, returns empty string if not.
	fn num(mut self, &txt: []byte): (lit: str) {
		if txt[0] == '_' {
			ret ""
		}
		lit = hexNum(txt)
		if lit != "" {
			goto end
		}
		lit = octalNum(txt)
		if lit != "" {
			goto end
		}
		lit = binaryNum(txt)
		if lit != "" {
			goto end
		}
		lit = commonNum(txt)
	end:
		self.pos += len(lit)
		ret
	}

	fn escapeSeq(mut self, &txt: []byte): str {
		mut seq := ""
		if len(txt) < 2 {
			goto end
		}

		match txt[1] {
		| '\\' | '\'' | '"' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v':
			self.pos += 2
			ret unsafe::StrFromBytes(txt[:2])
		| 'U':
			seq = bigUnicodePointEscape(txt)
		| 'u':
			seq = littleUnicodePointEscape(txt)
		| 'x':
			seq = hexByteEscape(txt)
		|:
			seq = byteEscape(txt)
		}

	end:
		if seq == "" {
			self.pos++
			self.pushErr(log::InvalidEscapeSeq)
			ret ""
		}
		self.pos += len(seq)
		ret seq
	}

	fn getRune(mut self, &txt: []byte, raw: bool): str {
		if !raw && txt[0] == '\\' {
			ret self.escapeSeq(txt)
		}
		r, n := utf8::DecodeRune(txt)
		self.pos += n
		ret str(r)
	}

	fn lexRune(mut self, &txt: []byte): str {
		mut run := strings::Builder{}
		run.Grow(1 << 3)
		run.WriteByte('\'')!
		self.column++
		mut n := 0
		mut i := 1
		for i < len(txt); i++ {
			if txt[i] == '\r' {
				continue
			}
			if txt[i] == '\n' {
				self.pushErr(log::MissingRuneEnd)
				self.pos++
				self.newLine()
				ret ""
			}

			part := txt[i:]
			r := self.getRune(part, false)
			run.WriteStr(r)!
			self.column += utf8::RuneCountStr(r)
			if r == "'" {
				self.pos++
				break
			}
			if len(r) > 1 {
				i += len(r) - 1
			}
			n++
		}

		if n == 0 {
			self.pushErr(log::RuneEmpty)
		} else if n > 1 {
			self.pushErr(log::RuneOverflow)
		}

		ret run.Str()
	}

	fn lexStr(mut self): str {
		mut s := strings::Builder{}
		s.Grow(1 << 4)
		mark := self.file.data[self.pos]
		self.pos++ // Skip mark
		raw := mark == '`'
		s.WriteByte(mark)!
		self.column++

		for self.pos < len(self.file.data) {
			ch := self.file.data[self.pos]
			// Skip CR, we only count '\n' as new-line.
			if ch == '\r' {
				self.pos++
				continue
			}
			if ch == '\n' {
				self.newLine()
				if !raw {
					self.pushErr(log::MissingStrEnd)
					self.pos++
					ret ""
				}
			}
			mut part := self.file.data[self.pos:]
			r := self.getRune(part, raw)
			s.WriteStr(r)!
			self.column += utf8::RuneCountStr(r)
			if ch == mark {
				break
			}
		}

		ret s.Str()
	}

	fn isFirstTokenOfLine(self): bool {
		ret self.column == 1
	}

	fn newLine(mut self) {
		self.row++
		self.column = 1
	}

	fn isOp(mut self, &txt: []byte, kind: str, id: int, mut &t: &Token): bool {
		if !bytesHasPrefix(txt, kind) {
			ret false
		}
		t.Kind = kind
		t.Id = id
		self.pos += len(kind)
		ret true
	}

	fn lexBasicOps(mut self, txt: []byte, mut &tok: &Token): bool {
		for _, pair in basicOps {
			if self.isOp(txt, pair.kind, pair.id, tok) {
				ret true
			}
		}
		ret false
	}

	fn lexName(mut self, &txt: []byte, mut &t: &Token): bool {
		lex := self.name(txt)
		if lex == "" {
			ret false
		}
		t.Kind = lex
		t.Id = Name
		ret true
	}

	fn lexNum(mut self, &txt: []byte, mut &t: &Token): bool {
		lex := self.num(txt)
		if lex == "" {
			ret false
		}
		t.Kind = lex
		t.Id = Lit
		ret true
	}

	// lex.Token generates next token from resume at position.
	fn token(mut self): &Token {
		mut t := &Token{
			File: self.file,
			Id: Illegal,
		}

		txt := self.resume()
		if txt == nil {
			ret t
		}

		// Set token values.
		t.Column = self.column
		t.Row = self.row

		match {
		| self.lexNum(txt, t):
			// Pass.
			break
		| txt[0] == '\'':
			t.Kind = self.lexRune(txt)
			t.Id = Lit
			ret t
		| txt[0] == '"' || txt[0] == '`':
			t.Kind = self.lexStr()
			t.Id = Lit
			ret t
		| bytesHasPrefix(txt, "//"):
			self.lexLineComment(t)
			ret t
		| bytesHasPrefix(txt, "/*"):
			self.lexRangeComment(t)
			ret t
		| self.lexBasicOps(txt, t):
			// Pass.
			break
		| self.lexName(txt, t):
			for _, pair in keywords {
				if pair.kind == t.Kind {
					t.Id = pair.id
					break
				}
			}
		|:
			r, sz := utf8::DecodeRune(txt)
			self.pushErr(log::InvalidToken, r)
			self.column++
			self.pos += sz
			ret t
		}
		self.column += utf8::RuneCountStr(t.Kind)
		ret t
	}
}

// Lex source code into fileset.
// Returns nil if f == nil.
// Returns nil slice for errors if no any error.
fn Lex(mut f: &Fileset, mode: int): []log::Log {
	if f == nil {
		ret nil
	}

	mut lex := lex{
		mode: mode,
		file: f,
		pos: 0,
		row: -1, // For true row
	}

	lex.newLine()
	lex.lex()

	if len(lex.errors) > 0 {
		ret lex.errors
	}

	f.Tokens = lex.tokens
	ret nil
}