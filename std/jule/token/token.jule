// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/strings"

// Token identities.
const (
	ILLEGAL = iota // illegal token

	SEMICOLON // ;
	COMMA     // ,
	COLON     // :
	PERIOD    // .
	SEP       // ::
	HASH      // #
	ELLIPSIS  // ...
	QMARK     // ?

	COMMENT // /*..*/ or //...
	NAME    // identifier

	FLOAT // floating-point literal
	INT   // integer literal
	STR   // string literal
	RUNE  // rune literal
	IMAG  // imaginary part literal

	RET      // ret
	CONST    // const
	TYPE     // type
	FOR      // for
	BREAK    // break
	CONTINUE // continue
	IN       // int
	IF       // if
	ELSE     // else
	USE      // use
	GOTO     // goto
	ENUM     // enum
	STRUCT   // struct
	CO       // co
	MATCH    // match
	SELF     // self
	TRAIT    // trait
	IMPL     // impl
	CHAN     // chan
	BIND     // cpp
	FALL     // fall
	FN       // fn
	LET      // let
	UNSAFE   // unsafe
	MUT      // mut
	DEFER    // defer
	ERROR    // error
	MAP      // map
	SELECT   // select

	EQL  // ==
	NEQ  // !=
	GEQ  // >=
	LEQ  // <=
	LAND // &&
	LOR  // ||

	SHL   // <<
	SHR   // >>
	INC   // ++
	DEC   // --
	ADD   // +
	SUB   // -
	MUL   // *
	QUO   // /
	REM   // %
	AND   // &
	OR    // |
	XOR   // ^
	NOT   // !
	LSS   // <
	GTR   // >
	ARROW // <-

	ASSIGN     // =
	DEFINE     // :=
	ADD_ASSIGN // +=
	SUB_ASSIGN // -=
	MUL_ASSIGN // *=
	QUO_ASSIGN // /=
	REM_ASSIGN // %=
	SHL_ASSIGN // <<=
	SHR_ASSIGN // >>=
	XOR_ASSIGN // ^=
	AND_ASSIGN // &=
	OR_ASSIGN  // |=

	LPAREN // (
	LBRACK // [
	LBRACE // {
	RPAREN // )
	RBRACK // ]
	RBRACE // }
)

// Token.
struct Token {
	ID:     int      // Identity of token.
	File:   &FileSet // Associated FileSet where token appear.
	Row:    int      // Row position of token.
	Column: int      // Column position of token.
	Kind:   str      // Token kind as string.
}

// A set of constants for precedence-based expression parsing.
// Non-operators have lowest precedence, followed by operators
// starting with precedence 1 up to unary operators. The highest
// precedence serves as "catch-all" precedence for selector,
// indexing, and other operator and delimiter tokens.
const (
	LowestPrec  = 0 // non-operators
	UnaryPrec   = 6
	HighestPrec = 7
)

impl Token {
	// Returns operator precedence of token.
	// Returns 0 if token is not operator or
	// invalid operator for operator precedence.
	// It only reports for the binary operators, otherwise returns LowestPrec.
	fn Precedence(*self): int {
		match self.ID {
		| MUL | REM | QUO | SHR | SHL | AND:
			ret 5
		| ADD | SUB | OR | XOR:
			ret 4
		| EQL | NEQ | LSS | LEQ | GTR | GEQ:
			ret 3
		| LAND:
			ret 2
		| LOR:
			ret 1
		|:
			ret LowestPrec
		}
	}
}

// Reports whether s is keyword.
fn IsKeyword(s: str): bool {
	_, exist := keywords[s]
	ret exist
}

// Reports whether operator kind is postfix operator.
fn IsPostfix(id: int): bool {
	ret id == INC || id == DEC
}

// Reports whether operator kind is assignment operator.
fn IsAssign(id: int): bool {
	if IsPostfix(id) {
		ret true
	}
	ret id == ASSIGN ||
		id == ADD_ASSIGN ||
		id == SUB_ASSIGN ||
		id == QUO_ASSIGN ||
		id == MUL_ASSIGN ||
		id == REM_ASSIGN ||
		id == SHR_ASSIGN ||
		id == SHL_ASSIGN ||
		id == OR_ASSIGN ||
		id == AND_ASSIGN ||
		id == XOR_ASSIGN
}