// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/strings"

// Token identities.
const (
	Illegal = iota
	Name
	Ret
	Semicolon
	Lit
	Comma
	Const
	Type
	Colon
	For
	Break
	Cont
	In
	If
	Else
	Comment
	Use
	Dot
	Goto
	DblColon
	Enum
	Struct
	Co
	Match
	Self
	Trait
	Impl
	Chan
	Cpp
	Fall
	Fn
	Let
	Unsafe
	Mut
	Defer
	Hash
	Error
	Map
	ColonEq
	TripleDot
	PlusEq
	MinusEq
	StarEq
	SolidusEq
	PercentEq
	ShlEq
	ShrEq
	CaretEq
	AmperEq
	VlineEq
	DblEq
	NotEq
	GtEq
	LtEq
	DblAmper
	DblVline
	Shl
	Shr
	DblPlus
	DblMinus
	Plus
	Minus
	Star
	Solidus
	Percent
	Amper
	Vline
	Caret
	Excl
	Lt
	Gt
	Eq
	LBrace
	RBrace
	LParent
	RParent
	LBracket
	RBracket
	RArrow
	Select
)

// Token.
struct Token {
	Id:     int      // Identity of token.
	File:   &FileSet // Associated FileSet where token appear.
	Row:    int      // Row position of token.
	Column: int      // Column position of token.
	Kind:   str      // Token kind as string.
}

impl Token {
	// Returns operator precedence of token.
	// Returns 0 if token is not operator or
	// invalid operator for operator precedence.
	//
	// Accepts assignment tokens (like equals [=]) as precedenced operator
	// to handle expression assignments.
	fn Prec(self): byte {
		match self.Id {
		| Star
		| Percent
		| Solidus
		| Shr
		| Shl
		| Amper:
			ret 5
		| Plus
		| Minus
		| Vline
		| Caret:
			ret 4
		| DblEq
		| NotEq
		| Eq
		| Lt
		| LtEq
		| Gt
		| GtEq:
			ret 3
		| DblAmper:
			ret 2
		| DblVline:
			ret 1
		|:
			ret 0
		}
	}
}

// Reports whether kind is string literal.
fn IsStr(k: str): bool { ret k != "" && (k[0] == '"' || IsRawStr(k)) }

// Reports whether kind is raw string literal.
fn IsRawStr(k: str): bool { ret k != "" && k[0] == '`' }

// Reports whether kind is rune literal.
// Literal value can be byte or rune.
fn IsRune(k: str): bool { ret k != "" && k[0] == '\'' }

// Reports whether kind is nil literal.
fn IsNil(k: str): bool { ret k == "nil" }

// Reports whether kind is boolean literal.
fn IsBool(k: str): bool { ret k == "true" || k == "false" }

// Reports whether kind is float.
fn IsFloat(k: str): bool {
	if strings::HasPrefix(k, "0x") {
		ret strings::ContainsAny(k, ".pP")
	}
	ret strings::ContainsAny(k, ".eE")
}

// Reports whether kind is numeric.
fn IsNum(k: str): bool {
	if k == "" {
		ret false
	}

	b := k[0]
	ret b == '.' || ('0' <= b && b <= '9')
}

// Reports whether kind is literal.
fn IsLit(k: str): bool {
	ret IsNum(k) || IsStr(k) || IsRune(k) || IsNil(k) || IsBool(k)
}

// Reports whether s is keyword.
fn IsKeyword(s: str): bool {
	_, exist := keywords[s]
	ret exist
}

// Reports whether operator kind is postfix operator.
fn IsPostfixOp(id: int): bool {
	ret id == DblPlus || id == DblMinus
}

// Reports given token id is allow for
// assignment left-expression or not.
fn IsAssign(id: int): bool {
	ret id == Name ||
		id == Cpp ||
		id == Let ||
		id == Mut ||
		id == Self ||
		id == LParent ||
		id == Star ||
		id == Amper
}

// Reports whether operator kind is assignment operator.
fn IsAssignOp(id: int): bool {
	if IsPostfixOp(id) {
		ret true
	}
	ret id == Eq ||
		id == PlusEq ||
		id == MinusEq ||
		id == SolidusEq ||
		id == StarEq ||
		id == PercentEq ||
		id == ShrEq ||
		id == ShlEq ||
		id == VlineEq ||
		id == AmperEq ||
		id == CaretEq
}

// Reports whether kind is unary operator.
fn IsUnaryOp(id: int): bool {
	ret id == Minus ||
		id == Plus ||
		id == Caret ||
		id == Excl ||
		id == Star ||
		id == Amper
}

// Reports whether kind is binary operator.
fn IsBinOp(id: int): bool {
	ret id == Plus ||
		id == Minus ||
		id == Star ||
		id == Solidus ||
		id == Percent ||
		id == Amper ||
		id == Vline ||
		id == Caret ||
		id == Shl ||
		id == Shr ||
		id == Lt ||
		id == Gt ||
		id == LtEq ||
		id == GtEq ||
		id == DblAmper ||
		id == DblVline ||
		id == DblEq ||
		id == NotEq
}