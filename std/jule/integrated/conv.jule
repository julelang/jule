// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/unicode/utf16"
use "std/unicode/utf8"

// Windows UTF-16 strings can contain unpaired surrogates, which can't be
// decoded into a valid UTF-8 string. This file defines a set of functions
// that can be used to encode and decode potentially ill-formed UTF-16 strings
// by using the [the WTF-8 encoding](https://simonsapin.github.io/wtf-8/).
//
// WTF-8 is a strict superset of UTF-8, i.e. any string that is
// well-formed in UTF-8 is also well-formed in WTF-8 and the content
// is unchanged. Also, the conversion never fails and is lossless.
//
// The benefit of using WTF-8 instead of UTF-8 when decoding a UTF-16 string
// is that the conversion is lossless even for ill-formed UTF-16 strings.
// This property allows to read an ill-formed UTF-16 string, convert it
// to a Jule string, and convert it back to the same original UTF-16 string.
//
// See go.dev/issues/59971 for more info.
// The encodeWTF16 and decodeWTF16 derived from the Go implementation.
const (
	surr1 = 0xd800
	surr2 = 0xdc00
	surr3 = 0xe000

	tx    = 0b10000000
	t3    = 0b11100000
	maskx = 0b00111111
	mask3 = 0b00001111

	rune1Max = 1<<7 - 1
	rune2Max = 1<<11 - 1
)

// Returns the potentially ill-formed UTF-16 encoding of s.
fn encodeWTF16(s: str, mut buf: []u16): []u16 {
	mut i := 0
	for i < len(s) {
		// Cannot use 'for range s' because it expects valid
		// UTF-8 runes.
		mut r, size := utf8::DecodeRuneStr(s[i:])
		if r == utf8::RuneError {
			// Check if s[i:] contains a valid WTF-8 encoded surrogate.
			sc := s[i:]
			if len(sc) >= 3 && sc[0] == 0xED && 0xA0 <= sc[1] && sc[1] <= 0xBF && 0x80 <= sc[2] && sc[2] <= 0xBF {
				r = rune(sc[0]&mask3)<<12 + rune(sc[1]&maskx)<<6 + rune(sc[2]&maskx)
				buf = append(buf, u16(r))
				i += 3
				continue
			}
		}
		i += size
		buf = utf16::AppendRune(buf, r)
	}
	ret buf
}

// Returns the WTF-8 encoding of the potentially ill-formed UTF-16 s.
fn decodeWTF16(s: []u16, mut buf: []byte): []byte {
	mut i := 0
	for i < len(s); i++ {
		let mut ar: rune
		r := s[i]
		match {
		| r < surr1 | surr3 <= r:
			// normal rune
			ar = rune(r)
		| surr1 <= r && r < surr2 && i+1 < len(s) &&
			surr2 <= s[i+1] && s[i+1] < surr3:
			// valid surrogate sequence
			ar = utf16::DecodeRune(rune(r), rune(s[i+1]))
			i++
		|:
			// WTF-8 fallback.
			// This only handles the 3-byte case of utf8.AppendRune,
			// as surrogates always fall in that case.
			ar = rune(r)
			if ar > utf8::MaxRune {
				ar = utf8::RuneError
			}
			buf = append(buf, t3|byte(ar>>12), tx|byte(ar>>6)&maskx, tx|byte(ar)&maskx)
			continue
		}
		buf = utf8::AppendRune(buf, ar)
	}
	ret buf
}

// Same as [unsafe::StrFromBytes].
fn strFromBytes(b: []byte): str { ret unsafe { *(*str)(&b) } }

// Returns the UTF-16 encoding of the UTF-8 string
// s, with a terminating NULL added. If s includes NULL
// character at any location, ignores followed characters.
fn UTF16FromStr(mut s: str): []u16 {
	// In the worst case all characters require two u16.
	// Also account for the terminating NULL character.
	// See: C Strings and Windows UTF16.
	const NUL = 0
	for i, b in s {
		if b == NUL {
			s = s[:i]
			break
		}
	}
	// Valid UTF-8 characters between 1 and 3 bytes require one u16.
	// Valid UTF-8 characters of 4 bytes require two u16.
	// Bytes with invalid UTF-8 encoding require maximum one u16 per byte.
	// So the number of UTF-8 code units (len(s)) is always greater or
	// equal than the number of UTF-16 code units.
	// Also account for the terminating NUL character.
	mut buf := make([]u16, 0, len(s)+1)
	buf = encodeWTF16(s, buf)
	ret append(buf, NUL)
}

// Returns the UTF-8 encoding of the UTF-16 sequence s,
// with a terminating NULL removed. Returns empty string
// if s is nil.
fn UTF16ToStr(s: []u16): str {
	mut maxLen := 0
	for i, v in s {
		if v == 0 {
			unsafe { *(&s) = (*(&s))[:i] }
			break
		}
		match {
		| v <= rune1Max:
			maxLen += 1
		| v <= rune2Max:
			maxLen += 2
		|:
			// r is a non-surrogate that decodes to 3 bytes,
			// or is an unpaired surrogate (also 3 bytes in WTF-8),
			// or is one half of a valid surrogate pair.
			// If it is half of a pair, we will add 3 for the second surrogate
			// (total of 6) and overestimate by 2 bytes for the pair,
			// since the resulting rune only requires 4 bytes.
			maxLen += 3
		}
	}
	buf := decodeWTF16(s, make([]byte, 0, maxLen))
	ret strFromBytes(buf)
}

// Returns the UTF-8 encoding of the UTF-16 sequence s in *u16 form,
// with a terminating NULL removed. Returns empty string if s is nil.
unsafe fn UTF16PtrToStr(s: *u16): str {
	if s == nil {
		ret ""
	}
	const NUL = 0
	let mut codePage: []u16
	mut i := 0
	for ; i++ {
		r := s[i]
		if r == NUL {
			ret UTF16ToStr(codePage)
		}
		codePage = append(codePage, r)
	}
	ret ""
}

// Returns the string of s, with a terminating NULL removed.
// Returns empty string if pointer is nil.
unsafe fn BytePtrToStr(s: *byte): str {
	if s == nil {
		ret ""
	}
	mut n := 0
	unsafe {
		for s[n] != 0; n++ {
		}
	}
	if n == 0 {
		ret ""
	}
	mut buf := make([]byte, n)
	n = 0
	unsafe {
		for s[n] != 0; n++ {
			buf[n] = s[n]
		}
	}
	ret str(buf)
}

// Returns s as NULL terminated byte slice which is able to be used safely as
// NULL terminated string pointer. If s contatins NULL termination at any location,
// accepts NULL termination is the end of s and skips following bytes.
fn StrToBytes(s: str): []byte {
	for i, c in []byte(s) {
		if c == 0 {
			mut bytes := make([]byte, i+1)
			copy(bytes, s[:len(bytes)])
			ret bytes
		}
	}
	mut bytes := make([]byte, len(s)+1)
	copy(bytes, s)
	ret bytes
}