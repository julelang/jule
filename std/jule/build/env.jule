// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/os"
use "std/os/filepath"
use "std/runtime"

// Target operating system.
// Set to runtime operating system by default.
static mut OS = runtime::OS

// Target architecture.
// Set to runtime architecture by default.
static mut Arch = runtime::Arch

// Environment variables.
static mut pathStdlib = ""
static mut pathExec = ""
static mut pathWd = ""
static mut pathAPI = ""

// Returns path of standard library.
// Returns empty string if not initialized by [SetEnv].
fn PathStdlib(): str { ret pathStdlib }

// Returns path of compiler's executable file.
// Returns empty string if not initialized by [SetEnv].
fn PathExec(): str { ret pathExec }

// Returns path of working directory.
// Returns empty string if not initialized by [SetEnv].
fn PathWd(): str { ret pathWd }

// Returns path of main API header file.
// Returns empty string if not initialized by [SetEnv].
fn PathAPI(): str { ret pathAPI }

// Sets the environment variables of the compiler.
// The exec should hold the path of the compiler's executable path.
// The wd should hold the path of working directory.
// SetEnv panics is exec or wd is empty and will not check if paths are exist and
// appropriate for compiler. Therefore, any misinformation for environment variables
// may cause analysis issues.
//
// SetEnv is a mandatory call if you need to use package sema.
// Because semantic analysis and all relevant behavior relies to envrionment
// variables. Therefore, there might be analysis issues if envrionment variables
// will not be initialized before.
fn SetEnv(exec: str, wd: str) {
	if exec == "" {
		panic("SetEnv: empty executable file path")
	}
	if wd == "" {
		panic("SetEnv: empty working directory")
	}

	pathWd = wd
	pathExec = exec

	bin := filepath::Dir(exec)
	pathStdlib = filepath::Join(bin, "..", Stdlib)
	pathAPI = filepath::Join(bin, "..", "api", "jule.hpp")
}