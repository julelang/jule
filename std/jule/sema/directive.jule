// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/token"

struct directiveChecker {
	s: &sema
	d: &[]&ast::Directive
	o: any
}

impl directiveChecker {
	fn checkCdef(mut self, &d: &ast::Directive) {
		match type self.o {
		| &Func:
			if (&Func)(self.o).Binded {
				break
			}
			fall
		|:
			self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) > 0 {
			self.s.pushErr(d.Args[0], build::LogMsg.InvalidSyntax)
		}
	}

	fn checkTypedef(mut self, &d: &ast::Directive) {
		match type self.o {
		| &Struct:
			if (&Struct)(self.o).Binded {
				break
			}
			fall
		|:
			self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) > 0 {
			self.s.pushErr(d.Args[0], build::LogMsg.InvalidSyntax)
		}
	}

	fn checkNamespace(mut self, mut &d: &ast::Directive) {
		match type self.o {
		| &Struct:
			if !(&Struct)(self.o).Binded {
				self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		| &Func:
			if !(&Func)(self.o).Binded {
				self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		| &Var:
			if !(&Var)(self.o).Binded {
				self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		|:
			self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) == 0 {
			self.s.pushErr(d.Tag, build::LogMsg.MissingExpr)
			ret
		} else if len(d.Args) > 1 {
			self.s.pushErr(d.Args[1], build::LogMsg.ArgumentOverflow, d.Tag.Kind)
		}

		arg := d.Args[0]
		if arg.Id != token::Id.Lit {
			self.s.pushErr(arg, build::LogMsg.InvalidSyntax)
			ret
		}

		if arg.Kind[0] != '"' {
			self.s.pushErr(arg, build::LogMsg.InvalidSyntax)
			ret
		}

		// remove quotes
		d.Args[0].Kind = arg.Kind[1:len(arg.Kind)-1]

		// Push relevant directives.
		match type self.o {
		| &Struct:
			if findDirective(*self.d, build::Directive.Typedef) == nil {
				mut typedef := &ast::Directive{
					Tag: new(token::Token, *d.Tag),
				}
				typedef.Tag.Kind = build::Directive.Typedef
				*self.d = append(*self.d, typedef)
			}
		}
	}

	fn checkTest(mut self, &d: &ast::Directive) {
		match type self.o {
		| &Func:
			f := (&Func)(self.o)
			if !f.Binded && !f.IsInit() && !f.IsEntryPoint() {
				break
			}
			if f.IsMethod() {
				self.s.pushErr(f.Token, build::LogMsg.TestMethod)
				break
			}
			fall
		|:
			self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) > 0 {
			self.s.pushErr(d.Args[0], build::LogMsg.InvalidSyntax)
		}
	}

	fn checkExport(mut self, mut &d: &ast::Directive) {
		match type self.o {
		| &Func:
			f := (&Func)(self.o)
			if f.Binded || f.IsInit() || f.IsEntryPoint() || f.IsMethod() || len(f.Generics) > 0 {
				self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
				ret
			}
		| &Var:
			v := (&Var)(self.o)
			if v.Binded || v.Constant {
				self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		|:
			self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
			ret
		}
		if len(d.Args) > 1 {
			self.s.pushErr(d.Args[1], build::LogMsg.ArgumentOverflow, d.Tag.Kind)
			ret
		}
		if len(d.Args) < 1 {
			self.s.pushErr(d.Tag, build::LogMsg.MissingExpr)
			ret
		}
		arg := d.Args[0]
		if arg.Id != token::Id.Lit {
			self.s.pushErr(arg, build::LogMsg.InvalidSyntax)
			ret
		}
		if arg.Kind[0] != '"' {
			self.s.pushErr(arg, build::LogMsg.InvalidSyntax)
			ret
		}
		// remove quotes
		d.Args[0].Kind = arg.Kind[1:len(arg.Kind)-1]
	}

	fn checkDirective(mut self, mut &d: &ast::Directive) {
		match d.Tag.Kind {
		| build::Directive.Cdef:
			self.checkCdef(d)
		| build::Directive.Typedef:
			self.checkTypedef(d)
		| build::Directive.Namespace:
			self.checkNamespace(d)
		| build::Directive.Test:
			self.checkTest(d)
		| build::Directive.Export:
			self.checkExport(d)
		| build::Directive.Build
		| build::Directive.Pass:
			self.s.pushErr(d.Tag, build::LogMsg.UnsupportedDirective, d.Tag.Kind)
		|:
			self.s.pushErr(d.Tag, build::LogMsg.InvalidLabel, d.Tag.Kind)
		}
	}

	fn check(mut self) {
		for (_, mut d) in *self.d {
			self.checkDirective(d)
		}
	}
}