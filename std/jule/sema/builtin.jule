// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/fmt"
use "std/jule/ast"
use "std/jule/build"
use "std/jule/constant"
use "std/jule/internal/mod"
use "std/jule/log"
use "std/jule/types"

// Type alias for built-in function callers.
//
// Parameters;
//	e: Caller owner Eval instance.
//	fc: Function call expression.
//	d: Data instance for evaluated expression of function.
type builtinCaller = fn(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value

fn findBuiltinFunc(&ident: str): &FuncIns {
	match ident {
	| "print":
		static mut f = &FuncIns{caller: builtinCallerPrint}
		ret f
	| "println":
		static mut f = &FuncIns{caller: builtinCallerPrintln}
		ret f
	| "new":
		static mut f = &FuncIns{caller: builtinCallerNew}
		ret f
	| "panic":
		static mut f = &FuncIns{caller: builtinCallerPanic}
		ret f
	| "make":
		static mut f = &FuncIns{caller: builtinCallerMake}
		ret f
	| "append":
		static mut f = &FuncIns{caller: builtinCallerAppend}
		ret f
	| "copy":
		static mut f = &FuncIns{caller: builtinCallerCopy}
		ret f
	| "len":
		static mut f = &FuncIns{caller: builtinCallerLen}
		ret f
	| "cap":
		static mut f = &FuncIns{caller: builtinCallerCap}
		ret f
	| "delete":
		static mut f = &FuncIns{caller: builtinCallerDelete}
		ret f
	| "close":
		static mut f = &FuncIns{caller: builtinCallerClose}
		ret f
	|:
		ret nil
	}
}

fn primTypeAlias(ident: str, mut &k: &Type, strict: bool): &TypeAlias {
	if !strict {
		ret &TypeAlias{
			Ident: ident,
			Public: true,
			TypeSym: &TypeSym{
				Type: k,
			},
		}
	}
	mut s := initNewStructType(ident, k)
	s.Checked = true
	s.Decl.Public = true
	ret &TypeAlias{
		Public: true,
		Ident: ident,
		TypeSym: &TypeSym{
			Type: &Type{Kind: s},
		},
	}
}

static mut primNil = &Type{Kind: nil}
static mut primVoid = &Type{Kind: buildPrimType("void")}
static mut primAny = &Type{Kind: buildPrimType(types::Any)}
static mut primStr = &Type{Kind: buildPrimType(types::Str)}
static mut primBool = &Type{Kind: buildPrimType(types::Bool)}
static mut primUintptr = &Type{Kind: buildPrimType(types::Uintptr)}
static mut primUint = &Type{Kind: buildPrimType(types::Uint)}
static mut primInt = &Type{Kind: buildPrimType(types::Int)}
static mut primI8 = &Type{Kind: buildPrimType(types::I8)}
static mut primI16 = &Type{Kind: buildPrimType(types::I16)}
static mut primI32 = &Type{Kind: buildPrimType(types::I32)}
static mut primI64 = &Type{Kind: buildPrimType(types::I64)}
static mut primU8 = &Type{Kind: buildPrimType(types::U8)}
static mut primU16 = &Type{Kind: buildPrimType(types::U16)}
static mut primU32 = &Type{Kind: buildPrimType(types::U32)}
static mut primU64 = &Type{Kind: buildPrimType(types::U64)}
static mut primF32 = &Type{Kind: buildPrimType(types::F32)}
static mut primF64 = &Type{Kind: buildPrimType(types::F64)}

fn findBuiltinVar(&ident: str): &Var {
	match ident {
	| "nil":
		static mut v = &Var{
			Public: true,
			Mutable: false,
			TypeSym: &TypeSym{
				Type: primNil,
			},
			Constant: true,
			ValueSym: &ValueSym{
				Value: &Value{
					Constant: constant::Const.NewNil(),
				},
			},
		}
		ret v
	| "true":
		static mut v = &Var{
			Public: true,
			Mutable: false,
			TypeSym: findBuiltinTypeAlias("bool").TypeSym,
			Constant: true,
			ValueSym: &ValueSym{
				Value: &Value{
					Constant: constant::Const.NewBool(true),
					untyped: true,
				},
			},
		}
		ret v
	| "false":
		static mut v = &Var{
			Public: true,
			Mutable: false,
			TypeSym: findBuiltinTypeAlias("bool").TypeSym,
			Constant: true,
			ValueSym: &ValueSym{
				Value: &Value{
					Constant: constant::Const.NewBool(false),
					untyped: true,
				},
			},
		}
		ret v
	|:
		ret nil
	}
}

fn findBuiltinTypeAlias(ident: str): &TypeAlias {
	match ident {
	| "any":
		static mut t = primTypeAlias("any", primAny, false)
		ret t
	| "str":
		static mut t = primTypeAlias("str", primStr, false)
		ret t
	| "bool":
		static mut t = primTypeAlias("bool", primBool, false)
		ret t
	| "uintptr":
		static mut t = primTypeAlias("uintptr", primUintptr, false)
		ret t
	| "uint":
		static mut t = primTypeAlias("uint", primUint, false)
		ret t
	| "int":
		static mut t = primTypeAlias("int", primInt, false)
		ret t
	| "i8":
		static mut t = primTypeAlias("i8", primI8, false)
		ret t
	| "i16":
		static mut t = primTypeAlias("i16", primI16, false)
		ret t
	| "i32":
		static mut t = primTypeAlias("i32", primI32, false)
		ret t
	| "i64":
		static mut t = primTypeAlias("i64", primI64, false)
		ret t
	| "u8":
		static mut t = primTypeAlias("u8", primU8, false)
		ret t
	| "u16":
		static mut t = primTypeAlias("u16", primU16, false)
		ret t
	| "u32":
		static mut t = primTypeAlias("u32", primU32, false)
		ret t
	| "u64":
		static mut t = primTypeAlias("u64", primU64, false)
		ret t
	| "f32":
		static mut t = primTypeAlias("f32", primF32, false)
		ret t
	| "f64":
		static mut t = primTypeAlias("f64", primF64, false)
		ret t
	| "byte":
		static mut t = primTypeAlias("byte", primU8, true)
		ret t
	| "rune":
		static mut t = primTypeAlias("rune", primI32, false)
		ret t
	|:
		ret nil
	}
}

fn findBuiltinDef(&ident: str): any {
	mut v := findBuiltinVar(ident)
	if v != nil {
		ret v
	}
	mut f := findBuiltinFunc(ident)
	if f != nil {
		ret f
	}
	mut ta := findBuiltinTypeAlias(ident)
	if ta != nil {
		ret ta
	}
	ret nil
}

fn findBuiltinDefStdMem(&ident: str): any {
	match ident {
	| "SizeOf":
		static mut f = &FuncIns{caller: builtinCallerStdMemSizeOf}
		ret f
	| "AlignOf":
		static mut f = &FuncIns{caller: builtinCallerStdMemAlignOf}
		ret f
	|:
		ret nil
	}
}

fn findBuiltinDefStdComptime(&ident: str): any {
	match ident {
	| "TypeOf":
		static mut f = &FuncIns{caller: builtinCallerStdComptimeTypeOf}
		ret f
	| "ValueOf":
		static mut f = &FuncIns{caller: builtinCallerStdComptimeValueOf}
		ret f
	| "Line":
		static mut f = &FuncIns{caller: builtinCallerStdComptimeLine}
		ret f
	| "File":
		static mut f = &FuncIns{caller: builtinCallerStdComptimeFile}
		ret f
	| "Files":
		static mut f = &FuncIns{caller: builtinCallerStdComptimeFiles}
		ret f
	| "TypeAlias":
		static mut f = &FuncIns{caller: builtinCallerStdComptimeTypeAlias}
		ret f
	|:
		ret nil
	}
}

fn findBuiltinDefStdJuleIntegrated(&ident: str): any {
	match ident {
	| "Emit":
		static mut f = &FuncIns{
			Decl: &Func{
				Generics: make([]&ast::Generic, 1),
			},
			caller: builtinCallerStdJuleIntegratedEmit,
		}
		ret f
	|:
		ret nil
	}
}

fn findPackageBuiltinDef(&linkPath: str, &ident: str): any {
	match linkPath {
	| "std/comptime":
		ret findBuiltinDefStdComptime(ident)
	| "std/mem":
		ret findBuiltinDefStdMem(ident)
	| "std/jule/integrated":
		ret findBuiltinDefStdJuleIntegrated(ident)
	|:
		ret nil
	}
}

fn builtinCallerError(mut &e: &eval, mut &fc: &ast::FuncCallExpr): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "err")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "error")
	}
	mut expr := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if expr == nil {
		ret nil
	}

	mut token := fc.Args[0].Token
	if expr.IsNil() {
		e.pushErr(token, log::NilError)
	}

	const Reference = false
	const Mutable = true
	if !e.s.checkValidityForInitExpr(Mutable, Reference, primAny, expr, token) {
		ret nil
	}

	applyImplicitCast(e.s, primAny, expr, token, e.getOwnerRefers())
	mut v := buildVoidValue()
	v.Model = &BuiltinErrorCallExpr{Err: expr}
	ret v
}

fn builtinCallerPrint(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "v")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "print")
	}

	mut arg := fc.Args[0]
	mut expr := e.evalExpr(arg, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if expr == nil {
		ret nil
	}

	if !isBuiltinStrConvertible(expr.Type) {
		e.pushErr(arg.Token, log::InvalidExpr)
		ret nil
	}
	if expr.untyped && expr.IsConst() && expr.Constant.IsInt() {
		i := expr.Constant.ReadInt()
		match {
		| i.IsI64():
			expr.Type = primI64
		| i.IsU64():
			expr.Type = primU64
		}
	}

	pushRuntimeToStr(e.s, expr.Type, arg.Token, e.getOwnerRefers())

	mut v := buildVoidValue()
	v.Model = &BuiltinPrintCallExpr{Expr: expr}
	ret v
}

fn builtinCallerPrintln(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	v = builtinCallerPrint(e, fc, v)
	if v == nil {
		ret nil
	}

	v.Model = &BuiltinPrintlnCallExpr{
		Expr: v.Model.(&BuiltinPrintCallExpr).Expr,
	}
	ret v
}

fn builtinCallerNew(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "type")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[2].Token, log::ArgumentOverflow, "new")
	}

	mut t := e.eval1(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if t == nil {
		ret nil
	}

	if !t.Decl {
		e.pushErr(fc.Args[0].Token, log::InvalidType)
		ret nil
	}

	v.untyped = false
	v.Constant = nil
	v.Type = &Type{
		Kind: &Sptr{
			Elem: t.Type,
		},
	}

	if len(fc.Args) == 2 { // Initialize expression.
		mut old := e.prefix
		e.prefix = t.Type

		mut init := e.evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)

		e.prefix = old

		if init != nil {
			mut token := fc.Args[1].Token
			const Reference = false
			e.s.checkValidityForInitExpr(
				e.target.mutable, Reference, t.Type, init, token)
			_ = e.s.checkAssignType(false, t.Type, init, token, e.getOwnerRefers())

			v.Model = &BuiltinNewCallExpr{
				Type: t.Type,
				Init: init.Model,
			}
		}
	} else {
		v.Model = &BuiltinNewCallExpr{
			Type: t.Type,
		}
	}

	ret v
}

fn builtinCallerPanic(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "message")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[2].Token, log::ArgumentOverflow, "panic")
	}

	mut expr := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if expr == nil {
		ret nil
	}

	if expr.Type.Prim() == nil || !expr.Type.Prim().IsStr() {
		e.pushErr(fc.Token, log::PanickedWithNonStr)
	}

	mut v := buildVoidValue()
	v.Model = &BuiltinPanicCallExpr{
		Token: fc.Token,
		Expr: expr.Model,
	}
	ret v
}

fn builtinCallerMake(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if len(fc.Args) == 0 {
		// All types of the make function, takes at least an argument.
		// So if function called like make(), push an error and return immediately.
		e.pushErr(fc.Token, log::MissingExprFor, "type")
		ret nil
	}
	if len(fc.Args) > 3 {
		// Any type of make function, can't take more than 3 arguments, but we have.
		// Push an error and return immediately, do not evaluate the result.
		e.pushErr(fc.Args[3].Token, log::ArgumentOverflow, "make")
		ret nil
	}
	mut t := e.evalExprKind(fc.Args[0].Kind)
	v.untyped = false
	v.Constant = nil
	match {
	| t == nil:
		// Expression evaluation failed. Error(s) should be logged already.
		// Return as nil immediately.
		ret nil
	| !t.Decl:
		// Type is not declaration, so it is not a type declaration.
		// Push an error and return as nil immediately.
		e.pushErr(fc.Args[0].Token, log::InvalidType)
		ret nil
	| t.Type.Chan() != nil:
		// Type is channel. Make channel initialization.
		if len(fc.Args) > 2 {
			// The channel type variants can take up to 2 arguments, but we have more.
			e.pushErr(fc.Args[2].Token, log::ArgumentOverflow, "make")
			ret nil
		}
		mut model := &BuiltinMakeCallExpr{Type: t.Type}
		v.Model = model
		v.Type = t.Type
		if len(fc.Args) == 2 {
			// We have buffer size argument, evaluate it.
			// So channel is buffered.
			mut capExpr := e.s.eval(e.lookup).evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
			if capExpr == nil {
				ret v
			}
			e.checkIntegerIndexingByData(capExpr, fc.Args[1].Token)
			model.Cap = capExpr.Model
		}
		ret v
	| t.Type.Slice() != nil:
		// Type is slice. Make slice allocation.
		if len(fc.Args) < 2 {
			// The slice type variants always must have to length argument for
			// making slice allocation, but we have not.
			e.pushErr(fc.Token, log::MissingExprFor, "size")
			ret nil
		}
		v.Type = t.Type
		mut lenExpr := e.s.evalp(e.lookup, t.Type).evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
		if lenExpr == nil {
			ret nil
		}
		e.checkIntegerIndexingByData(lenExpr, fc.Args[1].Token)
		mut model := &BuiltinMakeCallExpr{
			Type: t.Type,
			Len: lenExpr.Model,
		}
		v.Model = model
		if len(fc.Args) == 3 {
			// We have capacity argument, evaluate it.
			mut capExpr := e.s.evalp(e.lookup, t.Type).evalExpr(fc.Args[2], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
			if capExpr == nil {
				ret v
			}
			e.checkIntegerIndexingByData(capExpr, fc.Args[2].Token)
			model.Cap = capExpr.Model
		}
		ret v
	|:
		// Type is not supported by the make function.
		// Push an error and return as nil immediately.
		e.pushErr(fc.Args[0].Token, log::InvalidTypeForFunc, t.Type.Str(), "make")
		ret nil
	}
}

fn builtinCallerAppend(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if len(fc.Args) < 2 {
		if len(fc.Args) == 1 {
			e.pushErr(fc.Token, log::MissingExprFor, "values")
			ret nil
		}
		e.pushErr(fc.Token, log::MissingExprFor, "src, values")
		ret nil
	}

	mut firstArg := fc.Args[0]
	mut t := e.evalExpr(firstArg, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if t == nil {
		ret nil
	}

	mut s := t.Type.Slice()
	if s == nil {
		e.pushErr(firstArg.Token, log::InvalidExpr)
		ret nil
	}

	const reference = false // Element parameter is not reference.
	const mutable = true    // Element parameter is mutable.

	if e.s.checkValidityForInitExpr(mutable, reference, t.Type, t, firstArg.Token) {
		// Check type if validity is good.
		// Helps to reduce error logs and duplicated logs.
		_ = e.s.checkAssignType(reference, t.Type, t, firstArg.Token, e.getOwnerRefers())
	}

	mut prefix := e.prefix
	e.prefix = s.Elem
	defer { e.prefix = prefix }

	v = &Value{
		Mutable: true,
		Type: t.Type,
	}
	mut secondArg := fc.Args[1]
	match type secondArg.Kind {
	| &ast::VariadicExpr:
		if len(fc.Args) > 2 {
			e.pushErr(fc.Args[2].Token, log::MoreArgsWithVariadiced)
		}

		mut e1 := e.evalExpr(secondArg.Kind.(&ast::VariadicExpr).Expr, evalDefault | evalPhysicalMem | evalUnwrapUntyped)
		if e1 == nil {
			ret nil
		}
		if s.Elem.Prim() != nil && s.Elem.Prim().IsU8() { // []byte
			if e1.Type.Prim() != nil && e1.Type.Prim().IsStr() {
				// append([]byte, str...)
				v.Model = &BuiltinAppendCallExpr{
					Dest: t,
					Elements: e1,
				}

				if e.s.meta.runtime != nil {
					// Add instance to relevant runtime function for slice type if not exist.
					mut f := runtimeFindFunc(e.s.meta.runtime, "memappend").instanceForce()
					f.Generics = append(f.Generics, &InsGeneric{Type: t.Type}, &InsGeneric{Type: primStr})
					ok, _ := e.s.checkGenericFunc(f, fc.Token)
					if !ok {
						panic("sema: memappend evaluation failed, this is an implementation mistake")
					}
					e.pushReference[&FuncIns](f)
				}

				ret v
			}
		}

		if !e1.Type.Variadicable() {
			e.pushErr(secondArg.Token, log::VariadicWithNonVariadicable, e1.Type.Str())
			ret nil
		}

		if e.s.meta.runtime != nil {
			// Add instance to relevant runtime function for slice type if not exist.
			mut f := runtimeFindFunc(e.s.meta.runtime, "memappend").instanceForce()
			f.Generics = append(f.Generics, &InsGeneric{Type: t.Type}, &InsGeneric{Type: e1.Type})
			ok, _ := e.s.checkGenericFunc(f, fc.Token)
			if !ok {
				panic("sema: memappend evaluation failed, this is an implementation mistake")
			}
			e.pushReference[&FuncIns](f)
		}
		// Source should use the same type with destination.
		// So, to make e1 unvariadic, use type of the destination.
		mut elems := new(Value, *e1)
		elems.Type = t.Type
		v.Model = &BuiltinAppendCallExpr{
			Dest: t,
			Elements: elems,
		}

		makeVariadic(e1, s.Elem)

		// Before the analysis, set variadic kind as not variadic.
		// This is should be made to avoid mutability error for base type of slice.
		// Element types should still be checked.
		// Since the variadiced slice will not mutated, just check mutability risk of elements.
		e1.Type.Variadic = false

		if e.s.checkValidityForInitExpr(mutable, reference, s.Elem, e1, secondArg.Token) {
			e1.Type.Variadic = true
			// Check type if validity is good.
			// Helps to reduce error logs and duplicated logs.
			_ = e.s.checkAssignType(reference, s.Elem, e1, secondArg.Token, e.getOwnerRefers())
		} else {
			e1.Type.Variadic = true
		}

		ret v
	}

	mut slice := &SliceExpr{
		ElemType: s.Elem,
		Elems: make([]&Value, 0, len(fc.Args)-1),
	}
	for (_, mut arg) in fc.Args[1:] {
		// Do not unwrap untyped literals, type analysis will check overflows.
		mut e1 := e.evalExpr(arg, evalDefault)
		if e1 == nil {
			ret nil
		}
		if e1.Type.Variadic {
			e.pushErr(arg.Token, log::MoreArgsWithVariadiced)
		}
		if e.s.checkValidityForInitExpr(mutable, reference, s.Elem, e1, arg.Token) {
			// Check type if validity is good.
			// Helps to reduce error logs and duplicated logs.
			_ = e.s.checkAssignType(reference, s.Elem, e1, arg.Token, e.getOwnerRefers())
		}
		slice.Elems = append(slice.Elems, e1)
	}
	mut srcType := &Type{
		Kind: &Slice{
			Elem: slice.ElemType,
		},
	}
	v.Model = &BuiltinAppendCallExpr{
		Dest: t,
		Elements: &Value{
			Type: srcType,
			Model: slice,
		},
	}

	if e.s.meta.runtime != nil {
		// Add instance to relevant runtime function for slice type if not exist.
		mut f := runtimeFindFunc(e.s.meta.runtime, "memappend").instanceForce()
		f.Generics = append(f.Generics, &InsGeneric{Type: t.Type}, &InsGeneric{Type: srcType})
		ok, _ := e.s.checkGenericFunc(f, fc.Token)
		if !ok {
			panic("sema: memappend evaluation failed, this is an implementation mistake")
		}
		e.pushReference[&FuncIns](f)
	}

	ret v
}

fn callerCopySlice(mut &dest: &Value, mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if !dest.Mutable {
		e.pushErr(fc.Args[0].Token, log::MutOperationOnImmut)
	} else {
		// Dest is mutable, array slicing may be mutable if possible due to slicing.
		// But this function will use the direct memory of the array.
		// So check this special case.
		match type dest.Model {
		| &SlicingExpr:
			mut se := dest.Model.(&SlicingExpr)
			if !se.Expr.Mutable && se.Expr.Type.Array() != nil {
				e.pushErr(fc.Args[0].Token, log::MutOperationOnImmut)
			}
		}
	}

	mut src := e.evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if src == nil {
		ret nil
	}
	mut slc := src.Type.Slice()

	if slc != nil {
		if !src.Mutable && slc.Elem.Mutable() {
			e.pushErr(fc.Args[1].Token, log::MutOperationOnImmut)
		}
		if !dest.Type.Equal(src.Type) {
			e.pushErr(fc.Args[1].Token, log::IncompatibleTypes, dest.Type.Str(), src.Type.Str())
		}
	} else {
		destPrim := dest.Type.Slice().Elem.Prim()
		prim := src.Type.Prim()
		if destPrim == nil || prim == nil || !prim.IsStr() || !destPrim.IsU8() {
			e.pushErr(fc.Args[1].Token, log::IncompatibleTypes, dest.Type.Str(), src.Type.Str())
		}
	}

	if e.s.meta.runtime != nil {
		// Add instance to relevant runtime function for slice type if not exist.
		mut f := runtimeFindFunc(e.s.meta.runtime, "memcopy").instanceForce()
		f.Generics = append(f.Generics, &InsGeneric{Type: dest.Type}, &InsGeneric{Type: src.Type})
		ok, _ := e.s.checkGenericFunc(f, fc.Token)
		if !ok {
			panic("sema: memcopy evaluation failed, this is an implementation mistake")
		}
		e.pushReference[&FuncIns](f)
	}

	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	v.Model = &BuiltinCopyCallExpr{
		Dest: dest,
		Src: src,
	}
	ret v
}

fn builtinCallerCopy(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if len(fc.Args) < 2 {
		if len(fc.Args) == 1 {
			e.pushErr(fc.Token, log::MissingExprFor, "src")
			ret nil
		}
		e.pushErr(fc.Token, log::MissingExprFor, "src, values")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[2].Token, log::ArgumentOverflow, "copy")
	}

	mut dest := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Type.Slice() != nil:
		ret callerCopySlice(dest, e, fc, v)
	|:
		e.pushErr(fc.Args[0].Token, log::InvalidType)
		ret nil
	}
}

fn callerLenSlice(mut &expr: &Value, mut &v: &Value): &Value {
	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	v.Model = &BuiltinLenCallExpr{
		Expr: expr,
	}
	ret v
}

fn callerLenMap(mut &expr: &Value, mut &v: &Value): &Value {
	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	v.Model = &BuiltinLenCallExpr{
		Expr: expr,
	}
	ret v
}

fn callerLenArray(mut &expr: &Value, mut &v: &Value): &Value {
	v.untyped = false
	v.Type = lenKind()
	v.Constant = constant::Const.NewI64(i64(expr.Type.Array().N))
	v.Model = v.Constant
	ret v
}

fn callerLenStr(mut &expr: &Value, mut &v: &Value): &Value {
	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	if expr.IsConst() {
		v.Constant = constant::Const.NewI64(i64(len(expr.Constant.ReadStr())))
		v.Model = v.Constant
	} else {
		v.Model = &BuiltinLenCallExpr{
			Expr: expr,
		}
	}
	ret v
}

fn callerLenComptime(mut &v: &Value, n: int): &Value {
	v.untyped = false
	v.Type = lenKind()
	v.Constant = constant::Const.NewI64(i64(n))
	v.Model = v.Constant
	ret v
}

fn builtinCallerLen(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "obj")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "len")
	}
	mut dest := e.evalExpr1(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Type.Slice() != nil:
		ret callerLenSlice(dest, v)
	| dest.Type.Array() != nil:
		ret callerLenArray(dest, v)
	| dest.Type.Map() != nil:
		ret callerLenMap(dest, v)
	| dest.Type.Prim() != nil && dest.Type.Prim().IsStr():
		ret callerLenStr(dest, v)
	| dest.Type.comptimeStructFields() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeStructFields().fields))
	| dest.Type.comptimeEnumFields() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeEnumFields().fields))
	| dest.Type.comptimeTypeInfos() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeTypeInfos().types))
	| dest.Type.comptimeParams() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeParams().params))
	| dest.Type.comptimeStatics() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeStatics().fields))
	| dest.Type.comptimeFiles() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeFiles().files))
	| dest.Type.comptimeDecls() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeDecls().decls))
	|:
		e.pushErr(fc.Args[0].Token, log::InvalidExpr)
		ret nil
	}
}

fn callerCapSlice(mut &expr: &Value, mut &v: &Value): &Value {
	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	v.Model = &BuiltinCapCallExpr{
		Expr: expr,
	}
	ret v
}

fn builtinCallerCap(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "obj")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "cap")
	}
	mut dest := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Decl:
		e.pushErr(fc.Args[0].Token, log::InvalidExpr)
		ret nil
	| dest.Type.Slice() != nil:
		ret callerCapSlice(dest, v)
	|:
		e.pushErr(fc.Args[0].Token, log::InvalidExpr)
		ret nil
	}
}

fn callerDeleteMap(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &expr: &Value, mut &v: &Value): &Value {
	if !expr.Mutable {
		e.pushErr(fc.Args[0].Token, log::MutOperationOnImmut)
	}
	v = buildVoidValue()
	mut model := &BuiltinDeleteCallExpr{
		Dest: expr,
	}
	if len(fc.Args) == 2 {
		mut key := e.evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
		match {
		| key == nil:
			ret nil
		| key.Decl:
			e.pushErr(fc.Args[1].Token, log::InvalidExpr)
			ret nil
		|:
			const Reference = false
			mut keyType := expr.Type.Map().Key
			if !e.s.checkAssignType(Reference, keyType, key, fc.Args[1].Token, e.getOwnerRefers()) {
				ret nil
			}
		}
		model.Key = key
	}
	v.Model = model
	ret v
}

fn builtinCallerDelete(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "map")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "delete")
	}
	mut dest := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Decl:
		e.pushErr(fc.Args[0].Token, log::InvalidExpr)
		ret nil
	| dest.Type.Map() != nil:
		ret callerDeleteMap(e, fc, dest, v)
	|:
		e.pushErr(fc.Args[0].Token, log::InvalidExpr)
		ret nil
	}
}

fn builtinCallerClose(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "c")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "close")
	}
	mut dest := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Decl:
		e.pushErr(fc.Args[0].Token, log::InvalidExpr)
		ret nil
	| dest.Type.Chan() != nil:
		c := dest.Type.Chan()
		if !c.Send {
			e.pushErr(fc.Args[0].Token, log::CloseRecvOnlyChan)
		}
		v = buildVoidValue()
		v.Model = &BuiltinCloseCallExpr{
			Token: fc.Args[0].Token,
			Chan: dest,
		}
		ret v
	|:
		e.pushErr(fc.Args[0].Token, log::InvalidExpr)
		ret nil
	}
}

fn builtinCallerStdComptimeTypeOf(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "type|expr")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "TypeOf")
	}

	mut v := e.evalExprKind(fc.Args[0].Kind)
	if v == nil {
		ret nil
	}
	f := v.Type.Func()
	if f != nil {
		if f.IsBuiltin() {
			e.pushErr(fc.Args[0].Token, log::InvalidTypeForTypeOf, "<built-in fn>")
			ret nil
		}
		if len(f.Generics) != len(f.Decl.Generics) {
			e.pushErr(fc.Args[0].Token, log::HasGenerics)
			ret nil
		}
	}
	s := v.Type.Struct()
	if s != nil && len(s.Generics) != len(s.Decl.Generics) {
		e.pushErr(fc.Args[0].Token, log::HasGenerics)
		ret nil
	}
	if v.Type.comptime() {
		e.pushErr(fc.Args[0].Token, log::InvalidTypeForTypeOf, v.Type.Str())
		ret nil
	}
	if v.untyped {
		e.pushErr(fc.Args[0].Token, log::InvalidTypeForTypeOf, "\"untyped literal\"")
		ret nil
	}
	ret buildComptimeTypeInfoData(e.s, v.Type)
}

fn builtinCallerStdComptimeValueOf(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "expr")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "ValueOf")
	}
	mut v := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if v == nil {
		ret nil
	}
	// Do not allow value if has unsupported type for type infer.
	if !isGoodValueToInfer(v) {
		e.pushErr(fc.Args[0].Token, log::InvalidTypeForFunc, v.Type.Str(), "ValueOf")
		ret nil
	}
	if v.untyped {
		e.pushErr(fc.Args[0].Token, log::InvalidTypeForTypeOf, "\"untyped literal\"", "ValueOf")
		ret nil
	}
	ret buildComptimeValue(v)
}

fn builtinCallerStdComptimeLine(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "Line")
	}
	mut constant := constant::Const.NewI64(i64(fc.Token.Row))
	ret &Value{
		Type: primInt,
		Constant: constant,
		Model: constant,
	}
}

fn builtinCallerStdComptimeFile(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "File")
	}
	ret &Value{
		Type: &Type{
			Kind: &comptimeFile{
				file: e.s.file,
			},
		},
	}
}

fn builtinCallerStdComptimeFiles(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "Files")
	}
	ret &Value{
		Type: &Type{
			Kind: &comptimeFiles{
				files: e.s.files,
			},
		},
	}
}

fn builtinCallerStdComptimeTypeAlias(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "TypeAlias")
		ret nil
	}
	if len(fc.Args) == 0 {
		e.pushErr(fc.Token, log::MissingExprFor, "ident, type")
		ret nil
	}
	if len(fc.Args) == 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "type")
		ret nil
	}
	mut ie, mut ok := fc.Args[0].Kind.(&ast::IdentExpr)
	if !ok {
		e.pushErr(fc.Args[0].Token, log::InvalidSyntax)
		e.pushSuggestion(log::ExpectedIdentifier)
		ret nil
	}
	mut sc, ok := e.lookup.(&scopeChecker)
	if !ok {
		e.pushErr(fc.Token, log::CalledOutOfScope, "TypeAlias")
		ret nil
	}

	mut ident := ie.Token
	mut alias := &TypeAlias{
		Scope: sc.tree,
		Public: mod::IsPub(ident.Kind),
		Binded: false,
		Used: false,
		Generic: false,
		Token: ident,
		Ident: ident.Kind,
		TypeSym: new(TypeSym),
	}
	mut t := e.eval1(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if t == nil {
		ret nil
	}
	if t.Decl {
		alias.TypeSym.Type = t.Type
	} else {
		mut cti := t.Type.comptimeTypeInfo()
		if cti == nil {
			e.pushErr(fc.Args[1].Token, log::InvalidSyntax)
			e.pushSuggestion(log::ExpectedType)
			ret nil
		}
		alias.TypeSym.Type = cti.base
	}
	sc.checkTypeAlias(alias)
	ret buildVoidValue()
}

fn builtinCallerStdMemSizeOf(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	mut result := &Value{
		Type: primUint,
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "type|expr")
		ret result
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "SizeOf")
	}

	mut v := e.evalExprKind(fc.Args[0].Kind)
	if v == nil {
		ret result
	}
	if !validTypeForXof(v.Type) {
		e.pushErr(fc.Args[0].Token, log::InvalidTypeForFunc, v.Type.Str(), "SizeOf")
	}

	result.Model = &SizeofExpr{Expr: v.Type}
	ret result
}

fn builtinCallerStdMemAlignOf(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &_: &Value): &Value {
	mut result := &Value{
		Type: primUint,
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "type|expr")
		ret result
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, log::ArgumentOverflow, "AlignOf")
	}

	mut v := e.evalExprKind(fc.Args[0].Kind)
	if v == nil {
		ret result
	}
	if !validTypeForXof(v.Type) {
		e.pushErr(fc.Args[0].Token, log::InvalidTypeForFunc, v.Type.Str(), "AlignOf")
	}

	result.Model = &AlignofExpr{Expr: v.Type}
	ret result
}

fn builtinCallerStdJuleIntegratedEmit(mut &e: &eval, mut &fc: &ast::FuncCallExpr, mut &v: &Value): &Value {
	if !e.isUnsafe() {
		e.pushErr(fc.Token, log::UnsafeBehaviorAtOutOfUnsafeScope)
		e.pushSuggestion(log::WriteYourCodeInUnsafeJule)
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, log::MissingExprFor, "code")
		ret nil
	}

	mut argVal := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if argVal == nil {
		ret nil
	}

	if argVal.Type.Prim() == nil || !argVal.Type.Prim().IsStr() {
		e.pushErr(fc.Args[0].Token, log::IncompatibleTypes, argVal.Type.Str(), argVal.Type.Str())
		ret nil
	}

	if !argVal.IsConst() || !argVal.Constant.IsStr() {
		e.pushErr(fc.Args[0].Token, log::ExprNotConst)
		ret nil
	}

	mut r := buildVoidValue()

	mut f := v.Type.Func()
	if len(f.Generics) > 0 {
		r.Type = f.Generics[0].Type
	}

	mut model := &BackendEmitExpr{
		Code: argVal.Constant.ReadStr(),
	}

	if len(fc.Args) > 1 {
		model.Exprs = make([]Expr, 0, len(fc.Args)-1)
		for (_, mut arg) in fc.Args[1:] {
			argVal = e.eval1(arg, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
			if argVal == nil {
				ret nil
			}
			if argVal.Decl {
				model.Exprs = append(model.Exprs, argVal.Type)
			} else {
				model.Exprs = append(model.Exprs, argVal.Model)
			}
		}
	}

	r.Model = model
	ret r
}

// Builds and returns the built-in iota variable representation.
fn buildIota(i: i64): &Var {
	ret &Var{
		Ident: "iota",
		Public: true,
		Mutable: true,
		Checked: true,
		Constant: true,
		TypeSym: findBuiltinTypeAlias("int").TypeSym,
		ValueSym: &ValueSym{
			Value: &Value{
				Constant: constant::Const.NewI64(i),
				untyped: true,
			},
		},
	}
}