// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/fmt"
use "std/jule/ast"
use "std/jule/constant"
use "std/jule/internal/mod"
use "std/jule/log"
use "std/jule/types"

// Type alias for built-in function callers.
//
// Parameters;
//	e: Caller owner Eval instance.
//	fc: Function call expression.
//	d: Data instance for evaluated expression of function.
type builtinCaller = fn(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value

// Initialized by the init function.
let mut builtinFuncs = map[str]&FuncIns{}

fn findBuiltinFunc(name: str): &FuncIns {
	ret builtinFuncs[name]
}

fn primTypeAlias(name: str, mut k: &Type): &TypeAlias {
	ret &TypeAlias{
		Name: name,
		Public: true,
		TypeSym: &TypeSym{
			Type: k,
		},
	}
}

let mut primNil = &Type{Kind: nil}
let mut primVoid = &Type{Kind: buildPrimType("void")}
let mut primAny = &Type{Kind: buildPrimType(types::Any)}
let mut primStr = &Type{Kind: buildPrimType(types::Str)}
let mut primBool = &Type{Kind: buildPrimType(types::Bool)}
let mut primUintptr = &Type{Kind: buildPrimType(types::Uintptr)}
let mut primUint = &Type{Kind: buildPrimType(types::Uint)}
let mut primInt = &Type{Kind: buildPrimType(types::Int)}
let mut primI8 = &Type{Kind: buildPrimType(types::I8)}
let mut primI16 = &Type{Kind: buildPrimType(types::I16)}
let mut primI32 = &Type{Kind: buildPrimType(types::I32)}
let mut primI64 = &Type{Kind: buildPrimType(types::I64)}
let mut primU8 = &Type{Kind: buildPrimType(types::U8)}
let mut primU16 = &Type{Kind: buildPrimType(types::U16)}
let mut primU32 = &Type{Kind: buildPrimType(types::U32)}
let mut primU64 = &Type{Kind: buildPrimType(types::U64)}
let mut primF32 = &Type{Kind: buildPrimType(types::F32)}
let mut primF64 = &Type{Kind: buildPrimType(types::F64)}
let mut primCmplx64 = &Type{Kind: buildPrimType(types::Cmplx64)}
let mut primCmplx128 = &Type{Kind: buildPrimType(types::Cmplx128)}

let mut builtinVars = map[str]&Var{
	"nil": &Var{
		Public: true,
		Mutable: false,
		TypeSym: &TypeSym{
			Type: primNil,
		},
		Constant: true,
		ValueSym: &ValueSym{
			Value: &Value{
				Constant: constant::Const.NewNil(),
			},
		},
	},
	"true": &Var{
		Public: true,
		Mutable: false,
		TypeSym: findBuiltinTypeAlias("bool").TypeSym,
		Constant: true,
		ValueSym: &ValueSym{
			Value: &Value{
				Constant: constant::Const.NewBool(true),
				untyped: true,
			},
		},
	},
	"false": &Var{
		Public: true,
		Mutable: false,
		TypeSym: findBuiltinTypeAlias("bool").TypeSym,
		Constant: true,
		ValueSym: &ValueSym{
			Value: &Value{
				Constant: constant::Const.NewBool(false),
				untyped: true,
			},
		},
	},
}

fn findBuiltinVar(name: str): &Var {
	ret builtinVars[name]
}

let mut builtinTypeAliases: map[str]&TypeAlias = {
	"any": primTypeAlias("any", primAny),
	"str": primTypeAlias("str", primStr),
	"bool": primTypeAlias("bool", primBool),
	"uintptr": primTypeAlias("uintptr", primUintptr),
	"uint": primTypeAlias("uint", primUint),
	"int": primTypeAlias("int", primInt),
	"i8": primTypeAlias("i8", primI8),
	"i16": primTypeAlias("i16", primI16),
	"i32": primTypeAlias("i32", primI32),
	"i64": primTypeAlias("i64", primI64),
	"u8": primTypeAlias("u8", primU8),
	"u16": primTypeAlias("u16", primU16),
	"u32": primTypeAlias("u32", primU32),
	"u64": primTypeAlias("u64", primU64),
	"f32": primTypeAlias("f32", primF32),
	"f64": primTypeAlias("f64", primF64),
	"cmplx64": primTypeAlias("cmplx64", primCmplx64),
	"cmplx128": primTypeAlias("cmplx128", primCmplx128),
	"byte": primTypeAlias("byte", primU8),
	"rune": primTypeAlias("rune", primI32),
}

fn findBuiltinTypeAlias(name: str): &TypeAlias {
	ret builtinTypeAliases[name]
}

fn findBuiltinDef(name: str): any {
	mut v := findBuiltinVar(name)
	if v != nil {
		ret v
	}
	mut f := findBuiltinFunc(name)
	if f != nil {
		ret f
	}
	mut ta := findBuiltinTypeAlias(name)
	if ta != nil {
		ret ta
	}
	ret nil
}

// Initialized by the init function.
let mut builtinFuncsStdMem = map[str]&FuncIns{}

fn findBuiltinDefStdMem(name: str): any {
	mut r, ok := builtinFuncsStdMem[name]
	if ok {
		ret r
	}
	ret nil
}

// Initialized by the init function.
let mut builtinFuncsStdComptime = map[str]&FuncIns{}

fn findBuiltinDefStdComptime(name: str): any {
	mut r, ok := builtinFuncsStdComptime[name]
	if ok {
		ret r
	}
	ret nil
}

// Initialized by the init function.
let mut builtinFuncsStdInteg = map[str]&FuncIns{}

fn findBuiltinDefStdJuleIntegrated(name: str): any {
	match name {
	| "Emit":
		mut funcEmit := builtinFuncsStdInteg[name]
		// Reset generics for every reference because of common instance.
		funcEmit.Generics = nil
		ret funcEmit
	|:
		mut r, ok := builtinFuncsStdInteg[name]
		if ok {
			ret r
		}
		ret nil
	}
}

// Initialized by the init function.
let mut builtinFuncsStdSys = map[str]&FuncIns{}

fn findBuiltinDefStdSys(name: str): any {
	match name {
	| "Addrcall":
		mut funcAddrcall := builtinFuncsStdSys[name]
		// Reset generics for every reference because of common instance.
		funcAddrcall.Generics = nil
		ret funcAddrcall
	|:
		mut r, ok := builtinFuncsStdSys[name]
		if ok {
			ret r
		}
		ret nil
	}
}

fn findPackageBuiltinDef(linkPath: str, name: str): any {
	match linkPath {
	| "std/comptime":
		ret findBuiltinDefStdComptime(name)
	| "std/mem":
		ret findBuiltinDefStdMem(name)
	| "std/jule/integrated":
		ret findBuiltinDefStdJuleIntegrated(name)
	| "std/sys":
		ret findBuiltinDefStdSys(name)
	|:
		ret nil
	}
}

fn builtinCallerError(mut e: &eval, mut fc: &ast::CallExpr): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "error value is missing for error call")
		e.pushSuggestion("call like; error(myError)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to error call")
		e.pushSuggestion("call like; error(myError)")
	}
	mut expr := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if expr == nil {
		ret nil
	}

	mut token := fc.Args[0].Token
	if expr.IsNil() {
		e.pushErr(token, "error calls does not supports nil literal as error")
	}

	const Reference = false
	const Mutable = true
	if !e.s.checkValidityForInitExpr(Mutable, Reference, primAny, expr, token) {
		ret nil
	}

	applyImplicitCast(e.s, primAny, expr, token, e.getOwnerRefers())
	mut v := buildVoidValue()
	v.Model = &BuiltinErrorCallExpr{Err: expr}
	ret v
}

fn builtinCallerPrint(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "expression is missing for print/println")
		e.pushSuggestion("call like; print(value)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to print")
		e.pushSuggestion("call like; print(value)")
	}

	mut arg := fc.Args[0]
	mut expr := e.evalExpr(arg, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if expr == nil {
		ret nil
	}

	if !isBuiltinStrConvertible(expr.Type) {
		e.pushErr(arg.Token, "invalid expression")
		ret nil
	}
	if expr.untyped && expr.IsConst() && expr.Constant.IsInt() {
		i := expr.Constant.ReadInt()
		match {
		| i.IsI64():
			expr.Type = primI64
		| i.IsU64():
			expr.Type = primU64
		}
	}

	pushRuntimeToStr(e.s, expr.Type, arg.Token, e.getOwnerRefers())

	mut v := buildVoidValue()
	v.Model = &BuiltinPrintCallExpr{Expr: expr}
	ret v
}

fn builtinCallerPrintln(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	v = builtinCallerPrint(e, fc, v)
	if v == nil {
		ret nil
	}

	v.Model = &BuiltinPrintlnCallExpr{
		Expr: v.Model.(&BuiltinPrintCallExpr).Expr,
	}
	ret v
}

fn builtinCallerNew(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "type is missing of allocation")
		e.pushSuggestion("call like; new(Type), it returns &Type")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Token, "passed more argument than expected to new")
		e.pushSuggestion("call like; new(Type), it returns &Type")
	}

	mut t := e.eval(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if t == nil {
		ret nil
	}

	if !t.Decl {
		e.pushErr(fc.Args[0].Token, "invalid type")
		e.pushSuggestion("expected type declaration, found value")
		ret nil
	}

	v.untyped = false
	v.Constant = nil
	v.Type = &Type{
		Kind: &Sptr{
			Value: t.Type,
		},
	}

	if len(fc.Args) == 2 { // Initialize expression.
		mut old := e.prefix
		e.prefix = t.Type

		mut init := e.evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)

		e.prefix = old

		if init != nil {
			mut token := fc.Args[1].Token
			const Reference = false
			const FirstAssignToDest = false
			if e.s.checkValidityForInitExpr(
				e.target.mutable, Reference, t.Type, init, token) {
				e.s.checkAssignType(Reference, FirstAssignToDest, t.Type, init, token, e.getOwnerRefers())
			}

			v.Model = &BuiltinNewCallExpr{
				Type: t.Type,
				Init: init.Model,
			}
		}
	} else {
		v.Model = &BuiltinNewCallExpr{
			Type: t.Type,
		}
	}

	ret v
}

fn builtinCallerPanic(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "message is missing of panic")
		e.pushSuggestion("call like; panic(message)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to panic")
		e.pushSuggestion("call like; panic(message)")
	}

	mut expr := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if expr == nil {
		ret nil
	}

	if expr.Type.Prim() == nil || !expr.Type.Prim().IsStr() {
		e.pushErr(fc.Token, "message of panics calls must be string")
	}

	mut v := buildVoidValue()
	v.Model = &BuiltinPanicCallExpr{
		Token: fc.Token,
		Expr: expr.Model,
	}
	ret v
}

fn builtinCallerMake(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) == 0 {
		// All types of the make function, takes at least an argument.
		// So if function called like make(), push an error and return immediately.
		e.pushErr(fc.Token, "type is missing of allocation")
		e.pushSuggestion("call like; make(Type, ...)")
		ret nil
	}
	if len(fc.Args) > 3 {
		// Any type of make function, can't take more than 3 arguments, but we have.
		// Push an error and return immediately, do not evaluate the result.
		e.pushErr(fc.Token, "passed more argument than expected to make")
		e.pushSuggestion("call like; make(Type, ...)")
		ret nil
	}
	mut t := e.eval(fc.Args[0], evalDefault)
	v.untyped = false
	v.Constant = nil
	match {
	| t == nil:
		// Expression evaluation failed. Error(s) should be logged already.
		// Return as nil immediately.
		ret nil
	| !t.Decl:
		// Type is not declaration, so it is not a type declaration.
		// Push an error and return as nil immediately.
		e.pushErr(fc.Args[0].Token, "invalid type")
		e.pushSuggestion("expected type declaration, found value")
		ret nil
	| t.Type.Chan() != nil:
		// Type is channel. Make channel initialization.
		if len(fc.Args) > 2 {
			// The channel type variants can take up to 2 arguments, but we have more.
			e.pushErr(fc.Token, "passed more argument than expected to make")
			e.pushSuggestion("call like; make(Type, ...)")
			ret nil
		}
		mut model := &BuiltinMakeCallExpr{Type: t.Type}
		v.Model = model
		v.Type = t.Type
		if len(fc.Args) == 2 {
			// We have buffer size argument, evaluate it.
			// So channel is buffered.
			mut capExpr := e.s.eval(e.lookup).evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
			if capExpr == nil {
				ret v
			}
			e.checkIntegerIndexByData(capExpr, fc.Args[1].Token)
			model.Cap = capExpr.Model
		}
		ret v
	| t.Type.Slice() != nil:
		// Type is slice. Make slice allocation.
		if len(fc.Args) < 2 {
			// The slice type variants always must have to length argument for
			// making slice allocation, but we have not.
			e.pushErr(fc.Token, "size is missing of slice allocation")
			e.pushSuggestion("call like; make(Type, Length) or make(Type, Length, Capacity)")
			ret nil
		}
		v.Type = t.Type
		mut lenExpr := e.s.evalp(e.lookup, t.Type).evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
		if lenExpr == nil {
			ret nil
		}
		e.checkIntegerIndexByData(lenExpr, fc.Args[1].Token)
		mut model := &BuiltinMakeCallExpr{
			Type: t.Type,
			Len: lenExpr.Model,
		}
		v.Model = model
		if len(fc.Args) == 3 {
			// We have capacity argument, evaluate it.
			mut capExpr := e.s.evalp(e.lookup, t.Type).evalExpr(fc.Args[2], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
			if capExpr == nil {
				ret v
			}
			e.checkIntegerIndexByData(capExpr, fc.Args[2].Token)
			model.Cap = capExpr.Model
		}
		ret v
	|:
		// Type is not supported by the make function.
		// Push an error and return as nil immediately.
		e.pushErr(fc.Args[0].Token, "type @ is invalid for function make", t.Type.Str())
		e.pushSuggestion("expected slice or channel type")
		ret nil
	}
}

fn builtinCallerAppend(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) < 2 {
		if len(fc.Args) == 1 {
			e.pushErr(fc.Token, "values are missing to append")
			e.pushSuggestion("call like; append(dest, values...)")
			ret nil
		}
		e.pushErr(fc.Token, "destination and values are missing to append")
		e.pushSuggestion("call like; append(dest, values...)")
		ret nil
	}

	mut firstArg := fc.Args[0]
	mut t := e.evalExpr(firstArg, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if t == nil {
		ret nil
	}

	mut s := t.Type.Slice()
	if s == nil {
		e.pushErr(firstArg.Token, "invalid expression")
		e.pushSuggestion("expected slice expression")
		ret nil
	}

	const reference = false         // Element parameter is not reference.
	const firstAssignToDest = false // Element parameter is not reference, so this info will not be used.
	const mutable = true            // Element parameter is mutable.

	if e.s.checkValidityForInitExpr(mutable, reference, t.Type, t, firstArg.Token) {
		// Check type if validity is good.
		// Helps to reduce error logs and duplicated logs.
		_ = e.s.checkAssignType(reference, firstAssignToDest, t.Type, t, firstArg.Token, e.getOwnerRefers())
	}

	mut prefix := e.prefix
	e.prefix = s.Value
	defer { e.prefix = prefix }

	v = &Value{
		Mutable: true,
		Type: t.Type,
	}
	mut secondArg := fc.Args[1]
	mut variadic, _ := secondArg.Data.(&ast::VariadicExpr)
	if variadic != nil {
		if len(fc.Args) > 2 {
			e.pushErr(fc.Args[2].Token, "variadic argument cannot be used with plain arguments")
		}

		mut e1 := e.evalExpr(variadic.X, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
		if e1 == nil {
			ret nil
		}
		if s.Value.Prim() != nil && s.Value.Prim().IsU8() { // []byte
			if e1.Type.Prim() != nil && e1.Type.Prim().IsStr() {
				// append([]byte, str...)
				v.Model = &BuiltinAppendCallExpr{
					Dest: t,
					Elements: e1,
				}

				if e.s.meta.runtime != nil {
					// Add instance to relevant runtime function for slice type if not exist.
					mut f := runtimeFindFunc(e.s.meta.runtime, "memappend").instanceForce()
					f.Generics = append(f.Generics, &InsGeneric{Type: t.Type}, &InsGeneric{Type: primStr})
					ok, _ := e.s.checkGenericFunc(&f, fc.Token)
					if !ok {
						panic("sema: memappend evaluation failed, this is an implementation mistake")
					}
					e.pushReference(f)
				}

				ret v
			}
		}

		if !e1.Type.Variadicable() {
			e.pushErr(secondArg.Token, "type @ is not variadicable", e1.Type.Str())
			ret nil
		}

		if e.s.meta.runtime != nil {
			// Add instance to relevant runtime function for slice type if not exist.
			mut f := runtimeFindFunc(e.s.meta.runtime, "memappend").instanceForce()
			f.Generics = append(f.Generics, &InsGeneric{Type: t.Type}, &InsGeneric{Type: e1.Type})
			ok, _ := e.s.checkGenericFunc(&f, fc.Token)
			if !ok {
				panic("sema: memappend evaluation failed, this is an implementation mistake")
			}
			e.pushReference(f)
		}
		// Source should use the same type with destination.
		// So, to make e1 unvariadic, use type of the destination.
		mut elems := new(Value, *e1)
		elems.Type = t.Type
		v.Model = &BuiltinAppendCallExpr{
			Dest: t,
			Elements: elems,
		}

		makeVariadic(e1, e1.Type.Slice().Value)

		// Before the analysis, set variadic kind as not variadic.
		// This is should be made to avoid mutability error for base type of slice.
		// Element types should still be checked.
		// Since the variadiced slice will not mutated, just check mutability risk of elements.
		e1.Type.Variadic = false

		if e.s.checkValidityForInitExpr(mutable, reference, s.Value, e1, secondArg.Token) {
			e1.Type.Variadic = true
			// Check type if validity is good.
			// Helps to reduce error logs and duplicated logs.
			_ = e.s.checkAssignType(reference, firstAssignToDest, s.Value, e1, secondArg.Token, e.getOwnerRefers())
		} else {
			e1.Type.Variadic = true
		}

		ret v
	}

	mut slice := &SliceExpr{
		ElemType: s.Value,
		Elems: make([]&Value, 0, len(fc.Args)-1),
	}
	for (_, mut arg) in fc.Args[1:] {
		// Do not unwrap untyped literals, type analysis will check overflows.
		mut e1 := e.evalExpr(arg, evalDefault)
		if e1 == nil {
			ret nil
		}
		if e1.Type.Variadic {
			e.pushErr(arg.Token, "variadic argument cannot be used with plain arguments")
		}
		if e.s.checkValidityForInitExpr(mutable, reference, s.Value, e1, arg.Token) {
			// Check type if validity is good.
			// Helps to reduce error logs and duplicated logs.
			_ = e.s.checkAssignType(reference, firstAssignToDest, s.Value, e1, arg.Token, e.getOwnerRefers())
		}
		slice.Elems = append(slice.Elems, e1)
	}
	mut srcType := &Type{
		Kind: &Slice{
			Value: slice.ElemType,
		},
	}
	v.Model = &BuiltinAppendCallExpr{
		Dest: t,
		Elements: &Value{
			Type: srcType,
			Model: slice,
		},
	}

	if e.s.meta.runtime != nil {
		// Add instance to relevant runtime function for slice type if not exist.
		mut f := runtimeFindFunc(e.s.meta.runtime, "memappend").instanceForce()
		f.Generics = append(f.Generics, &InsGeneric{Type: t.Type}, &InsGeneric{Type: srcType})
		ok, _ := e.s.checkGenericFunc(&f, fc.Token)
		if !ok {
			panic("sema: memappend evaluation failed, this is an implementation mistake")
		}
		e.pushReference(f)
	}

	ret v
}

fn callerCopySlice(mut dest: &Value, mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if !dest.Mutable {
		e.pushErr(fc.Args[0].Token, "cannot copy to immutable destination")
	} else {
		// Dest is mutable but array slicing may be mutable due to slicing.
		// But this function will use the direct memory of the array.
		// So check this special case.
		mut se, ok := dest.Model.(&SlicingExpr)
		if ok && !se.Expr.Mutable && se.Expr.Type.Array() != nil {
			e.pushErr(fc.Args[0].Token, "cannot copy to immutable destination")
		}
	}

	mut src := e.evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if src == nil {
		ret nil
	}
	mut slc := src.Type.Slice()

	if slc != nil {
		if !src.Mutable && slc.Value.Mutable() {
			e.pushErr(fc.Args[1].Token, "cannot copy to immutable destination")
		}
		// Use ActualEqual to eliminate strict type aliases.
		// If actual types are equal, then copy is safe.
		// No matter strict type aliases.
		if !dest.Type.ActualEqual(src.Type) {
			e.pushErr(fc.Args[1].Token, "mismatched types: @ and @", dest.Type.Str(), src.Type.Str())
		}
	} else {
		destPrim := dest.Type.Slice().Value.Prim()
		prim := src.Type.Prim()
		if destPrim == nil || prim == nil || !prim.IsStr() || !destPrim.IsU8() {
			e.pushErr(fc.Args[1].Token, "mismatched types: @ and @", dest.Type.Str(), src.Type.Str())
		}
	}

	if e.s.meta.runtime != nil {
		// Add instance to relevant runtime function for slice type if not exist.
		mut f := runtimeFindFunc(e.s.meta.runtime, "memcopy").instanceForce()
		f.Generics = append(f.Generics, &InsGeneric{Type: dest.Type}, &InsGeneric{Type: src.Type})
		mut ok, _ := e.s.checkGenericFunc(&f, fc.Token)
		if !ok {
			panic("sema: memcopy evaluation failed, this is an implementation mistake")
		}
		e.pushReference(f)

		if Fastmemcopy(dest.Type.Slice().Value) {
			f = runtimeFindFunc(e.s.meta.runtime, "fastmemcopy").instanceForce()
			f.Generics = append(f.Generics, &InsGeneric{Type: dest.Type}, &InsGeneric{Type: src.Type})
			ok, _ = e.s.checkGenericFunc(&f, fc.Token)
			if !ok {
				panic("sema: fastmemcopy evaluation failed, this is an implementation mistake")
			}
			e.pushReference(f)
		}
	}

	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	v.Model = &BuiltinCopyCallExpr{
		Dest: dest,
		Src: src,
	}
	ret v
}

fn builtinCallerCopy(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) < 2 {
		if len(fc.Args) == 1 {
			e.pushErr(fc.Token, "source is missing to copy")
			e.pushSuggestion("call like; copy(dest, src)")
			ret nil
		}
		e.pushErr(fc.Token, "destination and source is missing to copy")
		e.pushSuggestion("call like; copy(dest, src)")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Token, "passed more argument than expected to copy")
		e.pushSuggestion("call like; copy(dest, src)")
	}

	mut dest := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Type.Slice() != nil:
		ret callerCopySlice(dest, e, fc, v)
	|:
		e.pushErr(fc.Args[0].Token, "invalid type")
		e.pushSuggestion("expected slice destination")
		ret nil
	}
}

fn callerLenSlice(mut expr: &Value, mut v: &Value): &Value {
	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	v.Model = &BuiltinLenCallExpr{
		Expr: expr,
	}
	ret v
}

fn callerLenMap(mut expr: &Value, mut v: &Value): &Value {
	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	v.Model = &BuiltinLenCallExpr{
		Expr: expr,
	}
	ret v
}

fn callerLenArray(mut expr: &Value, mut v: &Value): &Value {
	v.untyped = false
	v.Type = lenKind()
	v.Constant = constant::Const.NewI64(i64(expr.Type.Array().N))
	v.Model = v.Constant
	ret v
}

fn callerLenStr(mut expr: &Value, mut v: &Value): &Value {
	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	if expr.IsConst() {
		v.Constant = constant::Const.NewI64(i64(len(expr.Constant.ReadStr())))
		v.Model = v.Constant
	} else {
		v.Model = &BuiltinLenCallExpr{
			Expr: expr,
		}
	}
	ret v
}

fn callerLenComptime(mut v: &Value, n: int): &Value {
	v.untyped = false
	v.Type = lenKind()
	v.Constant = constant::Const.NewI64(i64(n))
	v.Model = v.Constant
	ret v
}

fn builtinCallerLen(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "expression is missing for len")
		e.pushSuggestion("call like; len(value)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to len")
		e.pushSuggestion("call like; len(value)")
	}
	mut dest := e.evalExpr1(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Type.Slice() != nil:
		ret callerLenSlice(dest, v)
	| dest.Type.Array() != nil:
		ret callerLenArray(dest, v)
	| dest.Type.Map() != nil:
		ret callerLenMap(dest, v)
	| dest.Type.Prim() != nil && dest.Type.Prim().IsStr():
		ret callerLenStr(dest, v)
	| dest.Type.comptimeStructFields() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeStructFields().fields))
	| dest.Type.comptimeEnumFields() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeEnumFields().fields))
	| dest.Type.comptimeTypeInfos() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeTypeInfos().types))
	| dest.Type.comptimeParams() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeParams().params))
	| dest.Type.comptimeStatics() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeStatics().fields))
	| dest.Type.comptimeFiles() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeFiles().files))
	| dest.Type.comptimeDecls() != nil:
		ret callerLenComptime(v, len(dest.Type.comptimeDecls().decls))
	|:
		e.pushErr(fc.Args[0].Token, "invalid expression")
		e.pushSuggestion("expected array, slice, string, map or supported comptime type")
		ret nil
	}
}

fn callerCapSlice(mut expr: &Value, mut v: &Value): &Value {
	v.untyped = false
	v.Constant = nil
	v.Type = lenKind()
	v.Model = &BuiltinCapCallExpr{
		Expr: expr,
	}
	ret v
}

fn builtinCallerCap(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "expression is missing for cap")
		e.pushSuggestion("call like; cap(value)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to cap")
		e.pushSuggestion("call like; cap(value)")
	}
	mut dest := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Decl:
		e.pushErr(fc.Args[0].Token, "invalid expression")
		ret nil
	| dest.Type.Slice() != nil:
		ret callerCapSlice(dest, v)
	|:
		e.pushErr(fc.Args[0].Token, "invalid expression")
		e.pushSuggestion("expected slice type")
		ret nil
	}
}

fn callerDeleteMap(mut e: &eval, mut fc: &ast::CallExpr, mut expr: &Value, mut v: &Value): &Value {
	if !expr.Mutable {
		e.pushErr(fc.Args[0].Token, "cannot delete from immutable memory")
	}
	v = buildVoidValue()
	mut model := &BuiltinDeleteCallExpr{
		Dest: expr,
	}
	if len(fc.Args) == 2 {
		mut key := e.evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
		match {
		| key == nil:
			ret nil
		| key.Decl:
			e.pushErr(fc.Args[1].Token, "invalid expression")
			ret nil
		|:
			const Reference = false
			const FirstAssignToDest = false
			mut keyType := expr.Type.Map().Key
			if !e.s.checkAssignType(Reference, FirstAssignToDest, keyType, key, fc.Args[1].Token, e.getOwnerRefers()) {
				ret nil
			}
		}
		model.Key = key
	}
	v.Model = model
	ret v
}

fn builtinCallerDelete(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "source is missing for delete")
		e.pushSuggestion("call like; delete(source, ...)")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Token, "passed more argument than expected to delete")
		e.pushSuggestion("call like; delete(source, ...)")
	}
	mut dest := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Decl:
		e.pushErr(fc.Args[0].Token, "invalid expression")
		ret nil
	| dest.Type.Map() != nil:
		ret callerDeleteMap(e, fc, dest, v)
	|:
		e.pushErr(fc.Args[0].Token, "invalid expression")
		e.pushSuggestion("expected map type")
		ret nil
	}
}

fn builtinCallerClose(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "channel is missing to close")
		e.pushSuggestion("call like; close(c)")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Token, "passed more argument than expected to close")
		e.pushSuggestion("call like; close(c)")
	}
	mut dest := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	match {
	| dest == nil:
		ret nil
	| dest.Decl:
		e.pushErr(fc.Args[0].Token, "invalid expression")
		ret nil
	| dest.Type.Chan() != nil:
		c := dest.Type.Chan()
		if !c.Send {
			e.pushErr(fc.Args[0].Token, "closed receive-only channel")
			e.pushSuggestion("send permission needed to close a channel")
		}
		v = buildVoidValue()
		v.Model = &BuiltinCloseCallExpr{
			Token: fc.Args[0].Token,
			Chan: dest,
		}
		ret v
	|:
		e.pushErr(fc.Args[0].Token, "invalid expression")
		e.pushSuggestion("expected channel type")
		ret nil
	}
}

fn builtinCallerReal(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "complex number is missing for real")
		e.pushSuggestion("call like; real(c)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to real")
		e.pushSuggestion("call like; real(c)")
	}
	mut c := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if c == nil {
		ret nil
	}
	prim := c.Type.Prim()
	if prim == nil || !types::IsCmplx(c.Type.Prim().Kind) {
		e.pushErr(fc.Args[0].Token, "invalid expression")
		e.pushSuggestion("expected complex number type")
		ret nil
	}
	mut r := buildVoidValue()
	match prim.Kind {
	| types::Cmplx64:
		r.Type = primF32
	| types::Cmplx128:
		r.Type = primF64
	|:
		panic("unreachable")
	}
	r.Model = &BuiltinRealCallExpr{
		Cmplx: c,
	}
	ret r
}

fn builtinCallerImag(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "complex number is missing for imag")
		e.pushSuggestion("call like; real(c)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to imag")
		e.pushSuggestion("call like; imag(c)")
	}
	mut c := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if c == nil {
		ret nil
	}
	prim := c.Type.Prim()
	if prim == nil || !types::IsCmplx(c.Type.Prim().Kind) {
		e.pushErr(fc.Args[0].Token, "invalid expression")
		e.pushSuggestion("expected complex number type")
		ret nil
	}
	mut r := buildVoidValue()
	match prim.Kind {
	| types::Cmplx64:
		r.Type = primF32
	| types::Cmplx128:
		r.Type = primF64
	|:
		panic("unreachable")
	}
	r.Model = &BuiltinImagCallExpr{
		Cmplx: c,
	}
	ret r
}

fn builtinCallerCmplx(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "real part of the complex number is missing")
		e.pushSuggestion("call like; cmplx(real, imag)")
		ret nil
	}
	if len(fc.Args) < 2 {
		e.pushErr(fc.Token, "real part of the complex number is missing")
		e.pushSuggestion("call like; cmplx(real, imag)")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Token, "passed more argument than expected to cmplx")
		e.pushSuggestion("call like; cmplx(real, imag)")
	}

	mut prefix := e.prefix
	e.prefix = primF64
	defer { e.prefix = prefix }

	mut real := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if real == nil {
		ret nil
	}

	rp := real.Type.Prim()
	if rp == nil || !types::IsFloat(rp.Kind) {
		e.pushErr(fc.Args[0].Token, "invalid expression")
		e.pushSuggestion("expected floating-point value")
		ret nil
	}

	e.prefix = real.Type
	mut imag := e.evalExpr(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if imag == nil {
		ret nil
	}

	ip := imag.Type.Prim()
	if ip == nil || ip.Kind != rp.Kind {
		e.pushErr(fc.Args[1].Token, "expected "+rp.Kind+", found "+ip.Str())
		ret nil
	}

	mut r := buildVoidValue()
	match rp.Kind {
	| types::F32:
		r.Type = primCmplx64
	| types::F64:
		r.Type = primCmplx128
	|:
		panic("unreachable")
	}
	r.Model = &BuiltinCmplxCallExpr{
		Real: real,
		Imag: imag,
	}
	ret r
}

fn builtinCallerStdComptimeTypeOf(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "type or expression is missing for TypeOf")
		e.pushSuggestion("call like; TypeOf(typeOrValue)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to TypeOf")
		e.pushSuggestion("call like; TypeOf(typeOrValue)")
	}

	mut v := e.eval(fc.Args[0], evalDefault)
	if v == nil {
		ret nil
	}
	f := v.Type.Func()
	if f != nil {
		if f.IsBuiltin() {
			e.pushErr(fc.Args[0].Token, "TypeOf does not supports built-in functions")
			ret nil
		}
		if len(f.Generics) != len(f.Decl.Generics) {
			e.pushErr(fc.Args[0].Token, "function has generics but not instantiated with generics")
			ret nil
		}
	}
	s := v.Type.Struct()
	if s != nil && len(s.Generics) != len(s.Decl.Generics) {
		e.pushErr(fc.Args[0].Token, "structure has generics but not instantiated with generics")
		ret nil
	}
	if v.Type.comptime() {
		e.pushErr(fc.Args[0].Token, "comptime::TypeOf does not support type \"untyped literal\"")
		ret nil
	}
	if v.untyped {
		e.pushErr(fc.Args[0].Token, "comptime::TypeOf does not support value \"untyped literal\"")
		ret nil
	}
	ret buildComptimeTypeInfoData(e.s, v.Type)
}

fn builtinCallerStdComptimeValueOf(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "expression is missing for ValueOf")
		e.pushSuggestion("call like; ValueOf(value)")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to ValueOf")
		e.pushSuggestion("call like; ValueOf(value)")
	}
	mut v := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if v == nil {
		ret nil
	}
	// Do not allow value if has unsupported type for type infer.
	if !isGoodValueToInfer(v) {
		e.pushErr(fc.Args[0].Token, "type @ is invalid for function ValueOf", v.Type.Str())
		ret nil
	}
	if v.untyped {
		e.pushErr(fc.Args[0].Token, "comptime::ValueOf does not support value \"untyped literal\"")
		ret nil
	}
	ret buildComptimeValue(v)
}

fn builtinCallerStdComptimeLine(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Token, "passed more argument than expected to Line")
		e.pushSuggestion("call like; Line()")
	}
	mut constant := constant::Const.NewI64(i64(fc.Token.Row))
	ret &Value{
		Type: primInt,
		Constant: constant,
		Model: constant,
	}
}

fn builtinCallerStdComptimeFile(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Token, "passed more argument than expected to File")
		e.pushSuggestion("call like; File()")
	}
	ret &Value{
		Type: &Type{
			Kind: &comptimeFile{
				file: e.s.file,
			},
		},
	}
}

fn builtinCallerStdComptimeFiles(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Token, "passed more argument than expected to Files")
		e.pushSuggestion("call like; Files()")
	}
	ret &Value{
		Type: &Type{
			Kind: &comptimeFiles{
				files: e.s.files,
			},
		},
	}
}

fn builtinCallerStdComptimeTypeAlias(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	if len(fc.Args) > 2 {
		e.pushErr(fc.Token, "passed more argument than expected to TypeAlias")
		e.pushSuggestion("call like; TypeAlias(Name, Type)")
		ret nil
	}
	if len(fc.Args) == 0 {
		e.pushErr(fc.Token, "identifier and type is missing for TypeAlias")
		e.pushSuggestion("call like; TypeAlias(Name, Type)")
		ret nil
	}
	if len(fc.Args) == 1 {
		e.pushErr(fc.Token, "type is missing for TypeAlias")
		e.pushSuggestion("call like; TypeAlias(Name, Type)")
		ret nil
	}
	mut ie, mut ok := fc.Args[0].Data.(&ast::NameExpr)
	if !ok {
		e.pushErr(fc.Args[0].Token, "invalid syntax")
		e.pushSuggestion("give an identifier because identifier expected")
		ret nil
	}
	mut sc, ok := e.lookup.(&scopeChecker)
	if !ok {
		e.pushErr(fc.Token, "function TypeAlias called out of scope")
		ret nil
	}

	mut name := ie.Token
	mut alias := &TypeAlias{
		Scope: sc.tree,
		Public: mod::IsPub(name.Kind),
		Bind: false,
		Used: false,
		Generic: false,
		Token: name,
		Name: name.Kind,
		TypeSym: new(TypeSym),
	}
	mut t := e.eval1(fc.Args[1], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if t == nil {
		ret nil
	}
	if t.Decl {
		alias.TypeSym.Type = t.Type
	} else {
		mut cti := t.Type.comptimeTypeInfo()
		if cti == nil {
			e.pushErr(fc.Args[1].Token, "invalid syntax")
			e.pushSuggestion("expected type declaration")
			ret nil
		}
		alias.TypeSym.Type = cti.base
	}
	sc.checkTypeAlias(alias)
	ret buildVoidValue()
}

fn builtinCallerStdMemSizeOf(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	mut result := &Value{
		Type: primUint,
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "type or expression is missing for SizeOf")
		e.pushSuggestion("call like; SizeOf(typeOrValue)")
		ret result
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to SizeOf")
		e.pushSuggestion("call like; SizeOf(typeOrValue)")
	}

	mut v := e.eval(fc.Args[0], evalDefault)
	if v == nil {
		ret result
	}
	if !validTypeForXof(v.Type) {
		e.pushErr(fc.Args[0].Token, "type @ is invalid for function SizeOf", v.Type.Str())
	}

	result.Model = &SizeofExpr{Expr: v.Type}
	ret result
}

fn builtinCallerStdMemAlignOf(mut e: &eval, mut fc: &ast::CallExpr, _: &Value): &Value {
	mut result := &Value{
		Type: primUint,
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "type or expression is missing for AlignOf")
		e.pushSuggestion("call like; AlignOf(typeOrValue)")
		ret result
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Token, "passed more argument than expected to AlignOf")
		e.pushSuggestion("call like; AlignOf(typeOrValue)")
	}

	mut v := e.eval(fc.Args[0], evalDefault)
	if v == nil {
		ret result
	}
	if !validTypeForXof(v.Type) {
		e.pushErr(fc.Args[0].Token, "type @ is invalid for function AlignOf", v.Type.Str())
	}

	result.Model = &AlignofExpr{Expr: v.Type}
	ret result
}

fn builtinCallerStdJuleIntegratedEmit(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if !e.isUnsafe() {
		e.pushErr(fc.Token, "Emit function cannot be used without Unsafe Jule")
		e.pushSuggestion(`use unsafe Jule with "unsafe { ... }"`)
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "code is missing to emit")
		e.pushSuggestion("call like; Emit(code)")
		ret nil
	}

	mut argVal := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if argVal == nil {
		ret nil
	}

	if argVal.Type.Prim() == nil || !argVal.Type.Prim().IsStr() {
		e.pushErr(fc.Args[0].Token, "mismatched types: @ and @", argVal.Type.Str(), primStr.Str())
		ret nil
	}

	if !argVal.IsConst() || !argVal.Constant.IsStr() {
		e.pushErr(fc.Args[0].Token, "expression must be constant")
		ret nil
	}

	mut r := buildVoidValue()

	mut f := v.Type.Func()
	if len(f.Generics) > 0 {
		r.Type = f.Generics[0].Type
	}

	mut model := &BackendEmitExpr{
		Code: argVal.Constant.ReadStr(),
	}

	if len(fc.Args) > 1 {
		model.Exprs = make([]Expr, 0, len(fc.Args)-1)
		for (_, mut arg) in fc.Args[1:] {
			argVal = e.eval(arg, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
			if argVal == nil {
				ret nil
			}
			if argVal.Decl {
				model.Exprs = append(model.Exprs, argVal.Type)
			} else {
				model.Exprs = append(model.Exprs, argVal.Model)
			}
		}
	}

	r.Model = model
	ret r
}

fn builtinCallerStdSysAddrcall(mut e: &eval, mut fc: &ast::CallExpr, mut v: &Value): &Value {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, "function address is missing to addrcall")
		e.pushSuggestion("call like; Addrcall(addr, ...)")
		ret nil
	}

	mut argVal := e.evalExpr(fc.Args[0], evalDefault|evalPhysicalMem|evalUnwrapUntyped)
	if argVal == nil {
		ret nil
	}

	const Reference = false
	const FirstAssignToDest = true
	if e.s.checkValidityForInitExpr(
		e.target.mutable, Reference, primUintptr, argVal, fc.Args[0].Token) {
		e.s.checkAssignType(Reference, FirstAssignToDest, primUintptr, argVal, fc.Args[0].Token, e.getOwnerRefers())
	}

	mut r := buildVoidValue()

	mut model := &AddrcallExpr{
		Addr: argVal,
	}

	mut f := v.Type.Func()
	if len(f.Generics) > 0 {
		r.Type = f.Generics[0].Type
		model.Result = r.Type
	}

	if len(fc.Args) > 1 {
		model.Args = make([]&Value, 0, len(fc.Args)-1)
		for (_, mut arg) in fc.Args[1:] {
			argVal = e.evalExpr(arg, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
			if argVal == nil {
				ret nil
			}
			if argVal.IsVoid() || argVal.IsNil() {
				e.pushErr(arg.Token, "type @ does not supported as argument by Addrcall", argVal.Type.Str())
			}
			model.Args = append(model.Args, argVal)
		}
	}

	r.Model = model
	ret r
}

// Builds and returns the built-in iota variable representation.
fn buildIota(i: i64): &Var {
	ret &Var{
		Name: "iota",
		Public: true,
		Mutable: true,
		Checked: true,
		Constant: true,
		TypeSym: findBuiltinTypeAlias("int").TypeSym,
		ValueSym: &ValueSym{
			Value: &Value{
				Constant: constant::Const.NewI64(i),
				untyped: true,
			},
		},
	}
}

fn init() {
	// Initialize built-in functions.
	builtinFuncs["print"] = &FuncIns{caller: builtinCallerPrint}
	builtinFuncs["println"] = &FuncIns{caller: builtinCallerPrintln}
	builtinFuncs["new"] = &FuncIns{caller: builtinCallerNew}
	builtinFuncs["panic"] = &FuncIns{caller: builtinCallerPanic}
	builtinFuncs["make"] = &FuncIns{caller: builtinCallerMake}
	builtinFuncs["append"] = &FuncIns{caller: builtinCallerAppend}
	builtinFuncs["copy"] = &FuncIns{caller: builtinCallerCopy}
	builtinFuncs["len"] = &FuncIns{caller: builtinCallerLen}
	builtinFuncs["cap"] = &FuncIns{caller: builtinCallerCap}
	builtinFuncs["delete"] = &FuncIns{caller: builtinCallerDelete}
	builtinFuncs["close"] = &FuncIns{caller: builtinCallerClose}
	builtinFuncs["real"] = &FuncIns{caller: builtinCallerReal}
	builtinFuncs["imag"] = &FuncIns{caller: builtinCallerImag}
	builtinFuncs["cmplx"] = &FuncIns{caller: builtinCallerCmplx}

	// Initialize built-in functions of the "std/mem" package.
	builtinFuncsStdMem["SizeOf"] = &FuncIns{caller: builtinCallerStdMemSizeOf}
	builtinFuncsStdMem["AlignOf"] = &FuncIns{caller: builtinCallerStdMemAlignOf}

	// Initialize built-in functions of the "std/comptime" package.
	builtinFuncsStdComptime["TypeOf"] = &FuncIns{caller: builtinCallerStdComptimeTypeOf}
	builtinFuncsStdComptime["ValueOf"] = &FuncIns{caller: builtinCallerStdComptimeValueOf}
	builtinFuncsStdComptime["Line"] = &FuncIns{caller: builtinCallerStdComptimeLine}
	builtinFuncsStdComptime["File"] = &FuncIns{caller: builtinCallerStdComptimeFile}
	builtinFuncsStdComptime["Files"] = &FuncIns{caller: builtinCallerStdComptimeFiles}
	builtinFuncsStdComptime["TypeAlias"] = &FuncIns{caller: builtinCallerStdComptimeTypeAlias}

	// Initialize built-in functions of the "std/jule/integrated" package.
	builtinFuncsStdInteg["Emit"] = &FuncIns{
		Decl: &Func{
			Generics: make([]&ast::Generic, 1),
		},
		caller: builtinCallerStdJuleIntegratedEmit,
	}

	// Initialize built-in functions of the "std/sys" package.
	builtinFuncsStdSys["Addrcall"] = &FuncIns{
		Decl: &Func{
			Generics: make([]&ast::Generic, 1),
		},
		caller: builtinCallerStdSysAddrcall,
	}
}