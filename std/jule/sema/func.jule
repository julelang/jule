// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule"
use "std/jule/ast"
use "std/jule/token"
use "std/strings"

// Return type.
struct RetType {
	TypeSym: &TypeSym
	Idents:  []&token::Token
}

// Parameter.
struct Param {
	Token:     &token::Token
	Mutable:   bool
	Variadic:  bool
	Reference: bool
	TypeSym:   &TypeSym
	Ident:     str
}

impl Param {
	fn instance(mut &self): &ParamIns {
		ret &ParamIns{
			Decl: self,
		}
	}

	// Reports whether parameter is self (receiver) parameter.
	fn IsSelf(self): bool {
		ret self.Ident == "&self" || self.Ident == "self"
	}

	// Reports whether self (receiver) parameter is reference.
	fn IsRef(self): bool {
		ret self.Ident != "" && self.Ident[0] == '&'
	}
}

// Function.
struct Func {
	sema: &sema

	// Token of function declaration.
	// It may be nil if function is created by a deferred scope.
	Token: &token::Token

	Global:      bool
	Unsafety:    bool
	Public:      bool
	Binded:      bool
	Statically:  bool
	Exceptional: bool
	HasDefer:    bool // Whether function has at least one deferred scope.
	Ident:       str
	Directives:  []&ast::Directive

	// Scope is the scope of function, aka body.
	// If this function is created by a deferred scope, the Scope.Deferred will be true.
	// So it means this function is represents a deferred scope function.
	// It may be a closure.
	Scope: &ast::ScopeTree

	Generics: []&ast::Generic
	Result:   &RetType
	Params:   []&Param
	Owner:    &Struct

	// Function instances for each unique type combination of function call.
	// Nil if function is never used.
	Instances: []&FuncIns
}

impl Func {
	// Reports whether return type is void.
	fn IsVoid(self): bool {
		ret self.Result == nil
	}

	// Reports whether function is method.
	fn IsMethod(self): bool {
		if self.Owner != nil {
			ret true
		}
		if len(self.Params) > 0 {
			p := self.Params[0]
			if p.IsSelf() {
				ret true
			}
		}
		ret false
	}

	// Reports whether function is entry point.
	fn IsEntryPoint(self): bool {
		ret self.Ident == jule::EntryPoint
	}

	// Reports whether function is initializer function.
	fn IsInit(self): bool {
		ret self.Ident == jule::InitFunc
	}

	// Reports whether function is anonymous function.
	fn IsAnon(self): bool {
		ret jule::IsAnon(self.Ident)
	}

	// Reports whether function has return variable(s).
	fn AnyVar(self): bool {
		if self.Result != nil {
			for _, ident in self.Result.Idents {
				if !jule::IsAnon(ident.Kind) {
					ret true
				}
			}
		}
		ret false
	}

	// Force to new instance.
	fn instanceForce(mut &self): &FuncIns {
		mut ins := &FuncIns{
			Decl: self,
			Scope: new(Scope),
			Refers: ReferenceStack.new(),
		}

		ins.Params = make([]&ParamIns, 0, len(self.Params))
		for (_, mut p) in self.Params {
			ins.Params = append(ins.Params, p.instance())
		}

		if ins.Decl.Result != nil {
			ins.Result = ins.Decl.Result.TypeSym.Type
		}

		ret ins
	}

	fn instance(mut &self): &FuncIns {
		// Returns already created instance for just one unique combination.
		if len(self.Generics) == 0 && len(self.Instances) == 1 {
			ret self.Instances[0]
		}
		ret self.instanceForce()
	}

	// Appends function instance.
	// Returns instance if already instance is already exist, nil if not.
	fn appendInstance(mut self, mut &ins: &FuncIns): &FuncIns {
		if len(self.Generics) == 0 {
			// Skip already created instance for just one unique combination.
			if len(self.Instances) == 1 {
				ret self.Instances[0]
			}

			self.Instances = append(self.Instances, ins)
			ret nil
		}

		if len(self.Instances) == 0 {
			self.Instances = append(self.Instances, ins)
			ret nil
		}

		for (_, mut ains) in self.Instances {
			if ains.Same(ins) {
				// Instances are same.
				ret ains
			}
		}

		self.Instances = append(self.Instances, ins)
		ret nil
	}
}

// Parameter instance.
struct ParamIns {
	Decl: &Param
	Type: &Type
}

impl ParamIns {
	// Implement: Kind
	// Returns ParamIns's type kind as string.
	fn Str(self): str {
		mut s := strings::Builder{}
		s.Grow(1 << 5)
		if self.Decl.Mutable {
			s.WriteStr("mut ")!
		}

		if self.Decl.Reference {
			s.WriteStr("&_:")!
		}

		if self.Decl.IsSelf() {
			if self.Decl.IsRef() {
				s.WriteByte('&')!
			}
			s.WriteStr("self")!
			ret s.Str()
		}

		// Do not write variadic parameter "..." operator.
		// Type.Str() will write it.
		if self.Type != nil {
			s.WriteStr(self.Type.Str())!
		}
		ret s.Str()
	}
}

// Function instance.
struct FuncIns {
	Owner:    &StructIns
	Decl:     &Func
	Generics: []&InsGeneric
	Params:   []&ParamIns
	Result:   &Type
	Scope:    &Scope
	Refers:   &ReferenceStack
	Anon:     bool
	AsAnon:   bool // Whether this function instance used as anonymous function.
	CalledCo: bool // Whether this function instance used for concurrent call.

	caller:   builtinCaller
	reloaded: bool
	checked:  bool
	env:      &environ
}

impl Kind for FuncIns {
	// Implement: Kind
	// Returns function's type kind as string.
	fn Str(self): str {
		const Ident = false
		ret self.GetKindStr(Ident)
	}

	// Reports whether types are same.
	fn Equal(&self, other: &Type): bool {
		f := unsafe { (*(&other)).Func() }
		if f == nil {
			ret false
		}
		ret self.EqualFunc(f, false)
	}
}

impl FuncIns {
	// Reports whether functions are equal.
	// If the responsive is true, checks by responsiveness of functions.
	// See: https://manual.jule.dev/responsiveness/mutability
	fn EqualFunc(&self, &f: &FuncIns, responsive: bool): bool {
		if self.Decl.Exceptional != f.Decl.Exceptional {
			ret false
		}
		if self.Decl.Unsafety != f.Decl.Unsafety {
			ret false
		}
		if self.Decl.IsVoid() != f.Decl.IsVoid() {
			ret false
		}
		checkParams := fn(p1: &ParamIns, p2: &ParamIns): bool {
			if p1.Decl.Variadic != p2.Decl.Variadic ||
				p1.Decl.Reference != p2.Decl.Reference {
				ret false
			}

			if p1.Decl.IsSelf() {
				if !p2.Decl.IsSelf() {
					ret false
				}
				if p1.Decl.IsRef() != p2.Decl.IsRef() {
					ret false
				}
				if responsive {
					ret p1.Decl.Mutable || !p2.Decl.Mutable
				}
				ret p1.Decl.Mutable == p2.Decl.Mutable
			}

			if responsive {
				if !p1.Type.Equal(p2.Type) {
					ret false
				}
				tmut := p1.Decl.Reference || p1.Decl.Variadic || p1.Type.Mutable()
				if !tmut {
					ret true
				}
				ret p1.Decl.Mutable || !p2.Decl.Mutable
			}

			if p1.Decl.Mutable != p2.Decl.Mutable {
				ret false
			}
			ret p1.Type.Equal(p2.Type)
		}

		if len(f.Params) != len(self.Params) {
			ret false
		}

		mut i := 0
		for i < len(self.Params); i++ {
			if !checkParams(self.Params[i], f.Params[i]) {
				ret false
			}
		}

		if !self.Decl.IsVoid() {
			if !self.Result.Equal(f.Result) {
				ret false
			}
		}

		ret true
	}

	// Reports whether functions are equals by trait implementation rules.
	fn equalTrait(&self, &other: &FuncIns): bool {
		if self.Decl.Public != other.Decl.Public {
			ret false
		}
		if self.Decl.Ident != other.Decl.Ident {
			ret false
		}
		if !self.EqualFunc(other, true) {
			ret false
		}
		if len(self.Decl.Generics) != len(other.Decl.Generics) {
			ret false
		}
		ret true
	}

	// Returns all types of result.
	// Returns nil if result is nil.
	// Returns mutable slice if returns internal slice.
	fn Types(mut self): []&Type {
		match {
		| self.Result == nil:
			ret nil
		| self.Result.Tuple() == nil:
			ret [self.Result]
		|:
			ret self.Result.Tuple().Types
		}
	}

	// Reports whether instance is built-in.
	fn IsBuiltin(self): bool {
		ret self.caller != nil
	}

	// Reports whether instance is anonymous function.
	fn IsAnon(self): bool {
		ret self.Anon ||
			self.Decl != nil && self.Decl.IsAnon()
	}

	// Reports whether instances are same.
	// Returns true if declarations and generics are same.
	fn Same(self, f: &FuncIns): bool {
		if self.Decl != f.Decl || len(f.Generics) != len(self.Generics) {
			ret false
		}

		for i, g in self.Generics {
			g2 := f.Generics[i]
			if !g.Type.Equal(g2.Type) {
				ret false
			}
		}
		ret true
	}

	// Returns kind string of function instance.
	// Appends identifier to kind of this instance.
	// Does not appends identifier of this instance to kind if self.Decl is nil.
	fn GetKindStr(self, ident: bool): str {
		mut s := strings::Builder{}
		s.Grow(1 << 5)

		if self.Decl != nil && self.Decl.Unsafety {
			s.WriteStr("unsafe ")!
		}

		s.WriteStr("fn")!

		if ident && self.Decl != nil {
			s.WriteByte(' ')!
			s.WriteStr(self.Decl.Ident)!
		}

		s.WriteByte('(')!
		n := len(self.Params)
		if n > 0 {
			for i, p in self.Params {
				s.WriteStr(p.Str())!
				if i < len(self.Params)-1 {
					s.WriteByte(',')!
				}
			}
		}
		s.WriteByte(')')!
		if self.Decl != nil && self.Decl.Exceptional {
			s.WriteByte('!')!
		}
		if self.Decl != nil && !self.Decl.IsVoid() {
			s.WriteByte(':')!
			s.WriteStr(self.Result.Str())!
		}
		ret s.Str()
	}

	fn fillEnviron(mut &self) {
		if self.env == nil {
			self.env = new(environ)
			self.env.sema = self.Decl.sema
			if self.Decl != nil && self.Decl.Token != nil {
				self.env.file = findFile(self.env.sema.files, self.Decl.Token.File)
			}
		}
		if len(self.env.generics) == 0 {
			appendGenericTypeAliases(self.env.generics, self)
		}
	}
}

fn parameterUsesGenerics(mut &p: &ParamIns, &generics: []&ast::Generic): bool {
	if p.Decl.IsSelf() {
		ret false
	}
	ret kindUsesGenerics(p.Type, generics)
}