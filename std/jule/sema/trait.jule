// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/token"

// Trait.
struct Trait {
	Token:       &token::Token
	Name:        str
	Public:      bool
	Inherits:    []&TypeSym
	Methods:     []&Func
	Implemented: []&Struct
}

impl Kind for Trait {
	// Implement: Kind
	// Returns Trait's identifier.
	fn Str(self): str {
		ret self.Name
	}

	// Reports whether types are same.
	fn Equal(&self, other: &Type): bool {
		t, ok := other.Kind.(&Trait)
		ret ok && self == t
	}
}

impl Trait {
	// Returns method by identifier.
	// Returns nil if not exist any method in this identifier.
	fn FindMethod(mut self, name: str): &Func {
		for (_, mut f) in self.Methods {
			if f.Name == name {
				ret f
			}
		}
		ret self.findMethodInherit(name)
	}

	fn inherits(mut &self, t: &Trait): bool {
		if self == t {
			ret true
		}
		for (_, mut i) in self.Inherits {
			if i.Type.Trait().inherits(t) {
				ret true
			}
		}
		ret false
	}

	fn findMethodInherit(mut self, name: str): &Func {
		for (_, mut i) in self.Inherits {
			if i.Type == nil {
				continue
			}
			mut t := i.Type.Trait()
			if t != nil {
				mut f2 := t.FindMethod(name)
				if f2 != nil {
					ret f2
				}
			}
		}
		ret nil
	}
}