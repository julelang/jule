// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Generic behavior of lookupable types.
// Typically it is a scope like global scope, function scope or etc.
trait Lookup {
	// Select imported package.
	// Returns nil if did not found any match.
	fn SelectPackage(mut *self, selector: fn(&ImportInfo): bool): &ImportInfo

	// Find variable by identifier and bind state.
	// Returns nil if did not found any match.
	fn FindVar(mut *self, name: str, _bind: bool): &Var

	// Find type alias by identifier and bind state.
	// Returns nil if did not found any match.
	fn FindTypeAlias(mut *self, name: str, _bind: bool): &TypeAlias

	// Find structure by identifier and bind state.
	// Returns nil if did not found any match.
	fn FindStruct(mut *self, name: str, _bind: bool): &Struct

	// Find function by identifier and bind state.
	// Returns nil if did not found any match.
	fn FindFunc(mut *self, name: str, _bind: bool): &Func

	// Find trait by identifier.
	// Returns nil if did not found any match.
	fn FindTrait(mut *self, name: str): &Trait

	// Find enum by identifier.
	// Returns nil if did not found any match.
	fn FindEnum(mut *self, name: str): &Enum

	// Find type enum by identifier.
	// Returns nil if did not found any match.
	fn FindTypeEnum(mut *self, name: str): &TypeEnum
}