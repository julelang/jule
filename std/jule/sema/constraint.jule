// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/log"
use "std/jule/token"
use "std/jule/types"
use "std/strings"

// Built-in constraints.
const (
	constraintSigned = "signed"
	constraintUnsigned = "unsigned"
	constraintFloat = "float"
	constraintNumeric = "numeric"
	constraintImmutable = "immutable"
	constraintMutable = "mutable"
	constraintOrdered = "ordered"
	constraintComparable = "comparable"
)

static builtinConstraints = [...]str([
	constraintSigned,
	constraintUnsigned,
	constraintFloat,
	constraintNumeric,
	constraintMutable,
	constraintImmutable,
	constraintOrdered,
	constraintComparable,
])

struct constraintChecker {
	mut s: &sema

	// Declarations of generics.
	mut genericsD: []&ast::Generic

	// Generics of instance.
	mut generics: []&InsGeneric

	// Type aliases for generics.
	// It can be nil if environment is not guaranteed.
	// It will be used for guaranteed environments.
	mut genericsA: []&TypeAlias

	// Functions instance.
	// If this field is not nil, process will be executed by functions.
	mut fi: &FuncIns

	// Structure instance.
	// If this field is not nil, process will be executed by structures.
	mut si: &StructIns

	// Error that will use as error token.
	mut et: &token::Token

	// Whether instance is unique.
	mut uniq: bool
}

impl constraintChecker {
	fn readyFunc(mut &self): fn(mut &sema: &sema, mut &generics: []&TypeAlias): bool {
		ret fn(mut &sema: &sema, mut &generics: []&TypeAlias): bool {
			for (i, mut g) in self.genericsD {
				mut generic := self.generics[i]
				if g.Constraint == nil || len(g.Constraint.Mask) == 0 {
					continue
				}
				generic.Constraint = make([]&Type, 0, len(g.Constraint.Mask))
				for (_, mut mask) in g.Constraint.Mask {
					n := len(sema.errors)
					mut kind := sema.buildTypeWithRefers(mask, sema, generics, nil)
					if kind == nil {
						mut itd, ok := mask.Kind.(&ast::IdentType)
						if ok && len(itd.Generics) == 0 && isBuiltinConstraint(itd.Ident) {
							kind = &Type{Kind: buildPrimType(itd.Ident)}
							sema.errors = sema.errors[:n]
						} else {
							ret false
						}
					}
					generic.Constraint = append(generic.Constraint, kind)
				}
			}
			ret true
		}
	}

	// Functions will be checked in their environment, because environment is not guaranteed.
	fn readyFi(mut &self): bool {
		self.genericsD = self.fi.Decl.Generics
		self.generics = self.fi.Generics
		ret !self.uniq || self.s.funcEnvironment(self.fi, self.readyFunc())
	}

	// Structure will be checked in current environment, because environment should be guaranteed.
	fn readySi(mut &self): bool {
		self.genericsD = self.si.Decl.Generics
		self.generics = self.si.Generics
		ret !self.uniq || self.readyFunc()(self.s, self.genericsA)
	}

	fn ready(mut &self): bool {
		if self.fi != nil {
			ret self.readyFi()
		}
		ret self.readySi()
	}

	fn check(mut &self): bool {
		if !self.ready() {
			ret false
		}
	lookup:
		for (i, mut g) in self.generics {
			if g.Constraint == nil {
				continue
			}
			for (_, mut c2) in g.Constraint {
				mut prim := c2.Prim()
				if prim != nil && prim.IsConstraint() {
					if matchConstraint(prim.Kind, g.Type) {
						continue lookup
					}
					continue
				}
				if c2.Equal(g.Type) {
					continue lookup
				}
			}
			self.s.pushErr(self.et, log::ConstraintFailed, g.Type.Str(), self.genericsD[i].Ident, toStrConstraints(g))
			ret false
		}
		ret true
	}
}

fn toStrConstraints(g: &InsGeneric): str {
	mut sb := strings::Builder{}
	sb.Grow(1 << 7)
	for i, c in g.Constraint {
		sb.WriteStr(c.Str())!
		if len(g.Constraint)-i > 1 {
			sb.WriteStr(" | ")!
		}
	}
	ret sb.Str()
}

fn matchConstraint(&c: str, mut &g: &Type): bool {
	match c {
	| constraintSigned:
		prim := g.Prim()
		if prim == nil {
			ret false
		}
		ret types::IsSigNum(prim.Kind)
	| constraintUnsigned:
		prim := g.Prim()
		if prim == nil {
			ret false
		}
		ret types::IsUnsigInt(prim.Kind)
	| constraintFloat:
		prim := g.Prim()
		if prim == nil {
			ret false
		}
		ret types::IsFloat(prim.Kind)
	| constraintNumeric:
		prim := g.Prim()
		if prim == nil {
			ret false
		}
		ret types::IsNum(prim.Kind)
	| constraintMutable:
		ret g.Mutable()
	| constraintImmutable:
		ret !g.Mutable()
	| constraintComparable:
		ret g.Comparable()
	| constraintOrdered:
		ret g.Ordered()
	|:
		ret false
	}
}

fn isBuiltinConstraint(&ident: str): bool {
	for _, bc in builtinConstraints {
		if ident == bc {
			ret true
		}
	}
	ret false
}