// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/token"
use "std/os/filepath"
use "std/strings"

// Importer.
// Used by semantic analysis to import use declarations.
// The default importer implementation is highly recommended.
// 3rd-party importer implementations may cause unpredictable issues.
trait Importer {
	// Set current module path.
	// Path should be valid directory.
	// Set to empty string if module is not exist.
	fn SetModPath(mut self, path: str)

	// Returns current module path.
	// Path should be valid directory.
	// Returns empty string if module is not exist.
	fn GetModPath(self): str

	// Returns module path by identity.
	fn ModById(self, id: int): str

	// Returns &ImportInfo by path.
	// This function accepted as returns already imported and checked package.
	// If returns not-nil value, will be used instead of ImportPackage
	// if possible and package content is not checked by Sema.
	fn GetImport(mut self, path: str): &ImportInfo

	// Path is the directory path of package to import.
	// Should return abstract syntax tree of package files.
	// Logs accepts as error.
	// Updated module to package's module if exist when updateMod is true.
	fn ImportPackage(mut self, path: str, updateMod: bool): ([]&ast::AST, []build::Log)

	// Invoked after the package is imported.
	// Sets module identitity of imported package to current module.
	fn Imported(mut self, mut &ImportInfo)

	// Returns all imported packages.
	// The return value is mutable reference to internal buffer.
	// Packages should be ordered by FIFO; starting with the first deepest
	// imported package, and ending with the last imported package.
	fn AllPackages(mut self): []&ImportInfo
}

fn findVarFileInPackage(mut &files: []&SymTab, &v: &Var): &SymTab {
	for (_, mut f) in files {
		if f.findVar1(v) != -1 {
			ret f
		}
	}
	ret nil
}

// Returns variable by identifier and binded state.
// Returns nil if not exist any variable in this identifier.
fn findVarInPackage(mut &files: []&SymTab, &ident: str, binded: bool): &Var {
	for (_, mut f) in files {
		mut v := f.FindVar(ident, binded)
		if v != nil {
			ret v
		}
	}
	ret nil
}

// Returns type alias by identifier and binded state.
// Returns nil if not exist any type alias in this identifier.
fn findTypeAliasInPackage(mut &files: []&SymTab, &ident: str, binded: bool): &TypeAlias {
	for (_, mut f) in files {
		mut ta := f.FindTypeAlias(ident, binded)
		if ta != nil {
			ret ta
		}
	}
	ret nil
}

// Returns struct by identifier and binded state.
// Returns nil if not exist any struct in this identifier.
fn findStructInPackage(mut &files: []&SymTab, &ident: str, binded: bool): &Struct {
	for (_, mut f) in files {
		mut s := f.FindStruct(ident, binded)
		if s != nil {
			ret s
		}
	}
	ret nil
}

// Returns function by identifier and binded state.
// Returns nil if not exist any function in this identifier.
fn findFuncInPackage(mut &files: []&SymTab, &ident: str, binded: bool): &Func {
	for (_, mut file) in files {
		mut f := file.FindFunc(ident, binded)
		if f != nil {
			ret f
		}
	}
	ret nil
}

// Returns trait by identifier.
// Returns nil if not exist any trait in this identifier.
fn findTraitInPackage(mut &files: []&SymTab, &ident: str): &Trait {
	for (_, mut f) in files {
		mut t := f.FindTrait(ident)
		if t != nil {
			ret t
		}
	}
	ret nil
}

// Returns enum by identifier.
// Returns nil if not exist any enum in this identifier.
fn findEnumInPackage(mut &files: []&SymTab, &ident: str): &Enum {
	for (_, mut f) in files {
		mut e := f.FindEnum(ident)
		if e != nil {
			ret e
		}
	}
	ret nil
}

// Returns enum by identifier.
// Returns nil if not exist any type enum in this identifier.
fn findTypeEnumInPackage(mut &files: []&SymTab, &ident: str): &TypeEnum {
	for (_, mut f) in files {
		mut e := f.FindTypeEnum(ident)
		if e != nil {
			ret e
		}
	}
	ret nil
}

// Lookups tables with [SymTab.defByIdent] method.
fn defByIdentPackage(mut &files: []&SymTab, &ident: str, binded: bool): any {
	for (_, mut file) in files {
		mut def := file.defByIdent(ident, binded)
		if def != nil {
			ret def
		}
	}
	ret nil
}

// Import information.
// Represents imported package by use declaration.
struct ImportInfo {
	// Declaration.
	Decl: &ast::Use

	// Absolute path.
	Path: str

	// Use declaration path string.
	// Quotes are not included.
	LinkPath: str

	// Package alias identifier.
	Alias: str

	// True if imported with Importer.GetImport function.
	Duplicate: bool

	// Is binded use declaration.
	Binded: bool

	// Is standard library package.
	Std: bool

	// Nil if package is cpp header.
	Package: &Package

	// Module identity.
	ModId: int
}

impl Lookup for ImportInfo {
	// Returns always nil.
	fn SelectPackage(mut self, fn(&ImportInfo): bool): &ImportInfo { ret nil }

	// Returns variable by identifier and binded state.
	// Returns nil if not exist any variable in this identifier.
	//
	// Lookups by import way such as identifier selection.
	// Just lookups non-binded defines.
	fn FindVar(mut self, ident: str, _: bool): &Var {
		if !self.isLookupable() {
			ret nil
		}
		ret findVarInPackage(self.Package.Files, ident, false)
	}

	// Returns type alias by identifier.
	// Returns nil if not exist any type alias in this identifier.
	//
	// Lookups by import way such as identifier selection.
	// Just lookups non-binded defines.
	fn FindTypeAlias(mut self, ident: str, _: bool): &TypeAlias {
		if !self.isLookupable() {
			ret nil
		}
		ret findTypeAliasInPackage(self.Package.Files, ident, false)
	}

	// Returns struct by identifier and binded state.
	// Returns nil if not exist any struct in this identifier.
	//
	// Lookups by import way such as identifier selection.
	// Just lookups non-binded defines.
	fn FindStruct(mut self, ident: str, _: bool): &Struct {
		if !self.isLookupable() {
			ret nil
		}
		ret findStructInPackage(self.Package.Files, ident, false)
	}

	// Returns function by identifier and binded state.
	// Returns nil if not exist any function in this identifier.
	//
	// Lookups by import way such as identifier selection.
	// Just lookups non-binded defines.
	fn FindFunc(mut self, ident: str, _: bool): &Func {
		if !self.isLookupable() {
			ret nil
		}
		ret findFuncInPackage(self.Package.Files, ident, false)
	}

	// Returns trait by identifier.
	// Returns nil if not exist any trait in this identifier.
	//
	// Lookups by import way such as identifier selection.
	fn FindTrait(mut self, ident: str): &Trait {
		if !self.isLookupable() {
			ret nil
		}
		ret findTraitInPackage(self.Package.Files, ident)
	}

	// Returns enum by identifier.
	// Returns nil if not exist any enum in this identifier.
	//
	// Lookups by import way such as identifier selection.
	fn FindEnum(mut self, ident: str): &Enum {
		if !self.isLookupable() {
			ret nil
		}
		ret findEnumInPackage(self.Package.Files, ident)
	}

	// Returns type enum by identifier.
	// Returns nil if not exist any type enum in this identifier.
	//
	// Lookups by import way such as identifier selection.
	fn FindTypeEnum(mut self, ident: str): &TypeEnum {
		if !self.isLookupable() {
			ret nil
		}
		ret findTypeEnumInPackage(self.Package.Files, ident)
	}
}

impl ImportInfo {
	fn isLookupable(self): bool {
		if self.Binded {
			ret false
		}
		ret true
	}
}

// Package.
struct Package {
	// Symbol table for each package's file.
	Files: []&SymTab
}

impl Lookup for Package {
	// Returns always nil.
	fn SelectPackage(mut self, fn(&ImportInfo): bool): &ImportInfo { ret nil }

	// Returns variable by identifier and binded state.
	// Returns nil if not exist any variable in this identifier.
	fn FindVar(mut self, ident: str, binded: bool): &Var {
		ret findVarInPackage(self.Files, ident, binded)
	}

	// Returns type alias by identifier and binded state.
	// Returns nil if not exist any type alias in this identifier.
	fn FindTypeAlias(mut self, ident: str, binded: bool): &TypeAlias {
		ret findTypeAliasInPackage(self.Files, ident, binded)
	}

	// Returns struct by identifier and binded state.
	// Returns nil if not exist any struct in this identifier.
	fn FindStruct(mut self, ident: str, binded: bool): &Struct {
		ret findStructInPackage(self.Files, ident, binded)
	}

	// Returns function by identifier and binded state.
	// Returns nil if not exist any function in this identifier.
	fn FindFunc(mut self, ident: str, binded: bool): &Func {
		ret findFuncInPackage(self.Files, ident, binded)
	}

	// Returns trait by identifier.
	// Returns nil if not exist any trait in this identifier.
	fn FindTrait(mut self, ident: str): &Trait {
		ret findTraitInPackage(self.Files, ident)
	}

	// Returns enum by identifier.
	// Returns nil if not exist any enum in this identifier.
	fn FindEnum(mut self, ident: str): &Enum {
		ret findEnumInPackage(self.Files, ident)
	}

	// Returns type enum by identifier.
	// Returns nil if not exist any type enum in this identifier.
	fn FindTypeEnum(mut self, ident: str): &TypeEnum {
		ret findTypeEnumInPackage(self.Files, ident)
	}
}

// Reports whether f is standard library package p.
// Example use:
//	isStdPackage(f, "") for determine the whether f is standard library package
//	isStdPackage(f, "math") for "std/math"
//	isStdPackage(f, "math/big") for "std/math/big"
fn isStdPackage(&f: str, p: str): bool {
	// Do not handle '/' separators of p, because it
	// valid path separator for all supported platforms.
	ret strings::HasPrefix(f, filepath::Join(build::PathStdlib, p))
}