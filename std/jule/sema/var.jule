// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/token"

// Return variable states.
enum RetState {
	NA,     // Variable is not associated with return type.
	Single, // Variable is  associated with the single return type.
	Tuple,  // Variable is associated with the tuple return type.
}

// Variable.
struct Var {
	Scope:      &Scope
	Token:      &token::Token
	Name:       str
	Bind:       bool
	Constant:   bool
	Mutable:    bool
	Public:     bool
	Used:       bool
	Static:     bool
	Reference:  bool
	Checked:    bool
	TypeSym:    &TypeSym
	ValueSym:   &ValueSym
	Refers:     &ReferenceStack
	Directives: []&ast::Directive

	// Return variable state for this variable.
	RetState: RetState

	// The 0..n means this variable is the nth variable of the return variables.
	// This order is not useful if variable is not associated with the return type.
	RetOrder: int

	// This variable depended to these variables for initialization expression.
	// Nil if not global variable.
	Depends: []&Var

	// See developer reference (13).
	GroupIndex: int    // Index of variable in the group, if variable is grouped.
	Group:      []&Var // All variables of group in define order, if variable is grouped.
	Iota:       bool   // The enumerable iota variable used in the expression.
}

impl Var {
	// Reports whether variable is initialized explicitly.
	fn IsInitialized(*self): bool {
		ret self.ValueSym != nil && self.ValueSym.Expr != nil
	}

	// Reports whether variable is type inferred.
	fn IsTypeInferred(*self): bool {
		ret self.TypeSym == nil || self.TypeSym.Decl == nil
	}

	// Reports whether variable is enum field.
	fn IsEnumField(*self): bool {
		// See developer reference (14).
		ret len(self.Group) > 0 && self.Group[len(self.Group)-1] == nil
	}

	// Reports whether variable is untyped constant.
	// For true result, variable should type inferred and not include casting.
	fn untypedConstant(*self): bool {
		ret self.IsTypeInferred() && self.ValueSym.Value.untyped
	}

	// Reports whether s exist in Depends collection.
	fn depended(*self, v: &Var): bool {
		for _, dv in self.Depends {
			if dv == v {
				ret true
			}
		}
		ret false
	}
}