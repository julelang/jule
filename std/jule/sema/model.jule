// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/constant"
use "std/jule/token"

// Expression model.
enum Expr: type {
	&Type,
	&constant::Const,
	&Var,
	&FuncIns,
	&StructIns,
	&BinaryExpr,
	&UnaryExpr,
	&StructLitExpr,
	&AllocStructLitExpr,
	&CastingExpr,
	&FuncCallExpr,
	&SliceExpr,
	&IndexingExpr,
	&AnonFuncExpr,
	&MapExpr,
	&SlicingExpr,
	&TraitSubIdentExpr,
	&StructSubIdentExpr,
	&StructStaticIdentExpr,
	&ArrayExpr,
	&TupleExpr,
	&BuiltinPrintCallExpr,
	&BuiltinPrintlnCallExpr,
	&BuiltinNewCallExpr,
	&BuiltinPanicCallExpr,
	&BuiltinMakeCallExpr,
	&BuiltinAppendCallExpr,
	&BuiltinCopyCallExpr,
	&BuiltinLenCallExpr,
	&BuiltinCapCallExpr,
	&BuiltinDeleteCallExpr,
	&BuiltinErrorCallExpr,
	&SizeofExpr,
	&AlignofExpr,
	&RuneExpr,
	&BackendEmitExpr,
	&ChanRecv,
	&ChanSend,
	&BuiltinCloseCallExpr,
	&TypeAssertionExpr,
	&AddrcallExpr,
}

// Operand expression model.
struct OperandExpr {
	Type:  &Type
	Model: Expr
}

// Binary operation expression model.
struct BinaryExpr {
	Left:  &OperandExpr
	Right: &OperandExpr
	Op:    &token::Token
}

// Unary operation expression model.
struct UnaryExpr {
	Expr: &Value
	Op:   &token::Token
}

// Structure field argument expression model for constructors.
// For example: &MyStruct{10, false, "-"}
struct StructArgExpr {
	Token: &token::Token
	Field: &FieldIns
	Expr:  &Value
}

// Structure literal.
struct StructLitExpr {
	Strct: &StructIns
	Args:  []&StructArgExpr
}

// Heap allocated structure litral expression.
// For example: &MyStruct{}
struct AllocStructLitExpr {
	Lit: &StructLitExpr
}

// Casting expression model.
// For example: (int)(myFloat)
struct CastingExpr {
	Token: &token::Token
	Expr:  &Value
	Type:  &Type
}

// Type assertion expression model.
// For example: myExpr.(destType)
struct TypeAssertionExpr {
	Token: &token::Token
	Expr:  &Value
	Type:  &Type
}

// Function call expression model.
struct FuncCallExpr {
	Token:    &token::Token
	Func:     &FuncIns
	IsCo:     bool
	Expr:     Expr
	Args:     []Expr
	Except:   &Scope // Nil for ignored.
	Assigned: bool
}

// Slice expression model.
// For example: [1, 2, 3, 4, 5, 6, 8, 9, 10]
struct SliceExpr {
	ElemType: &Type
	Elems:    []&Value
}

// Indexing expression model.
// For example: slice[index]
struct IndexingExpr {
	Token: &token::Token
	Expr:  &Value
	Index: &Value
}

// Anonymous function expression model.
struct AnonFuncExpr {
	Captured: []&Var
	Func:     &FuncIns
	Global:   bool
}

// Key-value expression pair model.
struct KeyValueExpr {
	Key:   Expr
	Value: Expr
}

// Map expression model.
// For example; {0: false, 1: true}
struct MapExpr {
	Kind:    &Map
	Entries: []&KeyValueExpr
}

// Slicing expression model.
// For example: mySlice[2:len(mySlice)-5]
struct SlicingExpr {
	Token: &token::Token

	// Expression to slicing.
	Expr: &Value

	// Left index expression.
	// Nil integer if expression have not left index.
	Left: Expr

	// Right index expression.
	// Nil if expression have not right index.
	Right: Expr

	// Cap index expression.
	// Nil if expression have not cap index.
	Cap: Expr
}

// Trait sub-ident expression model.
// For example: myTrait.subIdent
struct TraitSubIdentExpr {
	Token:  &token::Token
	Expr:   Expr
	Method: &Func
	Trt:    &Trait
}

// Structure sub-ident expression model.
// For example: myStruct.subIdent
struct StructSubIdentExpr {
	Token:  &token::Token
	Expr:   &Value
	Method: &FuncIns
	Field:  &FieldIns
	Owner:  &StructIns
}

// Structure static ident expression model.
// For example: MyStruct.mySubIdent
struct StructStaticIdentExpr {
	Structure: &StructIns
	Expr:      Expr
	Method:    &FuncIns
}

// Array expression model.
// If array filled, elems field holds 2 data.
// First data is expression, second is nil, kind of mark to that array filled.
struct ArrayExpr {
	Kind:  &Array
	Elems: []&Value
}

// Tuple expression model.
struct TupleExpr {
	Values: []&Value
}

// Expression Model: for built-in print function calls.
struct BuiltinPrintCallExpr {
	Expr: &Value
}

// Expression Model: for built-in println function calls.
struct BuiltinPrintlnCallExpr {
	Expr: &Value
}

// Expression Model: for built-in new function calls.
struct BuiltinNewCallExpr {
	Type: &Type // Element type of smart pointer.
	Init: Expr  // Nil for not initialized.
}

// Expression Model: for built-in panic function calls.
struct BuiltinPanicCallExpr {
	Token: &token::Token
	Expr:  Expr
}

// Expression model: for channel receive.
struct ChanRecv {
	Token: &token::Token
	Expr:  &Value
}

// Expression mode: for channel send.
struct ChanSend {
	Token: &token::Token
	Chan:  &Value
	Data:  &Value
}

// Expression Model: for built-in close function calls.
struct BuiltinCloseCallExpr {
	Token: &token::Token
	Chan:  &Value
}

// Expression Model: for built-in make function calls.
// If Type is slice, the Len and Cap fields may be meaningful.
// If Type is channel, the buffer size specified in the Cap field if exist.
// The Len field is undefined for channel types.
struct BuiltinMakeCallExpr {
	Type: &Type
	Len:  Expr
	Cap:  Expr
}

// Expression Model: for built-in append function calls.
struct BuiltinAppendCallExpr {
	Dest:     &Value // Type is always slice.
	Elements: &Value // Type is always slice or string, no chance for variadic.
}

// Expression Model: for built-in len function calls.
struct BuiltinLenCallExpr {
	Expr: &Value
}

// Expression Model: for built-in cap function calls.
struct BuiltinCapCallExpr {
	Expr: &Value
}

// Expression Model: for built-in delete function calls.
struct BuiltinDeleteCallExpr {
	Dest: &Value
	Key:  &Value
}

// Expression Model: for built-in copy function calls.
struct BuiltinCopyCallExpr {
	Dest: &Value
	Src:  &Value
}

// Expression Model: for built-in error function calls.
struct BuiltinErrorCallExpr {
	Func: &FuncIns
	Err:  &Value
}

// Expression Model: for sizeof expressions.
// For example, in C++: sizeof(int)
struct SizeofExpr {
	Expr: Expr
}

// Expression Model: for alignof expressions.
// For example, in C++: alignof(int)
struct AlignofExpr {
	Expr: Expr
}

// Rune literal expression model.
// For example: 'a'
struct RuneExpr {
	Code: rune
}

// Expression Model: for inline code emit to backend.
struct BackendEmitExpr {
	Code: str

	// Expression Model: for expression or type emit to backend from Jule source code.
	Exprs: []Expr
}

// Expression Model: for address-based function call.
struct AddrcallExpr {
	Addr:   &Value
	Args:   []&Value
	Result: &Type // Nil for void.
}