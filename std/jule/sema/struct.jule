// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/token"
use "std/strings"

// Field.
struct Field {
	Owner:   &Struct
	Token:   &token::Token
	Public:  bool
	Mutable: bool // Interior mutability.
	Ident:   str
	TypeSym: &TypeSym
}

impl Field {
	fn instance(mut &self): &FieldIns {
		ret &FieldIns{
			Decl: self,
		}
	}
}

// Structure.
struct Struct {
	// Used for type parsing.
	// Used declaration'sema sema for instance type checking.
	sema: &sema

	// This structure depended to these structures, except binded ones.
	// Only stores plain identifier references such as A, B, and MyStruct.
	// Not includes non-plain identifier references such as *A, &B, and []MyStruct.
	//
	// As far as tested, safe to store in structure declaration rather than instances.
	// This collection applied for all instances.
	Depends: []&Struct

	Token:      &token::Token
	Ident:      str
	Fields:     []&Field
	Methods:    []&Func
	Public:     bool
	Binded:     bool
	Directives: []&ast::Directive
	Generics:   []&ast::Generic
	Implements: []&Trait

	// Structure instances for each unique type combination of structure.
	// Nil if structure is never used.
	Instances: []&StructIns
}

impl Struct {
	// Dispatches methods to instances if needed.
	fn dispatchMethods(mut &self) {
		if len(self.Instances) == 0 || len(self.Methods) == 0 {
			ret
		}
		if len(self.Generics) == 0 {
			self.Instances[0].Methods = self.Methods
			ret
		}
		for (_, mut ins) in self.Instances {
			if len(ins.Methods) != len(self.Methods) {
				ins.Methods = make([]&Func, 0, len(self.Methods))
				for (_, mut f) in self.Methods {
					mut fins := new(Func, *f)
					fins.Instances = nil
					ins.Methods = append(ins.Methods, fins)
				}
			}
		}
	}

	// Reports whether s exist in Depends collection.
	fn depended(self, s: &Struct): bool {
		for _, ds in self.Depends {
			if ds == s {
				ret true
			}
		}
		ret false
	}

	fn instance(mut &self): &StructIns {
		// Returns already created instance for just one unique combination.
		if len(self.Generics) == 0 && len(self.Instances) == 1 {
			ret self.Instances[0]
		}

		mut ins := &StructIns{
			Decl: self,
			Fields: make([]&FieldIns, 0, len(self.Fields)),
			Refers: ReferenceStack.new(),
		}

		// See developer reference (10).
		ins.Mutable = false
		ins.Comparable = true

		for (_, mut f) in self.Fields {
			mut f2 := f.instance()
			f2.Owner = ins
			ins.Fields = append(ins.Fields, f2)
			if !f.Mutable && f.TypeSym.Type != nil && f.TypeSym.Type.Mutable() {
				ins.Mutable = true
			}
		}

		if len(self.Generics) == 0 {
			ins.Methods = self.Methods
		} else {
			ins.Methods = make([]&Func, 0, len(self.Methods))
			for (_, mut f) in self.Methods {
				mut fins := new(Func, *f)
				fins.Instances = nil
				ins.Methods = append(ins.Methods, fins)
			}
		}

		ret ins
	}

	// Appends instance if unique.
	// Returns already exist instance if given instance is not unique.
	fn appendInstance(mut self, mut &ins: &StructIns): &StructIns {
		// Skip already created instance for just one unique combination.
		if len(self.Generics) == 0 && len(self.Instances) == 1 {
			ret self.Instances[0]
		}

		for (_, mut ains) in self.Instances {
			if ains.Same(ins) {
				ret ains
			}
		}

		self.Instances = append(self.Instances, ins)
		ret nil
	}

	// Returns method by identifier.
	// Returns nil if not exist any method in this identifier.
	fn FindMethod(mut self, ident: str, statically: bool): &Func {
		for (_, mut f) in self.Methods {
			if f.Statically == statically && f.Ident == ident {
				ret f
			}
		}
		ret nil
	}

	// Returns field by identifier.
	// Returns nil if not exist any field in this identifier.
	fn FindField(mut self, ident: str): &Field {
		for (_, mut f) in self.Fields {
			if f.Ident == ident {
				ret f
			}
		}
		ret nil
	}

	// Reports whether structure implements given trait.
	fn IsImplements(self, t: &Trait): bool {
		for _, it in self.Implements {
			if t == it {
				ret true
			}
		}
		ret false
	}

	// Reports whether structure has only reference-type-accessible defines.
	fn HasRefAccessible(self): bool {
		for _, m in self.Methods {
			if len(m.Params) > 0 && m.Params[0].IsRef() {
				ret true
			}
		}
		ret false
	}
}

// Field instance.
struct FieldIns {
	Owner: &StructIns
	Decl:  &Field
	Type:  &Type
}

// Structure instance.
struct StructIns {
	Source:     &Type // See developer reference (9).
	Checked:    bool
	Decl:       &Struct
	Generics:   []&InsGeneric
	Fields:     []&FieldIns
	Methods:    []&Func
	Mutable:    bool // This structure has mutable defines.
	Comparable: bool
	Refers:     &ReferenceStack
}

impl Kind for StructIns {
	// Implement: Kind
	// Returns Struct's type kind as string.
	fn Str(self): str {
		mut kind := strings::Builder{}
		kind.Grow(1 << 5)
		if self.Decl.Binded {
			kind.WriteStr("cpp.")!
		}
		kind.WriteStr(self.Decl.Ident)!
		if len(self.Generics) > 0 {
			kind.WriteByte('[')!
			for i, g in self.Generics {
				kind.WriteStr(g.Type.Str())!
				if i < len(self.Generics)-1 {
					kind.WriteByte(',')!
				}
			}
			kind.WriteByte(']')!
		}
		ret kind.Str()
	}

	// Reports whether types are same.
	fn Equal(&self, other: &Type): bool {
		match type other.Kind {
		| &StructIns:
			s := other.Kind.(&StructIns)
			if s.Source != nil {
				ret self == s
			}
		|:
			if self.Source != nil {
				ret false
			}
		}

		s := unsafe { (*(&other)).Struct() }
		if s == nil ||
			self.Decl != s.Decl ||
			len(self.Generics) != len(s.Generics) {
			ret false
		}

		// Check whether generics are matched.
		mut i := 0
		for i < len(self.Generics); i++ {
			if !self.Generics[i].Type.Equal(s.Generics[i].Type) {
				ret false
			}
		}

		ret true
	}
}

impl StructIns {
	// Sets source type.
	fn setSource(mut self, mut t: &Type) {
		if t == nil {
			ret
		}
		self.Source = t
		// We have to check mutable and comparable conditions again.
		// Because type analysis is a simple precondition checker.
		// For the actual type, we have to check.
		// See developer reference (10.2.1).
		self.Comparable = self.Comparable || t.Comparable()
		self.Mutable = self.Mutable || t.Mutable()
	}

	// Reports whether instances are same.
	// Returns true if declarations and generics are same.
	fn Same(self, s: &StructIns): bool {
		if self.Decl != s.Decl || len(s.Generics) != len(self.Generics) {
			ret false
		}
		for i, g in self.Generics {
			g2 := s.Generics[i]
			if !g.Type.Equal(g2.Type) {
				ret false
			}
		}
		ret true
	}

	// Returns method by identifier.
	// Returns nil if not exist any method in this identifier.
	fn FindMethod(mut self, ident: str, statically: bool): &Func {
		for (_, mut f) in self.Methods {
			if f.Statically == statically && f.Ident == ident {
				ret f
			}
		}
		ret nil
	}

	// Returns field by identifier.
	// Returns nil if not exist any field in this identifier.
	fn FindField(mut self, ident: str): &FieldIns {
		for (_, mut f) in self.Fields {
			if f.Decl.Ident == ident {
				ret f
			}
		}
		ret nil
	}
}