// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule"
use "std/jule/ast"
use "std/jule/build"
use "std/jule/constant"
use "std/jule/directive"
use "std/jule/internal/mod"
use "std/jule/log"
use "std/jule/token"
use "std/jule/types"
use "std/slices"
use "std/strings"
use "std/unicode/utf8"

fn isValidModelForRef(mut &m: Expr): bool {
	match type m {
	| &Var:
		ret true
	| &StructSubIdentExpr:
		mut model := m.(&StructSubIdentExpr)
		ret model.Field != nil && isValidModelForRef(model.Expr.Model)
	| &UnaryExpr:
		mut unary := m.(&UnaryExpr)
		if unary.Op.Id != token::Star {
			ret false
		}
		// Return true because of raw pointer dereferencing is an Unsafe Jule feature.
		if unary.Expr.Type.Ptr() != nil {
			ret true
		}
		// Dereferencing should be smart pointer, otherwise return false.
		if unary.Expr.Type.Sptr() == nil {
			ret false
		}
		ret isValidModelForRef(unary.Expr.Model)
	| &IndexingExpr:
		mut indexing := m.(&IndexingExpr)
		if indexing.Expr.Type.Array() == nil {
			// allow only arrays, slice allocations will may be deallocated at runtime
			// arrays always guaranteed to be have fixed size at runtime
			ret false
		}
		ret isValidModelForRef(indexing.Expr.Model)
	|:
		ret false
	}
}

fn compilerErr(&token: &token::Token, line: bool, fmt: str, args: ...any): log::Log {
	mut log := log::Log{
		Kind: log::Error,
		Row: token.Row,
		Column: token.Column,
		Path: token.File.Path,
		Text: log::Logf(fmt, args...),
	}
	if line {
		log.Line = token.File.GetRow(token.Row)
	}
	ret log
}

fn appendRetVars(mut &dest: []&Var, mut &f: &FuncIns) {
	if f.Decl.IsVoid() || f.Result == nil {
		ret
	}

	mut types := f.Types()
	for (i, mut ident) in f.Decl.Result.Idents {
		if jule::IsBlank(ident.Kind) || jule::IsAnon(ident.Kind) {
			continue
		}
		dest = append(dest, &Var{
			Used: true,
			Mutable: true,
			Ident: ident.Kind,
			Token: ident,
			Scope: f.Scope,
			TypeSym: &TypeSym{
				Type: types[i],
			},
			ValueSym: &ValueSym{
				Value: new(Value),
			},
			RetOrder: i,
		})
	}
	if len(f.Decl.Result.Idents) == 1 && len(dest) == 1 {
		dest[len(dest)-1].RetOrder = -1
	}
}

fn appendParamVars(mut &dest: []&Var, mut &f: &FuncIns) {
	if len(f.Params) == 0 {
		ret
	}

	for (_, mut p) in f.Params {
		if jule::IsBlank(p.Decl.Ident) || jule::IsAnon(p.Decl.Ident) {
			continue
		}

		mut v := &Var{
			Checked: true,
			Used: true,
			Reference: p.Decl.Reference,
			Mutable: p.Decl.Mutable,
			Ident: p.Decl.Ident,
			Token: p.Decl.Token,
			TypeSym: new(TypeSym),
			Scope: f.Scope,
			ValueSym: new(ValueSym),
		}

		match {
		| p.Decl.IsSelf():
			v.TypeSym.Type = &Type{
				Variadic: false,
				Kind: f.Owner,
			}
			v.Reference = !p.Decl.IsRef()

			if p.Decl.IsRef() {
				v.Ident = v.Ident[1:] // Remove reference sign.
				v.TypeSym.Type.Kind = &Sptr{
					Elem: &Type{
						Kind: v.TypeSym.Type.Kind,
					},
				}
			}
		| p.Decl.Variadic:
			v.TypeSym.Type = &Type{
				Variadic: false,
				Kind: &Slice{
					Elem: &Type{
						Kind: p.Type.Kind,
					},
				},
			}
		|:
			v.TypeSym.Type = p.Type
		}

		dest = append(dest, v)
	}
}

// Builds type aliases for generic types of scope.
// See developer reference (1), and (2).
fn appendGenericTypeAliases(mut &dest: []&TypeAlias, mut &f: &FuncIns) {
	mut size := len(f.Generics)
	if f.Decl.Owner != nil {
		size += len(f.Decl.Owner.Generics)
	}

	if size == 0 {
		ret
	}

	for (i, mut g) in f.Generics {
		if g == nil {
			continue
		}
		mut decl := f.Decl.Generics[i]
		dest = append(dest, &TypeAlias{
			Used: true,
			Generic: true,
			Scope: f.Decl.Scope,
			Ident: decl.Ident,
			Token: decl.Token,
			TypeSym: &TypeSym{Type: g.Type},
		})
	}

	if f.Decl.Owner != nil {
		mut owner := f.Owner
		for (i, mut g) in owner.Generics {
			mut decl := owner.Decl.Generics[i]
			dest = append(dest, &TypeAlias{
				Used: true,
				Generic: true,
				Scope: f.Decl.Scope,
				Ident: decl.Ident,
				Token: decl.Token,
				TypeSym: &TypeSym{Type: g.Type},
			})
		}
	}
}

fn findFile(mut &files: []&SymTab, &handler: &token::Fileset): &SymTab {
	for (_, mut fl) in files {
		if fl.File == handler {
			ret fl
		}
	}
	ret nil
}

unsafe fn pushSuggestion(mut log: *log::Log, fmt: str, args: ...any) {
	log.Suggestion = log::Logf(fmt, args...)
}

// Flags for commonSemaMeta flag.
const (
	semametaGstruct = 1 << iota // Adds generic structures to gstructs.
)

struct commonSemaMeta {
	flags:             int          // General flags.
	gstructs:          []&StructIns // Generic structs waiting to be checked.
	comptimeTypeInfos: []&comptimeTypeInfo
	runtime:           &ImportInfo // Implicitly imported "std/runtime" package.
}

impl commonSemaMeta {
	fn pushComptimeTypeInfo(mut self, mut &t: &Type): &comptimeTypeInfo {
		for (_, mut t2) in self.comptimeTypeInfos {
			if t2.base.Equal(t) {
				ret t2
			}
		}
		mut t1 := &comptimeTypeInfo{base: t}
		self.comptimeTypeInfos = append(self.comptimeTypeInfos, t1)
		ret t1
	}
}

enum stepFlag {
	NA: 0,
	ImplsImplemented: 1 << 0,
	DeclsChecked: 1 << 1,
	Done: 1 << 2,
}

// Semantic analyzer for tables.
// Accepts tables as files of package.
struct sema {
	errors: []log::Log
	files:  []&SymTab // Package files.
	file:   &SymTab   // Current package file.
	flags:  int
	meta:   &commonSemaMeta
	step:   stepFlag
}

impl Lookup for sema {
	// Returns imported package by selector.
	// Returns nil if selector returns false for all packages.
	// Returns nil if selector is nil.
	//
	// Lookups:
	//	- Current file's imported packages.
	fn SelectPackage(mut self, selector: fn(&ImportInfo): bool): &ImportInfo {
		ret self.file.SelectPackage(selector)
	}

	// Returns variable by identifier and binded state.
	// Returns nil if not exist any variable in this identifier.
	//
	// Lookups:
	//	- Package file's symbol table.
	//	- Current file's public denifes of imported packages.
	fn FindVar(mut self, ident: str, binded: bool): &Var {
		// Lookup package files.
		mut v := findVarInPackage(self.files, ident, binded)
		if v != nil {
			ret v
		}
		ret nil
	}

	// Returns type alias by identifier and binded state.
	// Returns nil if not exist any type alias in this identifier.
	//
	// Lookups:
	//	- Package file's symbol table.
	//	- Current file's public denifes of imported packages.
	fn FindTypeAlias(mut self, ident: str, binded: bool): &TypeAlias {
		// Lookup package files.
		mut ta := findTypeAliasInPackage(self.files, ident, binded)
		if ta != nil {
			ret ta
		}
		ret nil
	}

	// Returns struct by identifier and binded state.
	// Returns nil if not exist any struct in this identifier.
	//
	// Lookups:
	//	- Package file's symbol table.
	//	- Current file's public denifes of imported packages.
	fn FindStruct(mut self, ident: str, binded: bool): &Struct {
		// Lookup package files.
		mut s := findStructInPackage(self.files, ident, binded)
		if s != nil {
			ret s
		}
		ret nil
	}

	// Returns function by identifier and binded state.
	// Returns nil if not exist any function in this identifier.
	//
	// Lookups:
	//	- Package file's symbol table.
	//	- Current file's public denifes of imported packages.
	fn FindFunc(mut self, ident: str, binded: bool): &Func {
		// Lookup package files.
		mut f := findFuncInPackage(self.files, ident, binded)
		if f != nil {
			ret f
		}
		ret nil
	}

	// Returns trait by identifier.
	// Returns nil if not exist any trait in this identifier.
	//
	// Lookups:
	//	- Package file's symbol table.
	//	- Current file's public denifes of imported packages.
	fn FindTrait(mut self, ident: str): &Trait {
		// Lookup package files.
		mut t := findTraitInPackage(self.files, ident)
		if t != nil {
			ret t
		}
		ret nil
	}

	// Returns enum by identifier.
	// Returns nil if not exist any enum in this identifier.
	//
	// Lookups:
	//	- Package file's symbol table.
	//	- Current file's public denifes of imported packages.
	fn FindEnum(mut self, ident: str): &Enum {
		// Lookup package files.
		mut e := findEnumInPackage(self.files, ident)
		if e != nil {
			ret e
		}
		ret nil
	}

	// Returns type enum by identifier.
	// Returns nil if not exist any type enum in this identifier.
	//
	// Lookups:
	//	- Package file's symbol table.
	//	- Current file's public denifes of imported packages.
	fn FindTypeEnum(mut self, ident: str): &TypeEnum {
		// Lookup package files.
		mut e := findTypeEnumInPackage(self.files, ident)
		if e != nil {
			ret e
		}
		ret nil
	}
}

impl sema {
	// Reports whether flags has given flag.
	fn isFlag(self, flags: int): bool { ret self.flags&flags == flags }

	fn getCurrentFile(mut self): &SymTab { ret self.file }
	fn setCurrentFile(mut self, mut f: &SymTab) { self.file = f }

	fn pushErr(mut self, token: &token::Token, fmt: str, args: ...any) {
		self.errors = append(self.errors, compilerErr(token, true, fmt, args...))
	}

	// Push suggestion to last log.
	fn pushSuggestion(mut self, fmt: str, args: ...any) {
		unsafe { pushSuggestion(&self.errors[len(self.errors)-1], fmt, args...) }
	}

	// Reports whether define is accessible in the current package.
	// The public and token parameters belongs to define which is accessed.
	fn isAccessibleDefine(self, public: bool, token: &token::Token): bool {
		if public || token.File == nil {
			// public or built-in
			ret true
		}
		selfDir := self.file.File.Dir()
		tokenDir := token.File.Dir()
		if selfDir == tokenDir {
			// define is in the same package
			ret true
		}
		// define is not public or in-package define
		// but it may come from the runtime package
		// so allow access if standard library package tries
		if isStdPackage(tokenDir, "runtime") && isStdPackage(selfDir, "") {
			ret true
		}
		ret false
	}

	// Reports this identifier duplicated in package's global scope.
	// The "self" parameter represents address of exception identifier.
	// If founded identifier address equals to self, will be skipped.
	fn isDuplicatedIdent(self, itself: uintptr, &ident: str, binded: bool): bool {
		for _, f in self.files {
			if f.isDuplicatedIdent(itself, ident, binded) {
				ret true
			}
		}
		ret false
	}

	fn checkDirectives(mut &self, mut &d: []&ast::Directive, mut o: any) {
		mut dc := directiveChecker{
			s: self,
			d: unsafe { (&[]&ast::Directive)(&d) },
			o: o,
		}
		dc.check()
	}

	fn checkGenericQuantity(mut self, required: int, given: int, token: &token::Token): (ok: bool) {
		match {
		| required == 0 && given > 0:
			self.pushErr(token, log::NotHasGenerics)
			ret false
		| required > 0 && given == 0:
			self.pushErr(token, log::HasGenerics)
			ret false
		| required < given:
			self.pushErr(token, log::GenericsOverflow)
			ret false
		| required > given:
			self.pushErr(token, log::MissingGenerics)
			ret false
		|:
			ret true
		}
	}

	fn getImportDef(self, &ident: str, mut &imp: &ImportInfo): any {
		if findPackageBuiltinDef(imp.LinkPath, ident) != nil {
			ret true
		}
		for (_, mut f) in imp.Package.Files {
			// Binded defines can't export.
			const Binded = false
			mut def := f.defByIdent(ident, Binded)
			if def != nil {
				ret def
			}
		}
		ret nil
	}

	fn checkImportSelection[T](mut self, &ident: &token::Token, &s: T): bool {
		if !self.isAccessibleDefine(s.Public, s.Token) {
			self.pushErr(ident, log::IdentIsNotAccessible, ident.Kind)
			self.pushSuggestion(log::MakePubToAccess)
			ret false
		}
		const Binded = false // Exported defines cannot be binded.
		if defByIdentPackage(self.files, s.Ident, Binded) != nil {
			self.pushErr(ident, log::SelectedImportExistInPackage, s.Ident)
			ret false
		}
		ret true
	}

	fn checkImportsAllSelectionsFromCollection[T](mut self, &s: []T, &et: &token::Token): bool {
		mut ok := true
		for _, d in s {
			if d.Public {
				ok = self.checkImportSelection(et, d) && ok
			}
		}
		ret ok
	}

	fn isUseAliasDuplication(mut self, &imp: &ImportInfo): bool {
		for (_, mut imp2) in self.file.Imports {
			if imp2 == imp {
				break
			}
			if imp2.Alias == imp.Alias {
				ret true
			}
		}
		ret false
	}

	fn checkAutoAlias(mut self, mut &imp: &ImportInfo): bool {
		if imp.LinkPath == "std/unsafe" {
			// the "std/unsafe" package is able to use unsafe keyword as alias
			ret true
		}
		valid := isValidImpAlias(imp.Alias)
		if valid {
			if self.isUseAliasDuplication(imp) {
				self.pushErr(imp.Decl.Path, log::DuplicatedUseAlias, imp.Alias)
				self.pushSuggestion(log::GiveAnAliasManually, imp.Decl.Path.Kind)
			}
		} else {
			self.pushErr(imp.Decl.Path, log::AutoAliasFail, imp.Decl.Path.Kind)
			self.pushSuggestion(log::GiveAnAliasManually, imp.Decl.Path.Kind)
		}
		ret valid
	}

	fn checkImport(mut self, mut &imp: &ImportInfo): bool {
		if imp.Binded {
			ret true
		}

		if imp.Decl.Alias != nil { // custom alias found
			if jule::IsBlank(imp.Alias) {
				self.pushErr(imp.Decl.Token, log::IgnoreIdent)
			} else if self.isUseAliasDuplication(imp) {
				self.pushErr(imp.Decl.Token, log::DuplicatedUseAlias, imp.Alias)
				self.pushSuggestion(log::RenameUseAliasAvoidDuplication)
			}

			// Check special cases for the "std/unsafe" package.
			if imp.LinkPath == "std/unsafe" {
				self.pushErr(imp.Decl.Alias, log::ExpectedPlainUseDecl, `use "std/unsafe"`)
				ret false
			}
		} else if !isImplicitImport(imp) && !self.checkAutoAlias(imp) {
			ret false
		}
		ret true
	}

	// Checks all imports.
	// Assumes imports comes from Importer.AllPackages().
	fn checkPackages(mut &self, mut imports: []&ImportInfo): (ok: bool) {
		mut semas := make([]&sema, len(imports))
		for (i, mut imp) in imports {
			if !imp.Binded {
				mut s := &sema{
					files: imp.Package.Files,
					flags: self.flags,
					meta: self.meta,
				}
				s.setSemaFields()
				semas[i] = s
			}
		}
		for (i, mut imp) in imports {
			if !imp.Binded {
				mut sema := semas[i]
				sema.check()
				if len(sema.errors) != 0 {
					self.errors = append(self.errors, sema.errors...)
					sema.errors = nil
					ret false
				}
			}
		}
		ret true
	}

	fn implFileImpls(mut &self) {
		for (_, mut imp) in self.file.Impls {
			self.implImpl(imp)
		}
	}

	fn implImpls(mut &self) {
		for (_, mut file) in self.files {
			self.setCurrentFile(file)
			self.implFileImpls()
		}
	}

	fn checkEnums(mut &self) {
		for (_, mut file) in self.files {
			self.setCurrentFile(file)
			match {
			| !self.checkEnumDecls():
			| !self.checkTypeEnumDecls():
			}
		}
	}

	fn checkFileInherits(mut &self) {
		for (_, mut t) in self.file.Traits {
			ok := self._checkTraitDeclInherits(t)
			if !ok {
				ret
			}
		}
	}

	fn checkInherits(mut &self) {
		for (_, mut file) in self.files {
			self.setCurrentFile(file)
			self.checkFileInherits()
		}
	}

	fn typeChecker(mut &self, mut l: Lookup, mut generics: []&TypeAlias,
		mut referencer: &referencer): typeChecker {
		mut tc := typeChecker{
			s: self,
			rootLookup: l,
			lookup: l,
			referencer: referencer,
			useGenerics: generics,
		}
		match type l {
		| &scopeChecker:
			mut hard := l.(&scopeChecker).getHardRoot()
			tc.refers = hard.owner.Refers
		}
		ret tc
	}

	// Builds type, builds result as kind and collects referred type aliases.
	fn buildTypeWithRefers(mut &self, mut &t: &ast::Type, mut l: Lookup,
		mut generics: []&TypeAlias, mut referencer: &referencer): &Type {
		ret self.typeChecker(l, generics, referencer).checkDecl(t)
	}

	// Checks TypeSYm, builds result as Type and collects referred type aliases.
	// Skips already checked types.
	// See also developer reference (9).
	fn checkTypeSymWithRefers(mut &self, mut &t: &TypeSym, mut l: Lookup, mut referencer: &referencer): (ok: bool) {
		mut ta := false // Referencer owner is type alias.
		if t.checked() {
			match type referencer.owner {
			| &TypeAlias:
				ta = true
			}
			if !ta {
				ret true
			}
		}
		mut tt := self.buildTypeWithRefers(t.Decl, l, nil, referencer)
		if tt == nil || !ta {
			t.Type = tt
		} else {
			t.Type.Kind.(&StructIns).setSource(tt)
		}
		ret t.checked()
	}

	fn constraintChecker(mut &self): &constraintChecker {
		ret &constraintChecker{s: self}
	}

	// Checks type and builds result as Type.
	// Skips already checked types.
	fn checkTypeSym(mut &self, mut &t: &TypeSym, mut l: Lookup): bool {
		ret self.checkTypeSymWithRefers(t, l, nil)
	}

	// Same as the checkTypeSym but takes referencer.
	fn checkTypeSymRefers(mut &self, mut &t: &ast::Type, mut l: Lookup, mut refers: &ReferenceStack): &Type {
		mut tc := &typeChecker{
			s: self,
			rootLookup: l,
			lookup: l,
			refers: refers,
		}
		ret tc.checkDecl(t)
	}

	// Builds type with type aliases for generics.
	// Returns nil if error occur or failed.
	fn buildTypeWithGenerics(mut &self, mut &t: &ast::Type,
		mut generics: []&TypeAlias, mut refers: &ReferenceStack): &Type {
		mut tc := &typeChecker{
			s: self,
			rootLookup: self,
			lookup: self,
			useGenerics: generics,
			refers: refers,
		}
		ret tc.checkDecl(t)
	}

	// Same as self.buildTypeWithGenerics but not uses any generics.
	fn buildType(mut &self, mut &t: &ast::Type): &Type {
		ret self.buildTypeWithGenerics(t, nil, nil)
	}

	// Select type with name selection.
	fn selectType(mut &self, mut &t: &ast::Type): &Type {
		mut tc := &typeChecker{
			s: self,
			rootLookup: self,
			lookup: self,
			selection: true,
		}
		ret tc.checkDecl(t)
	}

	// Returns eval instance for configuration with
	// type prefix and checks var dependencies.
	fn evalpd(mut &self, mut l: Lookup, mut p: &Type, mut owner: &Var): &eval {
		mut e := &eval{
			s: self,
			lookup: l,
			owner: owner,
		}
		match type l {
		| &scopeChecker:
			e.unsafety = l.(&scopeChecker).isUnsafe()
		}
		e.prefix = p
		ret e
	}

	// Returns eval instance for configuration with type prefix.
	fn evalp(mut &self, mut l: Lookup, mut p: &Type): &eval {
		ret self.evalpd(l, p, nil)
	}

	// Returns eval instance for configuration.
	fn eval(mut &self, mut l: Lookup): &eval {
		ret self.evalp(l, nil)
	}

	// Do not checks mutability.
	fn checkAssignType(mut &self, destIsRef: bool, mut &dest: &Type,
		mut &v: &Value, mut errorToken: &token::Token, mut refers: &ReferenceStack): bool {
		if v.Decl {
			self.pushErr(errorToken, log::InvalidExpr)
			ret false
		}
		if destIsRef {
			if !dest.Equal(v.Type) {
				self.pushErr(errorToken, log::IncompatibleTypes, dest.Str(), v.Type.Str())
				ret false
			}
		} else {
			mut atc := &assignTypeChecker{
				s: self,
				errorToken: errorToken,
				dest: dest,
				v: v,
				refers: refers,
			}
			ok := atc.check()
			if !ok {
				ret false
			}
		}

		if !v.IsConst() || dest.Prim() == nil {
			ret true
		}

		mut kind := dest.Prim().Kind

		match {
		| types::IsSigInt(kind):
			v.Constant.SetI64(v.Constant.AsI64())
		| types::IsUnsigInt(kind):
			v.Constant.SetU64(v.Constant.AsU64())
		| types::IsFloat(kind):
			v.Constant.SetF64(v.Constant.AsF64())
		}

		ret true
	}

	fn _checkTypeCompatibility(mut &self, mut &dest: &Type, mut &src: &Type,
		mut errorToken: &token::Token, flags: int): bool {
		if src == nil {
			ret false
		}
		// Tuple to single type, always fails.
		if src.Tuple() != nil {
			ret false
		}
		mut tcc := typeCompatibilityChecker{
			s: self,
			errorToken: errorToken,
			dest: dest,
			src: src,
			flags: flags,
		}
		ret tcc.check()
	}

	fn checkTypeCompatibility(mut &self, mut &dest: &Type,
		mut &src: &Type, mut &errorToken: &token::Token, flags: int): bool {
		if self._checkTypeCompatibility(dest, src, errorToken, flags) {
			ret true
		}
		self.pushErr(errorToken, log::IncompatibleTypes, dest.Str(), src.Str())
		ret false
	}

	fn pushCompatibilityError(mut self, mut &dest: &Type, mut &src: &Value,
		mut &errorToken: &token::Token) {
		if src.untyped && src.IsConst() {
			match {
			| src.Constant.IsInt():
				self.pushErr(errorToken, log::IncompatibleTypes, dest.Str(), "untyped integer ("+src.Constant.Str()+")")
				ret
			| src.Constant.IsF64():
				self.pushErr(errorToken, log::IncompatibleTypes, dest.Str(), "untyped float ("+src.Constant.Str()+")")
				ret
			}
		}
		self.pushErr(errorToken, log::IncompatibleTypes, dest.Str(), src.Type.Str())
	}

	fn checkTypeCompatibility1(mut &self, mut &dest: &Type, mut &src: &Value,
		mut &errorToken: &token::Token, flags: int): bool {
		if self._checkTypeCompatibility(dest, src.Type, errorToken, flags) {
			ret true
		}
		self.pushCompatibilityError(dest, src, errorToken)
		ret false
	}

	// Builds non-generic types but skips generic types.
	// Builds generic identifiers as primitive type.
	//
	// Useful:
	//	- For non-generic type parsed string type kinds.
	//	- For checking non-generic types.
	fn buildNonGenericType(mut &self, mut &ast: &ast::Type,
		mut &generics: []&ast::Generic, mut &ignored: []&Type): &Type {
		mut tc := &typeChecker{
			s: self,
			rootLookup: self,
			lookup: self,
			ignoreGenerics: generics,
			ignoredGenerics: &ignored,
		}
		ret tc.checkDecl(ast)
	}

	fn buildFuncNonGenericTypes(mut &self, mut f: &FuncIns, mut &ignored: []&Type): (ok: bool) {
		let mut generics: []&ast::Generic = nil
		if f.Decl.IsMethod() {
			generics = append(f.Decl.Generics, f.Decl.Owner.Generics...)
		} else {
			generics = f.Decl.Generics
		}
		ret self.basicFuncEnvironment(f, fn(mut &sema: &sema): (ok: bool) {
			ok = true
			for (_, mut p) in f.Params {
				if !p.Decl.IsSelf() {
					p.Type = sema.buildNonGenericType(p.Decl.TypeSym.Decl, generics, unsafe { ignored })
					ok = ok && p.Type != nil
				}
			}
			if !f.Decl.IsVoid() {
				f.Result = sema.buildNonGenericType(f.Decl.Result.TypeSym.Decl, generics, unsafe { ignored })
				ok = ok && f.Result != nil
			}
			ret
		})
	}

	fn getTraitCheckFuncKind(mut &self, mut &f: &Func): &FuncIns {
		if len(f.Instances) == 1 {
			ret f.Instances[0]
		}
		mut ins := f.instanceForce()

		mut tc := &typeChecker{
			s: self,
			rootLookup: self,
			lookup: self,
		}
		for (_, mut p) in ins.Params {
			if !p.Decl.IsSelf() {
				p.Type = tc.checkDecl(p.Decl.TypeSym.Decl)
				if p.Type == nil {
					ret nil
				}
			}
		}
		if !f.IsVoid() {
			ins.Result = tc.checkDecl(f.Result.TypeSym.Decl)
			if ins.Result == nil {
				ret nil
			}
		}

		ret ins
	}

	fn checkConstraintsFunc(mut &self, mut &f: &FuncIns, mut &et: &token::Token, mut exist: &FuncIns): bool {
		mut cc := self.constraintChecker()
		cc.et = et
		cc.fi = f
		if exist != nil {
			for (i, mut g) in exist.Generics {
				f.Generics[i].Constraint = g.Constraint
			}
		} else {
			cc.uniq = true
		}
		ret cc.check()
	}

	fn checkConstraintsStruct(mut &self, mut &s: &StructIns, mut &et: &token::Token, mut exist: &StructIns): bool {
		mut cc := self.constraintChecker()
		cc.et = et
		cc.si = s
		if exist != nil {
			for (i, mut g) in exist.Generics {
				s.Generics[i].Constraint = g.Constraint
			}
		} else {
			cc.uniq = true
		}
		ret cc.check()
	}

	// Calls algo in the function's native environment.
	// Errors will be handled.
	// Returns result of algo.
	fn basicFuncEnvironment(mut &self, mut &f: &FuncIns, algo: fn(mut &sema: &sema): bool): bool {
		mut sema := f.Decl.sema
		mut old := sema.getCurrentFile()
		mut file := findFile(sema.files, f.Decl.Token.File)
		if file != nil {
			sema.setCurrentFile(file)
		}

		ok := algo(sema)

		if sema != self {
			self.errors = append(self.errors, sema.errors...)
			sema.errors = nil
		}
		sema.setCurrentFile(old)

		ret ok
	}

	// Calls basicFuncEnvironment internally but handles generics.
	fn funcEnvironment(mut &self, mut &f: &FuncIns, algo: fn(mut &sema: &sema, mut &generics: []&TypeAlias): bool): bool {
		mut size := len(f.Generics)
		if f.Decl != nil && f.Decl.Owner != nil {
			size += len(f.Decl.Owner.Generics)
		}
		mut generics := make([]&TypeAlias, 0, size)
		appendGenericTypeAliases(generics, f)
		ret self.basicFuncEnvironment(f, fn(mut &sema: &sema): bool {
			ret algo(sema, generics)
		})
	}

	fn checkFuncParamKind(mut &self, mut &p: &ParamIns) {
		p.Type.Variadic = p.Decl.Variadic
	}

	fn reloadFuncInsTypes(mut &self, mut f: &FuncIns): bool {
		if f.IsBuiltin() || f.IsAnon() {
			ret true
		}
		ret self.funcEnvironment(f, fn(mut &sema: &sema, mut &generics: []&TypeAlias): bool {
			mut ok := true
			for (_, mut p) in f.Params {
				if p.Decl.IsSelf() {
					if f.Owner == nil {
						// Trait methods have not owner yet. Skip them.
						continue
					}
					if p.Decl.IsRef() {
						p.Type = &Type{
							Kind: &Sptr{
								Elem: &Type{
									Kind: f.Owner,
								},
							},
						}
					} else {
						p.Type = &Type{Kind: f.Owner}
					}
				} else {
					p.Type = sema.buildTypeWithGenerics(p.Decl.TypeSym.Decl, generics, f.Refers)
					if p.Type != nil {
						self.checkFuncParamKind(p)
					} else {
						ok = false
					}
				}
			}
			if !f.Decl.IsVoid() {
				f.Result = sema.buildTypeWithGenerics(f.Decl.Result.TypeSym.Decl, generics, f.Refers)
				ok = f.Result != nil && ok
			}
			ret ok
		})
	}

	fn checkRefValidityForInitExpr(mut &self, leftMut: bool, mut &v: &Value, mut &errorToken: &token::Token): bool {
		if !isValidModelForRef(v.Model) {
			self.pushErr(errorToken, log::RefAssignNonVar)
			ret false
		}
		if leftMut && !v.Mutable {
			self.pushErr(errorToken, log::MutRefPointsImmut)
			ret false
		}
		ret true
	}

	// Reports whether struct is risky for mutability.
	// Designed for copy assignments.
	// It will not check mutability risk of the internal mutable data or etc.
	// It will check interior mutability risk of the new copy.
	// Assumes the assigned memory is mutable.
	fn isMutRiskyStruct(self, &s: &StructIns): bool {
		for _, f in s.Fields {
			// Inerior mutability enables to copy internal mutable data with safety.
			// If field is interior mutable and their kind is mutable,
			// check whether the field accessible. If field is not accessible,
			// there is no problem, because no risk for mutability.
			//
			// For example:
			//	We have a Foo struct. The Foo struct have the x field which is
			//	interior mutable with mutable kind. So the following code is risky:
			//
			//	a := Foo{}
			//	mut b := a
			//
			//	The example code above will create new copy of variable a, which is
			//	instance of struct Foo. If the field x is accessible, the variable
			//	b can mutate it, since it is mutable and can access to field x.
			//	Therefore, copying interior mutable fields with mutable kind
			//	must be disallowed if field is accessible for safety reasons.
			if f.Decl.Mutable && f.Type.Mutable() &&
				self.isAccessibleDefine(f.Decl.Public, f.Decl.Token) {
				ret true
			}
		}
		ret false
	}

	fn checkValidityForInitExpr(mut &self, leftMut: bool, leftRef: bool,
		&leftKind: &Type, mut &v: &Value, mut &errorToken: &token::Token): bool {
		if leftMut && !v.Mutable {
			// Check classical assignment mutability.
			if v.Type.Mutable() || v.Type.Variadic {
				self.pushErr(errorToken, log::AssignNonMutToMut, v.Type.Str())
				ret false
			}
			// Check interior mutability risk for the struct copy.
			s := v.Type.Struct()
			if s != nil && self.isMutRiskyStruct(s) {
				self.pushErr(errorToken, log::CopyWithMutableData, v.Type.Str())
				ret false
			}
		}
		if leftRef {
			if !self.checkRefValidityForInitExpr(leftMut, v, errorToken) {
				ret false
			}
		}
		mut atc := &assignTypeChecker{
			s: self,
			v: v,
			errorToken: errorToken,
		}
		ret atc.checkValidity()
	}

	fn checkTypeAliasDeclKind(mut &self, mut &ta: &TypeAlias, mut prev: &referencer, mut l: Lookup): (ok: bool) {
		mut old := self.file
		defer {
			self.setCurrentFile(old)
		}
		if ta.Token != nil {
			mut file := findFile(self.files, ta.Token.File)
			if file != nil {
				self.setCurrentFile(file)
			}
		}
		mut referencer := &referencer{
			name: ta.Ident,
			owner: ta,
			prev: prev,
		}
		if prev != nil {
			prev.next = referencer
			defer { prev.next = nil }
		}
		referencer.tains = ta.Strict
		ok = self.checkTypeSymWithRefers(ta.TypeSym, l, referencer)
		if ok && ta.TypeSym.Type.Array() != nil && ta.TypeSym.Type.Array().Auto {
			self.pushErr(ta.TypeSym.Decl.Token, log::ArrayAutoSized)
			ok = false
		}
		ret
	}

	fn checkTypeAliasDecl(mut &self, mut &ta: &TypeAlias, mut prev: &referencer, mut l: Lookup): (ok: bool) {
		if jule::IsBlank(ta.Ident) {
			self.pushErr(ta.Token, log::IgnoreIdent)
		}
		if ta.TypeSym.Type != nil {
			// already checked
			ret true
		}
		// Type alias is strict, make strict type alias analysis.
		// See developer reference (9).
		if ta.Strict {
			mut s := initNewStructType(ta.Ident, pseudoSource)
			s.Decl.sema = self
			s.Decl.Binded = ta.Binded
			s.Decl.Token = ta.Token
			s.Decl.Public = ta.Public
			ta.TypeSym.Type = &Type{Kind: s}
		}
		ok = self.checkTypeAliasDeclKind(ta, prev, l)
		if !ok {
			ret false
		}
		if !ta.Strict && ta.Binded {
			self.pushErr(ta.Token, log::BindedAsSoftType)
			self.pushSuggestion(log::DefineAsStrictAlias, ta.Ident)
		}
		ret true
	}

	// Checks type alias declaration with duplicated identifiers.
	fn checkTypeAliasDeclDup(mut &self, mut &ta: &TypeAlias) {
		if self.isDuplicatedIdent(uintptr(ta), ta.Ident, ta.Binded) {
			self.pushErr(ta.Token, log::DuplicatedIdent, ta.Ident)
			self.pushSuggestion(log::RenameForAvoidDuplication)
		}
		self.checkTypeAliasDecl(ta, nil, self)
	}

	// Checks current package file's type alias declarations.
	fn checkTypeAliasDecls(mut &self): (ok: bool) {
		for (_, mut ta) in self.file.TypeAliases {
			self.checkTypeAliasDeclDup(ta)

			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret false
			}
		}
		ret true
	}

	fn checkTypeEnumItemType(mut &self, mut &e: &TypeEnum, mut &item: &TypeEnumItem): (ok: bool) {
		mut old := self.file
		defer {
			self.setCurrentFile(old)
		}
		if e.Token != nil {
			mut file := findFile(self.files, e.Token.File)
			if file != nil {
				self.setCurrentFile(file)
			}
		}
		ok = self.checkTypeSym(item.TypeSym, self)
		if ok && item.TypeSym.Type.Array() != nil && item.TypeSym.Type.Array().Auto {
			self.pushErr(item.TypeSym.Decl.Token, log::ArrayAutoSized)
			ok = false
		}
		if ok {
			checkTypeEnumRefCycle(self, e, item)
		}
		ret
	}

	fn checkTypeEnumDecl(mut &self, mut &e: &TypeEnum) {
		if jule::IsBlank(e.Ident) {
			self.pushErr(e.Token, log::IgnoreIdent)
		} else if self.isDuplicatedIdent(uintptr(e), e.Ident, false) {
			self.pushErr(e.Token, log::DuplicatedIdent, e.Ident)
			self.pushSuggestion(log::RenameForAvoidDuplication)
		}

		if len(e.Items) == 0 {
			self.pushErr(e.Token, log::NoMemberInEnum, e.Ident)
			ret
		}

		for (_, mut item) in e.Items {
			if item.TypeSym == nil {
				self.pushErr(item.Token, log::MissingType)
				continue
			}
			ok := self.checkTypeEnumItemType(e, item)
			if !ok {
				continue
			}
			// Disallow plain <any> type, but allow strict type aliases to type <any>.
			p := item.TypeSym.Type.Prim()
			if item.TypeSym.Type.SoftStruct() == nil && p != nil && p.IsAny() {
				self.pushErr(item.Token, log::AnyWithTypeEnum)
			}
		}
	}

	// Checks current package file's type enum declarations.
	fn checkTypeEnumDecls(mut &self): (ok: bool) {
		for (_, mut e) in self.file.TypeEnums {
			self.checkTypeEnumDecl(e)
			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret false
			}
		}
		ret true
	}

	fn checkEnumItemsDup(mut self, items: []&Var) {
		for _, item in items {
			// The last item is nil.
			// See developer reference (14).
			if item == nil {
				continue
			}
			if item.Ident == "" {
				continue
			} else if jule::IsBlank(item.Ident) {
				self.pushErr(item.Token, log::IgnoreIdent)
			} else {
				for _, citem in items {
					if item == citem {
						break
					} else if item.Ident == citem.Ident {
						self.pushErr(item.Token, log::DuplicatedIdent, item.Ident)
						self.pushSuggestion(log::RenameForAvoidDuplication)
						break
					}
				}
			}
		}
	}

	fn precheckEnumDecl(mut &self, mut &e: &Enum) {
		if jule::IsBlank(e.Ident) {
			self.pushErr(e.Token, log::IgnoreIdent)
		} else if self.isDuplicatedIdent(uintptr(e), e.Ident, false) {
			self.pushErr(e.Token, log::DuplicatedIdent, e.Ident)
			self.pushSuggestion(log::RenameForAvoidDuplication)
		}

		if len(e.Items) == 0 {
			self.pushErr(e.Token, log::NoMemberInEnum, e.Ident)
			ret
		}

		self.checkEnumItemsDup(e.Items)

		if e.TypeSym != nil {
			if !self.checkTypeSym(e.TypeSym, self) {
				ret
			}
		} else {
			// Set to default type.
			e.TypeSym = findBuiltinTypeAlias(types::Int).TypeSym
		}

		mut t := e.TypeSym.Type.Prim()
		if t == nil {
			self.pushErr(e.Token, log::InvalidTypeSource)
			ret
		}

		supportsIota := types::IsInt(t.Str())
		if !t.IsStr() && !supportsIota {
			self.pushErr(e.Token, log::InvalidTypeSource)
			ret
		}
		for (_, mut item) in e.Items {
			// The last item is nil.
			// See developer reference (14).
			if item == nil {
				continue
			}
			item.TypeSym = new(TypeSym, *e.TypeSym)
			if e.TypeSym.Decl != nil {
				item.TypeSym.Decl = new(ast::Type, *e.TypeSym.Decl)
				item.TypeSym.Decl.Token = item.Token
			}
		}
	}

	fn checkEnumDecl(mut &self, mut &e: &Enum) {
		for (_, mut item) in e.Items {
			// The last item is nil.
			// See developer reference (14).
			if item == nil {
				continue
			}
			self.checkVar(item, self)
		}
	}

	// Checks current package file's enum declarations.
	fn checkEnumDecls(mut &self): (ok: bool) {
		// Do "pre-check" explained in the developer reference (5).
		// This part is mandatory, but the "check" phase does not have to be done here.
		for (_, mut e) in self.file.Enums {
			self.precheckEnumDecl(e)
			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret false
			}
		}
		for (_, mut e) in self.file.Enums {
			self.checkEnumDecl(e)
			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret false
			}
		}
		ret true
	}

	fn checkDeclGenerics(mut self, &generics: []&ast::Generic): (ok: bool) {
		ok = true
		for i, g in generics {
			if jule::IsBlank(g.Ident) {
				self.pushErr(g.Token, log::IgnoreIdent)
				ok = false
				continue
			}

			// Check duplications.
		duplicationLookup:
			for j, ct in generics {
				match {
				| j >= i:
					// Skip current and following generics.
					break duplicationLookup
				| g.Ident == ct.Ident:
					self.pushErr(g.Token, log::DuplicatedIdent, g.Ident)
					self.pushSuggestion(log::RenameForAvoidDuplication)
					ok = false
					break duplicationLookup
				}
			}
		}
		ret
	}

	fn checkFuncDeclParamsDup(mut self, &f: &Func): (ok: bool) {
		ok = true
	check:
		for i, p in f.Params {
			// Lookup in generics.
			for _, g in f.Generics {
				if p.Ident == g.Ident {
					ok = false
					self.pushErr(p.Token, log::DuplicatedIdent, p.Ident)
					self.pushSuggestion(log::RenameForAvoidDuplication)
					continue check
				}
			}

		paramsLookup:
			for j, jp in f.Params {
				match {
				| j >= i:
					// Skip current and following parameters.
					break paramsLookup
				| jule::IsBlank(p.Ident)
				| jule::IsBlank(jp.Ident)
				| jule::IsAnon(p.Ident)
				| jule::IsAnon(jp.Ident):
					// Skip anonymous parameters.
					break paramsLookup
				| p.Ident == jp.Ident:
					ok = false
					self.pushErr(p.Token, log::DuplicatedIdent, p.Ident)
					self.pushSuggestion(log::RenameForAvoidDuplication)
					continue check
				}
			}
		}
		ret
	}

	fn checkFuncDeclResultDup(mut self, mut &f: &Func): (ok: bool) {
		ok = true
		if f.IsVoid() {
			ret
		}

		// Check duplications.
		for i, v in f.Result.Idents {
			if jule::IsBlank(v.Kind) || jule::IsAnon(v.Kind) {
				continue // Skip anonymous return variables.
			}
			// Lookup in generics.
			for _, g in f.Generics {
				if v.Kind == g.Ident {
					goto exist
				}
			}
			// Lookup in parameters.
			for _, p in f.Params {
				if v.Kind == p.Ident {
					goto exist
				}
			}

			// Lookup in return identifiers.
		itselfLookup:
			for j, jv in f.Result.Idents {
				match {
				| j >= i:
					// Skip current and following identifiers.
					break itselfLookup
				| jv.Kind == v.Kind:
					goto exist
				}
			}
			continue
		exist:
			self.pushErr(v, log::DuplicatedIdent, v.Kind)
			self.pushSuggestion(log::RenameForAvoidDuplication)
			ok = false
		}

		ret
	}

	fn checkFuncVariadicParam(mut &self, mut &f: &Func): bool {
		if len(f.Params) == 0 {
			ret false
		}
		mut param := f.Params[len(f.Params)-1]
		if param.Variadic && param.Reference {
			self.pushErr(param.Token, log::VariadicReference)
		}
		ret true
	}

	// Checks generics, parameters and return type.
	// Not checks scope, and other things.
	fn checkFuncDeclPrototype(mut &self, mut &f: &Func) {
		if f.Exceptional && f.Binded {
			self.pushErr(f.Token, log::BindedExceptional)
			ret
		}

		// Check special cases for reserved functions, ignore method ones.
		if f.IsEntryPoint() && f.Owner == nil {
			if !FuncPattern.Main(f) {
				self.pushErr(f.Token, log::InvalidMainFunction)
				self.pushSuggestion(log::ExpectedMainLike)
			}
		} else if f.IsInit() && f.Owner == nil {
			if !FuncPattern.Init(f) {
				self.pushErr(f.Token, log::InvalidInitializerFunction)
				self.pushSuggestion(log::ExpectedInitializerLike)
			}
		}

		match {
		| !self.checkDeclGenerics(f.Generics):
		| !self.checkFuncDeclParamsDup(f):
		| !self.checkFuncDeclResultDup(f):
		| !self.checkFuncVariadicParam(f):
		}
	}

	fn catchTraitInheritCycle(mut &self, t1: &Trait, mut t2: &Trait, mut &message: strings::Builder): (ok: bool) {
		ok = true
		for (_, mut i) in t2.Inherits {
			if i.Type == nil {
				continue
			}
			mut t3 := i.Type.Trait()
			if t1 == t3 {
				self.pushCycleError(t2.Ident, t3.Ident, message)
				ret false
			}
			if !self.catchTraitInheritCycle(t1, t3, message) {
				self.pushCycleError(t2.Ident, t3.Ident, message)
				ret false
			}
		}
		ret
	}

	fn _checkTraitDeclInherits(mut &self, mut &t: &Trait): (ok: bool) {
		ok = true
		for (i, mut it) in t.Inherits {
			if !self.checkTypeSym(it, self) {
				ok = false
				continue
			}
			mut t2 := it.Type.Trait()
			if t2 == nil {
				self.pushErr(it.Decl.Token, log::InheritedNonTrait, t.Ident, it.Type.Str())
				ok = false
				continue
			}
			for j, it2 in t.Inherits {
				if j >= i {
					break
				}
				if it2.Type != nil && it.Type.Equal(it2.Type) {
					self.pushErr(it.Decl.Token, log::DuplicatedIdent, t2.Ident)
					ok = false
					break
				}
			}
			if t == t2 {
				self.pushErr(it.Decl.Token, log::IllegalCycleRefersItself, t.Ident)
				ok = false
			} else {
				mut message := strings::Builder{}
				message.Grow(1 << 6)
				ok = ok && self.catchTraitInheritCycle(t, t2, message)
				if message.Len() > 0 {
					mut errMsg := message.Str()
					message.Clear()
					self.pushCycleError(t.Ident, t2.Ident, message)
					errMsg += message.Str()
					self.pushErr(it.Decl.Token, log::IllegalCrossCycle, errMsg)
				}
			}
		}
		ret ok
	}

	fn checkTraitDeclInherits(mut &self, mut &t: &Trait) {
		for (i, mut it) in t.Inherits {
			mut t1 := it.Type.Trait()
			for (j, mut it2) in t.Inherits {
				if j == i {
					continue
				}
				mut t2 := it2.Type.Trait()
				for (_, mut t1m) in t1.Methods {
					mut t2m := t2.FindMethod(t1m.Ident)
					if t2m == nil {
						continue
					}
					t1f := self.getTraitCheckFuncKind(t1m)
					t2f := self.getTraitCheckFuncKind(t2m)
					if !t1f.equalTrait(t2f) {
						self.pushErr(it.Decl.Token, log::IncompatibleInherit,
							t.Ident, t2.Ident, t1f.GetKindStr(true), t2f.GetKindStr(true))
						ret
					}
				}
			}
		}
	}

	fn checkTraitDeclMethod(mut &self, mut &f: &Func) {
		if jule::IsBlank(f.Ident) {
			self.pushErr(f.Token, log::IgnoreIdent)
		} else if jule::IsAnon(f.Ident) {
			self.pushErr(f.Token, log::AnonFunc)
		}
		f.sema = self
		self.checkFuncDeclPrototype(f)
		mut ins := f.instance()
		_ = self.reloadFuncInsTypes(ins)
		ins.reloaded = true
		f.appendInstance(ins)
	}

	fn checkTraitDeclMethods(mut &self, mut &t: &Trait) {
		for (i, mut f) in t.Methods {
			self.checkTraitDeclMethod(f)

			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret
			}

			if t.findMethodInherit(f.Ident) != nil {
				self.pushErr(f.Token, log::DuplicatedIdent, f.Ident)
				self.pushSuggestion(log::RenameForAvoidDuplication)
				continue
			}

			// Check duplications.
		duplicateLookup:
			for j, jf in t.Methods {
				// NOTE:
				//	Ignore identifier checking is unnecessary here.
				//	Because ignore identifiers logs error.
				//	Errors breaks checking, so here is unreachable code for
				//	ignore identified methods.
				match {
				| j >= i:
					// Skip current and following methods.
					break duplicateLookup
				| f.Ident == jf.Ident:
					self.pushErr(f.Token, log::DuplicatedIdent, f.Ident)
					self.pushSuggestion(log::RenameForAvoidDuplication)
					break duplicateLookup
				}
			}
		}
	}

	fn checkTraitDecl(mut &self, mut &t: &Trait) {
		if jule::IsBlank(t.Ident) {
			self.pushErr(t.Token, log::IgnoreIdent)
		} else if self.isDuplicatedIdent(uintptr(t), t.Ident, false) {
			self.pushErr(t.Token, log::DuplicatedIdent, t.Ident)
			self.pushSuggestion(log::RenameForAvoidDuplication)
		}

		self.checkTraitDeclInherits(t)
		self.checkTraitDeclMethods(t)
	}

	// Checks current package file's trait declarations.
	fn checkTraitDecls(mut &self): (ok: bool) {
		for (_, mut t) in self.file.Traits {
			self.checkTraitDecl(t)
			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret false
			}
		}
		ret true
	}

	fn checkTraitImplMethods(mut self, mut &base: &Trait, &ipl: &Impl): (ok: bool) {
		ok = true
		for _, f in ipl.Methods {
			if base.FindMethod(f.Ident) == nil {
				self.pushErr(f.Token, log::TraitHaveNotIdent, base.Ident, f.Ident)
				ok = false
			}
		}
		ret
	}

	fn implToStruct(mut &self, mut &dest: &Struct, mut &ipl: &Impl): (ok: bool) {
		ok = true

		// Methods.
		for (_, mut f) in ipl.Methods {
			if dest.FindMethod(f.Ident, f.Statically) != nil || dest.FindField(f.Ident) != nil {
				self.pushErr(f.Token, log::StructAlreadyHaveIdent, dest.Ident, f.Ident)
				ok = false
				continue
			}

			if len(dest.Generics) > 0 && len(f.Generics) > 0 {
				for _, fg in f.Generics {
					for _, dg in dest.Generics {
						if fg.Ident == dg.Ident {
							self.pushErr(fg.Token, log::MethodHasGenericWithSameIdent)
							ok = false
						}
					}
				}
			}

			self.checkDirectives(f.Directives, f)

			f.sema = self
			f.Owner = dest
			dest.Methods = append(dest.Methods, f)
		}

		if len(dest.Instances) == 1 {
			// We have an instance. It's should be impossible if structure is not
			// constructed by a strict type alias. If so, update data of the instance.
			mut s := dest.Instances[0]
			if s.Source != nil {
				s.Methods = dest.Methods
			}
		}

		ret
	}

	// Implement trait to destination.
	fn implTrait(mut &self, mut &decl: &Impl) {
		mut baseT := self.selectType(decl.Base)
		if baseT == nil {
			ret
		}
		mut base := baseT.Trait()
		if base == nil {
			self.pushErr(decl.Base.Token, log::ImplInvalidBase, baseT.Str())
			self.pushSuggestion(log::ExpectedTrait)
			ret
		}

		mut destT := self.selectType(decl.Dest)
		if destT == nil {
			ret
		}
		mut destS := destT.SoftStruct()
		if destS == nil {
			self.pushErr(decl.Dest.Token, log::ImplInvalidDest, destT.Str())
			self.pushSuggestion(log::ExpectedStruct)
			ret
		}

		mut dest := destS.Decl

		if dest.Token.File.Dir() != self.file.File.Dir() {
			self.pushErr(decl.Dest.Token, log::IllegalImplOutOfPackage)
			ret
		}

		pushImplemented(base, dest)
		pushImplements(dest, base)

		match {
		| !self.checkTraitImplMethods(base, decl):
		| !self.implToStruct(dest, decl):
		}
	}

	fn implStruct(mut &self, mut &decl: &Impl) {
		mut destT := self.selectType(decl.Dest)
		if destT == nil {
			ret
		}
		mut destS := destT.SoftStruct()
		if destS == nil {
			self.pushErr(decl.Dest.Token, log::ImplInvalidDest, destT.Str())
			self.pushSuggestion(log::ExpectedStruct)
			ret
		}

		mut dest := destS.Decl
		if dest.Token.File.Dir() != self.file.File.Dir() {
			self.pushErr(decl.Dest.Token, log::IllegalImplOutOfPackage)
			ret
		}

		match {
		| !self.implToStruct(dest, decl):
		}
	}

	// Implement implementation.
	fn implImpl(mut &self, mut &decl: &Impl) {
		match {
		| decl.IsTraitImpl():
			self.implTrait(decl)
		| decl.IsStructImpl():
			self.implStruct(decl)
		}
	}

	// Checks variable declaration.
	// Will not check duplicated identifiers.
	fn checkVarDecl(mut &self, mut &decl: &Var, mut l: Lookup) {
		// If declaration is constant and have not a group, complain for initialize expression.
		// Otherwise do not. Because it may be enumerated.
		// It will be checked by the [checkVarValue] method.
		// But if it has type annotation, complain, because enumerators
		// should be plain, only identifier.
		groupError := decl.Constant && (decl.Group == nil || !decl.IsTypeInferred())

		if decl.IsTypeInferred() {
			if !decl.IsInitialized() && groupError {
				self.pushErr(decl.Token, log::MissingValueForTypeInference)
			}
		} else {
			mut refers := (&ReferenceStack)(nil)
			match type l {
			| &sema:
				refers = decl.Refers
			| &scopeChecker:
				refers = l.(&scopeChecker).getOwnerRefers()
			|:
				panic("sema: checkVarDecl: unimplemented referencer")
			}
			decl.TypeSym.Type = self.checkTypeSymRefers(decl.TypeSym.Decl, l, refers)
		}

		if decl.Reference {
			if decl.Constant {
				self.pushErr(decl.Token, log::ConstRef)
			}
			if decl.Statically {
				self.pushErr(decl.Token, log::StaticReference)
			}
		}

		if !decl.IsInitialized() {
			if groupError {
				self.pushErr(decl.Token, log::ConstVarNotHaveExpr)
			}
			if decl.Statically {
				self.pushErr(decl.Token, log::StaticNotHaveExpr)
			}
			if decl.Reference {
				self.pushErr(decl.Token, log::RefNotInited)
			}
		}
	}

	// Checks variable declaration for global scope.
	// Checks duplicated identifiers by Sema.
	fn checkGlobalVarDecl(mut &self, mut &decl: &Var) {
		if self.isDuplicatedIdent(uintptr(decl), decl.Ident, decl.Binded) {
			self.pushErr(decl.Token, log::DuplicatedIdent, decl.Ident)
			self.pushSuggestion(log::RenameForAvoidDuplication)
		}
		if decl.Binded && decl.Constant {
			self.pushErr(decl.Token, log::BindedVarIsConst)
		}
		if !decl.Binded && !decl.Constant && !decl.Statically {
			self.pushErr(decl.Token, log::GlobalNotStatic)
			self.pushSuggestion(log::UseStaticKeywordToDef)
		}
		self.checkDirectives(decl.Directives, decl)
		self.checkVarDecl(decl, self)
	}

	// Checks current package file's global variable declarations.
	fn checkGlobalDecls(mut &self): (ok: bool) {
		for (_, mut decl) in self.file.Vars {
			self.checkGlobalVarDecl(decl)
			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret false
			}
		}
		ret true
	}

	fn checkStructTraitImpl(mut &self, mut &strct: &Struct, mut &trt: &Trait): (ok: bool) {
		ok = true
		for (_, mut tf) in trt.Methods {
			mut exist := false
			mut sf := strct.FindMethod(tf.Ident, tf.Statically)
			tfK := self.getTraitCheckFuncKind(tf)
			if sf != nil {
				mut sfK := self.getTraitCheckFuncKind(sf)
				if sfK != nil {
					exist = tfK.equalTrait(sfK)
				}
			}
			if !exist {
				const Ident = true
				self.pushErr(strct.Token, log::NotImplTraitDef, trt.Ident, tfK.GetKindStr(Ident))
				ok = false
			}
		}
		ret
	}

	fn checkStructImpls(mut &self, mut &s: &Struct): (ok: bool) {
		ok = true
		for (_, mut trt) in s.Implements {
			ok = self.checkStructTraitImpl(s, trt) && ok
		}
		ret ok
	}

	fn checkStructFields(mut &self, mut &st: &Struct): (ok: bool) {
		ok = true
		for (_, mut f) in st.Fields {
			f.Owner = st
			if jule::IsBlank(f.Ident) {
				continue
			}
			// Check duplicated identifiers for fields.
			for _, cf in st.Fields {
				if f == cf {
					break
				} else if f.Ident == cf.Ident {
					self.pushErr(f.Token, log::DuplicatedIdent, f.Ident)
					self.pushSuggestion(log::RenameForAvoidDuplication)
					ok = false
				}
			}
		}
		ret ok
	}

	fn checkStructDecl(mut &self, mut &s: &Struct) {
		if jule::IsBlank(s.Ident) {
			self.pushErr(s.Token, log::IgnoreIdent)
		} else if self.isDuplicatedIdent(uintptr(s), s.Ident, s.Binded) {
			self.pushErr(s.Token, log::DuplicatedIdent, s.Ident)
			self.pushSuggestion(log::RenameForAvoidDuplication)
		}

		self.checkDirectives(s.Directives, s)

		match {
		| !self.checkDeclGenerics(s.Generics):
		| !self.checkStructFields(s):
		| !self.checkStructImpls(s):
		| !self.checkFuncDeclsBy(s.Methods):
		}

		// Here, we need to dispatch the methods again.
		// At this point, all `impl` statements should already be implemented.
		// During this process, some instances might have been created without
		// having the methods. To prevent this from causing errors,
		// the missing methods added with the `impl` statements must be dispatched
		// to the instances that have not have these methods.
		s.dispatchMethods()
	}

	// Checks current package file's structure declarations.
	fn checkStructDecls(mut &self): (ok: bool) {
		for (_, mut s) in self.file.Structs {
			self.checkStructDecl(s)
			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret false
			}
		}
		for (_, mut ta) in self.file.TypeAliases {
			if !ta.Strict {
				continue
			}
			mut s := ta.TypeSym.Type.Kind.(&StructIns).Decl
			match {
			| !self.checkStructImpls(s):
			| !self.checkFuncDeclsBy(s.Methods):
			}
			// Break checking if type alias has error.
			if len(self.errors) > 0 {
				ret false
			}
		}
		ret true
	}

	fn checkAnonFuncDecl(mut &self, mut &f: &Func) {
		f.sema = self
		self.checkFuncDeclPrototype(f)
	}

	fn checkFuncDecl(mut &self, mut &f: &Func) {
		if jule::IsBlank(f.Ident) {
			self.pushErr(f.Token, log::IgnoreIdent)
		} else if f.IsAnon() {
			self.pushErr(f.Token, log::AnonFunc)
		}

		self.checkDirectives(f.Directives, f)
		self.checkAnonFuncDecl(f)

		if f.Owner == nil && self.isDuplicatedIdent(uintptr(f), f.Ident, f.Binded) {
			if f.Ident == jule::InitFunc {
				init := self.FindFunc(jule::InitFunc, false)
				if init != nil {
					ret
				}
			}
			self.pushErr(f.Token, log::DuplicatedIdent, f.Ident)
			self.pushSuggestion(log::RenameForAvoidDuplication)
		}
	}

	fn checkFuncDeclsBy(mut &self, mut &funcs: []&Func): bool {
		for (_, mut f) in funcs {
			self.checkFuncDecl(f)
			// Break checking if error occurs.
			if len(self.errors) > 0 {
				ret false
			}
		}
		ret true
	}

	// Checks current package file's function declarations.
	fn checkFuncDecls(mut &self): (ok: bool) {
		ret self.checkFuncDeclsBy(self.file.Funcs)
	}

	fn pushCycleError(self, &st1: str, &st2: str, mut &message: strings::Builder) {
		const Padding = 7
		refersTo := log::Logf(log::RefersTo, st1, st2)
		m := message.Str()
		message.WriteStr(strings::Repeat(" ", Padding))!
		message.WriteStr(refersTo)!
		message.WriteByte('\n')!
		message.WriteStr(m)!
	}

	// Checks declarations of all package files.
	// Breaks checking if checked file failed.
	fn checkPackageDecls(mut &self) {
		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			if !self.checkTypeAliasDecls() {
				ret
			}
		}

		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			if !self.checkTraitDecls() {
				ret
			}
		}

		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			if !self.checkGlobalDecls() {
				ret
			}
		}

		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			match {
			| !self.checkFuncDecls():
			| !self.checkStructDecls():
			|:
				continue
			}
			ret
		}
	}

	fn checkDataForTypeInference(mut self, &v: &Value, &errToken: &token::Token): bool {
		match {
		| v.IsNil():
			self.pushErr(errToken, log::NilForTypeInference)
			ret false
		| v.IsVoid():
			self.pushErr(errToken, log::VoidForTypeInference)
			ret false
		| v.Type.Variadic:
			self.pushErr(errToken, log::InvalidExprForTypeInference)
			ret false
		|:
			ret true
		}
	}

	// Checks value of variable.
	fn checkVarValue(mut &self, mut &v: &Var) {
		if v.IsTypeInferred() {
			// Build new TypeSym because auto-type symbols are nil.
			v.TypeSym = &TypeSym{Type: v.ValueSym.Value.Type}

			// Check value for unwrap and physical memory constraint.
			if !v.Constant && v.ValueSym.Value.untyped {
				_ = checkValue(v.ValueSym.Value, self, v.ValueSym.Expr.Token, evalDefault|evalPhysicalMem|evalUnwrapUntyped)
			}

			self.checkDataForTypeInference(v.ValueSym.Value, v.ValueSym.Expr.Token)
			self.checkValidityForInitExpr(
				v.Mutable,
				v.Reference,
				v.TypeSym.Type,
				v.ValueSym.Value,
				v.ValueSym.Expr.Token)
		} else {
			mut arr := v.TypeSym.Type.Array()
			if arr != nil {
				if arr.Auto {
					dataArr := v.ValueSym.Value.Type.Array()
					if dataArr != nil {
						arr.N = dataArr.N
					}
				}
			}

			if self.checkAssignType(v.Reference, v.TypeSym.Type, v.ValueSym.Value, v.ValueSym.Expr.Token, v.Refers) {
				self.checkValidityForInitExpr(
					v.Mutable,
					v.Reference,
					v.TypeSym.Type,
					v.ValueSym.Value,
					v.ValueSym.Expr.Token)
			}
		}

		if v.Constant {
			if !v.ValueSym.Value.IsConst() && !v.ValueSym.Value.Type.comptime() {
				self.pushErr(v.ValueSym.Expr.Token, log::ExprNotConst)
			}
		} else {
			v.ValueSym.Value.Constant = nil
			v.ValueSym.Value.untyped = false
		}

		// Remove kind for avoid more tuple-type errors.
		if v.TypeSym.Type.Tuple() != nil {
			v.TypeSym.Type = nil
		}
	}

	// Evaluates value of variable if initialized.
	// Reports if value-check needed.
	fn evalVarValue(mut &self, mut &v: &Var, mut l: Lookup): (valCheck: bool) {
		// Determine with v.Scope=nil condition because scope analysis may
		// reserve group members with trailing nil members, which is a mark for
		// enum declaration members. Therefore, make sure variable is not defined
		// in the scope.
		if !v.IsInitialized() {
			// If variable is constant and grouped, we have to check previous
			// constants due to possible enumeration.
			if v.Constant && v.Group != nil {
				isEnumField := v.Scope == nil && v.IsEnumField()
				if v.GroupIndex == 0 {
					if isEnumField {
						v.ValueSym = new(ValueSym)
						v.ValueSym.Expr = new(ast::Expr)
						v.ValueSym.Expr.Token = v.Token
						prim := v.TypeSym.Type.Prim() // Enum fields must be primitive.
						match {
						| prim.IsStr():
							v.ValueSym.Expr.Kind = &ast::LitExpr{
								Token: v.Token,
								Value: "\"" + v.Ident + "\"",
							}
						| types::IsNum(prim.Str()):
							v.ValueSym.Expr.Kind = &ast::IdentExpr{
								Token: v.Token,
								Ident: "iota",
							}
						|:
							panic("unreachable")
						}
						goto Eval
					} else {
						self.pushErr(v.Token, log::FirstGroupVarIsNotInitialized)
					}
					ret false
				}
				mut dv := v.Group[v.GroupIndex-1]
				if !dv.Checked {
					self.checkVar(dv, l)
				}
				if dv.ValueSym == nil || dv.ValueSym.Value == nil {
					ret false
				}
				v.TypeSym = new(TypeSym, *dv.TypeSym)
				// If type is not declared explicitly, remove the derived type.
				// Type should be inferred like the previous member. Otherwise,
				// use the same type declaration. Note that if variable is an enum field,
				// it may have not type declaration (used the implicit type) but
				// they always have an exact type.
				if isEnumField {
					// no-op
				} else if dv.TypeSym.Decl != nil {
					v.TypeSym.Decl = new(ast::Type, *dv.TypeSym.Decl)
					v.TypeSym.Decl.Token = v.Token
				} else {
					v.TypeSym.Type = nil
				}
				v.ValueSym = new(ValueSym)
				if dv.Iota {
					v.ValueSym.Expr = new(ast::Expr, *dv.ValueSym.Expr)
					v.ValueSym.Expr.Token = v.Token
					goto Eval
				} else {
					v.ValueSym.Value = dv.ValueSym.Value
				}
			}
			ret false
		}

	Eval:
		mut eval := (&eval)(nil)
		if v.TypeSym != nil {
			eval = self.evalpd(l, v.TypeSym.Type, v)
		} else {
			eval = self.evalpd(l, nil, v)
		}
		eval.target.mutable = v.Mutable

		allowIota := len(v.Group) > 0
		if allowIota {
			eval.varIota = buildIota(i64(v.GroupIndex))
			defer {
				v.Iota = v.Iota || eval.varIota.Used
			}
		}

		// Do not unwrap untyped literals, type analysis will check overflows.
		mut flags := evalDefault
		if !v.Statically && !v.Constant {
			flags |= evalExceptional
		}
		v.ValueSym.Value = eval.evalExpr(v.ValueSym.Expr, flags)
		ret true
	}

	// Evaluateds value of variable and checks.
	// Assumes the variable is global.
	fn checkVar(mut &self, mut &v: &Var, mut l: Lookup) {
		if v.Checked {
			ret
		}
		v.Checked = true
		valCheck := self.evalVarValue(v, l)
		if !valCheck || v.IsInitialized() && v.ValueSym.Value == nil {
			ret // Skip checks if error occurs.
		}
		self.checkVarValue(v)
	}

	// Checks current package file's global variables.
	fn checkGlobals(mut &self) {
		for (_, mut decl) in self.file.Vars {
			// Skip if variable is binded or already used.
			// If it is already used, should already analyzed.
			if decl.Binded || decl.Used {
				continue
			}
			self.checkVar(decl, self)
		}
	}

	// Returns new FuncIns as ready-to-analysis.
	// If function already has a instance, returns existing instance.
	// Returns nil if have a problem.
	fn readyToCheckFunc(mut &self, mut &s: &StructIns, mut &f: &Func): &FuncIns {
		mut ins := f.instance()
		if len(f.Instances) != 0 {
			ret ins
		}
		ins.Owner = s
		f.appendInstance(ins)
		ins.reloaded = true
		if self.reloadFuncInsTypes(ins) {
			ret ins
		}
		ret nil
	}

	// Checks new generics function instance.
	// If instance is already exist, f will point to exist instantantiation.
	fn checkGenericFunc(mut &self, mut &f: &FuncIns, mut &et: &token::Token): (ok: bool, exist: bool) {
		mut existInstance := f.Decl.appendInstance(f)
		// If instance already exist with same generics, return immediately.
		// This function should be already checked, or it will be.
		if existInstance != nil {
			// Set f to exist one.
			f = existInstance
			ret true, true
		}
		ok = self.reloadFuncInsTypes(f)
		f.reloaded = true
		if !ok {
			ret false, false
		}
		// TODO: [check] is possible to optimize here using same environment with realoadFuncInsTypes?
		if !self.checkConstraintsFunc(f, et, existInstance) {
			ret false, false
		}
		// Check generic function instance instantly.
		self.checkFuncInsCaller(f, et)
		ok = true
		ret
	}

	fn checkTypeMethod(mut &self, mut &f: &Func) {
		for (_, mut ins) in f.Instances {
			self.checkFuncIns(ins)
		}
	}

	// Checks environment-dependent parts of structure instance.
	// Which is contains fields and generic-type constraints.
	// If generic instance will be check, errorToken should be passed.
	fn checkStructEnv(mut &self, mut &s: &StructIns, mut prev: &referencer, mut errorToken: &token::Token): (ok: bool) {
		// If source is not nil, do not check.
		// This is unnecessary process for strict type alias structure instances.
		if s.Source != nil {
			ret true
		}
		mut tc := typeChecker{
			s: s.Decl.sema,
			rootLookup: s.Decl.sema,
			lookup: s.Decl.sema,
			referencer: &referencer{
				name: s.Decl.Ident,
				owner: s,
				prev: prev,
			},
			refers: s.Refers,
		}
		if prev != nil {
			prev.next = tc.referencer
			defer { prev.next = nil }
		}

		if len(s.Generics) > 0 {
			tc.useGenerics = make([]&TypeAlias, 0, len(s.Generics))
			for (i, mut g) in s.Generics {
				mut decl := s.Decl.Generics[i]
				tc.useGenerics = append(tc.useGenerics, &TypeAlias{
					Ident: decl.Ident,
					Token: decl.Token,
					TypeSym: &TypeSym{Type: g.Type},
				})
			}
		}

		mut oldFile := self.file
		defer { self.setCurrentFile(oldFile) }

		if self.file.File != s.Decl.Token.File {
			mut file := findFile(self.files, s.Decl.Token.File)
			if file != nil {
				self.setCurrentFile(file)
			}
		}

		if len(s.Generics) > 0 {
			mut cc := self.constraintChecker()
			cc.et = errorToken
			cc.si = s
			cc.genericsA = tc.useGenerics
			cc.uniq = true
			if !cc.check() {
				ret
			}
		}

		ok = true
		mut eval := self.eval(self)
		s.Comparable = !s.Decl.Binded
		for (_, mut f) in s.Fields {
			// Set instance for referencer if field declaration is not mutable.
			// But field declared as mutable, do not set.
			// It basically for the `!f.Decl.Mutable && f.Type.Mutable()` condition.
			if !f.Decl.Mutable {
				tc.referencer.tains = true
			} else {
				tc.referencer.tains = false
			}
			mut kind := tc.checkDecl(f.Decl.TypeSym.Decl)
			ok = kind != nil && ok
			if kind == nil {
				if self != s.Decl.sema && len(s.Decl.sema.errors) > 0 {
					self.errors = append(self.errors, s.Decl.sema.errors...)
					s.Decl.sema.errors = nil
				}
				continue
			}
			f.Type = kind

			// We have to check mutable and comparable conditions again.
			// Because type analysis is a simple precondition checker.
			// For the actual type, we have to check.
			// See developer reference (10.2.1).
			s.Mutable = s.Mutable || (!f.Decl.Mutable && f.Type.Mutable())
			s.Comparable = s.Comparable && f.Type.Comparable()

			// Skip this field if not has default value.
			if f.Decl.Default == nil {
				continue
			}
			eval.prefix = f.Type
			eval.field = f
			eval.target.mutable = true // struct may used as mutable, expressions should be mutable
			// Do not unwrap untyped literals, type analysis will check overflows.
			f.Default = eval.evalExpr(f.Decl.Default, evalDefault)

			// Skip if eval returned nil.
			// Relevant error(s) logged by eval.
			if f.Default == nil {
				continue
			}

			if !f.Default.IsConst() {
				self.pushErr(f.Decl.Default.Token, log::ExprNotConst)
				continue
			}

			const Reference = false // Fields cannot be reference.
			_ = self.checkAssignType(Reference, f.Type, f.Default, f.Decl.Default.Token, s.Refers)
		}
		ret
	}

	fn precheckStructIns(mut &self, mut s: &StructIns, mut prev: &referencer, mut errorToken: &token::Token): (ok: bool) {
		// Return is source type is still pseudoSource of a strict type alias instance.
		// Following analysis must be done with real source type.
		if s.Source == pseudoSource {
			s.Checked = false
			ret true
		}
		ok = self.checkStructEnv(s, prev, errorToken)
		if ok {
			// See implicit imports reference (1).
			// If structure instance is comparable and have not custom compare method,
			// compiler will use default compare method. If There is array field,
			// push instance for runtime function.
			if s.Comparable && self.meta.runtime != nil {
				// We will not have to check whether field's array type is comparable.
				// Structure is comparable, so all array types should be comparable.
				mut decl := runtimeFindFunc(self.meta.runtime, "arrayCmp")
				pushArr := fn(mut t: Kind, mut token: &token::Token) {
					mut arr, (ok) := t.(&Array)
					if !ok || arr == nil {
						ret
					}
					mut f := decl.instanceForce()
					f.Generics = append(f.Generics, &InsGeneric{Type: arr.Elem})
					ok, _ = self.checkGenericFunc(f, token)
					if !ok {
						panic("sema: arrayCmp evaluation failed, this is an implementation mistake")
					}
					s.Refers.Push(f)
				}
				if s.Source == nil {
					for (_, mut field) in s.Fields {
						pushArr(field.Type.ActualKind(), field.Decl.Token)
					}
				} else {
					pushArr(s.Source.ActualKind(), s.Decl.Token)
				}
			}
		}

		// Check instances even environment-based checking failed,
		// because prechecked structures are assumes they are
		// have checked instances for non-generic methods.
		for (_, mut f) in s.Methods {
			if len(f.Generics) == 0 {
				if self.readyToCheckFunc(s, f) == nil {
					ret false
				}
			}
		}
		ret
	}

	fn checkStructIns(mut &self, mut &s: &StructIns) {
		for (_, mut f) in s.Methods {
			self.checkTypeMethod(f)
		}
	}

	fn checkTypeStruct(mut &self, mut &s: &Struct) {
		if s.Binded {
			ret
		}

		if len(s.Generics) == 0 && len(s.Instances) == 0 {
			mut ins := s.instance()
			s.appendInstance(ins) // Append instance before precheck.
		}

		// Precheck is instance is not checked already.
		if len(s.Generics) == 0 {
			mut ins := s.Instances[0]
			if !ins.Checked {
				ins.Checked = true
				ok := self.precheckStructIns(ins, nil, nil)
				if !ok {
					ret
				}
			}
		}

		for (_, mut ins) in s.Instances {
			self.checkStructIns(ins)
		}
	}

	fn checkStructTypes(mut &self) {
		for (_, mut s) in self.file.Structs {
			self.checkTypeStruct(s)
		}
	}

	fn precheckStructType(mut &self, mut &s: &Struct) {
		if s.Binded {
			ret
		}

		if len(s.Generics) == 0 && len(s.Instances) == 0 {
			mut ins := s.instance()
			s.appendInstance(ins) // Append instance before precheck.
		}

		// Precheck is instance is not checked already.
		if len(s.Generics) == 0 {
			mut ins := s.Instances[0]
			if !ins.Checked {
				ins.Checked = true
				ok := self.precheckStructIns(ins, nil, nil)
				if !ok {
					ret
				}
			}
		}
	}

	fn precheckStructTypes(mut &self) {
		for (_, mut s) in self.file.Structs {
			self.precheckStructType(s)
		}
	}

	fn checkRets(mut self, mut &f: &FuncIns) {
		if f.Decl.IsVoid() {
			ret
		}
		mrc := missingRetChecker.new()
		ok := mrc.check(f.Scope)
		if !ok {
			self.pushErr(f.Decl.Token, log::MissingRet)
		}
	}

	fn checkFuncInsSc(mut self, mut &f: &FuncIns, mut &sc: &scopeChecker) {
		appendRetVars(sc.table.Vars, f)
		appendParamVars(sc.table.Vars, f)
		appendGenericTypeAliases(sc.table.TypeAliases, f)

		sc.check(f.Decl.Scope, f.Scope)

		// Check return statements if scopeChecker not forced to stop.
		if !sc.stopped() {
			self.checkRets(f)
		}
	}

	fn checkFuncInsCaller(mut &self, mut &f: &FuncIns, mut caller: &token::Token) {
		if f.Decl.Binded || f.checked {
			ret
		}
		f.checked = true

		mut old := f.Decl.sema.file
		defer { f.Decl.sema.setCurrentFile(old) }
		mut file := findFile(f.Decl.sema.files, f.Decl.Token.File)
		if file != nil {
			f.Decl.sema.setCurrentFile(file)
		}

		mut sc := newScopeChecker(f.Decl.sema, f)
		sc.calledFrom = caller
		self.checkFuncInsSc(f, sc)

		if f.Decl.sema != self {
			self.errors = append(self.errors, f.Decl.sema.errors...)
			f.Decl.sema.errors = nil
		}
	}

	fn checkFuncIns(mut &self, mut &f: &FuncIns) {
		self.checkFuncInsCaller(f, nil)
	}

	fn checkFunc(mut &self, mut &f: &Func) {
		if f.Binded {
			ret
		}
		for (_, mut ins) in f.Instances {
			self.checkFuncIns(ins)
		}
	}

	fn checkTestFunc(mut self, mut &f: &FuncIns) {
		if f.Decl.Public {
			self.pushErr(f.Decl.Token, log::PubTestFunc)
			self.pushSuggestion(log::RemovePubModifier)
			ret
		}

		if f.Decl.Unsafety ||
			!f.Decl.IsVoid() ||
			len(f.Decl.Generics) != 0 ||
			len(f.Params) != 1 ||
			f.Decl.Params[0].Mutable ||
			f.Decl.Params[0].Reference {
			self.pushErr(f.Decl.Token, log::WrongTestFuncDecl)
			self.pushSuggestion(log::UseExpectedTestFuncDecl)
			ret
		}

		mut sptr := f.Params[0].Type.Sptr()
		if sptr == nil {
			self.pushErr(f.Decl.Token, log::WrongTestFuncDecl)
			self.pushSuggestion(log::UseExpectedTestFuncDecl)
			ret
		}

		s, ok := sptr.Elem.Kind.(&StructIns)
		if ok && s.Source == nil && isStdPackage(s.Decl.Token.File.Path, "testing") {
			ret
		}
		self.pushErr(f.Decl.Token, log::WrongTestFuncDecl)
		self.pushSuggestion(log::UseExpectedTestFuncDecl)
	}

	fn precheckFunc(mut &self, mut &f: &Func) {
		if !f.Binded && len(f.Generics) == 0 && len(f.Instances) == 0 {
			mut ins := f.instanceForce()
			f.Instances = append(f.Instances, ins)
			ok := self.reloadFuncInsTypes(ins)
			ins.reloaded = true

			if ok && hasDirective(f.Directives, directive::Test) {
				self.checkTestFunc(ins)
			}
		}
	}

	// Prechecks types of current package file's functions.
	fn precheckFuncs(mut &self) {
		for (_, mut decl) in self.file.Traits {
			for (_, mut m) in decl.Methods {
				self.precheckFunc(m)
			}
		}
		for (_, mut decl) in self.file.Funcs {
			self.precheckFunc(decl)
		}
	}

	// Checks types of current package file's functions.
	fn checkFuncs(mut &self) {
		for (_, mut decl) in self.file.Funcs {
			self.checkFunc(decl)
		}
	}

	// Check initialization cycles for global variables.
	fn checkInitializationCycles(mut &self) {
		mut message := new(strings::Builder)
		pushIllegalCycleError := fn(v1: str, v2: str) {
			const Padding = 7
			refersTo := log::Logf(log::RefersTo, v1, v2)
			message.WriteStr(strings::Repeat(" ", Padding))!
			message.WriteStr(refersTo)!
			message.WriteByte('\n')!
		}
		mut cached := make([]&ReferenceStack, 0, 10)
		for (_, mut file) in self.files {
			for (_, mut v) in file.Vars {
				cached = cached[:0]
				let mut refCheck: fn(mut &cached: []&ReferenceStack, mut r: &ReferenceStack, owner: str): (cycle: bool)
				&_refCheck := refCheck // For closure.
				refCheck = fn(mut &cached: []&ReferenceStack, mut r: &ReferenceStack, owner: str): (cycle: bool) {
					// We already checked/checking this reference stack.
					if slices::Contains(cached, r) {
						ret false
					}
					cached = append(cached, r)
					n := message.Len()
					mut i := 0
					for i < r.Len(); i++ {
						mut ref := r.At(i)
						match type ref {
						| &StructIns:
							mut s := ref.(&StructIns)
							if r == s.Refers {
								break
							}
							pushIllegalCycleError(owner, s.Decl.Ident) // Push trace.
							if unsafe { _refCheck(cached, s.Refers, s.Decl.Ident) } {
								ret true
							}
						| &FuncIns:
							mut f := ref.(&FuncIns)
							if r == f.Refers {
								break
							}
							pushIllegalCycleError(owner, f.Decl.Ident) // Push trace.
							if unsafe { _refCheck(cached, f.Refers, f.Decl.Ident) } {
								ret true
							}
						| &Var:
							mut v2 := ref.(&Var)
							pushIllegalCycleError(owner, v2.Ident) // Push trace.
							if v2 == v {
								ret true
							}
							if unsafe { _refCheck(cached, v2.Refers, v2.Ident) } {
								ret true
							}
							// Global variable v needs to global variable v2 for initialization.
							// So add v2 to v.Depends for correct collection of dependencies.
							if v2.Scope == nil && !v.depended(v2) {
								v.Depends = append(v.Depends, v2)
							}
						}
						unsafe { message.SetBuf(message.Buf()[:n]) } // Pop last trace.
					}
					ret false
				}
				if refCheck(cached, v.Refers, v.Ident) {
					self.pushErr(v.Token, log::IllegalCrossCycle, message.Str())
					ret
				}
			}
		}
	}

	// Checks all types of all package files.
	// Breaks checking if checked file failed.
	fn checkPackageTypes(mut &self) {
		// Functions should be checked first.
		// Because they might be used by a global variable.
		// It may cause issues because functions will not be prechecked by eval.
		// So check functions first to make sure they are prechecked.
		// Generics; eval checks generics and not-instantiated generics are
		// not allowed for global variables, so no need special routine for generics.
		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			self.precheckFuncs()
		}
		if len(self.errors) > 0 {
			ret
		}
		// We can check global variables here. Structures may refer to a global
		// variable, or a global variable may refer to a struct. But it is safe.
		// Eval uses type-checker for structure types and type-checker prechecks
		// structure if needed. For global variables, they will be evaluated if
		// needed when referred from a struct. So cycles are safe from now.
		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			self.checkGlobals()
		}
		if len(self.errors) > 0 {
			ret
		}
		// Precheck structures before analysis of the implementations such as
		// function bodies, structure method bodies and etc.
		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			self.precheckStructTypes()
		}
		if len(self.errors) > 0 {
			ret
		}
		// Check structures of strict type aliases.
		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			for (_, mut ta) in self.file.TypeAliases {
				if ta.Strict {
					mut s := ta.TypeSym.Type.Kind.(&StructIns)
					if !s.Checked {
						s.Checked = true
						ok := self.precheckStructIns(s, nil, nil)
						if !ok {
							ret
						}
					}
					// We can check strict structures here. It should be safe
					// as described above; structures will be prechecked if needed.
					// So other unchecked strict type aliases should not be a concern.
					self.checkTypeStruct(s.Decl)
				}
			}
		}

		for (_, mut f) in self.files {
			self.setCurrentFile(f)
			self.checkFuncs()
			self.checkStructTypes()
		}

		// If there is no error, check initialization cycles.
		if len(self.errors) == 0 {
			self.checkInitializationCycles()
		}
	}

	fn setFileSemaFields(mut &self) {
		for (_, mut f) in self.file.Funcs {
			f.sema = self
		}
		for (_, mut st) in self.file.Structs {
			st.sema = self
		}
	}

	fn setSemaFields(mut &self) {
		for (_, mut file) in self.files {
			self.setCurrentFile(file)
			self.setFileSemaFields()
		}
	}

	fn check(mut &self) {
		self.checkInherits()
		if len(self.errors) != 0 {
			ret
		}

		self.implImpls()
		if len(self.errors) != 0 {
			ret
		}
		self.step |= stepFlag.ImplsImplemented

		// Check enums here.
		// See developer reference (5).
		self.checkEnums()
		if len(self.errors) != 0 {
			ret
		}

		self.checkPackageDecls()
		if len(self.errors) != 0 {
			ret
		}

		self.step |= stepFlag.DeclsChecked
		self.checkPackageTypes()
		self.step |= stepFlag.Done
	}
}

struct missingRetChecker {
	mut breaked: []uintptr
	mut fell:    bool
}

impl missingRetChecker {
	static fn new(): missingRetChecker {
		ret missingRetChecker{
			breaked: make([]uintptr, 1<<4),
		}
	}

	fn checkConditional(self, mut c: &Conditional): bool {
		for (_, mut elif) in c.Elifs {
			if elif == nil {
				ret false
			}
			if !self.checkScope(elif.Scope) {
				ret false
			}
		}
		ret c.Default != nil && self.checkScope(c.Default.Scope)
	}

	fn checkMatch(self, mut m: &Match): bool {
		for (_, mut c) in m.Cases {
			if c == nil {
				ret false
			}
			n := len(self.breaked)
			ok := self.checkScope(c.Scope)
			match {
			| n != len(self.breaked):
				ret false
			| !ok:
				if !self.fell {
					ret false
				}
				fall
			| self.fell:
				self.fell = false
				if c.Next == nil {
					ret false
				}
				continue
			}
		}
		ret m.Default != nil && self.checkScope(m.Default.Scope)
	}

	fn checkInfIter(self, it: uintptr, mut &s: &Scope): bool {
		n := len(self.breaked)
		if self.checkScope(s) {
			self.breaked = self.breaked[:n]
			ret true
		}
		if n != len(self.breaked) {
			for _, addr in self.breaked[n:] {
				if it == addr {
					self.breaked = self.breaked[:n]
					ret false
				}
			}
			self.breaked = self.breaked[:n]
		}
		ret true
	}

	fn checkScope(self, mut s: &Scope): bool {
		if s == nil {
			ret false
		}
		for (_, mut st) in s.Stmts {
			match type st {
			| &Fall:
				self.fell = true
				ret false
			| &Break:
				addr := st.(&Break).It
				if addr != 0 {
					self.breaked = append(self.breaked, addr)
				}
				ret false
			| &Continue:
				ret false
			| &InfIter:
				mut ii := st.(&InfIter)
				if self.checkInfIter(uintptr(ii), ii.Scope) {
					ret true
				}
			| &WhileIter:
				mut wn := st.(&WhileIter)
				if wn.IsWhileNext() && wn.Expr == nil {
					// Condition is nil, possible infinite iteration.
					if self.checkInfIter(uintptr(wn), wn.Scope) {
						ret true
					}
				}
			| &Ret:
				ret true
			| &Scope:
				if self.checkScope(st.(&Scope)) {
					ret true
				}
			| &Value:
				match type st.(&Value).Model {
				| &BuiltinPanicCallExpr
				| &BuiltinErrorCallExpr:
					ret true
				|:
					continue
				}
			| &Conditional:
				if self.checkConditional(st.(&Conditional)) {
					ret true
				}
			| &Match:
				if self.checkMatch(st.(&Match)) {
					ret true
				}
			|:
				continue
			}
		}
		ret false
	}

	fn check(self, mut s: &Scope): bool {
		ret self.checkScope(s)
	}
}

fn pushImplemented(mut t: &Trait, mut &d: &Struct) {
push:
	match {
	| len(t.Implemented) > 0:
		for _, s in t.Implemented {
			if s == d {
				break push
			}
		}
		fall
	|:
		t.Implemented = append(t.Implemented, d)
	}
	for (_, mut i) in t.Inherits {
		pushImplemented(i.Type.Trait(), d)
	}
}

fn pushImplements(mut &s: &Struct, mut t: &Trait) {
push:
	match {
	| len(s.Implements) > 0:
		for _, b in s.Implements {
			if b == t {
				break push
			}
		}
		fall
	|:
		s.Implements = append(s.Implements, t)
	}
	for (_, mut i) in t.Inherits {
		pushImplements(s, i.Type.Trait())
	}
}

fn pushRuntimeToStr(mut &s: &sema, mut &t: &Type, mut &token: &token::Token,
	mut refers: &ReferenceStack) {
	if s.meta.runtime == nil || t.IsNil() || refers == nil {
		ret
	}
	mut f := runtimeFindFunc(s.meta.runtime, "toStr").instanceForce()
	f.Generics = append(f.Generics, &InsGeneric{Type: t})
	ok, _ := s.checkGenericFunc(f, token)
	if !ok {
		panic("sema: toStr evaluation failed, this is an implementation mistake")
	}
	refers.Push(f)
}

fn pushRuntimeMaphash(mut &s: &sema, mut &t: &Type, mut &token: &token::Token,
	mut refers: &ReferenceStack) {
	if s.meta.runtime == nil || t.IsNil() || refers == nil {
		ret
	}
	mut f := runtimeFindFunc(s.meta.runtime, "maphash").instanceForce()
	f.Generics = append(f.Generics, &InsGeneric{Type: t})
	ok, _ := s.checkGenericFunc(f, token)
	if !ok {
		panic("sema: maphash evaluation failed, this is an implementation mistake")
	}
	refers.Push(f)
}

// Reports whether the alias valid for the import alias.
// Designed to check auto aliases.
fn isValidImpAlias(mut alias: str): (valid: bool) {
	if jule::IsBlank(alias) {
		ret false
	}
	if token::IsKeyword(alias) {
		ret false
	}
	mut r, mut size := utf8::DecodeRuneStr(alias)
	if r != '_' && !token::IsLetter(r) {
		ret false
	}
	for {
		alias = alias[size:]
		if len(alias) == 0 {
			break
		}
		r, size = utf8::DecodeRuneStr(alias)
		if r != '_' && !('0' <= r && r <= '9') && !token::IsLetter(r) {
			ret false
		}
	}
	ret true
}

fn checkTypeEnumRefCycle(mut s: &sema, mut e: &TypeEnum, mut item: &TypeEnumItem) {
	// If item type is a strict type alias (or structure type, does not matter in this case)
	// return immediately, no risk for cross references.
	// Strict type aliases will not be inherited.
	if item.TypeSym.Type.SoftStruct() != nil {
		ret
	}
	mut e2 := item.TypeSym.Type.TypeEnum()
	// If item type is not type-enum, no risk for cross references.
	if e2 == nil {
		ret
	}
	if e == e2 {
		s.pushErr(item.Token, log::IllegalCycleRefersItself, e.Ident)
		ret
	}
	mut message := new(strings::Builder)
	pushIllegalCycleError := fn(v1: str, v2: str) {
		const Padding = 7
		refersTo := log::Logf(log::RefersTo, v1, v2)
		message.WriteStr(strings::Repeat(" ", Padding))!
		message.WriteStr(refersTo)!
		message.WriteByte('\n')!
	}
	mut checkCycles := (fn(mut e2: &TypeEnum): bool)(nil)
	&_checkCycles := checkCycles // For closure.
	checkCycles = fn(mut e2: &TypeEnum): bool {
		n := message.Len()
		for (_, mut item2) in e2.Items {
			if item2.TypeSym.Type == nil {
				continue
			}
			mut ie := item2.TypeSym.Type.TypeEnum()
			if ie == nil {
				continue
			}
			pushIllegalCycleError(e2.Ident, ie.Ident)
			if ie == e || unsafe { !_checkCycles(ie) } {
				ret false
			}
		}
		unsafe { message.SetBuf(message.Buf()[:n]) } // Pop last trace.
		ret true
	}
	pushIllegalCycleError(e.Ident, e2.Ident)
	ok := checkCycles(e2)
	if !ok {
		s.pushErr(e.Token, log::IllegalCrossCycle, message.Str())
	}
}