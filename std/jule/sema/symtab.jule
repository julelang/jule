// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/token"

// Symbol table.
// Builds by semantic analyzer.
struct SymTab {
	File:        &token::FileSet // Owner fileset of this symbol table.
	Passes:      []Pass          // All passed flags with jule:pass directive.
	Imports:     []&ImportInfo   // Imported packages.
	Vars:        []&Var          // Variables.
	TypeAliases: []&TypeAlias    // Type aliases.
	Structs:     []&Struct       // Structures.
	Funcs:       []&Func         // Functions.
	Traits:      []&Trait        // Traits.
	Enums:       []&Enum         // Enums.
	TypeEnums:   []&TypeEnum     // Type enums.
	Impls:       []&Impl         // Implementations.
}

impl Lookup for SymTab {
	// Returns imported package by selector.
	// Returns nil if selector returns false for all packages.
	// Returns nil if selector is nil.
	fn SelectPackage(mut *self, selector: fn(&ImportInfo): bool): &ImportInfo {
		if selector == nil {
			ret nil
		}
		for (_, mut pkg) in self.Imports {
			if selector(pkg) {
				ret pkg
			}
		}
		ret nil
	}

	// Returns variable by identifier and bind state.
	// Returns nil if refenrece not exist any variable in this identifier.
	fn FindVar(mut *self, name: str, _bind: bool): &Var {
		ret self.findVar(name, _bind, false)
	}

	// Returns type alias by identifier and bind state.
	// Returns nil if not exist any type alias in this identifier.
	fn FindTypeAlias(mut *self, name: str, _bind: bool): &TypeAlias {
		ret self.findTypeAlias(name, _bind, false)
	}

	// Returns struct by identifier and bind state.
	// Returns nil if not exist any struct in this identifier.
	fn FindStruct(mut *self, name: str, _bind: bool): &Struct {
		for (_, mut s) in self.Structs {
			if s.Name == name && s.Bind == _bind {
				ret s
			}
		}
		ret nil
	}

	// Returns function by identifier and bind state.
	// Returns nil if not exist any function in this identifier.
	fn FindFunc(mut *self, name: str, _bind: bool): &Func {
		for (_, mut f) in self.Funcs {
			if f.Name == name && f.Bind == _bind {
				ret f
			}
		}
		ret nil
	}

	// Returns trait by identifier.
	// Returns nil if not exist any trait in this identifier.
	fn FindTrait(mut *self, name: str): &Trait {
		for (_, mut t) in self.Traits {
			if t.Name == name {
				ret t
			}
		}
		ret nil
	}

	// Returns enum by identifier.
	// Returns nil if not exist any enum in this identifier.
	fn FindEnum(mut *self, name: str): &Enum {
		for (_, mut e) in self.Enums {
			if e.Name == name {
				ret e
			}
		}
		ret nil
	}

	// Returns type enum by identifier.
	// Returns nil if not exist any type enum in this identifier.
	fn FindTypeEnum(mut *self, name: str): &TypeEnum {
		for (_, mut e) in self.TypeEnums {
			if e.Name == name {
				ret e
			}
		}
		ret nil
	}
}

impl SymTab {
	fn findVar1(mut *self, v: &Var): int {
		for i in self.Vars {
			if self.Vars[i] == v {
				ret i
			}
		}
		ret -1
	}

	fn findVar(mut *self, name: str, _bind: bool, reverse: bool): &Var {
		if reverse {
			mut i := len(self.Vars) - 1
			for i >= 0; i-- {
				mut v := self.Vars[i]
				if v.Name == name && v.Bind == _bind {
					ret v
				}
			}
		} else {
			for (_, mut v) in self.Vars {
				if v.Name == name && v.Bind == _bind {
					ret v
				}
			}
		}
		ret nil
	}

	fn findTypeAlias(mut *self, name: str, _bind: bool, reverse: bool): &TypeAlias {
		if reverse {
			mut i := len(self.TypeAliases) - 1
			for i >= 0; i-- {
				mut ta := self.TypeAliases[i]
				if ta.Name == name && ta.Bind == _bind {
					ret ta
				}
			}
		} else {
			for (_, mut ta) in self.TypeAliases {
				if ta.Name == name && ta.Bind == _bind {
					ret ta
				}
			}
		}
		ret nil
	}

	// Returns define by identifier.
	// Returns nil if not exist any define in this identifier.
	fn defByIdent(mut *self, name: str, _bind: bool): any {
		for (_, mut v) in self.Vars {
			if v.Name == name && v.Bind == _bind {
				ret v
			}
		}

		for (_, mut ta) in self.TypeAliases {
			if ta.Name == name && ta.Bind == _bind {
				ret ta
			}
		}

		for (_, mut s) in self.Structs {
			if s.Name == name && s.Bind == _bind {
				ret s
			}
		}

		for (_, mut f) in self.Funcs {
			if f.Name == name && f.Bind == _bind {
				ret f
			}
		}

		if _bind {
			ret nil
		}

		for (_, mut t) in self.Traits {
			if t.Name == name {
				ret t
			}
		}

		for (_, mut e) in self.Enums {
			if e.Name == name {
				ret e
			}
		}

		for (_, mut te) in self.TypeEnums {
			if te.Name == name {
				ret te
			}
		}

		ret nil
	}

	// Reports this identifier duplicated in symbol table.
	// The "self" parameter represents address of exception identifier.
	// If founded identifier address equals to self, will be skipped.
	fn isDuplicatedName(*self, itself: uintptr, name: str, _bind: bool): bool {
		for _, v in self.Vars {
			if uintptr(v) != itself && v.Name == name && v.Bind == _bind {
				ret true
			}
		}

		for _, ta in self.TypeAliases {
			if uintptr(ta) != itself && ta.Name == name && ta.Bind == _bind {
				ret true
			}
		}

		for _, s in self.Structs {
			if uintptr(s) != itself && s.Name == name && s.Bind == _bind {
				ret true
			}
		}

		for _, f in self.Funcs {
			if uintptr(f) != itself && f.Name == name && f.Bind == _bind {
				ret true
			}
		}

		if _bind {
			ret false
		}

		for _, t in self.Traits {
			if uintptr(t) != itself && t.Name == name {
				ret true
			}
		}

		for _, e in self.Enums {
			if uintptr(e) != itself && e.Name == name {
				ret true
			}
		}

		for _, te in self.TypeEnums {
			if uintptr(te) != itself && te.Name == name {
				ret true
			}
		}

		ret false
	}
}