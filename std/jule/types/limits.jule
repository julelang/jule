// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Floating-point limit values.
// Max is the largest finite value representable by the type.
// SmallestNonzero is the smallest positive, non-zero value representable by the type.
const MaxF32 = 0x1p127 * (1 + (1 - 0x1p-23))
const MinF32 = -0x1p127 * (1 + (1 - 0x1p-23))
const SmallestNonZeroF32 = 0x1p-126 * 0x1p-23
const MaxF64 = 0x1p1023 * (1 + (1 - 0x1p-52))
const MinF64 = -0x1p1023 * (1 + (1 - 0x1p-52))
const SmallestNonZeroF64 = 0x1p-1022 * 0x1p-52

// Integer limit values.
const MaxI8 = 1<<7 - 1   // 127
const MinI8 = -1 << 7    // -128
const MaxI16 = 1<<15 - 1 // 32767
const MinI16 = -1 << 15  // -32768
const MaxI32 = 1<<31 - 1 // 2147483647
const MinI32 = -1 << 31  // -2147483648
const MaxI64 = 1<<63 - 1 // 9223372036854775807
const MinI64 = -1 << 63  // -9223372036854775808
const MaxU8 = 1<<8 - 1   // 255
const MaxU16 = 1<<16 - 1 // 65535
const MaxU32 = 1<<32 - 1 // 4294967295
const MaxU64 = 1<<64 - 1 // 18446744073709551615

// Returns minimum value of signed integer kinds.
// Panics if kind is invalid.
fn MinI(mut k: str): i64 {
	k = RealKindOf(k)
	match k {
	| I8:
		ret MinI8
	| I16:
		ret MinI16
	| I32:
		ret MinI32
	| I64:
		ret MinI64
	|:
		panic("unreachable")
	}
}

// Returns minimum value of signed integer kinds.
// Panics if kind is invalid.
fn MaxI(mut k: str): i64 {
	k = RealKindOf(k)
	match k {
	| I8:
		ret MaxI8
	| I16:
		ret MaxI16
	| I32:
		ret MaxI32
	| I64:
		ret MaxI64
	|:
		panic("unreachable")
	}
}

// Returns maximum value of unsigned integer kinds.
// Panics if kind is invalid.
fn MaxU(mut k: str): u64 {
	k = RealKindOf(k)
	match k {
	| U8:
		ret MaxU8
	| U16:
		ret MaxU16
	| U32:
		ret MaxU32
	| U64:
		ret MaxU64
	|:
		panic("unreachable")
	}
}

// Returns minimum value of signed/unsigned integer and floating-point kinds.
// Panics if kind is invalid.
fn Min(mut k: str): f64 {
	k = RealKindOf(k)
	i := MinI(k)
	if i != 0 {
		ret f64(i)
	}
	match k {
	| F32:
		ret MinF32
	| F64:
		ret MinF64
	|:
		panic("unreachable")
	}
}

// Returns maximum value of signed/unsigned integer and floating-point kinds.
// Panics if kind is invalid.
fn Max(mut k: str): f64 {
	k = RealKindOf(k)
	i := MaxI(k)
	if i != 0 {
		ret f64(i)
	}
	u := MaxU(k)
	if u != 0 {
		ret f64(u)
	}
	match k {
	| F32:
		ret MaxF32
	| F64:
		ret MaxF64
	|:
		panic("unreachable")
	}
}