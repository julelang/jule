// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/conv"
use "std/jule/build"
use "std/strings"

type bitChecker = fn(v: str, base: int, bit: int): bool

// Bit-size of target architecture.
// Possible values are: 32, and 64.
// Initialized using build::Arch by the package when imported.
static BitSize = 0

// Signed integer kind of target architecture.
// Is equivalent to "int", but specific bit-sized integer kind.
// Initialized using build::Arch by the package when imported.
static SysInt = ""

// Unsigned integer kind of target architecture.
// Is equivalent to "uint" and "uintptr", but specific bit-sized integer kind.
// Initialized using build::Arch by the package when imported.
static SysUint = ""

fn checkBit(v: str, bit: int, checker: bitChecker): bool {
	match {
	| v == "":
		ret false
	| len(v) == 1:
		ret true
	| strings::HasPrefix(v, "0x"):
		ret checker(v[2:], 1<<4, bit) // Hexadecimal
	| strings::HasPrefix(v, "0b"):
		ret checker(v[2:], 1<<1, bit) // Binary
	| strings::HasPrefix(v, "0o"):
		ret checker(v[2:], 1<<3, bit) // Octal
	| v[0] == '0':
		ret checker(v[1:], 1<<3, bit) // Octal
	|:
		ret checker(v, 1<<3+2, bit) // Decimal
	}
}

// Returns kind's bit-specific kind if bit-specific like int, uint, and uintptr.
// Returns kind if not bit-specific.
// Bit-size is determined by runtime.
fn RealKindOf(kind: str): str {
	match kind {
	| Kind.Int:
		ret SysInt
	| Kind.Uint
	| Kind.Uintptr:
		ret SysUint
	|:
		ret kind
	}
}

// Returns kind's bit-size.
// Returns -1 if kind is not numeric.
fn BitSizeOf(k: str): int {
	match k {
	| Kind.I8
	| Kind.U8:
		ret 1 << 3
	| Kind.I16
	| Kind.U16:
		ret 1 << 4
	| Kind.I32
	| Kind.U32
	| Kind.F32:
		ret 1 << 5
	| Kind.I64
	| Kind.U64
	| Kind.F64:
		ret 1 << 6
	| Kind.Uint
	| Kind.Int
	| Kind.Uintptr:
		ret BitSize
	|:
		ret -1
	}
}

// Returns signed integer kind by bit-size.
// Possible bit-sizes are: 8, 16, 32, and 64.
// Returns empty string if bits is invalid.
fn IntFromBits(bits: int): str {
	match bits {
	| 1 << 3:
		ret Kind.I8
	| 1 << 4:
		ret Kind.I16
	| 1 << 5:
		ret Kind.I32
	| 1 << 6:
		ret Kind.I64
	|:
		ret ""
	}
}

// Returns unsigned integer kind by bit-size.
// Possible bit-sizes are: 8, 16, 32, and 64.
// Returns empty string if bits is invalid.
fn UintFromBits(bits: int): str {
	match bits {
	| 1 << 3:
		ret Kind.U8
	| 1 << 4:
		ret Kind.U16
	| 1 << 5:
		ret Kind.U32
	| 1 << 6:
		ret Kind.U64
	|:
		ret ""
	}
}

// Returns floating-point kind by bit-size.
// Possible bit-sizes are: 32, and 64.
// Returns empty string if bits is invalid.
fn FloatFromBits(bits: int): str {
	match bits {
	| 1 << 5:
		ret Kind.F32
	| 1 << 6:
		ret Kind.F64
	|:
		ret ""
	}
}

// Reports whether signed integer literal is compatible given bit-size.
fn CheckBitInt(v: str, bit: int): bool {
	ret checkBit(v, bit, fn(v: str, base: int, bit: int): bool {
		_ = conv::ParseInt(v, base, bit) else { ret false }
		ret true
	})
}

// Reports whether unsigned integer literal is compatible given bit-size.
fn CheckBitUint(v: str, bit: int): bool {
	ret checkBit(v, bit, fn(v: str, base: int, bit: int): bool {
		_ = conv::ParseUint(v, base, bit) else { ret false }
		ret true
	})
}

// Reports whether float literal is compatible given bit-size.
fn CheckBitFloat(val: str, bit: int): bool {
	_ = conv::ParseFloat(val, bit) else { ret false }
	ret true
}

// Reports minimum bit-size of given floating-point.
//
// Possible values are:
//  - 32 for 32-bit
//  - 64 for 64-bit
fn BitSizeOfFloat(x: f64): int {
	match {
	| MinF32 <= x && x <= MaxF32:
		ret 1 << 5
	|:
		ret 1 << 6
	}
}

// Reports minimum bit-size of given signed integer.
//
// Possible values are:
//  - 8 for 8-bit
//  - 16 for 16-bit
//  - 32 for 32-bit
//  - 64 for 64-bit
fn BitSizeOfInt(x: i64): int {
	match {
	| MinI8 <= x && x <= MaxI8:
		ret 1 << 3
	| MinI16 <= x && x <= MaxI16:
		ret 1 << 4
	| MinI32 <= x && x <= MaxI32:
		ret 1 << 5
	|:
		ret 1 << 6
	}
}

// Reports minimum bit-size of given unsigned integer.
//
// Possible values are:
//  - 8 for 8-bit
//  - 16 for 16-bit
//  - 32 for 32-bit
//  - 64 for 64-bit
fn BitSizeOfUint(x: u64): int {
	match {
	| x <= MaxU8:
		ret 1 << 3
	| x <= MaxU16:
		ret 1 << 4
	| x <= MaxU32:
		ret 1 << 5
	|:
		ret 1 << 6
	}
}

// Updates platform-specific information based on the target.
// If you will update target configuration, you should call this function.
// In other words, new configurations is not applied for types.
fn UpdateTarget() {
	unsafe {
		match build::Arch {
		| "arm64" | "amd64":
			*(&BitSize) = 1 << 6
			*(&SysInt) = Kind.I64
			*(&SysUint) = Kind.U64
		| "i386":
			*(&BitSize) = 1 << 5
			*(&SysInt) = Kind.I32
			*(&SysUint) = Kind.U32
		}
	}
}

fn init() {
	UpdateTarget()
}