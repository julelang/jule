// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Type kinds of primitive types.
// These kinds are must match keyword form itself.
const I8 = "i8"
const I16 = "i16"
const I32 = "i32"
const I64 = "i64"
const U8 = "u8"
const U16 = "u16"
const U32 = "u32"
const U64 = "u64"
const F32 = "f32"
const F64 = "f64"
const Uint = "uint"
const Int = "int"
const Uintptr = "uintptr"
const Bool = "bool"
const Str = "str"
const Any = "any"

// Reports whether kind is signed integer.
fn IsSigInt(mut k: str): bool {
	ret k == I8 ||
		k == I16 ||
		k == I32 ||
		k == I64 ||
		k == Int
}

// Reports kind is unsigned integer.
fn IsUnsigInt(mut k: str): bool {
	ret k == U8 ||
		k == U16 ||
		k == U32 ||
		k == U64 ||
		k == Uint ||
		k == Uintptr
}

// Reports whether kind is signed/unsigned integer.
fn IsInt(k: str): bool {
	ret IsSigInt(k) || IsUnsigInt(k)
}

// Reports whether kind is float.
fn IsFloat(k: str): bool {
	ret k == F32 || k == F64
}

// Reports whether kind is numeric.
fn IsNum(k: str): bool {
	ret IsInt(k) || IsFloat(k)
}

// Reports whether kind is signed numeric.
fn IsSigNum(k: str): bool {
	ret IsSigInt(k) || IsFloat(k)
}