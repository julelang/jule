// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/math/floor.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Returns the greatest integer value less than or equal to x.
//
// Special cases are:
//	Floor(±0) = ±0
//	Floor(±Inf) = ±Inf
//	Floor(NaN) = NaN
fn Floor(x: f64): f64 {
	if x == 0 || IsNaN(x) || IsInf(x, 0) {
		ret x
	}
	if x < 0 {
		mut d, fract := Modf(-x)
		if fract != 0.0 {
			d = d + 1
		}
		ret -d
	}
	d, _ := Modf(x)
	ret d
}

// Returns the least integer value greater than or equal to x.
//
// Special cases are:
//	Ceil(±0) = ±0
//	Ceil(±Inf) = ±Inf
//	Ceil(NaN) = NaN
fn Ceil(x: f64): f64 { ret -Floor(-x) }

// Returns the integer value of x.
//
// Special cases are:
//	Trunc(±0) = ±0
//	Trunc(±Inf) = ±Inf
//	Trunc(NaN) = NaN
fn Trunc(x: f64): f64 {
	if x == 0 || IsNaN(x) || IsInf(x, 0) {
		ret x
	}
	d, _ := Modf(x)
	ret d
}

// Returns the nearest integer, rounding half away from zero.
//
// Special cases are:
//	Round(±0) = ±0
//	Round(±Inf) = ±Inf
//	Round(NaN) = NaN
fn Round(x: f64): f64 {
	// Round is a faster implementation of:
	//
	//	Round(x f64) f64 {
	//		t: = Trunc(x)
	//		if Abs(x-t) >= 0.5 {
	//			ret t + Copysign(1, x)
	//		}
	//		ret t
	//	}
	mut bits := F64Bits(x)
	mut e := uint(bits>>shift) & mask
	if e < bias {
		// Round abs(x) < 1 including denormals.
		bits &= signMask // +-0
		if e == bias-1 {
			bits |= uvone // +-1
		}
	} else if e < bias+shift {
		// Round any abs(x) >= 1 containing a fractional component [0,1).
		//
		// Numbers with larger exponents are returned unchanged since they
		// must be either an integer, infinity, or NaN.
		const HALF = 1 << (shift - 1)
		e -= bias
		bits += HALF >> e
		bits &= ^(fracMask >> e)
	}
	ret F64frombits(bits)
}

// Returns the nearest integer, rounding ties to even.
//
// Special cases are:
//	RoundEven(±0) = ±0
//	RoundEven(±Inf) = ±Inf
//	RoundEven(NaN) = NaN
fn RoundEven(x: f64): f64 {
	// RoundEven is a faster implementation of:
	//
	//	RoundEven(x f64) f64 {
	//		t: = Trunc(x)
	//		odd: = Remainder(t, 2) != 0
	//		d: = Abs(x - t)
	//		if d > 0.5 || (d == 0.5 && odd) {
	//			ret t + Copysign(1, x)
	//		}
	//		ret t
	//	}
	mut bits := F64Bits(x)
	mut e := uint(bits>>shift) & mask
	if e >= bias {
		// Round abs(x) >= 1.
		// - Large numbers without fractional components, infinity, and NaN are unchanged.
		// - Add 0.499.. or 0.5 before truncating depending on whether the truncated
		//   number is even or odd (respectively).
		const halfMinusUlp = (1 << (shift - 1)) - 1
		e -= bias
		bits += (halfMinusUlp + (bits>>(shift-e))&1) >> e
		bits &= ^(fracMask >> e)
	} else if e == bias-1 && bits&fracMask != 0 {
		// Round 0.5 < abs(x) < 1.
		bits = bits&signMask | uvone // +-1
	} else {
		// Round abs(x) <= 0.5 including denormals.
		bits &= signMask // +-0
	}
	ret F64frombits(bits)
}