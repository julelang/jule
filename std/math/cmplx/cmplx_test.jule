// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"
use "std/testing"

struct arithTest {
	l: cmplx128 // Left operand.
	r: cmplx128 // Right operand.
	p: cmplx128 // Prod.
}

let divTests: []arithTest = [
	{15 + 2i, 32 + 3i, 0.47047434656340753 + 0.018393030009680542i},
	{NaN(), 32 + 3i, NaN()},
	{15 + 2i, NaN(), NaN()},
	{15 + 2i, Inf(1), 0 + -0i},
	{Inf(1), 32 + 3i, cmplx(math::Inf(1), math::NaN())},
]

fn eqf(a: f64, b: f64): bool {
	if math::IsNaN(a) {
		ret math::IsNaN(b)
	}
	ret a == b
}

fn eq(a: cmplx128, b: cmplx128): bool {
	ret eqf(real(a), real(b)) && eqf(imag(a), imag(b))
}

#test
fn testDiv(t: &testing::T) {
	for _, test in divTests {
		p := test.l / test.r
		if !eq(p, test.p) {
			t.Errorf("{} / {} != {}, found {}", test.l, test.r, test.p, p)
		}
	}
}