// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/math/cmplx/pow.go and came with this notice.
//
// ====================================================
// The original C code, the long comment, and the constants
// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.
// The go code is a simplified version of the original C.
//
// Cephes Math Library Release 2.8:  June, 2000
// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
//
// The readme file at http://netlib.sandia.gov/cephes/ says:
//    Some software in this archive may be from the book _Methods and
// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster
// International, 1989) or from the Cephes Mathematical Library, a
// commercial product. In either event, it is copyrighted by the author.
// What you see here may be used freely but it comes with no support or
// guarantee.
//
//   The two known misprints in the book are repaired here in the
// source listings for the gamma function and the incomplete beta
// integral.
//
//   Stephen L. Moshier
//   moshier@na-net.ornl.gov

// Complex power function
//
// DESCRIPTION:
//
// Raises complex A to the complex Zth power.
// Definition is per AMS55 # 4.2.8,
// analytically equivalent to cPow(a,z) = cexp(z clog(a)).
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    IEEE      -10,+10     30000       9.4e-15     1.5e-15

// Returns x**y, the base-x exponential of y.
// For generalized compatibility with math::pow:
//
//	Pow(0, Â±0) returns 1+0i
//	Pow(0, c) for c.Real()<0 returns Inf+0i if c.Imag() is zero, otherwise Inf+Inf i.
fn Pow(x: Cmplx, y: Cmplx): Cmplx {
	if IsZero(x) { // Guaranteed also true for x == -0.
		if IsNaN(y) {
			ret NaN()
		}
		match {
		| y.Real() == 0:
			ret New(1, 0)
		| y.Real() < 0:
			if y.Imag() == 0 {
				ret New(math::Inf(1), 0)
			}
			ret Inf(1)
		| y.Real() > 0:
			ret Zero()
		}
		panic("cmplx: not reached")
	}
	modulus := Abs(x)
	if modulus == 0 {
		ret Zero()
	}
	mut r := math::Pow(modulus, y.Real())
	arg := Phase(x)
	mut theta := y.Real() * arg
	if y.Imag() != 0 {
		r *= math::Exp(-y.Imag() * arg)
		theta += y.Imag() * math::Log(modulus)
	}
	s, c := math::Sincos(theta)
	ret New(r*c, r*s)
}