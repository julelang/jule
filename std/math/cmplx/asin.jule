// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/math/cmplx/asin.go and came with this notice.
//
// ====================================================
// The original C code, the long comment, and the constants
// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.
// The go code is a simplified version of the original C.
//
// Cephes Math Library Release 2.8:  June, 2000
// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
//
// The readme file at http://netlib.sandia.gov/cephes/ says:
//    Some software in this archive may be from the book _Methods and
// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster
// International, 1989) or from the Cephes Mathematical Library, a
// commercial product. In either event, it is copyrighted by the author.
// What you see here may be used freely but it comes with no support or
// guarantee.
//
//   The two known misprints in the book are repaired here in the
// source listings for the gamma function and the incomplete beta
// integral.
//
//   Stephen L. Moshier
//   moshier@na-net.ornl.gov

use "std/math"

// Complex circular arc sine
//
// DESCRIPTION:
//
// Inverse complex sine:
//                               2
// w = -i clog( iz + csqrt( 1 - z ) ).
//
// casin(z) = -i casinh(iz)
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10     10100       2.1e-15     3.4e-16
//    IEEE      -10,+10     30000       2.2e-14     2.7e-15
// Larger relative error can be observed for z near zero.
// Also tested by csin(casin(z)) = z.

// Returns the inverse sine of complex number.
fn Asin(x: cmplx128): cmplx128 {
	match {
	| imag(x) == 0 && math::Abs(real(x)) <= 1:
		ret cmplx(math::Asin(real(x)), imag(x))
	| real(x) == 0 && math::Abs(imag(x)) <= 1:
		ret cmplx(real(x), math::Asinh(imag(x)))
	| math::IsNaN(imag(x)):
		match {
		| real(x) == 0:
			ret cmplx(real(x), math::NaN())
		| math::IsInf(real(x), 0):
			ret cmplx(math::NaN(), real(x))
		|:
			ret NaN()
		}
	| math::IsInf(imag(x), 0):
		match {
		| math::IsNaN(real(x)):
			ret x
		| math::IsInf(real(x), 0):
			ret cmplx(math::Copysign(math::Pi/4, real(x)), imag(x))
		|:
			ret cmplx(math::Copysign(0, real(x)), imag(x))
		}
	| math::IsInf(real(x), 0):
		ret cmplx(math::Copysign(math::Pi/2, real(x)), math::Copysign(real(x), imag(x)))
	}
	ct := cmplx(-imag(x), real(x)) // i * x
	xx := x * x
	x1 := cmplx(1-real(xx), -imag(xx)) // 1 - x*x
	x2 := Sqrt(x1)                     // x2 = sqrt(1 - x*x)
	w := Log(ct + x2)
	ret cmplx(imag(w), -real(w)) // -i * w
}

// Returns the inverse hyperbolic sine of complex number.
fn Asinh(x: cmplx128): cmplx128 {
	match {
	| imag(x) == 0 && math::Abs(real(x)) <= 1:
		ret cmplx(math::Asinh(real(x)), imag(x))
	| real(x) == 0 && math::Abs(imag(x)) <= 1:
		ret cmplx(real(x), math::Asin(imag(x)))
	| math::IsInf(real(x), 0):
		match {
		| math::IsInf(imag(x), 0):
			ret cmplx(real(x), math::Copysign(math::Pi/4, imag(x)))
		| math::IsNaN(imag(x)):
			ret x
		|:
			ret cmplx(real(x), math::Copysign(0.0, imag(x)))
		}
	| math::IsNaN(real(x)):
		match {
		| imag(x) == 0:
			ret x
		| math::IsInf(imag(x), 0):
			ret cmplx(imag(x), real(x))
		|:
			ret NaN()
		}
	| math::IsInf(imag(x), 0):
		ret cmplx(math::Copysign(imag(x), real(x)), math::Copysign(math::Pi/2, imag(x)))
	}
	xx := x * x
	x1 := cmplx(1+real(xx), imag(xx)) // 1 + x*x
	ret Log(x + Sqrt(x1)) // log(x + sqrt(1 + x*x))
}

// Complex circular arc cosine
//
// DESCRIPTION:
//
// w = arccos z  =  PI/2 - arcsin z.
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10      5200      1.6e-15      2.8e-16
//    IEEE      -10,+10     30000      1.8e-14      2.2e-15

// Returns the inverse cosine of complex number.
fn Acos(x: cmplx128): cmplx128 {
	w := Asin(x)
	ret cmplx(math::Pi/2-real(w), -imag(w))
}

// Returns the inverse hyperbolic cosine of complex number.
fn Acosh(x: cmplx128): cmplx128 {
	if x == 0 {
		ret cmplx(0, math::Copysign(math::Pi/2, imag(x)))
	}
	w := Acos(x)
	if imag(w) <= 0 {
		ret cmplx(-imag(w), real(w)) // i * w
	}
	ret cmplx(imag(w), -real(w)) // -i * w
}

// Complex circular arc tangent
//
// DESCRIPTION:
//
// If
//     z = x + iy,
//
// then
//          1       (    2x     )
// Re w  =  - arctan(-----------)  +  k PI
//          2       (     2    2)
//                  (1 - x  - y )
//
//               ( 2         2)
//          1    (x  +  (y+1) )
// Im w  =  - log(------------)
//          4    ( 2         2)
//               (x  +  (y-1) )
//
// Where k is an arbitrary integer.
//
// catan(z) = -i catanh(iz).
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10      5900       1.3e-16     7.8e-18
//    IEEE      -10,+10     30000       2.3e-15     8.5e-17
// The check catan( ctan(z) )  =  z, with |x| and |y| < PI/2,
// had peak relative error 1.5e-16, rms relative error
// 2.9e-17.  See also clog().

// Returns the inverse tangent of complex number.
fn Atan(x: cmplx128): cmplx128 {
	match {
	| imag(x) == 0:
		ret cmplx(math::Atan(real(x)), imag(x))
	| real(x) == 0 && math::Abs(imag(x)) <= 1:
		ret cmplx(real(x), math::Atanh(imag(x)))
	| math::IsInf(imag(x), 0) | math::IsInf(real(x), 0):
		if math::IsNaN(real(x)) {
			ret cmplx(math::NaN(), math::Copysign(0, imag(x)))
		}
		ret cmplx(math::Copysign(math::Pi/2, real(x)), math::Copysign(0, imag(x)))
	| math::IsNaN(real(x)) | math::IsNaN(imag(x)):
		ret NaN()
	}
	x2 := real(x) * real(x)
	a := 1 - x2 - imag(x)*imag(x)
	if a == 0 {
		ret NaN()
	}
	mut t := 0.5 * math::Atan2(2*real(x), a)
	w := reducePi(t)

	t = imag(x) - 1
	b := x2 + t*t
	if b == 0 {
		ret NaN()
	}
	t = imag(x) + 1
	c := (x2 + t*t) / b
	ret cmplx(w, 0.25*math::Log(c))
}

// Returns the inverse hyperbolic tangent of complex number.
fn Atanh(x: cmplx128): cmplx128 {
	z := Atan(cmplx(-imag(x), real(x))) // z = atan(i * x)
	ret cmplx(imag(z), -real(z)) // z = -i * z
}