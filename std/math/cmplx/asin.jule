// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/math/cmplx/asin.go and came with this notice.
//
// ====================================================
// The original C code, the long comment, and the constants
// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.
// The go code is a simplified version of the original C.
//
// Cephes Math Library Release 2.8:  June, 2000
// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
//
// The readme file at http://netlib.sandia.gov/cephes/ says:
//    Some software in this archive may be from the book _Methods and
// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster
// International, 1989) or from the Cephes Mathematical Library, a
// commercial product. In either event, it is copyrighted by the author.
// What you see here may be used freely but it comes with no support or
// guarantee.
//
//   The two known misprints in the book are repaired here in the
// source listings for the gamma function and the incomplete beta
// integral.
//
//   Stephen L. Moshier
//   moshier@na-net.ornl.gov

// Complex circular arc sine
//
// DESCRIPTION:
//
// Inverse complex sine:
//                               2
// w = -i clog( iz + csqrt( 1 - z ) ).
//
// casin(z) = -i casinh(iz)
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10     10100       2.1e-15     3.4e-16
//    IEEE      -10,+10     30000       2.2e-14     2.7e-15
// Larger relative error can be observed for z near zero.
// Also tested by csin(casin(z)) = z.

// Returns the inverse sine of complex number.
fn Asin(x: Cmplx): Cmplx {
	match {
	| x.Imag() == 0 && math::Abs(x.Real()) <= 1:
		ret New(math::Asin(x.Real()), x.Imag())
	| x.Real() == 0 && math::Abs(x.Imag()) <= 1:
		ret New(x.Real(), math::Asinh(x.Imag()))
	| math::IsNaN(x.Imag()):
		match {
		| x.Real() == 0:
			ret New(x.Real(), math::NaN())
		| math::IsInf(x.Real(), 0):
			ret New(math::NaN(), x.Real())
		|:
			ret NaN()
		}
	| math::IsInf(x.Imag(), 0):
		match {
		| math::IsNaN(x.Real()):
			ret x
		| math::IsInf(x.Real(), 0):
			ret New(math::Copysign(math::Pi/4, x.Real()), x.Imag())
		|:
			ret New(math::Copysign(0, x.Real()), x.Imag())
		}
	| math::IsInf(x.Real(), 0):
		ret New(math::Copysign(math::Pi/2, x.Real()), math::Copysign(x.Real(), x.Imag()))
	}
	ct := New(-x.Imag(), x.Real()) // i * x
	xx := x.Mul(x)
	x1 := New(1-xx.Real(), -xx.Imag()) // 1 - x*x
	x2 := Sqrt(x1)                     // x2 = sqrt(1 - x*x)
	w := Log(ct.Add(x2))
	ret New(w.Imag(), -w.Real()) // -i * w
}

// Returns the inverse hyperbolic sine of complex number.
fn Asinh(x: Cmplx): Cmplx {
	match {
	| x.Imag() == 0 && math::Abs(x.Real()) <= 1:
		ret New(math::Asinh(x.Real()), x.Imag())
	| x.Real() == 0 && math::Abs(x.Imag()) <= 1:
		ret New(x.Real(), math::Asin(x.Imag()))
	| math::IsInf(x.Real(), 0):
		match {
		| math::IsInf(x.Imag(), 0):
			ret New(x.Real(), math::Copysign(math::Pi/4, x.Imag()))
		| math::IsNaN(x.Imag()):
			ret x
		|:
			ret New(x.Real(), math::Copysign(0.0, x.Imag()))
		}
	| math::IsNaN(x.Real()):
		match {
		| x.Imag() == 0:
			ret x
		| math::IsInf(x.Imag(), 0):
			ret New(x.Imag(), x.Real())
		|:
			ret NaN()
		}
	| math::IsInf(x.Imag(), 0):
		ret New(math::Copysign(x.Imag(), x.Real()), math::Copysign(math::Pi/2, x.Imag()))
	}
	xx := x.Mul(x)
	x1 := New(1+xx.Real(), xx.Imag()) // 1 + x*x
	ret Log(x.Add(Sqrt(x1))) // log(x + sqrt(1 + x*x))
}

// Complex circular arc cosine
//
// DESCRIPTION:
//
// w = arccos z  =  PI/2 - arcsin z.
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10      5200      1.6e-15      2.8e-16
//    IEEE      -10,+10     30000      1.8e-14      2.2e-15

// Returns the inverse cosine of complex number.
fn Acos(x: Cmplx): Cmplx {
	w := Asin(x)
	ret New(math::Pi/2-w.Real(), -w.Imag())
}

// Returns the inverse hyperbolic cosine of complex number.
fn Acosh(x: Cmplx): Cmplx {
	if IsZero(x) {
		ret New(0, math::Copysign(math::Pi/2, x.Imag()))
	}
	w := Acos(x)
	if w.Imag() <= 0 {
		ret New(-w.Imag(), w.Real()) // i * w
	}
	ret New(w.Imag(), -w.Real()) // -i * w
}

// Complex circular arc tangent
//
// DESCRIPTION:
//
// If
//     z = x + iy,
//
// then
//          1       (    2x     )
// Re w  =  - arctan(-----------)  +  k PI
//          2       (     2    2)
//                  (1 - x  - y )
//
//               ( 2         2)
//          1    (x  +  (y+1) )
// Im w  =  - log(------------)
//          4    ( 2         2)
//               (x  +  (y-1) )
//
// Where k is an arbitrary integer.
//
// catan(z) = -i catanh(iz).
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10      5900       1.3e-16     7.8e-18
//    IEEE      -10,+10     30000       2.3e-15     8.5e-17
// The check catan( ctan(z) )  =  z, with |x| and |y| < PI/2,
// had peak relative error 1.5e-16, rms relative error
// 2.9e-17.  See also clog().

// Returns the inverse tangent of complex number.
fn Atan(x: Cmplx): Cmplx {
	match {
	| x.Imag() == 0:
		ret New(math::Atan(x.Real()), x.Imag())
	| x.Real() == 0 && math::Abs(x.Imag()) <= 1:
		ret New(x.Real(), math::Atanh(x.Imag()))
	| math::IsInf(x.Imag(), 0) | math::IsInf(x.Real(), 0):
		if math::IsNaN(x.Real()) {
			ret New(math::NaN(), math::Copysign(0, x.Imag()))
		}
		ret New(math::Copysign(math::Pi/2, x.Real()), math::Copysign(0, x.Imag()))
	| math::IsNaN(x.Real()) | math::IsNaN(x.Imag()):
		ret NaN()
	}
	x2 := x.Real() * x.Real()
	a := 1 - x2 - x.Imag()*x.Imag()
	if a == 0 {
		ret NaN()
	}
	mut t := 0.5 * math::Atan2(2*x.Real(), a)
	w := reducePi(t)

	t = x.Imag() - 1
	b := x2 + t*t
	if b == 0 {
		ret NaN()
	}
	t = x.Imag() + 1
	c := (x2 + t*t) / b
	ret New(w, 0.25*math::Log(c))
}

// Returns the inverse hyperbolic tangent of complex number.
fn Atanh(x: Cmplx): Cmplx {
	z := Atan(New(-x.Imag(), x.Real())) // z = atan(i * x)
	ret New(z.Imag(), -z.Real()) // z = -i * z
}