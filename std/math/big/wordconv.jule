// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/conv"
use "std/math"
use "std/math/bits"
use "std/sync"

const digits = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

// Note: MaxBase = len(digits), but it must remain an untyped rune constant
//       for API compatibility.

// The largest number base accepted for string conversions.
const (
	MaxBase      = 10 + ('z' - 'a' + 1) + ('Z' - 'A' + 1)
	maxBaseSmall = 10 + ('z' - 'a' + 1)
)

// Returns (b**n, n) such that b**n is the largest power b**n <= _M.
// For instance maxPow(10) == (1e19, 19) for 19 decimal digits in a 64bit Word.
// In other words, at most n digits in base b fit into a Word.
fn maxPow(b: Word): (p: Word, n: int) {
	p, n = b, 1 // assuming b <= _M
	max := _M / b
	for p <= max {
		// p == b**n && p <= max
		p *= b
		n++
	}
	// p == b**n && p <= _M
	ret
}

// Returns x**n for n > 0, and 1 otherwise.
fn pow(mut x: Word, mut n: int): (p: Word) {
	// n == sum of bi * 2**i, for 0 <= i < imax, and bi is 0 or 1
	// thus x**n == product of x**(2**i) for all i where bi == 1
	// (Russian Peasant Method for exponentiation)
	p = 1
	for n > 0 {
		if n&1 != 0 {
			p *= x
		}
		x *= x
		n >>= 1
	}
	ret
}

// Converts z to an ASCII representation in the given base;
// base must be between 2 and MaxBase, inclusive.
fn utoaW(z: []Word, base: int): []byte {
	ret itoaW(z, false, base)
}

// Like utoa but it prepends a '-' if neg && z != 0.
fn itoaW(z: []Word, neg: bool, base: int): []byte {
	if base < 2 || base > MaxBase {
		panic("math/big: itoaW: invalid base")
	}

	// z == 0
	if len(z) == 0 {
		ret []byte("0")
	}
	// len(z) > 0

	// allocate buffer for conversion
	mut i := int(f64(bitLenW(z))/math::Log2(f64(base))) + 1 // off by 1 at most
	if neg {
		i++
	}
	mut s := make([]byte, i)

	// convert power of two and non power of two bases separately
	b := Word(base)
	if b == b&-b {
		// shift is base b digit size in bits
		shift := uint(bits::TrailingZeros(uint(b))) // shift > 0 because b >= 2
		mask := Word(1<<shift - 1)
		mut w := z[0]         // current word
		mut nbits := uint(_W) // number of unprocessed bits in w

		// convert less-significant words (include leading zeros)
		mut k := 1
		for k < len(z); k++ {
			// convert full digits
			for nbits >= shift {
				i--
				s[i] = digits[w&mask]
				w >>= shift
				nbits -= shift
			}

			// convert any partial leading digit and advance to next word
			if nbits == 0 {
				// no partial digit remaining, just advance
				w = z[k]
				nbits = _W
			} else {
				// partial digit in current word w (== z[k-1]) and next word z[k]
				w |= z[k] << nbits
				i--
				s[i] = digits[w&mask]

				// advance
				w = z[k] >> (shift - nbits)
				nbits = _W - (shift - nbits)
			}
		}

		// convert digits of most-significant word w (omit leading zeros)
		for w != 0 {
			i--
			s[i] = digits[w&mask]
			w >>= shift
		}
	} else {
		bb, ndigits := maxPow(b)

		// construct table of successive squares of bb*leafSize to use in subdivisions
		// result (table != nil) <=> (len(z) > leafSize > 0)
		table := divisors(len(z), b, ndigits, bb)

		// preserve z, create local copy for use by convertWords
		mut q := []Word(nil)
		setWW(q, z)

		// convert q to string s in base b
		convertWords(q, s, b, ndigits, bb, table)

		// strip leading zeros
		// (z != 0; thus s must contain at least one non-zero digit
		// and the loop will terminate)
		i = 0
		for s[i] == '0' {
			i++
		}
	}

	if neg {
		i--
		s[i] = '-'
	}

	ret s[i:]
}

// Convert words of q to base b digits in s. If q is large, it is recursively "split in half"
// by nat/nat division using tabulated divisors. Otherwise, it is converted iteratively using
// repeated nat/Word division.
//
// The iterative method processes n Words by n divW2() calls, each of which visits every Word in the
// incrementally shortened q for a total of n + (n-1) + (n-2) ... + 2 + 1, or n(n+1)/2 divW2()'s.
// Recursive conversion divides q by its approximate square root, yielding two parts, each half
// the size of q. Using the iterative method on both halves means 2 * (n/2)(n/2 + 1)/2 divW2()'s
// plus the expensive long divW(). Asymptotically, the ratio is favorable at 1/2 the divW2()'s, and
// is made better by splitting the subblocks recursively. Best is to split blocks until one more
// split would take longer (because of the nat/nat divW()) than the twice as many divW2()'s of the
// iterative approach. This threshold is represented by leafSize. Benchmarking of leafSize in the
// range 2..64 shows that values of 8 and 16 work well, with a 4x speedup at medium lengths and
// ~30x for 20000 digits.
fn convertWords(mut q: []Word, mut s: []byte, b: Word, ndigits: int, bb: Word, table: []divisor) {
	// split larger blocks recursively
	if table != nil {
		// len(q) > leafSize > 0
		mut r := []Word(nil)
		mut index := len(table) - 1
		for len(q) > leafSize {
			// find divisor close to sqrt(q) if possible, but in any case < q
			maxLength := bitLenW(q)     // ~= log2 q, or at of least largest possible q of this bit length
			minLength := maxLength >> 1 // ~= log2 sqrt(q)
			for index > 0 && table[index-1].nbits > minLength {
				index-- // desired
			}
			if table[index].nbits >= maxLength && cmpW(table[index].bbb, q) >= 0 {
				index--
				if index < 0 {
					panic("math/big: convertMods: internal inconsistency")
				}
			}

			// split q into the two digit number (q'*bbb + r) to form independent subblocks
			divW(q, r, q, table[index].bbb)

			// convert subblocks and collect results in s[:h] and s[h:]
			h := len(s) - table[index].ndigits
			convertWords(r, s[h:], b, ndigits, bb, table[0:index])
			s = s[:h] // == q.convertWords(s, b, ndigits, bb, table[0:index+1])
		}
	}

	// having split any large blocks now process the remaining (small) block iteratively
	mut i := len(s)
	mut r := Word(0)
	if b == 10 {
		// hard-coding for 10 here speeds this up by 1.25x (allows for / and % by constants)
		for len(q) > 0 {
			// extract least significant, base bb "digit"
			r = divW2(q, q, bb)
			mut j := 0
			for j < ndigits && i > 0; j++ {
				i--
				// avoid % computation since r%10 == r - int(r/10)*10;
				// this appears to be faster for BenchmarkString10000Base10
				// and smaller strings (but a bit slower for larger ones)
				t := r / 10
				s[i] = '0' + byte(r-t*10)
				r = t
			}
		}
	} else {
		for len(q) > 0 {
			// extract least significant, base bb "digit"
			r = divW2(q, q, bb)
			mut j := 0
			for j < ndigits && i > 0; j++ {
				i--
				s[i] = digits[r%b]
				r /= b
			}
		}
	}

	// prepend high-order zeros
	for i > 0 { // while need more leading zeros
		i--
		s[i] = '0'
	}
}

// Split blocks greater than leafSize Words (or set to 0 to disable recursive conversion)
// Benchmark and configure leafSize using: go test -bench="Leaf"
//
//	8 and 16 effective on 3.0 GHz Xeon "Clovertown" CPU (128 byte cache lines)
//	8 and 16 effective on 2.66 GHz Core 2 Duo "Penryn" CPU
const leafSize = 8 // number of Word-size binary values treat as a monolithic block

struct divisor {
	bbb:     []Word // divisor
	nbits:   int    // bit length of divisor (discounting leading zeros) ~= log2(bbb)
	ndigits: int    // digit length of divisor in terms of output base digits
}

struct cacheBase10 {
	mtx:   sync::Mutex
	table: [64]divisor // cached divisors for base 10
}

static mut cache10 = cacheBase10{}

// Computes x**y
fn expWVV(mut &z: []Word, x: Word, y: Word) {
	mut xw := []Word(nil)
	setWV(xw, x)
	mut yw := []Word(nil)
	setWV(yw, y)
	const Slow = false
	expWW(z, xw, yw, nil, Slow)
}

// construct table of powers of bb*leafSize to use in subdivisions.
fn divisors(m: int, b: Word, ndigits: int, bb: Word): []divisor {
	// only compute table when recursive conversion is enabled and x is large
	if leafSize == 0 || m <= leafSize {
		ret nil
	}

	// determine k where (bb**leafSize)**(2**k) >= sqrt(x)
	mut k := 1
	mut words := leafSize
	for words < m>>1 && k < len(cache10.table); words <<= 1 {
		k++
	}

	// reuse and extend existing table of divisors or create new table as appropriate
	mut table := []divisor(nil) // for b == 10, table overlaps with cache10.table
	if b == 10 {
		cache10.mtx.Lock()
		table = cache10.table[0:k] // reuse old table for this conversion
	} else {
		table = make([]divisor, k) // create new table for this conversion
	}

	// extend table
	if table[k-1].ndigits == 0 {
		// add new entries as needed
		mut larger := []Word(nil)
		mut i := 0
		for i < k; i++ {
			if table[i].ndigits == 0 {
				if i == 0 {
					mut z := []Word(nil)
					expWVV(z, bb, Word(leafSize))
					table[0].bbb = z
					table[0].ndigits = ndigits * leafSize
				} else {
					mut z := []Word(nil)
					sqrW(z, table[i-1].bbb)
					table[i].bbb = z
					table[i].ndigits = 2 * table[i-1].ndigits
				}

				// optimization: exploit aggregated extra bits in macro blocks
				larger = []Word(nil)
				setWW(larger, table[i].bbb)
				for mulAddVWW(larger, larger, b, 0) == 0 {
					setWW(unsafe { *(&table[i].bbb) }, larger)
					table[i].ndigits++
				}

				table[i].nbits = bitLenW(table[i].bbb)
			}
		}
	}

	if b == 10 {
		cache10.mtx.Unlock()
	}

	ret table
}

struct strScan {
	s: str
	i: int
}

impl strScan {
	static fn new(s: str): strScan {
		ret strScan{s: s}
	}

	fn read(mut self): (b: byte, ended: bool) {
		ended = self.i >= len(self.s)
		if ended {
			ret
		}
		b = self.s[self.i]
		self.i++
		ret
	}

	fn unread(mut self) {
		self.i--
	}
}

// Scans the number corresponding to the longest possible prefix
// from r representing an unsigned number in a given conversion base.
// scan returns the corresponding natural number res, the actual base b,
// a digit count, and a read or syntax error err, if any.
//
// For base 0, an underscore character “_” may appear between a base
// prefix and an adjacent digit, and between successive digits; such
// underscores do not change the value of the number, or the returned
// digit count. Incorrect placement of underscores is reported as an
// error if there are no other errors. If base != 0, underscores are
// not recognized and thus terminate scanning like any other character
// that is not a valid radix point or digit.
//
//	number    = mantissa | prefix pmantissa .
//	prefix    = "0" [ "b" | "B" | "o" | "O" | "x" | "X" ] .
//	mantissa  = digits "." [ digits ] | digits | "." digits .
//	pmantissa = [ "_" ] digits "." [ digits ] | [ "_" ] digits | "." digits .
//	digits    = digit { [ "_" ] digit } .
//	digit     = "0" ... "9" | "a" ... "z" | "A" ... "Z" .
//
// Unless fracOk is set, the base argument must be 0 or a value between
// 2 and MaxBase. If fracOk is set, the base argument must be one of
// 0, 2, 8, 10, or 16. Providing an invalid base argument leads to a run-
// time panic.
//
// For base 0, the number prefix determines the actual base: A prefix of
// “0b” or “0B” selects base 2, “0o” or “0O” selects base 8, and
// “0x” or “0X” selects base 16. If fracOk is false, a “0” prefix
// (immediately followed by digits) selects base 8 as well. Otherwise,
// the selected base is 10 and no prefix is accepted.
//
// If fracOk is set, a period followed by a fractional part is permitted.
// The result value is computed as if there were no period present; and
// the count value is used to determine the fractional part.
//
// For bases <= 36, lower and upper case letters are considered the same:
// The letters 'a' to 'z' and 'A' to 'Z' represent digit values 10 to 35.
// For bases > 36, the upper case letters 'A' to 'Z' represent the digit
// values 36 to 61.
//
// A result digit count > 0 corresponds to the number of (non-prefix) digits
// parsed. A digit count <= 0 indicates the presence of a period (if fracOk
// is set, only), and -count is the number of fractional digits found.
// In this case, the actual value of the scanned number is res * b**count.
//
// Returns ConvError in integer form.
// err = -1 if no error occurred.
fn scanW(mut &r: strScan, base: int, mut fracOk: bool): (res: []Word, b: int, count: int, ok: bool) {
	ok = true
	// reject invalid bases
	baseOk := base == 0 ||
		!fracOk && 2 <= base && base <= MaxBase ||
		fracOk && (base == 2 || base == 8 || base == 10 || base == 16)
	if !baseOk {
		panic("std/math/big: scanW: invalid number base " + conv::Itoa(base))
	}

	// prev encodes the previously seen char: it is one
	// of '_', '0' (a digit), or '.' (anything else). A
	// valid separator '_' may only occur after a digit
	// and if base == 0.
	mut prev := '.'
	mut invalSep := false

	// one char look-ahead
	mut ch, mut end := r.read()

	// determine actual base
	b, mut prefix := base, 0
	if base == 0 {
		// actual base is 10 unless there's a base prefix
		b = 10
		if !end && ch == '0' {
			prev = '0'
			count = 1
			ch, end = r.read()
			if !end {
				// possibly one of 0b, 0B, 0o, 0O, 0x, 0X
				match ch {
				| 'b' | 'B':
					b, prefix = 2, 'b'
				| 'o' | 'O':
					b, prefix = 8, 'o'
				| 'x' | 'X':
					b, prefix = 16, 'x'
				|:
					if !fracOk {
						b, prefix = 8, '0'
					}
				}
				if prefix != 0 {
					count = 0 // prefix is not counted
					if prefix != '0' {
						ch, end = r.read()
					}
				}
			}
		}
	}

	// convert string
	// Algorithm: Collect digits in groups of at most n digits in di
	// and then use mulAddWW for every such group to add them to the
	// result.
	b1 := Word(b)
	bn, n := maxPow(b1) // at most n digits in base b1 fit into Word
	mut di := Word(0)   // 0 <= di < b1**i < bn
	mut i := 0          // 0 <= i < n
	mut dp := -1        // position of decimal point
	for !end {
		if ch == '.' && fracOk {
			fracOk = false
			if prev == '_' {
				invalSep = true
			}
			prev = '.'
			dp = count
		} else if ch == '_' && base == 0 {
			if prev != '0' {
				invalSep = true
			}
			prev = '_'
		} else {
			// convert rune into digit value d1
			let mut d1: Word
			match {
			| '0' <= ch && ch <= '9':
				d1 = Word(ch - '0')
			| 'a' <= ch && ch <= 'z':
				d1 = Word(ch - 'a' + 10)
			| 'A' <= ch && ch <= 'Z':
				if b <= maxBaseSmall {
					d1 = Word(ch - 'A' + 10)
				} else {
					d1 = Word(ch - 'A' + maxBaseSmall)
				}
			|:
				d1 = MaxBase + 1
			}
			if d1 >= b1 {
				r.unread() // ch does not belong to number anymore
				break
			}
			prev = '0'
			count++

			// collect d1 in di
			di = di*b1 + d1
			i++

			// if di is "full", add it to the result
			if i == n {
				mulAddWW(res, res, bn, di)
				di = 0
				i = 0
			}
		}

		ch, end = r.read()
	}

	// invalid separators
	ok = ok && (!invalSep && prev != '_')

	if count == 0 {
		// no digits found
		if prefix == '0' {
			// there was only the octal prefix 0 (possibly followed by separators and digits > 7);
			// interpret as decimal 0
			ret res[:0], 10, 1, ok
		}
		ok = false // fall through; result will be 0
	}

	// add remaining digits to result
	if i > 0 {
		mulAddWW(res, res, pow(b1, i), di)
	}
	res = normW(res)

	// adjust count for fraction, if any
	if dp >= 0 {
		// 0 <= dp <= count
		count = dp - count
	}
	ret
}

fn fromStrW(s: str): []Word {
	mut r := strScan.new(s)
	mut x, _, _, ok := scanW(r, 0, false)
	if !ok {
		panic("std/math/big: fromStrW failed")
	}
	ret x
}