// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/strings"
use "std/testing"
use "std/unicode"
use "std/unicode/utf8"

let mut gcdTests: []argNN = [
	{
		fromStrW("92347302572303208732805308602356328065738254"),
		fromStrW("92347302572303208732805308602356328065738254"),
		fromStrW("92347302572303208732805308602356328065738254"),
	},
	{
		fromStrW("6"),
		fromStrW("92347302572303208732805308602356328065738254"),
		fromStrW("9234730257230320873280530860"),
	},
	{
		fromStrW("3"),
		fromStrW("1234567890"),
		fromStrW("123"),
	},
	{
		fromStrW("2"),
		fromStrW("34"),
		fromStrW("123234"),
	},
	{
		fromStrW("3"),
		fromStrW("9090909090999"),
		fromStrW("111111"),
	},
	{
		fromStrW("1"),
		fromStrW("213243546576879889674523"),
		fromStrW("1000"),
	},
	{
		fromStrW("101"),
		fromStrW("213243546576879889674523"),
		fromStrW("1010"),
	},
]

#test
fn testGCD(t: &testing::T) {
	for (_, mut c) in gcdTests {
		a := Int{abs: c.x}
		b := Int{abs: c.y}
		z := a.GCD(b)
		if z.Cmp(Int{abs: c.z}) != 0 {
			t.Errorf("a.GCD(z, _, _, {})\n\ta = {}\n\tgot z = {}; want {}", b.abs, a.abs, z, c.z)
		}
	}
}

let primes = [
	"2",
	"3",
	"5",
	"7",
	"11",
	"13756265695458089029",
	"13496181268022124907",
	"10953742525620032441",
	"17908251027575790097",

	// https://golang.org/issue/638
	"18699199384836356663",
	"98920366548084643601728869055592650835572950932266967461790948584315647051443",
	"94560208308847015747498523884063394671606671904944666360068158221458669711639",

	// https://primes.utm.edu/lists/small/small3.html
	"449417999055441493994709297093108513015373787049558499205492347871729927573118262811508386655998299074566974373711472560655026288668094291699357843464363003144674940345912431129144354948751003607115263071543163",
	"230975859993204150666423538988557839555560243929065415434980904258310530753006723857139742334640122533598517597674807096648905501653461687601339782814316124971547968912893214002992086353183070342498989426570593",
	"5521712099665906221540423207019333379125265462121169655563495403888449493493629943498064604536961775110765377745550377067893607246020694972959780839151452457728855382113555867743022746090187341871655890805971735385789993",
	"203956878356401977405765866929034577280193993314348263094772646453283062722701277632936616063144088173312372882677123879538709400158306567338328279154499698366071906766440037074217117805690872792848149112022286332144876183376326512083574821647933992961249917319836219304274280243803104015000563790123",

	// ECC primes: https://tools.ietf.org/html/draft-ladd-safecurves-02
	"3618502788666131106986593281521497120414687020801267626233049500247285301239",                                                                                                                                                                                                                                 // Curve1174: 2^251-9
	"57896044618658097711785492504343953926634992332820282019728792003956564819949",                                                                                                                                                                                                                                // Curve25519: 2^255-19
	"9850501549098619803069760025035903451269934817616361666987073351061430442874302652853566563721228910201656997576599",                                                                                                                                                                                          // E-382: 2^382-105
	"42307582002575910332922579714097346549017899709713998034217522897561970639123926132812109468141778230245837569601494931472367",                                                                                                                                                                                // Curve41417: 2^414-17
	"6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151",                                                                                                                                                // E-521: 2^521-1
]

let composites = [
	"0",
	"1",
	"21284175091214687912771199898307297748211672914763848041968395774954376176754",
	"6084766654921918907427900243509372380954290099172559290432744450051395395951",
	"84594350493221918389213352992032324280367711247940675652888030554255915464401",
	"82793403787388584738507275144194252681",

	// Arnault, "Rabin-Miller Primality Test: Composite Numbers Which Pass It",
	// Mathematics of Computation, 64(209) (January 1995), pp. 335-361.
	"1195068768795265792518361315725116351898245581",                                                                                                                                                                                                                                                                                                                                            // strong pseudoprime to prime bases 2 through 29
	// strong pseudoprime to all prime bases up to 200
	`
     80383745745363949125707961434194210813883768828755814583748891752229
      74273765333652186502336163960045457915042023603208766569966760987284
       0439654082329287387918508691668573282677617710293896977394701670823
        0428687109997439976544144845341155872450633409279022275296229414984
         2306881685404326457534018329786111298960644845216191652872597534901`,

	// Extra-strong Lucas pseudoprimes. https://oeis.org/A217719
	"989",
	"3239",
	"5777",
	"10877",
	"27971",
	"29681",
	"30739",
	"31631",
	"39059",
	"72389",
	"73919",
	"75077",
	"100127",
	"113573",
	"125249",
	"137549",
	"137801",
	"153931",
	"155819",
	"161027",
	"162133",
	"189419",
	"218321",
	"231703",
	"249331",
	"370229",
	"429479",
	"430127",
	"459191",
	"473891",
	"480689",
	"600059",
	"621781",
	"632249",
	"635627",
	"3673744903",
	"3281593591",
	"2385076987",
	"2738053141",
	"2009621503",
	"1502682721",
	"255866131",
	"117987841",
	"587861",
	"6368689",
	"8725753",
	"80579735209",
	"105919633",
]

fn cutSpace(mut r: rune): rune {
	if unicode::IsSpace(r) {
		ret -1
	}
	ret r
}

#test
fn testProbablyPrime(t: &testing::T) {
	const nreps = 20
	for i, s in primes {
		p, _ := Int.Parse(s, 10)
		if !p.ProbablyPrime(nreps) || nreps != 1 && !p.ProbablyPrime(1) || !p.ProbablyPrime(0) {
			t.Errorf("{} prime found to be non-prime ({})", i, s)
		}
	}

	for (i, mut s) in composites {
		s = strings::Map(cutSpace, s)
		c, _ := Int.Parse(s, 10)
		if c.ProbablyPrime(nreps) || nreps != 1 && c.ProbablyPrime(1) || c.ProbablyPrime(0) {
			t.Errorf("{} composite found to be prime ({})", i, s)
		}
	}
}

struct binomialCase {
	n:    i64
	k:    i64
	want: str
}

let binomialCases: []binomialCase = [
	{0, 0, "1"},
	{0, 1, "0"},
	{1, 0, "1"},
	{1, 1, "1"},
	{1, 10, "0"},
	{4, 0, "1"},
	{4, 1, "4"},
	{4, 2, "6"},
	{4, 3, "4"},
	{4, 4, "1"},
	{10, 1, "10"},
	{10, 9, "10"},
	{10, 5, "252"},
	{11, 5, "462"},
	{11, 6, "462"},
	{100, 10, "17310309456440"},
	{100, 90, "17310309456440"},
	{1000, 10, "263409560461970212832400"},
	{1000, 990, "263409560461970212832400"},
]

#test
fn testBinomial(t: &testing::T) {
	for _, test in binomialCases {
		prod := Int.Binomial(test.n, test.k).Str()
		if prod != test.want {
			t.Errorf("Binomial({}, {}) = {}; want {}", test.n, test.k, prod, test.want)
		}
	}
}