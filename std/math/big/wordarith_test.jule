// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/strings"
use "std/testing"

struct cmpCase {
	x: []Word
	y: []Word
	r: int
}

let cmpTests: []cmpCase = [
	{nil, nil, 0},
	{nil, nil, 0},
	{nil, nil, 0},
	{nil, nil, 0},
	{[0], [0], 0},
	{[0], [1], -1},
	{[1], [0], 1},
	{[1], [1], 0},
	{[0, _M], [1], 1},
	{[1], [0, _M], -1},
	{[1, _M], [0, _M], 1},
	{[0, _M], [1, _M], -1},
	{[16, 571956, 8794, 68], [837, 9146, 1, 754489], -1},
	{[34986, 41, 105, 1957], [56, 7458, 104, 1957], 1},
]

#test
fn testCmpW(t: &testing::T) {
	for i, a in cmpTests {
		r := cmpW(a.x, a.y)
		if r != a.r {
			t.Errorf("{} got r = {}; want {}", i, r, a.r)
		}
	}
}

struct argNN {
	z: []Word
	x: []Word
	y: []Word
}

let mut addNN: []argNN = [
	{nil, nil, nil},
	{[1], nil, [1]},
	{[1111111110], [123456789], [987654321]},
	{[0, 0, 0, 1], nil, [0, 0, 0, 1]},
	{[0, 0, 0, 1111111110], [0, 0, 0, 123456789], [0, 0, 0, 987654321]},
	{[0, 0, 0, 1], [0, 0, _M], [0, 0, 1]},
]

let mut mulNN: []argNN = [
	{},
	{nil, nil, nil},
	{nil, [991], nil},
	{[991], [991], [1]},
	{[991 * 991], [991], [991]},
	{[0, 0, 991 * 991], [0, 991], [0, 991]},
	{[1 * 991, 2 * 991, 3 * 991, 4 * 991], [1, 2, 3, 4], [991]},
	{[4, 11, 20, 30, 20, 11, 4], [1, 2, 3, 4], [4, 3, 2, 1]},
	// 3^100 * 3^28 = 3^128
	{
		fromStrW("11790184577738583171520872861412518665678211592275841109096961"),
		fromStrW("515377520732011331036461129765621272702107522001"),
		fromStrW("22876792454961"),
	},
	// z = 111....1 (70000 digits)
	// x = 10^(99*700) + ... + 10^1400 + 10^700 + 1
	// y = 111....1 (700 digits, larger than Karatsuba threshold on 32-bit and 64-bit)
	{
		fromStrW(strings::Repeat("1", 70000)),
		fromStrW("1" + strings::Repeat(strings::Repeat("0", 699)+"1", 99)),
		fromStrW(strings::Repeat("1", 700)),
	},
	// z = 111....1 (20000 digits)
	// x = 10^10000 + 1
	// y = 111....1 (10000 digits)
	{
		fromStrW(strings::Repeat("1", 20000)),
		fromStrW("1" + strings::Repeat("0", 9999) + "1"),
		fromStrW(strings::Repeat("1", 10000)),
	},
]

#test
fn testAddW(t: &testing::T) {
	for (_, mut a) in addNN {
		mut z := []Word(nil)
		addW(z, a.x, a.y)
		if cmpW(z, a.z) != 0 {
			t.Errorf("addW(z, {}, {})\n\tgot z = {}; want {}", a.x, a.y, z, a.z)
		}
	}
}

#test
fn testSubW(t: &testing::T) {
	for (_, mut a) in addNN {
		mut z := []Word(nil)
		subW(z, a.z, a.y)
		if cmpW(z, a.x) != 0 {
			t.Errorf("subW(z, {}, {})\n\tgot z = {}; want {}", a.x, a.y, z, a.z)
		}
	}
}

#test
fn testSubWSymmetric(t: &testing::T) {
	for (_, mut a) in addNN {
		mut z := []Word(nil)
		subW(z, a.z, a.x)
		if cmpW(z, a.y) != 0 {
			t.Errorf("subW symmetric(z, {}, {})\n\tgot z = {}; want {}", a.y, a.x, z, a.y)
		}
	}
}

#test
fn testMulW(t: &testing::T) {
	for (_, mut a) in mulNN {
		mut z := []Word(nil)
		mulW(z, a.x, a.y)
		if cmpW(z, a.z) != 0 {
			t.Errorf("mulW(z, {}, {})\n\tgot z = {}; want {}", a.x, a.y, z, a.z)
		}
	}
}

struct shiftTest {
	input: []Word
	shift: uint
	out:   []Word
}

let leftShiftTests: []shiftTest = [
	{nil, 0, nil},
	{nil, 1, nil},
	{wordOne, 0, wordOne},
	{wordOne, 1, wordTwo},
	{[1 << (_W - 1)], 1, [0]},
	{[1 << (_W - 1), 0], 1, [0, 1]},
]

#test
fn testShiftLeft(t: &testing::T) {
	for i, test in leftShiftTests {
		mut z := []Word(nil)
		lshW(z, test.input, test.shift)
		for j, d in test.out {
			if j >= len(z) || z[j] != d {
				t.Errorf("{}: got: {} want: {}", i, z, test.out)
				break
			}
		}
	}
}

let rightShiftTests: []shiftTest = [
	{nil, 0, nil},
	{nil, 1, nil},
	{wordOne, 0, wordOne},
	{wordOne, 1, nil},
	{wordTwo, 1, wordOne},
	{[0, 1], 1, [1 << (_W - 1)]},
	{[2, 1, 1], 1, [1<<(_W-1) + 1, 1<<(_W-1)]},
]

#test
fn testShiftRight(t: &testing::T) {
	for i, test in rightShiftTests {
		mut z := []Word(nil)
		rshW(z, test.input, test.shift)
		for j, d in test.out {
			if j >= len(z) || z[j] != d {
				t.Errorf("{}: got: {} want: {}", i, z, test.out)
				break
			}
		}
	}
}

struct modWTest {
	input:    str
	dividend: str
	out:      str
}

let modWTests32: []modWTest = [
	{"23492635982634928349238759823742", "252341", "220170"},
]

let modWTests64: []modWTest = [
	{"6527895462947293856291561095690465243862946", "524326975699234", "375066989628668"},
]

fn runModWTests(t: &testing::T, tests: []modWTest) {
	for i, test in tests {
		input := fromStrW(test.input)
		d := fromStrW(test.dividend)
		out := fromStrW(test.out)

		r := modW(input, d[0])
		if r != out[0] {
			t.Errorf("{} failed: got {} want {}", i, r, out)
		}
	}
}

#test
fn testModW(t: &testing::T) {
	if _W >= 32 {
		runModWTests(t, modWTests32)
	}
	if _W >= 64 {
		runModWTests(t, modWTests64)
	}
}

struct expWWTest {
	x:   str
	y:   str
	m:   str
	out: str
}

let expWWTests: []expWWTest = [
	{"0", "0", "0", "1"},
	{"0", "0", "1", "0"},
	{"1", "1", "1", "0"},
	{"2", "1", "1", "0"},
	{"2", "2", "1", "0"},
	{"10", "100000000000", "1", "0"},
	{"0x8000000000000000", "2", "", "0x40000000000000000000000000000000"},
	{"0x8000000000000000", "2", "6719", "4944"},
	{"0x8000000000000000", "3", "6719", "5447"},
	{"0x8000000000000000", "1000", "6719", "1603"},
	{"0x8000000000000000", "1000000", "6719", "3199"},
	{
		"2938462938472983472983659726349017249287491026512746239764525612965293865296239471239874193284792387498274256129746192347",
		"298472983472983471903246121093472394872319615612417471234712061",
		"29834729834729834729347290846729561262544958723956495615629569234729836259263598127342374289365912465901365498236492183464",
		"23537740700184054162508175125554701713153216681790245129157191391322321508055833908509185839069455749219131480588829346291",
	},
	{
		"11521922904531591643048817447554701904414021819823889996244743037378330903763518501116638828335352811871131385129455853417360623007349090150042001944696604737499160174391019030572483602867266711107136838523916077674888297896995042968746762200926853379",
		"426343618817810911523",
		"444747819283133684179",
		"42",
	},
	{"375", "249", "388", "175"},
	{"375", "18446744073709551801", "388", "175"},
	{"0", "0x40000000000000", "0x200", "0"},
	{"0xeffffff900002f00", "0x40000000000000", "0x200", "0"},
	{"5", "1435700818", "72", "49"},
	{"0xffff", "0x300030003000300030003000300030003000302a3000300030003000300030003000300030003000300030003000300030003030623066307f3030783062303430383064303630343036", "0x300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "0xa3f94c08b0b90e87af637cacc9383f7ea032352b8961fc036a52b659b6c9b33491b335ffd74c927f64ddd62cfca0001"},
]

#test
fn testExpWW(t: &testing::T) {
	for i, test in expWWTests {
		mut x := fromStrW(test.x)
		mut y := fromStrW(test.y)
		out := fromStrW(test.out)

		mut m := []Word(nil)
		if len(test.m) > 0 {
			m = fromStrW(test.m)
		}

		mut z := []Word(nil)
		expWW(z, x, y, m, false)
		if cmpW(z, out) != 0 {
			t.Errorf("{} got {} want {}", i, utoaW(z, 10), utoaW(out, 10))
		}
	}
}

let mut divTests: []argNN = [
	{
		fromStrW("9844987992821001394599966819468897539527191175868496457883"),
		fromStrW("2938462938472983472983659726349017249287491026512746239764525612965293865296239471239874193284792387498274256129746192347"),
		fromStrW("298472983472983471903246121093472394872319615612417471234712061"),
	},
	{
		fromStrW("0"),
		fromStrW("3434"),
		fromStrW("298472983472983471903246121093472394872319615612417471234712061"),
	},
	{
		fromStrW("118"),
		fromStrW("3434"),
		fromStrW("29"),
	},
	{
		fromStrW("100101010"),
		fromStrW("100101010"),
		fromStrW("1"),
	},
	{
		fromStrW("1030777000"),
		fromStrW("13400101010"),
		fromStrW("13"),
	},
	{
		fromStrW("2222223333333"),
		fromStrW("20000009999999"),
		fromStrW("9"),
	},
	{
		fromStrW("1"),
		fromStrW("10"),
		fromStrW("9"),
	},
	{
		fromStrW("1"),
		fromStrW("2"),
		fromStrW("2"),
	},
	{
		fromStrW("14"),
		fromStrW("28"),
		fromStrW("2"),
	},
	{
		fromStrW("1"),
		fromStrW("77898475985984649856573890023542803948012412025703971359635875092365382947"),
		fromStrW("77898475985984649856573890023542803948012412025703971359635875092365382946"),
	},
	{
		fromStrW("10"),
		fromStrW("77898475985984649856573890023542803948012412025703971359635875092365382947"),
		fromStrW("7789847598598464985657389002354280394801241202570397135963587509236538294"),
	},
	{
		fromStrW("89273167877724505367101052164661667890"),
		fromStrW("8780005740750385035754070497574305730573764670574307606403043360674087583724896379546793676973493699"),
		fromStrW("98349884399489058098509809580500985098835000000000000000000000"),
	},
	{
		fromStrW("10972276337515897738872674833862639639731720509398272222222222222222222222223333333333333333333323593964307270505050729516666667912456660415997154970726396452597760"),
		fromStrW("98750487037643079649854073504763756757585484584584450000000000000000000000009999999999999999999912345678765434545456565650000011212109943743974394736537568073379845"),
		fromStrW("9"),
	},
	{
		fromStrW("1030670756977922510220817575218038205734252835673757899567211332853716316542501934534680384306052321447890459201281380855678516808351228379303129374123644875138576954161580750283518776155368892255730545655865492793737745352460976409097365424934498288817002255307910371548349069728079984477514935064520090198735968656038020087814241407522633317801992012754938121142558022345475961515419126817306470259"),
		fromStrW("0xFFFADADADADAFFFFFFFFFFFFBBBBCCCDDBBCCDFFF989734038653094222323329293232300000FFFFFFFFFFF000934937497348CCCBBDAAA89397349384387587987783993863578624562990678672001986956075249857469692750928629857348097FDFDFAFABABAFAFBCFACBACFACBCAAAAAA234907209472934287583603971284392659824759286589325896235032740382658032749327902379749827389562642734320874"),
		fromStrW("100000000000001"),
	},
	{
		fromStrW("62926207700260767927344432825287824949207733331670207440501116733155492055518210718591527846755885953104716365203744900186876827955926121756153978268208959933483318492269190593167097139935433011163083547316103567310791154611056324719257403404803880705616137302758761291305743276341751870505169201263502646510356497251931336189358465128153396254247856802999466929219667350759278507810213373579115331160156056124319446894371196458295769572735496595807405765784649142700955105595447007534122491133626754722192294672351456674439239185754751297715262794497778110312357683984176772882854160254157871573472491987857660278358638333490676684648463350183410957168862745031893043278376348443965712323575194059494380315754402631587285215122846469752425776880313403735399617040162908561688141127860796259552007804825554292229699361415036569072355972586190950844997331052979216287517284731666766735561205204792337648735498933634024744302179201995351604061360985058269349587838059310785171454615517251510670108251793903279674963231083008184860158460605935623068161560737052778158228061958113956902927706247550838621622211474351255161417893214507150386754355564989717182319066751839509987624296523892834403189610715144060198583258761328565445795736476446000406618938539069421915001383629780584147767697587979645356730425529028608004630112755586620532469187227334239410534707035265193279084913032666517761057097374186392148381395880690063098657488564533765451531012807999423370586418107004611851522762596702026569026438592601844879670325768423105228030475512580812302276753188847488809885056910504528935927350338886124511723621873161212301383792214433582663204715674364331567434722068448096166686253075656712190988994348690035271030202356683577500216899601057530529157460097354254966074523019306887780469728893246060631453653030038437930017420073707154186958728158492466756175185723151313684522773215398831878295287092677701343032483339576478764160570780713804362167110160657668473783300135180985185578594771120986099800951707920043068585693832745024829523531271768954685807921498500718224653686880076486880294124185634007689718512080705937284156712224010320671839490716505113782245147222787333727347173751679455283285017718100816468888824127709469250029231822273505600851477175958058872676483685000006995778124683210710598310310462849103944013770015449313898714883768529902818132098106576030063920145073840560044096597397014567582626391011959700156706335099981252618851668237466814299062578412452553302863743025326911150424083569431460637344906316010916139054790304578028305022237522733599219227860105797059172340667160578719781469505664178682841013810243211431847562763860536948323200445144208562807145274785698496473887934325869395498212261854899189990266653671311293279513816884622441114879831101440837549417551410767515663598068416192561804972044840428045736939576291856999294383663571759134856723513531672042325080686157368654791298603108680492443810959380288737022045116427413794221647912902009227444439205258691296174288341589102824358171350945764803435852507749743359"),
		fromStrW("0xc23b166884c3869092a520eceedeced2b00847bd256c9cf3b2c5e2227c15bd5e6ee7ef8a2f49236ad0eedf2c8a3b453cf6e0706f64285c526b372c4b1321245519d430540804a50b7ca8b6f1b34a2ec05cdbc24de7599af112d3e3c8db347e8799fe70f16e43c6566ba3aeb169463a3ecc486172deb2d9b80a3699c776e44fef20036bd946f1b4d054dd88a2c1aeb986199b0b2b7e58c42288824b74934d112fe1fc06e06b4d99fe1c5e725946b23210521e209cd507cce90b5f39a523f27e861f9e232aee50c3f585208b4573dcc0b897b6177f2ba20254fd5c50a033e849dee1b3a93bd2dc44ba8ca836cab2c2ae50e50b126284524fa0187af28628ff0face68d87709200329db1392852c8b8963fbe3d05fb1efe19f0ed5ca9fadc2f96f82187c24bb2512b2e85a66333a7e176605695211e1c8e0b9b9e82813e50654964945b1e1e66a90840396c7d10e23e47f364d2d3f660fa54598e18d1ca2ea4fe4f35a40a11f69f201c80b48eaee3e2e9b0eda63decf92bec08a70f731587d4ed0f218d5929285c8b2ccbc497e20db42de73885191fa453350335990184d8df805072f958d5354debda38f5421effaaafd6cb9b721ace74be0892d77679f62a4a126697cd35797f6858193da4ba1770c06aea2e5c59ec04b8ea26749e61b72ecdde403f3bc7e5e546cd799578cc939fa676dfd5e648576d4a06cbadb028adc2c0b461f145b2321f42e5e0f3b4fb898ecd461df07a6f5154067787bf74b5cc5c03704a1ce47494961931f0263b0aac32505102595957531a2de69dd71aac51f8a49902f81f21283dbe8e21e01e5d82517868826f86acf338d935aa6b4d5a25c8d540389b277dd9d64569d68baf0f71bd03dba45b92a7fc052601d1bd011a2fc6790a23f97c6fa5caeea040ab86841f268d39ce4f7caf01069df78bba098e04366492f0c2ac24f1bf16828752765fa523c9a4d42b71109d123e6be8c7b1ab3ccf8ea03404075fe1a9596f1bba1d267f9a7879ceece514818316c9c0583469d2367831fc42b517ea028a28df7c18d783d16ea2436cee2b15d52db68b5dfdee6b4d26f0905f9b030c911a04d078923a4136afea96eed6874462a482917353264cc9bee298f167ac65a6db4e4eda88044b39cc0b33183843eaa946564a00c3a0ab661f2c915e70bf0bb65bfbb6fa2eea20aed16bf2c1a1d00ec55fb4ff2f76b8e462ea70c19efa579c9ee78194b86708fdae66a9ce6e2cf3d366037798cfb50277ba6d2fd4866361022fd788ab7735b40b8b61d55e32243e06719e53992e9ac16c9c4b6e6933635c3c47c8f7e73e17dd54d0dd8aeba5d76de46894e7b3f9d3ec25ad78ee82297ba69905ea0fa094b8667faa2b8885e2187b3da80268aa1164761d7b0d6de206b676777348152b8ae1d4afed753bc63c739a5ca8ce7afb2b241a226bd9e502baba391b5b13f5054f070b65a9cf3a67063bfaa803ba390732cd03888f664023f12131414141FFFFFFFFF741d04d564e0b5674b0a183ace81452001b3fbb4214c77d42ca75376742c471e58f67307726d56a1032bd236610cbcbcd03d0d7a452900136897dc55bb3ce959d10d4e6a10fb635006bd8c41cd9ded2d3dfdd8f2e229590324a7370cb2124210b2330f4c56155caa09a2564932ceded8d92c79664dcdeb87faad7d3da006cc2ea267ee3df41e9677789cc5a8cc3b83add6491561b3047919e0648b1b2e97d7ad6f6c2aa80cab8e9ae10e1f75b1fdd0246151af709d259a6a0ed0b26bd711024965ecad7c41387de45443def"),
		fromStrW("90"),
	},
	{
		fromStrW("62926207700260767927344432825287824949207733331670207440501116733155492055518210718591527846755885953104716365203744900186876827955926121756153978268208959933483318492269190593167097139935433011163083547316103567310791154611056324719257403404803880705616137302758761291305743276341751870505169201263502646510356497251931336189358465128153396254247856802999466929219667350759278507810213373579115331160156056124319446894371196458295769572735496595807405765784649142700955105595447007534122491133626754722192294672351456674439239185754751297715262794497778110312357683984176772882854160254157871573472491987857660278358638333490676684648463350183410957168862745031893043278376348443965712323575194059494380315754402631587285215122846469752425776880313403735399617040162908561688141127860796259552007804825554292229699361415036569072355972586190950844997331052979216287517284731666766735561205204792337648735498933634024744302179201995351604061360985058269349587838059310785171454615517251510670108251793903279674963231083008184860158460605935623068161560737052778158228061958113956902927706247550838621622211474351255161417893214507150386754355564989717182319066751839509987624296523892834403189610715144060198583258761328565445795736476446000406618938539069421915001383629780584147767697587979645356730425529028608004630112755586620532469187227334239410534707035265193279084913032666517761057097374186392148381395880690063098657488564533765451531012807999423370586418107004611851522762596702026569026438592601844879670325768423105228030475512580812302276753188847488809885056910504528935927350338886124511723621873161212301383792214433582663204715674364331567434722068448096166686253075656712190988994348690035271030202356683577500216899601057530529157460097354254966074523019306887780469728893246060631453653030038437930017420073707154186958728158492466756175185723151313684522773215398831878295287092677701343032483339576478764160570780713804362167110160657668473783300135180985185578594771120986099800951707920043068585693832745024829523531271768954685807921498500718224653686880076486880294124185634007689718512080705937284156712224010320671839490716505113782245147222787333727347173751679455283285017718100816468888824127709469250029231822273505600851477175958058872676483685000006995778124683210710598310310462849103944013770015449313898714883768529902818132098106576030063920145073840560044096597397014567582626391011959700156706335099981252618851668237466814299062578412452553302863743025326911150424083569431460637344906316010916139054790304578028305022237522733599219227860105797059172340667160578719781469505664178682841013810243211431847562763860536948323200445144208562807145274785698496473887934325869395498212261854899189990266653671311293279513816884622441114879831101440837549417551410767515663598068416192561804972044840428045736939576291856999294383663571759134856723513531672042325080686157368654791298603108680492443810959380288737022045116427413794221647912902009227444439205258691296174288341589102824358171350945764803435852507749743359"),
		fromStrW("0xc23b166884c3869092a520eceedeced2b00847bd256c9cf3b2c5e2227c15bd5e6ee7ef8a2f49236ad0eedf2c8a3b453cf6e0706f64285c526b372c4b1321245519d430540804a50b7ca8b6f1b34a2ec05cdbc24de7599af112d3e3c8db347e8799fe70f16e43c6566ba3aeb169463a3ecc486172deb2d9b80a3699c776e44fef20036bd946f1b4d054dd88a2c1aeb986199b0b2b7e58c42288824b74934d112fe1fc06e06b4d99fe1c5e725946b23210521e209cd507cce90b5f39a523f27e861f9e232aee50c3f585208b4573dcc0b897b6177f2ba20254fd5c50a033e849dee1b3a93bd2dc44ba8ca836cab2c2ae50e50b126284524fa0187af28628ff0face68d87709200329db1392852c8b8963fbe3d05fb1efe19f0ed5ca9fadc2f96f82187c24bb2512b2e85a66333a7e176605695211e1c8e0b9b9e82813e50654964945b1e1e66a90840396c7d10e23e47f364d2d3f660fa54598e18d1ca2ea4fe4f35a40a11f69f201c80b48eaee3e2e9b0eda63decf92bec08a70f731587d4ed0f218d5929285c8b2ccbc497e20db42de73885191fa453350335990184d8df805072f958d5354debda38f5421effaaafd6cb9b721ace74be0892d77679f62a4a126697cd35797f6858193da4ba1770c06aea2e5c59ec04b8ea26749e61b72ecdde403f3bc7e5e546cd799578cc939fa676dfd5e648576d4a06cbadb028adc2c0b461f145b2321f42e5e0f3b4fb898ecd461df07a6f5154067787bf74b5cc5c03704a1ce47494961931f0263b0aac32505102595957531a2de69dd71aac51f8a49902f81f21283dbe8e21e01e5d82517868826f86acf338d935aa6b4d5a25c8d540389b277dd9d64569d68baf0f71bd03dba45b92a7fc052601d1bd011a2fc6790a23f97c6fa5caeea040ab86841f268d39ce4f7caf01069df78bba098e04366492f0c2ac24f1bf16828752765fa523c9a4d42b71109d123e6be8c7b1ab3ccf8ea03404075fe1a9596f1bba1d267f9a7879ceece514818316c9c0583469d2367831fc42b517ea028a28df7c18d783d16ea2436cee2b15d52db68b5dfdee6b4d26f0905f9b030c911a04d078923a4136afea96eed6874462a482917353264cc9bee298f167ac65a6db4e4eda88044b39cc0b33183843eaa946564a00c3a0ab661f2c915e70bf0bb65bfbb6fa2eea20aed16bf2c1a1d00ec55fb4ff2f76b8e462ea70c19efa579c9ee78194b86708fdae66a9ce6e2cf3d366037798cfb50277ba6d2fd4866361022fd788ab7735b40b8b61d55e32243e06719e53992e9ac16c9c4b6e6933635c3c47c8f7e73e17dd54d0dd8aeba5d76de46894e7b3f9d3ec25ad78ee82297ba69905ea0fa094b8667faa2b8885e2187b3da80268aa1164761d7b0d6de206b676777348152b8ae1d4afed753bc63c739a5ca8ce7afb2b241a226bd9e502baba391b5b13f5054f070b65a9cf3a67063bfaa803ba390732cd03888f664023f12131414141FFFFFFFFF741d04d564e0b5674b0a183ace81452001b3fbb4214c77d42ca75376742c471e58f67307726d56a1032bd236610cbcbcd03d0d7a452900136897dc55bb3ce959d10d4e6a10fb635006bd8c41cd9ded2d3dfdd8f2e229590324a7370cb2124210b2330f4c56155caa09a2564932ceded8d92c79664dcdeb87faad7d3da006cc2ea267ee3df41e9677789cc5a8cc3b83add6491561b3047919e0648b1b2e97d7ad6f6c2aa80cab8e9ae10e1f75b1fdd0246151af709d259a6a0ed0b26bd711024965ecad7c41387de45443def"),
		fromStrW("90"),
	},
	{
		fromStrW("7464417310463290676954745165514907532415013166922976836401321191671626233922338895973279145220065706519683852249954769574147304284398684301118184267429537015296484975448675524964156923226059171353011188740781051700992572769445633137076641225719994276262093045541373573916936139962552607079081897492464809652206630381128843542788433676173724413411476391981983155200477842792202789791659512342748322171336335780599579876460815866442687147949216025447631951736937027720199947413460444421726240691492403326446475188884629572565414169514604303619818192110416696281190986701487110756629686459479902694751470149442831252225138084631076601924935117744783477535058855534374822535297174373286230198996347468216797834213149590452825931967242445023614789605523458808796067120303917819610329412730304146459462667218751371269567904858784950195976134884348159362847489269877590663241976606821449575768068113915378727546990854287629314652058635498994799209333913559822835568488161096033255313728126361251700319177182191187563854972140744352677986784549041247049834469059867575093701155950166940067169886776374781455550912488630038541474564147334245006247141176454618892117238054459493789858967815418225798338182449848761848730874130846607391907017460621175258307594829458672410601540556274257958791191417786835431100248288626762906716305840696854644363509532239070189588821691422580418914928911871230683225534815440747703845216881115675009675936391961462216491501830259576200214280223161235399221557335146828045012268993309322058807150222791344603373873121495298574717229472255228765133396651030447929364104006352790857882916088983082675857991263602903598499335921331439851144778173951753531978146313652734249061763675799141802914816227715651797592961204960626257684708944905139482950489328524763134494957701560225532198527299118572047592068806076808056210154547431088365697235634693850448788094457063526731738613658740285351518163680830658710462803233645747532751220469349108306725949778518437187958019435104192977702182117044827657054613320765494138467350080234398024468325276469051684158849525454518569466887135596166388371325206615099305508635032640246540155747257987357217474575944033823930230825914056282684326000799105354279150350811464512675051093950384459438626216151656064885336217281958945912819961364154996129222858094789847918559736827844474721599086696354899615986257568483430890527353948670808532795356255519319947520631948738463867682725661394237877777456891482779308850319100101472880037246282289481362611150866965976525892700897785631265299764751384821881347394372610306635155579912616222945834203112250712969554708505155142288865736680516367136118631410498867627701212066766489132702404471664304099082697044619037722158136335209774631749551961424457766055817071595064027567346351783311648768672068259425641493490860651091107007008516327751258810397071799608021188496837213718581700940120452314606621773484521100584561031795923803707141873190000062701435634598094586322739087557166939063529886189832964531113187715205476434884873665251227993595752781348601857"),
		fromStrW("0xc23b166884c3869092a520eceedeced2b00847bd256c9cf3b2c5e2227c15bd5e6ee7ef8a2f49236ad0eedf2c8a3b453cf6e0706f64285c526b372c4b1321245519d430540804a50b7ca8b6f1b34a2ec05cdbc24de7599af112d3e3c8db347e8799fe70f16e43c6566ba3aeb169463a3ecc486172deb2d9b80a3699c776e44fef20036bd946f1b4d054dd88a2c1aeb986199b0b2b7e58c42288824b74934d112fe1fc06e06b4d99fe1c5e725946b23210521e209cd507cce90b5f39a523f27e861f9e232aee50c3f585208b4573dcc0b897b6177f2ba20254fd5c50a033e849dee1b3a93bd2dc44ba8ca836cab2c2ae50e50b126284524fa0187af28628ff0face68d87709200329db1392852c8b8963fbe3d05fb1efe19f0ed5ca9fadc2f96f82187c24bb2512b2e85a66333a7e176605695211e1c8e0b9b9e82813e50654964945b1e1e66a90840396c7d10e23e47f364d2d3f660fa54598e18d1ca2ea4fe4f35a40a11f69f201c80b48eaee3e2e9b0eda63decf92bec08a70f731587d4ed0f218d5929285c8b2ccbc497e20db42de73885191fa453350335990184d8df805072f958d5354debda38f5421effaaafd6cb9b721ace74be0892d77679f62a4a126697cd35797f6858193da4ba1770c06aea2e5c59ec04b8ea26749e61b72ecdde403f3bc7e5e546cd799578cc939fa676dfd5e648576d4a06cbadb028adc2c0b461f145b2321f42e5e0f3b4fb898ecd461df07a6f5154067787bf74b5cc5c03704a1ce47494961931f0263b0aac32505102595957531a2de69dd71aac51f8a49902f81f21283dbe8e21e01e5d82517868826f86acf338d935aa6b4d5a25c8d540389b277dd9d64569d68baf0f71bd03dba45b92a7fc052601d1bd011a2fc6790a23f97c6fa5caeea040ab86841f268d39ce4f7caf01069df78bba098e04366492f0c2ac24f1bf16828752765fa523c9a4d42b71109d123e6be8c7b1ab3ccf8ea03404075fe1a9596f1bba1d267f9a7879ceece514818316c9c0583469d2367831fc42b517ea028a28df7c18d783d16ea2436cee2b15d52db68b5dfdee6b4d26f0905f9b030c911a04d078923a4136afea96eed6874462a482917353264cc9bee298f167ac65a6db4e4eda88044b39cc0b33183843eaa946564a00c3a0ab661f2c915e70bf0bb65bfbb6fa2eea20aed16bf2c1a1d00ec55fb4ff2f76b8e462ea70c19efa579c9ee78194b86708fdae66a9ce6e2cf3d366037798cfb50277ba6d2fd4866361022fd788ab7735b40b8b61d55e32243e06719e53992e9ac16c9c4b6e6933635c3c47c8f7e73e17dd54d0dd8aeba5d76de46894e7b3f9d3ec25ad78ee82297ba69905ea0fa094b8667faa2b8885e2187b3da80268aa1164761d7b0d6de206b676777348152b8ae1d4afed753bc63c739a5ca8ce7afb2b241a226bd9e502baba391b5b13f5054f070b65a9cf3a67063bfaa803ba390732cd03888f664023f12131414141FFFFFFFFF741d04d564e0b5674b0a183ace81452001b3fbb4214c77d42ca75376742c471e58f67307726d56a1032bd236610cbcbcd03d0d7a452900136897dc55bb3ce959d10d4e6a10fb635006bd8c41cd9ded2d3dfdd8f2e229590324a7370cb2124210b2330f4c56155caa09a2564932ceded8d92c79664dcdeb87faad7d3da006cc2ea267ee3df41e9677789cc5a8cc3b83add6491561b3047919e0648b1b2e97d7ad6f6c2aa80cab8e9ae10e1f75b1fdd0246151af709d259a6a0ed0b26bd711024965ecad7c41387de45443defc23b166884c3869092a520eceedeced2b00847bd256c9cf3b2c5e2227c15bd5e6ee7ef8a2f49236ad0eedf2c8a3b453cf6e0706f64285c526b372c4b1321245519d430540804a50b7ca8b6f1b34a2ec05cdbc24de7599af112d3e3c8db347e8799fe70f16e43c6566ba3aeb169463a3ecc486172deb2d9b80a3699c776e44fef20036bd946f1b4d054dd88a2c1aeb986199b0b2b7e58c42288824b74934d112fe1fc06e06b4d99fe1c5e725946b23210521e209cd507cce90b5f39a523f27e861f9e232aee50c3f585208b4573dcc0b897b6177f2ba20254fd5c50a033e849dee1b3a93bd2dc44ba8ca836cab2c2ae50e50b126284524fa0187af28628ff0face68d87709200329db1392852c8b8963fbe3d05fb1efe19f0ed5ca9fadc2f96f82187c24bb2512b2e85a66333a7e176605695211e1c8e0b9b9e82813e50654964945b1e1e66a90840396c7d10e23e47f364d2d3f660fa54598e18d1ca2ea4fe4f35a40a11f69f201c80b48eaee3e2e9b0eda63decf92bec08a70f731587d4ed0f218d5929285c8b2ccbc497e20db42de73885191fa453350335990184d8df805072f958d5354debda38f5421effaaafd6cb9b721ace74be0892d77679f62a4a126697cd35797f6858193da4ba1770c06aea2e5c59ec04b8ea26749e61b72ecdde403f3bc7e5e546cd799578cc939fa676dfd5e648576d4a06cbadb028adc2c0b461f145b2321f42e5e0f3b4fb898ecd461df07a6f5154067787bf74b5cc5c03704a1ce47494961931f0263b0aac32505102595957531a2de69dd71aac51f8a49902f81f21283dbe8e21e01e5d82517868826f86acf338d935aa6b4d5a25c8d540389b277dd9d64569d68baf0f71bd03dba45b92a7fc052601d1bd011a2fc6790a23f97c6fa5caeea040ab86841f268d39ce4f7caf01069df78bba098e04366492f0c2ac24f1bf16828752765fa523c9a4d42b71109d123e6be8c7b1ab3ccf8ea03404075fe1a9596f1bba1d267f9a7879ceece514818316c9c0583469d2367831fc42b517ea028a28df7c18d783d16ea2436cee2b15d52db68b5dfdee6b4d26f0905f9b030c911a04d078923a4136afea96eed6874462a482917353264cc9bee298f167ac65a6db4e4eda88044b39cc0b33183843eaa946564a00c3a0ab661f2c915e70bf0bb65bfbb6fa2eea20aed16bf2c1a1d00ec55fb4ff2f76b8e462ea70c19efa579c9ee78194b86708fdae66a9ce6e2cf3d366037798cfb50277ba6d2fd4866361022fd788ab7735b40b8b61d55e32243e06719e53992e9ac16c9c4b6e6933635c3c47c8f7e73e17dd54d0dd8aeba5d76de46894e7b3f9d3ec25ad78ee82297ba69905ea0fa094b8667faa2b8885e2187b3da80268aa1164761d7b0d6de206b676777348152b8ae1d4afed753bc63c739a5ca8ce7afb2b241a226bd9e502baba391b5b13f5054f070b65a9cf3a67063bfaa803ba390732cd03888f664023f12131414141FFFFFFFFF741d04d564e0b5674b0a183ace81452001b3fbb4214c77d42ca75376742c471e58f67307726d56a1032bd236610cbcbcd03d0d7a452900136897dc55bb3ce959d10d4e6a10fb635006bd8c41cd9ded2d3dfdd8f2e229590324a7370cb2124210b2330f4c56155caa09a2564932ceded8d92c79664dcdeb87faad7d3da006cc2ea267ee3df41e9677789cc5a8cc3b83add6491561b3047919e0648b1b2e97d7ad6f6c2aa80cab8e9ae10e1f75b1fdd0246151af709d259a6a0ed0b26bd711024965ecad7c41387de45443def"),
		fromStrW("0xc23b166884c3869092a520eceedeced2b00847bd256c9cf3b2c5e2227c15bd5e6ee7ef8a2f49236ad0eedf2c8a3b453cf6e0706f64285c526b372c4b1321245519d430540804a50b7ca8b6f1b34a2ec05cdbc24de7599af112d3e3c8db347e8799fe70f16e43c6566ba3aeb169463a3ecc486172deb2d9b80a3699c776e44fef20036bd946f1b4d054dd88a2c1aeb986199b0b2b7e58c42288824b74934d112fe1fc06e06b4d99fe1c5e725946b23210521e209cd507cce90b5f39a523f27e861f9e232aee50c3f585208b4573dcc0b897b6177f2ba20254fd5c50a033e849dee1b3a93bd2dc44ba8ca836cab2c2ae50e50b126284524fa0187af28628ff0face68d87709200329db1392852c8b8963fbe3d05fb1efe19f0ed5ca9fadc2f96f82187c24bb2512b2e85a66333a7e176605695211e1c8e0b9b9e82813e50654964945b1e1e66a90840396c7d10e23e47f364d2d3f660fa54598e18d1ca2ea4fe4f35a40a11f69f201c80b48eaee3e2e9b0eda63decf92bec08a70f731587d4ed0f218d5929285c8b2ccbc497e20db42de73885191fa453350335990184d8df805072f958d5354debda38f5421effaaafd6cb9b721ace74be0892d77679f62a4a126697cd35797f6858193da4ba1770c06aea2e5c59ec04b8ea26749e61b72ecdde403f3bc7e5e546cd799578cc939fa676dfd5e648576d4a06cbadb028adc2c0b461f145b2321f42e5e0f3b4fb898ecd461df07a6f5154067787bf74b5cc5c03704a1ce47494961931f0263b0aac32505102595957531a2de69dd71aac51f8a49902f81f21283dbe8e21e01e5d82517868826f86acf338d935aa6b4d5a25c8d540389b277dd9d64569d68baf0f71bd03dba45b92a7fc052601d1bd011a2fc6790a23f97c6fa5caeea040ab86841f268d39ce4f7caf01069df78bba098e04366492f0c2ac24f1bf16828752765fa523c9a4d42b71109d123e6be8c7b1ab3ccf8ea03404075fe1a9596f1bba1d267f9a7879ceece514818316c9c0583469d2367831fc42b517ea028a28df7c18d783d16ea2436cee2b15d52db68b5dfdee6b4d26f0905f9b030c911a04d078923a4136afea96eed6874462a482917353264cc9bee298f167ac65a6db4e4eda88044b39cc0b33183843eaa946564a00c3a0ab661f2c915e70bf0bb65bfbb6fa2eea20aed16bf2c1a1d00ec55fb4ff2f76b8e462ea70c19efa579c9ee78194b86708fdae66a9ce6e2cf3d366037798cfb50277ba6d2fd4866361022fd788ab7735b40b8b61d55e32243e06719e53992e9ac16c9c4b6e6933635c3c47c8f7e73e17dd54d0dd8aeba5d76de46894e7b3f9d3ec25ad78ee82297ba69905ea0fa094b8667faa2b8885e2187b3da80268aa1164761d7b0d6de206b676777348152b8ae1d4afed753bc63c739a5ca8ce7afb2b241a226bd9e502baba391b5b13f5054f070b65a9cf3a67063bfaa803ba390732cd03888f664023f12131414141FFFFFFFFF741d04d564e0b5674b0a183ace81452001b3fbb4214c77d42ca75376742c471e58f67307726d56a1032bd236610cbcbcd03d0d7a452900136897dc55bb3ce959d10d4e6a10fb635006bd8c41cd9ded2d3dfdd8f2e229590324a7370cb2124210b2330f4c56155caa09a2564932ceded8d92c79664dcdeb87faad7d3da006cc2ea267ee3df41e9677789cc5a8cc3b83add6491561b3047919e0648b1b2e97d7ad6f6c2aa80cab8e9ae10e1f75b1fdd0246151af709d259a6a0ed0b26bd711024965ecad7c41387de45443def"),
	},
]

#test
fn testDivW(t: &testing::T) {
	for (_, mut a) in divTests {
		mut z := []Word(nil)
		mut r := []Word(nil)
		divW(z, r, a.x, a.y)
		if cmpW(z, a.z) != 0 {
			t.Errorf("divW(z, _, {}, {})\n\tgot z = {}; want {}", a.x, a.y, z, a.z)
		}
	}
}

// Triggers the edge case of divBasic where
// the inaccurate estimate of the first word's quotient
// happens at the very beginning of the loop.
#test
fn testDivBasicEstimate(t: &testing::T) {
	// Choose u and v such that v is slightly larger than u >> N.
	// This tricks divBasic into choosing 1 as the first word
	// of the quotient. This works in both 32-bit and 64-bit settings.
	mut u := fromStrW("0x2b6c385a05be027f5c22005b63c42a1165b79ff510e1706b39f8489c1d28e57bb5ba4ef9fd9387a3e344402c0a453381")
	v := fromStrW("0x2b6c385a05be027f5c22005b63c42a1165b79ff510e1706c")

	mut q := makeW(nil, 8)
	divBasic(q, u, v)
	q = normW(q)
	s := str(utoaW(q, 16))
	if s != "fffffffffffffffffffffffffffffffffffffffffffffffb" {
		t.Errorf("incorrect quotient: {}", s)
	}
}

// Triggers an edge case of recursive division where
// the first division loop is never entered, and correcting
// the remainder takes exactly two iterations in the final loop.
#test
fn testRecDivEdge(t: &testing::T) {
	mut u := fromStrW("0xc23b166884c3869092a520eceedeced2b00847bd256c9cf3b2c5e2227c15bd5e6ee7ef8a2f49236ad0eedf2c8a3b453cf6e0706f64285c526b372c4b1321245519d430540804a50b7ca8b6f1b34a2ec05cdbc24de7599af112d3e3c8db347e8799fe70f16e43c6566ba3aeb169463a3ecc486172deb2d9b80a3699c776e44fef20036bd946f1b4d054dd88a2c1aeb986199b0b2b7e58c42288824b74934d112fe1fc06e06b4d99fe1c5e725946b23210521e209cd507cce90b5f39a523f27e861f9e232aee50c3f585208b4573dcc0b897b6177f2ba20254fd5c50a033e849dee1b3a93bd2dc44ba8ca836cab2c2ae50e50b126284524fa0187af28628ff0face68d87709200329db1392852c8b8963fbe3d05fb1efe19f0ed5ca9fadc2f96f82187c24bb2512b2e85a66333a7e176605695211e1c8e0b9b9e82813e50654964945b1e1e66a90840396c7d10e23e47f364d2d3f660fa54598e18d1ca2ea4fe4f35a40a11f69f201c80b48eaee3e2e9b0eda63decf92bec08a70f731587d4ed0f218d5929285c8b2ccbc497e20db42de73885191fa453350335990184d8df805072f958d5354debda38f5421effaaafd6cb9b721ace74be0892d77679f62a4a126697cd35797f6858193da4ba1770c06aea2e5c59ec04b8ea26749e61b72ecdde403f3bc7e5e546cd799578cc939fa676dfd5e648576d4a06cbadb028adc2c0b461f145b2321f42e5e0f3b4fb898ecd461df07a6f5154067787bf74b5cc5c03704a1ce47494961931f0263b0aac32505102595957531a2de69dd71aac51f8a49902f81f21283dbe8e21e01e5d82517868826f86acf338d935aa6b4d5a25c8d540389b277dd9d64569d68baf0f71bd03dba45b92a7fc052601d1bd011a2fc6790a23f97c6fa5caeea040ab86841f268d39ce4f7caf01069df78bba098e04366492f0c2ac24f1bf16828752765fa523c9a4d42b71109d123e6be8c7b1ab3ccf8ea03404075fe1a9596f1bba1d267f9a7879ceece514818316c9c0583469d2367831fc42b517ea028a28df7c18d783d16ea2436cee2b15d52db68b5dfdee6b4d26f0905f9b030c911a04d078923a4136afea96eed6874462a482917353264cc9bee298f167ac65a6db4e4eda88044b39cc0b33183843eaa946564a00c3a0ab661f2c915e70bf0bb65bfbb6fa2eea20aed16bf2c1a1d00ec55fb4ff2f76b8e462ea70c19efa579c9ee78194b86708fdae66a9ce6e2cf3d366037798cfb50277ba6d2fd4866361022fd788ab7735b40b8b61d55e32243e06719e53992e9ac16c9c4b6e6933635c3c47c8f7e73e17dd54d0dd8aeba5d76de46894e7b3f9d3ec25ad78ee82297ba69905ea0fa094b8667faa2b8885e2187b3da80268aa1164761d7b0d6de206b676777348152b8ae1d4afed753bc63c739a5ca8ce7afb2b241a226bd9e502baba391b5b13f5054f070b65a9cf3a67063bfaa803ba390732cd03888f664023f888741d04d564e0b5674b0a183ace81452001b3fbb4214c77d42ca75376742c471e58f67307726d56a1032bd236610cbcbcd03d0d7a452900136897dc55bb3ce959d10d4e6a10fb635006bd8c41cd9ded2d3dfdd8f2e229590324a7370cb2124210b2330f4c56155caa09a2564932ceded8d92c79664dcdeb87faad7d3da006cc2ea267ee3df41e9677789cc5a8cc3b83add6491561b3047919e0648b1b2e97d7ad6f6c2aa80cab8e9ae10e1f75b1fdd0246151af709d259a6a0ed0b26bd711024965ecad7c41387de45443defce53f66612948694a6032279131c257119ed876a8e805dfb49576ef5c563574115ee87050d92d191bc761ef51d966918e2ef925639400069e3959d8fe19f36136e947ff430bf74e71da0aa5923b00000000")
	mut v := fromStrW("0x838332321d443a3d30373d47301d47073847473a383d3030f25b3d3d3e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e00000000000000000041603038331c3d32f5303441e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e01c0a5459bfc7b9be9fcbb9d2383840464319434707303030f43a32f53034411c0a5459413820878787878787878787878787878787878787878787878787878787878787878787870630303a3a30334036605b923a6101f83638413943413960204337602043323801526040523241846038414143015238604060328452413841413638523c0240384141364036605b923a6101f83638413943413960204334602043323801526040523241846038414143015238604060328452413841413638523c02403841413638433030f25a8b83838383838383838383838383838383837d838383ffffffffffffffff838383838383838383000000000000000000030000007d26e27c7c8b83838383838383838383838383838383837d838383ffffffffffffffff83838383838383838383838383838383838383838383435960f535073030f3343200000000000000011881301938343030fa398383300000002300000000000000000000f11af4600c845252904141364138383c60406032414443095238010241414303364443434132305b595a15434160b042385341ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff47476043410536613603593a6005411c437405fcfcfcfcfcfcfc0000000000005a3b075815054359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	mut q := makeW(nil, 16)
	divW(q, q, u, v)
}

let mut sqrtTests: []argNN = [
	{
		z: fromStrW("8826011329359636045026685005893468423"),
		x: fromStrW("77898475985984649856573890023542803948012412025703971359635875092365382947"),
	},
	{
		z: fromStrW("303916"),
		x: fromStrW("92365382947"),
	},
	{
		z: fromStrW("1"),
		x: fromStrW("2"),
	},
	{
		z: fromStrW("1414"),
		x: fromStrW("1999990"),
	},
	{
		z: fromStrW("111111"),
		x: fromStrW("12345667890"),
	},
	{
		z: fromStrW("1111110"),
		x: fromStrW("1234566789999"),
	},
	{
		z: fromStrW("9609750390738731811756"),
		x: fromStrW("92347302572303208732805308602356328065738254"),
	},
]

#test
fn testSqrtW(t: &testing::T) {
	for (_, mut a) in sqrtTests {
		mut z := []Word(nil)
		sqrtW(z, a.x)
		if cmpW(z, a.z) != 0 {
			t.Errorf("sqrtW(z, _, {})\n\tgot z = {}; want {}", a.x, z, a.z)
		}
	}
}

struct mulRangeCase {
	a: u64
	b: u64
	r: str
}

let mulRanges: []mulRangeCase = [
	{0, 0, "0"},
	{1, 1, "1"},
	{1, 2, "2"},
	{1, 3, "6"},
	{10, 10, "10"},
	{0, 100, "0"},
	{0, 1e9, "0"},
	{1, 0, "1"},                                                                                              // empty range
	{100, 1, "1"},                                                                                            // empty range
	{1, 10, "3628800"},                                                                                       // 10!
	{1, 20, "2432902008176640000"},                                                                           // 20!
	{1, 100,

		"933262154439441526816992388562667004907159682643816214685929" +
			"638952175999932299156089414639761565182862536979208272237582" +
			"51185210916864000000000000000000000000", // 100!
	},
	{u64.Max - 0, u64.Max, "18446744073709551615"},
	{u64.Max - 1, u64.Max, "340282366920938463408034375210639556610"},
	{u64.Max - 2, u64.Max, "6277101735386680761794095221682035635525021984684230311930"},
	{u64.Max - 3, u64.Max, "115792089237316195360799967654821100226821973275796746098729803619699194331160"},
]

#test
fn testMulRange(t: &testing::T) {
	for i, c in mulRanges {
		mut z := []Word(nil)
		mulRangeW(z, c.a, c.b)
		r := str(utoaW(z, 10))
		if r != c.r {
			t.Errorf("{}: got {}; want {}", i, r, c.r)
		}
	}
}