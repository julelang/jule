// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/math/dim.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Returns the maximum of x-y or 0.
//
// Special cases are:
//	Dim(+Inf, +Inf) = NaN
//	Dim(-Inf, -Inf) = NaN
//	Dim(x, NaN) = Dim(NaN, x) = NaN
fn Dim(x: f64, y: f64): f64 {
	// The special cases result in NaN after the subtraction:
	//      +inf - +inf  = NaN
	//      -inf - -inf = NaN
	//       NaN - y    = NaN
	//         x - NaN  = NaN
	v := x - y
	if v <= 0 {
		// v is negative or 0
		ret 0
	}
	// v is positive or NaN
	ret v
}

// Returns the larger of x or y.
//
// Special cases are:
//	Max(x, +Inf) = Max(+Inf, x) = +Inf
//	Max(x, NaN)  = Max(NaN, x) = NaN
//	Max(+0, ±0)  = Max(±0, +0) = +0
//	Max(-0, -0)  = -0
fn Max(x: f64, y: f64): f64 {
	// special cases
	match {
	| IsInf(x, 1) | IsInf(y, 1):
		ret Inf(1)
	| IsNaN(x) | IsNaN(y):
		ret NaN()
	| x == 0 && x == y:
		if Signbit(x) {
			ret y
		}
		ret x
	}

	if x > y {
		ret x
	}
	ret y
}

// Returns the smaller of x or y.
//
// Special cases are:
//	Min(x, -Inf) = Min(-Inf, x) = -Inf
//	Min(x, NaN)  = Min(NaN, x) = NaN
//	Min(-0, ±0)  = Min(±0, -0) = -0
fn Min(x: f64, y: f64): f64 {
	// special cases
	match {
	| IsInf(x, -1) | IsInf(y, -1):
		ret Inf(-1)
	| IsNaN(x) | IsNaN(y):
		ret NaN()
	| x == 0 && x == y:
		if Signbit(x) {
			ret x
		}
		ret y
	}

	if x < y {
		ret x
	}
	ret y
}