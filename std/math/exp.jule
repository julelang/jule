// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/math/exp.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// The original C code, the long comment, and the constants
// below are from FreeBSD's /usr/src/lib/msun/src/e_exp.c
// and came with this notice. The Jule code is a simplified
// version of the original C.
//
// ====================================================
// Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
//
// Permission to use, copy, modify, and distribute this
// software is freely granted, provided that this notice
// is preserved.
// ====================================================
//
//
// exp(x)
// Returns the exponential of x.
//
// Method
//   1. Argument reduction:
//      Reduce x to an r so that |r| <= 0.5*ln2 ~ 0.34658.
//      Given x, find r and integer k such that
//
//               x = k*ln2 + r,  |r| <= 0.5*ln2.
//
//      Here r will be represented as r = hi-lo for better
//      accuracy.
//
//   2. Approximation of exp(r) by a special rational function on
//      the interval [0,0.34658]:
//      Write
//          R(r**2) = r*(exp(r)+1)/(exp(r)-1) = 2 + r*r/6 - r**4/360 + ...
//      We use a special Remez algorithm on [0,0.34658] to generate
//      a polynomial of degree 5 to approximate R. The maximum error
//      of this polynomial approximation is bounded by 2**-59. In
//      other words,
//          R(z) ~ 2.0 + P1*z + P2*z**2 + P3*z**3 + P4*z**4 + P5*z**5
//      (where z=r*r, and the values of P1 to P5 are listed below)
//      and
//          |                  5          |     -59
//          | 2.0+P1*z+...+P5*z   -  R(z) | <= 2
//          |                             |
//      The computation of exp(r) thus becomes
//                             2*r
//              exp(r) = 1 + -------
//                            R - r
//                                 r*R1(r)
//                     = 1 + r + ----------- (for better accuracy)
//                                2 - R1(r)
//      where
//                               2       4             10
//              R1(r) = r - (P1*r  + P2*r  + ... + P5*r   ).
//
//   3. Scale back to obtain exp(x):
//      From step 1, we have
//         exp(x) = 2**k * exp(r)
//
// Special cases:
//      exp(INF) is INF, exp(NaN) is NaN;
//      exp(-INF) is 0, and
//      for finite argument, only exp(0)=1 is exact.
//
// Accuracy:
//      according to an error analysis, the error is always less than
//      1 ulp (unit in the last place).
//
// Misc. info.
//      For IEEE double
//          if x >  7.09782712893383973096e+02 then exp(x) overflow
//          if x < -7.45133219101941108420e+02 then exp(x) underflow
//
// Constants:
// The hexadecimal values are the intended ones for the following
// constants. The decimal values may be used, provided that the
// compiler will convert from decimal to binary accurately enough
// to produce the hexadecimal values shown.

// Returns e**x, the base-e exponential of x.
//
// Special cases are:
//  Exp(Inf) = Inf
//  Exp(NaN) = NaN
//
// Very large values overflow to 0 or Inf.
// Very small values underflow to 1.
fn Exp(x: f64): f64 {
	const Ln2Hi = 6.93147180369123816490e-01
	const Ln2Lo = 1.90821492927058770002e-10
	const Log2E = 1.44269504088896338700e+00

	const Overflow = 7.09782712893383973096e+02
	const Underflow = -7.45133219101941108420e+02
	const NearZero = 1.0 / (1 << 28) // 2**-28

	// special cases
	match {
	| IsNaN(x) | IsInf(x, 1):
		ret x
	| IsInf(x, -1):
		ret 0
	| x > Overflow:
		ret Inf(1)
	| x < Underflow:
		ret 0
	| -NearZero < x && x < NearZero:
		ret 1 + x
	}

	// reduce; computed as r = hi - lo for extra precision.
	mut k := 0
	match {
	| x < 0:
		k = int(Log2E*x - 0.5)
	| x > 0:
		k = int(Log2E*x + 0.5)
	}
	hi := x - f64(k)*Ln2Hi
	lo := f64(k) * Ln2Lo

	// compute
	ret expmulti(hi, lo, k)
}

// Returns 2**x, the base-2 exponential of x.
// Special cases are the same as Exp.
fn Exp2(x: f64): f64 {
	const Ln2Hi = 6.93147180369123816490e-01
	const Ln2Lo = 1.90821492927058770002e-10

	const Overflow = 1.0239999999999999e+03
	const Underflow = -1.0740e+03

	// special cases
	match {
	| IsNaN(x) | IsInf(x, 1):
		ret x
	| IsInf(x, -1):
		ret 0
	| x > Overflow:
		ret Inf(1)
	| x < Underflow:
		ret 0
	}

	// argument reduction; x = r×lg(e) + k with |r| ≤ ln(2)/2.
	// computed as r = hi - lo for extra precision.
	mut k := 0
	match {
	| x > 0:
		k = int(x + 0.5)
	| x < 0:
		k = int(x - 0.5)
	}
	t := x - f64(k)
	hi := t * Ln2Hi
	lo := -t * Ln2Lo

	// compute
	ret expmulti(hi, lo, k)
}

// Returns e**r × 2**k where r = hi - lo and |r| ≤ ln(2)/2.
fn expmulti(hi: f64, lo: f64, k: int): f64 {
	const p1 = 1.66666666666666657415e-01  /* 0x3FC55555; 0x55555555 */
	const p2 = -2.77777777770155933842e-03 /* 0xBF66C16C; 0x16BEBD93 */
	const p3 = 6.61375632143793436117e-05  /* 0x3F11566A; 0xAF25DE2C */
	const p4 = -1.65339022054652515390e-06 /* 0xBEBBBD41; 0xC5D26BF1 */
	const p5 = 4.13813679705723846039e-08  /* 0x3E663769; 0x72BEA4D0 */

	r := hi - lo
	t := r * r
	c := r - t*(p1+t*(p2+t*(p3+t*(p4+t*p5))))
	y := 1 - ((lo - (r*c)/(2-c)) - hi)
	// TODO: make sure ldexp can handle boundary k
	ret Ldexp(y, k)
}