// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package bits implements bit counting and manipulation
// functions for the predeclared unsigned integer types.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/math/bits/bits.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Is the size of a uint in bits.
const UintSize = 32 << (^uint(0) >> 63) // 32 or 64

// --- leading_zeros ---

// Returns the number of leading zero bits in x; the result is UintSize for x == 0.
fn LeadingZeros(x: uint): int { ret UintSize - Len(x) }

// Returns the number of leading zero bits in x; the result is 8 for x == 0.
fn LeadingZeros8(x: u8): int { ret 8 - Len8(x) }

// Returns the number of leading zero bits in x; the result is 16 for x == 0.
fn LeadingZeros16(x: u16): int { ret 16 - Len16(x) }

// Returns the number of leading zero bits in x; the result is 32 for x == 0.
fn LeadingZeros32(x: u32): int { ret 32 - Len32(x) }

// Returns the number of leading zero bits in x; the result is 64 for x == 0.
fn LeadingZeros64(x: u64): int { ret 64 - Len64(x) }

// --- trailing_zeros ---

// See http://supertech.csail.mit.edu/papers/debruijn.pdf
const _DE_BRUIJN32 = 0x077CB531

static _DE_BRUIJN32_TAB: [32]byte = [
	0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
	31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9,
]

const _DE_BRUIJN64 = 0x03f79d71b4ca8b09

static _DE_BRUIJN64_TAB: [64]byte = [
	0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4,
	62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5,
	63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11,
	54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6,
]

// Returns the number of trailing zero bits in x; the result is UintSize for x == 0.
fn TrailingZeros(x: uint): int {
	if UintSize == 32 {
		ret TrailingZeros32(u32(x))
	}
	ret TrailingZeros64(u64(x))
}

// Returns the number of trailing zero bits in x; the result is 8 for x == 0.
fn TrailingZeros8(x: u8): int {
	ret int(ntz8tab[x])
}

// Returns the number of trailing zero bits in x; the result is 16 for x == 0.
fn TrailingZeros16(x: u16): int {
	if x == 0 {
		ret 16
	}
	// see comment in trailing_zeros64
	ret int(_DE_BRUIJN32_TAB[u32(x&-x)*_DE_BRUIJN32>>(32-5)])
}

// Returns the number of trailing zero bits in x; the result is 32 for x == 0.
fn TrailingZeros32(x: u32): int {
	if x == 0 {
		ret 32
	}
	// see comment in trailing_zeros64
	ret int(_DE_BRUIJN32_TAB[(x&-x)*_DE_BRUIJN32>>(32-5)])
}

// Returns the number of trailing zero bits in x; the result is 64 for x == 0.
fn TrailingZeros64(x: u64): int {
	if x == 0 {
		ret 64
	}
	// If popcount is fast, replace code below with return popcount(^x & (x - 1)).
	//
	// x & -x leaves only the right-most bit set in the word. Let k be the
	// index of that bit. Since only a single bit is set, the value is two
	// to the power of k. Multiplying by a power of two is equivalent to
	// left shifting, in this case by k bits. The de Bruijn (64 bit) constant
	// is such that all six bit, consecutive substrings are distinct.
	// Therefore, if we have a left shifted version of this constant we can
	// find by how many bits it was shifted by looking at which six bit
	// substring ended up at the top of the word.
	// (Knuth, volume 4, section 7.3.1)
	ret int(_DE_BRUIJN64_TAB[(x&-x)*_DE_BRUIJN64>>(64-6)])
}

// --- ones_count ---

const m0 = 0x5555555555555555 // 01010101 ...
const m1 = 0x3333333333333333 // 00110011 ...
const m2 = 0x0f0f0f0f0f0f0f0f // 00001111 ...
const m3 = 0x00ff00ff00ff00ff // etc.
const m4 = 0x0000ffff0000ffff

// Returns the number of one bits ("population count") in x.
fn OnesCount(x: uint): int {
	if UintSize == 32 {
		ret OnesCount32(u32(x))
	}
	ret OnesCount64(u64(x))
}

// Returns the number of one bits ("population count") in x.
fn OnesCount8(x: u8): int {
	ret int(pop8tab[x])
}

// Returns the number of one bits ("population count") in x.
fn OnesCount16(x: u16): int {
	ret int(pop8tab[x>>8] + pop8tab[x&0xff])
}

// Returns the number of one bits ("population count") in x.
fn OnesCount32(x: u32): int {
	ret int(pop8tab[x>>24] + pop8tab[x>>16&0xff] + pop8tab[x>>8&0xff] + pop8tab[x&0xff])
}

// Returns the number of one bits ("population count") in x.
fn OnesCount64(mut x: u64): int {
	// Implementation: Parallel summing of adjacent bits.
	// See "Hacker's Delight", Chap. 5: Counting Bits.
	// The following pattern shows the general approach:
	//
	//	x = x>>1&(m0&m) + x&(m0&m)
	//	x = x>>2&(m1&m) + x&(m1&m)
	//	x = x>>4&(m2&m) + x&(m2&m)
	//	x = x>>8&(m3&m) + x&(m3&m)
	//	x = x>>16&(m4&m) + x&(m4&m)
	//	x = x>>32&(m5&m) + x&(m5&m)
	//	ret int(x)
	//
	// Masking (& operations) can be left away when there's no
	// danger that a field's sum will carry over into the next
	// field: Since the result cannot be > 64, 8 bits is enough
	// and we can ignore the masks for the shifts by 8 and up.
	// Per "Hacker's Delight", the first line can be simplified
	// more, but it saves at best one instruction, so we leave
	// it alone for clarity.
	const m = 18446744073709551615 // 1<<64 - 1
	x = x>>1&(m0&m) + x&(m0&m)
	x = x>>2&(m1&m) + x&(m1&m)
	x = (x>>4 + x) & (m2 & m)
	x += x >> 8
	x += x >> 16
	x += x >> 32
	ret int(x) & (1<<7 - 1)
}

// --- rotate_left ---

// Returns the value of x rotated left by (k mod UintSize) bits.
// To rotate x right by k bits, call rotate_left(x, -k).
//
// This function's execution time does not depend on the inputs.
fn RotateLeft(x: uint, k: int): uint {
	if UintSize == 32 {
		ret uint(RotateLeft32(u32(x), k))
	}
	ret uint(RotateLeft64(u64(x), k))
}

// Returns the value of x rotated left by (k mod 8) bits.
// To rotate x right by k bits, call rotate_left8(x, -k).
//
// This function's execution time does not depend on the inputs.
fn RotateLeft8(x: u8, k: int): u8 {
	const n = 8
	s := uint(k) & (n - 1)
	ret x<<s | x>>(n-s)
}

// Returns the value of x rotated left by (k mod 16) bits.
// To rotate x right by k bits, call rotate_left16(x, -k).
//
// This function's execution time does not depend on the inputs.
fn RotateLeft16(x: u16, k: int): u16 {
	const n = 16
	s := uint(k) & (n - 1)
	ret x<<s | x>>(n-s)
}

// Returns the value of x rotated left by (k mod 32) bits.
// To rotate x right by k bits, call rotate_left32(x, -k).
//
// This function's execution time does not depend on the inputs.
fn RotateLeft32(x: u32, k: int): u32 {
	const n = 32
	s := uint(k) & (n - 1)
	ret x<<s | x>>(n-s)
}

// Returns the value of x rotated left by (k mod 64) bits.
// To rotate x right by k bits, call rotate_left64(x, -k).
//
// This function's execution time does not depend on the inputs.
fn RotateLeft64(x: u64, k: int): u64 {
	const n = 64
	s := uint(k) & (n - 1)
	ret x<<s | x>>(n-s)
}

// --- reverse ---

// Returns the value of x with its bits in reversed order.
fn Reverse(x: uint): uint {
	if UintSize == 32 {
		ret uint(Reverse32(u32(x)))
	}
	ret uint(Reverse64(u64(x)))
}

// Returns the value of x with its bits in reversed order.
fn Reverse8(x: u8): u8 {
	ret rev8tab[x]
}

// Returns the value of x with its bits in reversed order.
fn Reverse16(x: u16): u16 {
	ret u16(rev8tab[x>>8]) | u16(rev8tab[x&0xff])<<8
}

// Returns the value of x with its bits in reversed order.
fn Reverse32(mut x: u32): u32 {
	const m = 1<<32 - 1
	x = x>>1&(m0&m) | x&(m0&m)<<1
	x = x>>2&(m1&m) | x&(m1&m)<<2
	x = x>>4&(m2&m) | x&(m2&m)<<4
	ret ReverseBytes32(x)
}

// Returns the value of x with its bits in reversed order.
fn Reverse64(mut x: u64): u64 {
	const m = 18446744073709551615 // 1<<64 - 1
	x = x>>1&(m0&m) | x&(m0&m)<<1
	x = x>>2&(m1&m) | x&(m1&m)<<2
	x = x>>4&(m2&m) | x&(m2&m)<<4
	ret ReverseBytes64(x)
}

// --- reverse_bytes ---

// Returns the value of x with its bytes in reversed order.
//
// This function's execution time does not depend on the inputs.
fn ReverseBytes(x: uint): uint {
	if UintSize == 32 {
		ret uint(ReverseBytes32(u32(x)))
	}
	ret uint(ReverseBytes64(u64(x)))
}

// Returns the value of x with its bytes in reversed order.
//
// This function's execution time does not depend on the inputs.
fn ReverseBytes16(x: u16): u16 {
	ret x>>8 | x<<8
}

// Returns the value of x with its bytes in reversed order.
//
// This function's execution time does not depend on the inputs.
fn ReverseBytes32(mut x: u32): u32 {
	const m = 1<<32 - 1
	x = x>>8&(m3&m) | x&(m3&m)<<8
	ret x>>16 | x<<16
}

// Returns the value of x with its bytes in reversed order.
//
// This function's execution time does not depend on the inputs.
fn ReverseBytes64(mut x: u64): u64 {
	const m = 18446744073709551615 // 1<<64 - 1
	x = x>>8&(m3&m) | x&(m3&m)<<8
	x = x>>16&(m4&m) | x&(m4&m)<<16
	ret x>>32 | x<<32
}

// --- len ---

// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
fn Len(x: uint): int {
	if UintSize == 32 {
		ret Len32(u32(x))
	}
	ret Len64(u64(x))
}

// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
fn Len8(x: u8): int {
	ret int(len8tab[x])
}

// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
fn Len16(mut x: u16): (n: int) {
	if x >= 1<<8 {
		x >>= 8
		n = 8
	}
	ret n + int(len8tab[x])
}

// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
fn Len32(mut x: u32): (n: int) {
	if x >= 1<<16 {
		x >>= 16
		n = 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
fn Len64(mut x: u64): (n: int) {
	if x >= 1<<32 {
		x >>= 32
		n = 32
	}
	if x >= 1<<16 {
		x >>= 16
		n += 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

// --- Add with carry ---

// Add returns the sum with carry of x, y and carry: sum = x + y + carry.
// The carry input must be 0 or 1; otherwise the behavior is undefined.
// The carryOut output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
fn Add(x: uint, y: uint, carry: uint): (sum: uint, carryOut: uint) {
	if UintSize == 32 {
		s32, c32 := Add32(u32(x), u32(y), u32(carry))
		ret uint(s32), uint(c32)
	}
	s64, c64 := Add64(u64(x), u64(y), u64(carry))
	ret uint(s64), uint(c64)
}

// Returns the sum with carry of x, y and carry: sum = x + y + carry.
// The carry input must be 0 or 1; otherwise the behavior is undefined.
// The carryOut output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
fn Add32(x: u32, y: u32, carry: u32): (sum: u32, carryOut: u32) {
	sum64 := u64(x) + u64(y) + u64(carry)
	sum = u32(sum64)
	carryOut = u32(sum64 >> 32)
	ret
}

// Returns the sum with carry of x, y and carry: sum = x + y + carry.
// The carry input must be 0 or 1; otherwise the behavior is undefined.
// The carryOut output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
fn Add64(x: u64, y: u64, carry: u64): (sum: u64, carryOut: u64) {
	sum = x + y + carry
	// The sum will overflow if both top bits are set (x & y) or if one of them
	// is (x | y), and a carry from the lower place happened. If such a carry
	// happens, the top bit will be 1 + 0 + 1 = 0 (& ^sum).
	carryOut = ((x & y) | ((x | y) & ^sum)) >> 63
	ret
}

// --- Subtract with borrow ---

// Returns the difference of x, y and borrow: diff = x - y - borrow.
// The borrow input must be 0 or 1; otherwise the behavior is undefined.
// The borrowOut output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
fn Sub(x: uint, y: uint, borrow: uint): (diff: uint, borrowOut: uint) {
	if UintSize == 32 {
		d32, b32 := Sub32(u32(x), u32(y), u32(borrow))
		ret uint(d32), uint(b32)
	}
	d64, b64 := Sub64(u64(x), u64(y), u64(borrow))
	ret uint(d64), uint(b64)
}

// Returns the difference of x, y and borrow, diff = x - y - borrow.
// The borrow input must be 0 or 1; otherwise the behavior is undefined.
// The borrowOut output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
fn Sub32(x: u32, y: u32, borrow: u32): (diff: u32, borrowOut: u32) {
	diff = x - y - borrow
	// The difference will underflow if the top bit of x is not set and the top
	// bit of y is set (^x & y) or if they are the same (^(x ^ y)) and a borrow
	// from the lower place happens. If that borrow happens, the result will be
	// 1 - 1 - 1 = 0 - 0 - 1 = 1 (& diff).
	borrowOut = ((^x & y) | (^(x ^ y) & diff)) >> 31
	ret
}

// Returns the difference of x, y and borrow: diff = x - y - borrow.
// The borrow input must be 0 or 1; otherwise the behavior is undefined.
// The borrowOut output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
fn Sub64(x: u64, y: u64, borrow: u64): (diff: u64, borrowOut: u64) {
	diff = x - y - borrow
	// See sub32 for the bit logic.
	borrowOut = ((^x & y) | (^(x ^ y) & diff)) >> 63
	ret
}

// --- Full-width multiply ---

// Returns the full-width product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
fn Mul(x: uint, y: uint): (hi: uint, lo: uint) {
	if UintSize == 32 {
		h, l := Mul32(u32(x), u32(y))
		ret uint(h), uint(l)
	}
	h, l := Mul64(u64(x), u64(y))
	ret uint(h), uint(l)
}

// Returns the 64-bit product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
fn Mul32(x: u32, y: u32): (hi: u32, lo: u32) {
	tmp := u64(x) * u64(y)
	hi, lo = u32(tmp>>32), u32(tmp)
	ret
}

// Returns the 128-bit product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
fn Mul64(x: u64, y: u64): (hi: u64, lo: u64) {
	const mask32 = 1<<32 - 1
	x0 := x & mask32
	x1 := x >> 32
	y0 := y & mask32
	y1 := y >> 32
	w0 := x0 * y0
	t := x1*y0 + w0>>32
	mut w1 := t & mask32
	w2 := t >> 32
	w1 += x0 * y1
	hi = x1*y1 + w2 + w1>>32
	lo = x * y
	ret
}

// --- Full-width divide ---

// Returns the quotient and remainder of (hi, lo) divided by y:
// quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper
// half in parameter hi and the lower half in parameter lo.
// div panics for y == 0 (division by zero) or y <= hi (quotient overflow).
fn Div(hi: uint, lo: uint, y: uint): (quo: uint, rem: uint) {
	if UintSize == 32 {
		q, r := Div32(u32(hi), u32(lo), u32(y))
		ret uint(q), uint(r)
	}
	q, r := Div64(u64(hi), u64(lo), u64(y))
	ret uint(q), uint(r)
}

// Returns the quotient and remainder of (hi, lo) divided by y:
// quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper
// half in parameter hi and the lower half in parameter lo.
// div32 panics for y == 0 (division by zero) or y <= hi (quotient overflow).
fn Div32(hi: u32, lo: u32, y: u32): (quo: u32, rem: u32) {
	if y == 0 {
		panic(divideError)
	}
	if y != 0 && y <= hi {
		panic(overflowError)
	}
	z := u64(hi)<<32 | u64(lo)
	quo, rem = u32(z/u64(y)), u32(z%u64(y))
	ret
}

// Returns the quotient and remainder of (hi, lo) divided by y:
// quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper
// half in parameter hi and the lower half in parameter lo.
// div64 panics for y == 0 (division by zero) or y <= hi (quotient overflow).
fn Div64(hi: u64, lo: u64, mut y: u64): (quo: u64, rem: u64) {
	const two32 = 1 << 32
	const mask32 = two32 - 1
	if y == 0 {
		panic(divideError)
	}
	if y <= hi {
		panic(overflowError)
	}

	s := uint(LeadingZeros64(y))
	y <<= s

	yn1 := y >> 32
	yn0 := y & mask32
	un32 := hi<<s | lo>>(64-s)
	un10 := lo << s
	un1 := un10 >> 32
	un0 := un10 & mask32
	mut q1 := un32 / yn1
	mut rhat := un32 - q1*yn1

	for q1 >= two32 || q1*yn0 > two32*rhat+un1 {
		q1--
		rhat += yn1
		if rhat >= two32 {
			break
		}
	}

	un21 := un32*two32 + un1 - q1*y
	mut q0 := un21 / yn1
	rhat = un21 - q0*yn1

	for q0 >= two32 || q0*yn0 > two32*rhat+un0 {
		q0--
		rhat += yn1
		if rhat >= two32 {
			break
		}
	}

	ret q1*two32 + q0, (un21*two32+un0-q0*y)>>s
}

// Returns the remainder of (hi, lo) divided by y. rem panics for
// y == 0 (division by zero) but, unlike div, it doesn't panic on a
// quotient overflow.
fn Rem(hi: uint, lo: uint, y: uint): uint {
	if UintSize == 32 {
		ret uint(Rem32(u32(hi), u32(lo), u32(y)))
	}
	ret uint(Rem64(u64(hi), u64(lo), u64(y)))
}

// Returns the remainder of (hi, lo) divided by y. rem32 panics
// for y == 0 (division by zero) but, unlike div32, it doesn't panic
// on a quotient overflow.
fn Rem32(hi: u32, lo: u32, y: u32): u32 {
	ret u32((u64(hi)<<32 | u64(lo)) % u64(y))
}

// Returns the remainder of (hi, lo) divided by y. rem64 panics
// for y == 0 (division by zero) but, unlike div64, it doesn't panic
// on a quotient overflow.
fn Rem64(hi: u64, lo: u64, y: u64): u64 {
	// We scale down hi so that hi < y, then use div64 to compute the
	// rem with the guarantee that it won't panic on quotient overflow.
	// Given that
	//	hi ≡ hi%y    (mod y)
	// we have
	//	hi<<64 + lo ≡ (hi%y)<<64 + lo    (mod y)
	_, rem := Div64(hi%y, lo, y)
	ret rem
}