// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Source of uniformly-distributed pseudo-random u64 values in the range [0, 1<<64).
// It is not safe for concurrent use by multiple threads.
trait Source {
	fn U64(*self): u64
}

// Default source implementation for common use.
struct source {
	mut seed: u64
}

const (
	seedMask = 1<<63 - 1
	nextMask = 0x41C64E6D
)

impl Source for source {
	fn U64(*self): u64 {
		const Magic = 0x3039
		self.setSeed((self.seed*nextMask + Magic) & seedMask)
		ret self.seed
	}
}

impl source {
	fn setSeed(*self, seed: u64) {
		self.seed = seed & seedMask
		self.seed += self.seed * (seed >> (1 << 3))
	}
}

// Returns new default source by seed.
//
// The order and numbers produced vary depending on the seed.
// Since PRNGs are inherently deterministic, using a fixed seed
// means your program will generate the same numbers every time.
//
// If you want to achieve randomness somehow, use a variable seed.
// A simple solution for seeds that will create the illusion of randomness
// is to use time. Unix-time seconds would be a simple seed solution.
fn NewSource(seed: u64): Source {
	mut s := source{}
	s.setSeed(seed)
	ret s
}