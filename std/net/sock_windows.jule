// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use integ "std/jule/integrated"
use "std/mem"
use "std/sys"
use "std/time"

fn lastErrorCode(): sys::Errno {
	ret sys::Errno(sys::WSAGetLastError())
}

fn setSocketBlockingMode(handle: poll::NetHandle, mode: integ::UnsignedLong)! {
	FIONBIO := 0x80000000 | (unsafe { (integ::Long)(mem::SizeOf(integ::UnsignedLong) & 0x7F) } << 16) | ('f' << 8) | 126
	size := u32(mem::SizeOf(u32))
	r := u32(0)
	unsafe {
		if sys::WSAIoctl(u64(handle), u32(FIONBIO), (*byte)(&mode), size, nil, 0, &r) == sys::SOCKET_ERROR {
			error(lastErrorCode())
		}
	}
}

fn closeSocketBlockingMode(handle: poll::NetHandle)! {
	setSocketBlockingMode(handle, 1) else { error(error) }
}

fn openSocketBlockingMode(handle: poll::NetHandle)! {
	setSocketBlockingMode(handle, 0) else { error(error) }
}

unsafe fn connectSocket(handle: poll::NetHandle, sockAddr: *sys::Sockaddr, sockLen: uint, timeout: time::Duration)! {
	if timeout == 0 {
		connectSocketNoTimeout(handle, sockAddr, sockLen) else { error(error) }
		ret
	}
	tv, ok := timevalFromDuration(timeout)
	if !ok {
		error(ErrInvalidTimeout)
	}
	if tv.Sec == 0 && tv.Usec == 0 {
		connectSocketNoTimeout(handle, sockAddr, sockLen) else { error(error) }
		ret
	}
	closeSocketBlockingMode(handle) else { error(error) }
	if sys::Connect(handle, sockAddr, sockLen) != sys::SOCKET_ERROR {
		ret
	}
	err := lastErrorCode()
	if err != sys::WSAEWOULDBLOCK {
		error(err)
	}
	fdW := sys::Fd{}
	mut fdE := sys::Fd{}
	sys::FdZero(&fdW)
	sys::FdSet(handle, &fdW)
	sys::FdZero(&fdE)
	sys::FdSet(handle, &fdE)
	res := sys::Select(0, nil, &fdW, &fdE, &tv)
	if res <= 0 {
		if res == 0 {
			// Timeout.
			error(ErrTimeout)
		}
		error(lastErrorCode())
	}
	if sys::FdIsset(handle, &fdE) != 0 {
		mut opt := (integ::Int)(0)
		mut optLen := (integ::Int)(mem::SizeOf(opt))
		sys::Getsockopt(handle, sys::SOL_SOCKET, sys::SO_ERROR, (*integ::Char)(&opt), &optLen)
		error(int(opt))
	}
	openSocketBlockingMode(handle) else { error(error) }
}

fn setSocketTimeout(handle: poll::NetHandle, scope: int, timeout: time::Duration)! {
	tv, ok := timevalFromDuration(timeout)
	if !ok {
		error(ErrInvalidTimeout)
	}
	unsafe {
		if sys::Setsockopt(handle, sys::SOL_SOCKET, scope, (*integ::Char)(&tv), int(mem::SizeOf(tv))) < 0 {
			error(lastErrorCode())
		}
	}
}

unsafe fn accept(h: poll::NetHandle, addr: *sys::Sockaddr, addrLen: *poll::AddrLen): (poll::NetHandle, ok: bool) {
	for {
		handle := sys::Accept(h, addr, addrLen)
		ok = handle != sys::INVALID_SOCKET
		if ok {
			ret handle, ok
		}
		// Sometimes we see WSAECONNRESET and ERROR_NETNAME_DELETED is
		// returned here. These happen if connection reset is received
		// before Accept could complete. These errors relate to new
		// connection, not to Accept, so ignore broken connection and
		// try Accept again for more connections.
		err := lastErrorCode()
		if err == sys::ERROR_NETNAME_DELETED || err == sys::WSAECONNRESET {
			// ignore these and try again
			continue
		}
		ret 0, false
	}
}

fn init() {
	mut wsaData := sys::WsaData{}
	verReq := sys::MakeWord(2, 2)
	r := unsafe { sys::WSAStartup(verReq, &wsaData) }
	if r != 0 {
		panic("net: WSAStartup failed (Windows specific)")
	}
}