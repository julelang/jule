// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use integ "std/jule/integrated"
use "std/mem"
use "std/sys"
use "std/time"

fn lastErrorCode(): sys::Errno {
	ret sys::Errno(sys::WSAGetLastError())
}

fn setSocketBlockingMode(handle: poll::NetHandle, mode: integ::UnsignedLong)! {
	FIONBIO := 0x80000000 | (unsafe { (integ::Long)(mem::SizeOf(integ::UnsignedLong) & 0x7F) } << 16) | ('f' << 8) | 126
	size := u32(mem::SizeOf(u32))
	r := u32(0)
	unsafe {
		if sys::WSAIoctl(u64(handle), u32(FIONBIO), (*byte)(&mode), size, nil, 0, &r) == sys::SOCKET_ERROR {
			error(lastErrorCode())
		}
	}
}

fn closeSocketBlockingMode(handle: poll::NetHandle)! {
	setSocketBlockingMode(handle, 1)?
}

fn openSocketBlockingMode(handle: poll::NetHandle)! {
	setSocketBlockingMode(handle, 0)?
}

fn connectSocket(handle: poll::NetHandle, sockAddr: uintptr, sockLen: sys::Socklen, timeout: time::Duration)! {
	if timeout == 0 {
		connectSocketNoTimeout(handle, sockAddr, sockLen)?
		ret
	}
	mut tv, ok := timevalFromDuration(timeout)
	if !ok {
		error(ErrInvalidTimeout)
	}
	if tv.Sec == 0 && tv.Usec == 0 {
		connectSocketNoTimeout(handle, sockAddr, sockLen)?
		ret
	}
	closeSocketBlockingMode(handle)?
	sys::Connect(handle, sockAddr, sockLen) else {
		if error != sys::WSAEWOULDBLOCK {
			error(error)
		}
		goto Select
	}
	ret
Select:
	mut fdW := sys::FdSet{}
	mut fdE := sys::FdSet{}
	fdW.Zero()
	fdW.Set(handle)
	fdE.Zero()
	fdE.Set(handle)
	res := sys::Select(0, nil, &fdW, &fdE, &tv)?
	if res == 0 {
		// Timeout.
		error(ErrTimeout)
	}
	if fdE.IsSet(handle) {
		mut opt := 0
		mut optLen := sys::Socklen(mem::SizeOf(opt))
		sys::Getsockopt(handle, sys::SOL_SOCKET, sys::SO_ERROR, uintptr(&opt), optLen)!
		error(int(opt))
	}
	openSocketBlockingMode(handle)?
}

fn setSocketTimeout(handle: poll::NetHandle, scope: int, timeout: time::Duration)! {
	mut dwordTimeout := u32(timeout / time::Millisecond)
	sys::Setsockopt(handle, sys::SOL_SOCKET, scope, uintptr(&dwordTimeout), 4)?
}

fn accept(h: poll::NetHandle, addr: uintptr, addrlen: sys::Socklen)!: poll::NetHandle {
	for {
		ret sys::Accept(h, addr, addrlen) else {
			// Sometimes we see WSAECONNRESET and ERROR_NETNAME_DELETED is
			// returned here. These happen if connection reset is received
			// before Accept could complete. These errors relate to new
			// connection, not to Accept, so ignore broken connection and
			// try Accept again for more connections.
			if error == sys::ERROR_NETNAME_DELETED || error == sys::WSAECONNRESET {
				// ignore these and try again
				continue
			}
			error(error)
		}
	}
}

fn init() {
	mut wsaData := sys::WsaData{}
	verReq := sys::MakeWord(2, 2)
	sys::WSAStartup(verReq, &wsaData) else {
		panic("net: WSAStartup failed (Windows specific)")
	}
}