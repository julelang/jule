// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package url parses URLs and implements query escaping.
//
// See RFC 3986. This package generally follows RFC 3986, except where
// it deviates for compatibility reasons.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/05cbbf985fed823a174bf95cc78a7d44f948fdab/src/net/url/url.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use "std/conv"
use "std/errors"
use "std/fmt"
use "std/path"
use "std/slices"
use "std/strings"
use "std/unsafe"

const upperhex = "0123456789ABCDEF"

// Encoding modes.
const (
	encodingPath = iota + 1
	encodingPathSegment
	encodingHost
	encodingZone
	encodingUserPassword
	encodingQueryComponent
	encodingFragment
)

// Reports an error and the operation and URL that caused it.
struct Error {
	Op:  str
	URL: str
	Err: any
}

impl Error {
	fn Str(self): str { ret fmt::Sprintf("{} {}: {}", self.Op, self.URL, self.Err) }
}

type EscapeError: str

impl EscapeError {
	fn Str(self): str {
		ret "invalid URL escape " + conv::Quote(str(*self))
	}
}

type InvalidHostError: str

impl InvalidHostError {
	fn Str(self): str {
		ret "invalid character " + conv::Quote(str(*self)) + " in host name"
	}
}

// Returns true if the specified character should be escaped when
// appearing in a URL string, according to RFC 3986.
//
// Please be informed that for now it does not check all reserved characters correctly.
fn shouldEscape(c: byte, mode: int): bool {
	// §2.3 Unreserved characters (alphanum)
	if 'a' <= c && c <= 'z' || 'A' <= c && c <= 'Z' || '0' <= c && c <= '9' {
		ret false
	}

	if mode == encodingHost || mode == encodingZone {
		// §3.2.2 Host allows
		//	sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
		// as part of reg-name.
		// We add : because we include :port as part of host.
		// We add [ ] because we include [ipv6]:port as part of host.
		// We add < > because they're the only characters left that
		// we could possibly allow, and Parse will reject them if we
		// escape them (because hosts can't use %-encoding for
		// ASCII bytes).
		match c {
		| '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | ':' | '[' | ']' | '<' | '>' | '"':
			ret false
		}
	}

	match c {
	| '-' | '_' | '.' | '~': // §2.3 Unreserved characters (mark)
		ret false
	| '$' | '&' | '+' | ',' | '/' | ':' | ';' | '=' | '?' | '@': // §2.2 Reserved characters (reserved)
		// Different sections of the URL allow a few of
		// the reserved characters to appear unescaped.
		match mode {
		| encodingPath: // §3.3
			// The RFC allows : @ & = + $ but saves / ; , for assigning
			// meaning to individual path segments. This package
			// only manipulates the path as a whole, so we allow those
			// last three as well. That leaves only ? to escape.
			ret c == '?'
		| encodingPathSegment: // §3.3
			// The RFC allows : @ & = + $ but saves / ; , for assigning
			// meaning to individual path segments.
			ret c == '/' || c == ';' || c == ',' || c == '?'
		| encodingUserPassword: // §3.2.1
			// The RFC allows ';', ':', '&', '=', '+', '$', and ',' in
			// userinfo, so we must escape only '@', '/', and '?'.
			// The parsing of userinfo treats ':' as special so we must escape
			// that too.
			ret c == '@' || c == '/' || c == '?' || c == ':'
		| encodingQueryComponent: // §3.4
			// The RFC reserves (so we must escape) everything.
			ret true
		| encodingFragment: // §4.1
			// The RFC text is silent but the grammar allows
			// everything, so escape nothing.
			ret false
		}
	}

	if mode == encodingFragment {
		// RFC 3986 §2.2 allows not escaping sub-delims. A subset of sub-delims are
		// included in reserved from RFC 2396 §2.2. The remaining sub-delims do not
		// need to be escaped. To minimize potential breakage, we apply two restrictions:
		// (1) we always escape sub-delims outside of the fragment, and (2) we always
		// escape single quote to avoid breaking callers that had previously assumed that
		// single quotes would be escaped. See Go's issue #19917.
		match c {
		| '!' | '(' | ')' | '*':
			ret false
		}
	}

	// Everything else must be escaped.
	ret true
}

// Unescapes a string; the mode specifies
// which section of the URL string is being unescaped.
fn unescape(mut s: str, mode: int)!: str {
	// Count %, check that they're well-formed.
	mut n := 0
	mut hasPlus := false
	mut i := 0
	for i < len(s) {
		match s[i] {
		| '%':
			n++
			if i+2 >= len(s) || !ishex(s[i+1]) || !ishex(s[i+2]) {
				s = s[i:]
				if len(s) > 3 {
					s = s[:3]
				}
				error(EscapeError(s))
			}
			// Per https://tools.ietf.org/html/rfc3986#page-21
			// in the host component %-encoding can only be used
			// for non-ASCII bytes.
			// But https://tools.ietf.org/html/rfc6874#section-2
			// introduces %25 being allowed to escape a percent sign
			// in IPv6 scoped-address literals. Yay.
			if mode == encodingHost && unhex(s[i+1]) < 8 && s[i:i+3] != "%25" {
				error(EscapeError(s[i : i+3]))
			}
			if mode == encodingZone {
				// RFC 6874 says basically "anything goes" for zone identifiers
				// and that even non-ASCII can be redundantly escaped,
				// but it seems prudent to restrict %-escaped bytes here to those
				// that are valid host name bytes in their unescaped form.
				// That is, you can use escaping in the zone identifier but not
				// to introduce bytes you couldn't just write directly.
				// But Windows puts spaces here! Yay.
				v := unhex(s[i+1])<<4 | unhex(s[i+2])
				if s[i:i+3] != "%25" && v != ' ' && shouldEscape(v, encodingHost) {
					error(EscapeError(s[i : i+3]))
				}
			}
			i += 3
		| '+':
			hasPlus = mode == encodingQueryComponent
			i++
		|:
			if (mode == encodingHost || mode == encodingZone) && s[i] < 0x80 && shouldEscape(s[i], mode) {
				error(InvalidHostError(s[i : i+1]))
			}
			i++
		}
	}

	if n == 0 && !hasPlus {
		ret s
	}
	mut t := strings::Builder{}
	t.Grow(len(s) - 2*n)
	i = 0
	for i < len(s); i++ {
		match s[i] {
		| '%':
			t.WriteByte(unhex(s[i+1])<<4 | unhex(s[i+2]))!
			i += 2
		| '+':
			if mode == encodingQueryComponent {
				t.WriteByte(' ')!
			} else {
				t.WriteByte('+')!
			}
		|:
			t.WriteByte(s[i])!
		}
	}
	ret t.Str()
}

fn ishex(c: byte): bool {
	match {
	| '0' <= c && c <= '9':
		ret true
	| 'a' <= c && c <= 'f':
		ret true
	| 'A' <= c && c <= 'F':
		ret true
	|:
		ret false
	}
}

fn unhex(c: byte): byte {
	match {
	| '0' <= c && c <= '9':
		ret c - '0'
	| 'a' <= c && c <= 'f':
		ret c - 'a' + 10
	| 'A' <= c && c <= 'F':
		ret c - 'A' + 10
	|:
		ret 0
	}
}

// Does the inverse transformation of [QueryEscape],
// converting each 3-byte encoded substring of the form "%AB" into the
// hex-decoded byte 0xAB.
// It returns an error if any % is not followed by two hexadecimal digits.
fn QueryUnescape(s: str)!: str {
	ret unescape(s, encodingQueryComponent) else { error(error) }
}

// Does the inverse transformation of [PathEscape],
// converting each 3-byte encoded substring of the form "%AB" into the
// hex-decoded byte 0xAB. It returns an error if any % is not followed
// by two hexadecimal digits.
//
// It is identical to [QueryUnescape] except that it does not unescape '+' to ' ' (space).
fn PathUnescape(s: str)!: str {
	ret unescape(s, encodingPathSegment) else { error(error) }
}

fn escape(s: str, mode: int): str {
	mut spaceCount, mut hexCount := 0, 0
	mut i := 0
	for i < len(s); i++ {
		c := s[i]
		if shouldEscape(c, mode) {
			if c == ' ' && mode == encodingQueryComponent {
				spaceCount++
			} else {
				hexCount++
			}
		}
	}

	if spaceCount == 0 && hexCount == 0 {
		ret s
	}

	required := len(s) + 2*hexCount
	mut t := make([]byte, required)

	if hexCount == 0 {
		copy(t, s)
		i = 0
		for i < len(s); i++ {
			if s[i] == ' ' {
				t[i] = '+'
			}
		}
		ret unsafe::StrFromBytes(t)
	}

	mut j := 0
	i = 0
	for i < len(s); i++ {
		c := s[i]
		match {
		| c == ' ' && mode == encodingQueryComponent:
			t[j] = '+'
			j++
		| shouldEscape(c, mode):
			t[j] = '%'
			t[j+1] = upperhex[c>>4]
			t[j+2] = upperhex[c&15]
			j += 3
		|:
			t[j] = c
			j++
		}
	}
	ret unsafe::StrFromBytes(t)
}

// Reports whether s is a valid encoded path or fragment, according to mode.
// It must not contain any bytes that require escaping during encoding.
fn validEncoded(s: str, mode: int): bool {
	mut i := 0
	for i < len(s); i++ {
		// RFC 3986, Appendix A.
		// pchar = unreserved / pct-encoded / sub-delims / ":" / "@".
		// shouldEscape is not quite compliant with the RFC,
		// so we check the sub-delims ourselves and let
		// shouldEscape handle the others.
		b := s[i]
		match b {
		| '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | ':' | '@':
			// ok
		| '[' | ']':
			// ok - not specified in RFC 3986 but left alone by modern browsers
		| '%':
			// ok - percent encoded, will decode
		|:
			if shouldEscape(b, mode) {
				ret false
			}
		}
	}
	ret true
}

// Applies special path segments from refs and applies them to base, per RFC 3986.
fn resolvePath(base: str, ref: str): str {
	mut full := ""
	if ref == "" {
		full = base
	} else if ref[0] != '/' {
		i := strings::LastIndex(base, "/")
		full = base[:i+1] + ref
	} else {
		full = ref
	}
	if full == "" {
		ret ""
	}

	mut elem := ""
	mut dst := strings::Builder{}
	mut first := true
	mut remaining := full
	// We want to return a leading '/', so write it now.
	dst.WriteByte('/')!
	mut found := true
	for found {
		elem, remaining, found = strings::Cut(remaining, "/")
		if elem == "." {
			first = false
			// drop
			continue
		}

		if elem == ".." {
			// Ignore the leading '/' we already wrote.
			s := dst.Str()[1:]
			index := strings::LastIndexByte(s, '/')

			dst.Clear()
			dst.WriteByte('/')!
			if index == -1 {
				first = true
			} else {
				dst.WriteStr(s[:index])!
			}
		} else {
			if !first {
				dst.WriteByte('/')!
			}
			dst.WriteStr(elem)!
			first = false
		}
	}

	if elem == "." || elem == ".." {
		dst.WriteByte('/')!
	}

	// We wrote an initial '/', but we don't want two.
	mut r := dst.Str()
	if len(r) > 1 && r[1] == '/' {
		r = r[1:]
	}
	ret r
}

// Escapes the string so it can be safely placed inside a [URL] query.
fn QueryEscape(s: str): str {
	ret escape(s, encodingQueryComponent)
}

// Escapes the string so it can be safely placed inside a [URL] path segment,
// replacing special characters (including /) with %XX sequences as needed.
fn PathEscape(s: str): str {
	ret escape(s, encodingPathSegment)
}

// Immutable encapsulation of username and password details for a [URL].
// An existing Userinfo value is guaranteed to have a username set
// (potentially empty, as allowed by RFC 2396), and optionally a password.
struct UserInfo {
	username:    str
	password:    str
	passwordSet: bool
}

impl UserInfo {
	// Returns the username.
	fn Username(self): str {
		ret self.username
	}

	// Returns the password in case it is set, and whether it is set.
	fn Password(self): (str, bool) {
		ret self.password, self.passwordSet
	}

	// Returns the encoded userinfo information in the standard form of "username[:password]".
	fn Str(self): str {
		mut s := escape(self.username, encodingUserPassword)
		if self.passwordSet {
			s += ":" + escape(self.password, encodingUserPassword)
		}
		ret s
	}
}

// Separates host and port. If the port is not valid, it returns
// the entire input as host, and it doesn't check the validity of the host.
// Unlike net::SplitHostPort, but per RFC 3986, it requires ports to be numeric.
fn splitHostPort(hostPort: str): (host: str, port: str) {
	host = hostPort
	colon := strings::LastIndexByte(host, ':')
	if colon != -1 && validOptionalPort(host[colon:]) {
		host, port = host[:colon], host[colon+1:]
	}
	if strings::HasPrefix(host, "[") && strings::HasSuffix(host, "]") {
		host = host[1 : len(host)-1]
	}
	ret
}

// A URL represents a parsed URL (technically, a URI reference).
//
// The general form represented is:
//
//	[scheme:][//[userinfo@]host][/]path[?query][#fragment]
//
// URLs that do not start with a slash after the scheme are interpreted as:
//
//	scheme:opaque[?query][#fragment]
//
// The Host field contains the host and port subcomponents of the URL.
// When the port is present, it is separated from the host with a colon.
// When the host is an IPv6 address, it must be enclosed in square brackets:
// "[fe80::1]:80". The [net::JoinHostPort] function combines a host and port
// into a string suitable for the Host field, adding square brackets to
// the host when necessary.
//
// Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.
// A consequence is that it is impossible to tell which slashes in the Path were
// slashes in the raw URL and which were %2f. This distinction is rarely important,
// but when it is, the code should use the [URL.EscapedPath] method, which preserves
// the original encoding of Path.
//
// The RawPath field is an optional field which is only set when the default
// encoding of Path is different from the escaped path. See the EscapedPath method
// for more details.
//
// URL's Str method uses the EscapedPath method to obtain the path.
struct URL {
	Scheme:      str
	Opaque:      str       // encoded opaque data
	User:        &UserInfo // username and password information
	Host:        str       // host or host:port (see Hostname and Port methods)
	Path:        str       // path (relative paths may omit leading slash)
	RawPath:     str       // encoded path hint (see EscapedPath method)
	OmitHost:    bool      // do not emit empty host (authority)
	ForceQuery:  bool      // append a query ('?') even if RawQuery is empty
	RawQuery:    str       // encoded query values, without '?'
	Fragment:    str       // fragment for references, without '#'
	RawFragment: str       // encoded fragment hint (see EscapedFragment method)
}

impl URL {
	// Returns the escaped form of self.Path.
	// In general there are multiple possible escaped forms of any path.
	// It returns self.RawPath when it is a valid escaping of self.Path.
	// Otherwise it ignores self.RawPath and computes an escaped form on its own.
	// The [URL.Str] and [URL.RequestURI] methods use EscapedPath to construct their results.
	// In general, code should call EscapedPath instead of reading self.RawPath directly.
	fn EscapedPath(self): str {
		if self.RawPath != "" && validEncoded(self.RawPath, encodingPath) {
			p := unescape(self.RawPath, encodingPath) else { goto skip }
			if p == self.Path {
				ret self.RawPath
			}
		}
	skip:
		if self.Path == "*" {
			ret "*" // don't escape (Go's issue 11202)
		}
		ret escape(self.Path, encodingPath)
	}

	// Returns the escaped form of self.Fragment.
	// In general there are multiple possible escaped forms of any fragment.
	// It returns self.RawFragment when it is a valid escaping of self.Fragment.
	// Otherwise it ignores self.RawFragment and computes an escaped form on its own.
	// The [URL.Str] method uses EscapedFragment to construct its result.
	// In general, code should call EscapedFragment instead of reading self.RawFragment directly.
	fn EscapedFragment(self): str {
		if self.RawFragment != "" && validEncoded(self.RawFragment, encodingFragment) {
			f := unescape(self.RawFragment, encodingFragment) else { goto skip }
			if f == self.Fragment {
				ret self.RawFragment
			}
		}
	skip:
		ret escape(self.Fragment, encodingFragment)
	}

	// Reports whether the [URL] is absolute.
	// Absolute means that it has a non-empty scheme.
	fn IsAbs(self): bool {
		ret self.Scheme != ""
	}

	// Resolves a URI reference to an absolute URI from
	// an absolute base URI self, per RFC 3986 Section 5.2. The URI reference
	// may be relative or absolute. It always returns a new [URL] instance,
	// even if the returned URL is identical to either the base or reference.
	// If ref is an absolute URL, then it ignores base and returns a copy of ref.
	fn ResolveReference(mut self, mut ref: &URL): &URL {
		mut url := new(URL, *ref)
		if ref.Scheme == "" {
			url.Scheme = self.Scheme
		}
		if ref.Scheme != "" || ref.Host != "" || ref.User != nil {
			// The "absoluteURI" or "net_path" cases.
			// We can ignore the error from setPath since we know we provided a
			// validly-escaped path.
			url.setPath(resolvePath(ref.EscapedPath(), ""))!
			ret url
		}
		if ref.Opaque != "" {
			url.User = nil
			url.Host = ""
			url.Path = ""
			ret url
		}
		if ref.Path == "" && !ref.ForceQuery && ref.RawQuery == "" {
			url.RawQuery = self.RawQuery
			if ref.Fragment == "" {
				url.Fragment = self.Fragment
				url.RawFragment = self.RawFragment
			}
		}
		if ref.Path == "" && self.Opaque != "" {
			url.Opaque = self.Opaque
			url.User = nil
			url.Host = ""
			url.Path = ""
			ret url
		}
		// The "abs_path" or "rel_path" cases.
		url.Host = self.Host
		url.User = self.User
		url.setPath(resolvePath(self.EscapedPath(), ref.EscapedPath()))!
		ret url
	}

	// Parses a [URL] in the context of the receiver. The provided URL
	// may be relative or absolute. It returns nil, error on parse
	// failure, otherwise its return value is the same as [URL.ResolveReference].
	fn Parse(mut self, ref: str)!: &URL {
		mut refURL := Parse(ref) else { error(error) }
		ret self.ResolveReference(refURL)
	}

	// Parses RawQuery and returns the corresponding values.
	fn Query(self)!: Values {
		ret ParseQuery(self.RawQuery) else { error(error) }
	}

	// Returns the encoded path?query or opaque?query
	// string that would be used in an HTTP request for self.
	fn RequestURI(self): str {
		mut result := self.Opaque
		if result == "" {
			result = self.EscapedPath()
			if result == "" {
				result = "/"
			}
		} else {
			if strings::HasPrefix(result, "//") {
				result = self.Scheme + ":" + result
			}
		}
		if self.ForceQuery || self.RawQuery != "" {
			result += "?" + self.RawQuery
		}
		ret result
	}

	// Returns self.Host, stripping any valid port number if present.
	//
	// If the result is enclosed in square brackets, as literal IPv6 addresses are,
	// the square brackets are removed from the result.
	fn Hostname(self): str {
		host, _ := splitHostPort(self.Host)
		ret host
	}

	// Returns the port part of self.Host, without the leading colon.
	//
	// If self.Host doesn't contain a valid numeric port, returns an empty string.
	fn Port(self): str {
		_, port := splitHostPort(self.Host)
		ret port
	}

	// Returns a new [URL] with the provided path elements joined to
	// any existing path and the resulting path cleaned of any ./ or ../ elements.
	// Any sequences of multiple / characters will be reduced to a single /.
	fn JoinPath(mut self, elem: ...str): &URL {
		unsafe { *(&elem) = append([self.EscapedPath()], elem...) }
		mut p := ""
		if !strings::HasPrefix(elem[0], "/") {
			// Return a relative path if u is relative,
			// but ensure that it contains no ../ elements.
			unsafe { (*(&elem))[0] = "/" + elem[0] }
			p = path::Join(elem...)[1:]
		} else {
			p = path::Join(elem...)
		}
		// path.Join will remove any trailing slashes.
		// Preserve at least one.
		if strings::HasSuffix(elem[len(elem)-1], "/") && !strings::HasSuffix(p, "/") {
			p += "/"
		}
		mut url := *self
		url.setPath(p)!
		ret new(URL, url)
	}

	// Reassembles the [URL] into a valid URL string.
	// The general form of the result is one of:
	//
	//	scheme:opaque?query#fragment
	//	scheme://userinfo@host/path?query#fragment
	//
	// If self.Opaque is non-empty, it uses the first form;
	// otherwise it uses the second form.
	// Any non-ASCII characters in host are escaped.
	// To obtain the path, it uses self.EscapedPath().
	//
	// In the second form, the following rules apply:
	//   - if self.Scheme is empty, scheme: is omitted.
	//   - if self.User is nil, userinfo@ is omitted.
	//   - if self.Host is empty, host/ is omitted.
	//   - if self.Scheme and self.Host are empty and self.User is nil,
	//     the entire scheme://userinfo@host/ is omitted.
	//   - if self.Host is non-empty and self.Path begins with a /,
	//     the form host/path does not add its own /.
	//   - if self.RawQuery is empty, ?query is omitted.
	//   - if self.Fragment is empty, #fragment is omitted.
	fn Str(self): str {
		mut n := len(self.Scheme)
		if self.Opaque != "" {
			n += len(self.Opaque)
		} else {
			if !self.OmitHost && (self.Scheme != "" || self.Host != "" || self.User != nil) {
				if self.User != nil {
					n += len(self.User.Username())
					password, _ := self.User.Password()
					n += len(password)
				}
				n += len(self.Host)
			}
			n += len(self.Path)
		}
		n += len(self.RawQuery) + len(self.RawFragment)
		n += len(":" + "//" + "//" + ":" + "@" + "/" + "./" + "?" + "#")

		mut buf := strings::Builder{}
		buf.Grow(n)

		if self.Scheme != "" {
			buf.WriteStr(self.Scheme)!
			buf.WriteByte(':')!
		}
		if self.Opaque != "" {
			buf.WriteStr(self.Opaque)!
		} else {
			if self.Scheme != "" || self.Host != "" || self.User != nil {
				if self.OmitHost && self.Host == "" && self.User == nil {
					// omit empty host
				} else {
					if self.Host != "" || self.Path != "" || self.User != nil {
						buf.WriteStr("//")!
					}
					if self.User != nil {
						buf.WriteStr(self.User.Str())!
						buf.WriteByte('@')!
					}
					if self.Host != "" {
						buf.WriteStr(escape(self.Host, encodingHost))!
					}
				}
			}
			path := self.EscapedPath()
			if path != "" && path[0] != '/' && self.Host != "" {
				buf.WriteByte('/')!
			}
			if buf.Len() == 0 {
				// RFC 3986 §4.2
				// A path segment that contains a colon character (e.g., "this:that")
				// cannot be used as the first segment of a relative-path reference, as
				// it would be mistaken for a scheme name. Such a segment must be
				// preceded by a dot-segment (e.g., "./this:that") to make a relative-
				// path reference
				segment, _, _ := strings::Cut(path, "/")
				if strings::Contains(segment, ":") {
					buf.WriteStr("./")!
				}
			}
			buf.WriteStr(path)!
		}
		if self.ForceQuery || self.RawQuery != "" {
			buf.WriteByte('?')!
			buf.WriteStr(self.RawQuery)!
		}
		if self.Fragment != "" {
			buf.WriteByte('#')!
			buf.WriteStr(self.EscapedFragment())!
		}
		ret buf.Str()
	}

	// Like [URL.Str] but replaces any password with "xxxxx".
	// Only the password in self.User is redacted.
	fn Redacted(self): str {
		if self.User != nil {
			_, has := self.User.Password()
			if has {
				mut &url := unsafe { &(*(*(&self))) } // Break immutability, no risk for reflective mutation.
				url.User = UserPassword(self.User.Username(), "xxxxx")
				ret url.Str()
			}
		}
		ret self.Str()
	}

	// Sets the Path and RawPath fields of the URL based on the provided
	// escaped path p. It maintains the invariant that RawPath is only specified
	// when it differs from the default encoding of the path.
	// For example:
	//	setPath("/foo/bar")   will set Path="/foo/bar" and RawPath=""
	//	setPath("/foo%2fbar") will set Path="/foo/bar" and RawPath="/foo%2fbar"
	// It will return an error only if the provided path contains an invalid escaping.
	fn setPath(mut self, p: str)! {
		self.Path = unescape(p, encodingPath) else { error(error) }
		escp := escape(self.Path, encodingPath)
		if p == escp {
			// Default encoding is fine.
			self.RawPath = ""
		} else {
			self.RawPath = p
		}
	}

	// Like setPath but for Fragment/RawFragment.
	fn setFragment(mut self, f: str)! {
		self.Fragment = unescape(f, encodingFragment) else { error(error) }
		escf := escape(self.Fragment, encodingFragment)
		if f == escf {
			// Default encoding is fine.
			self.RawFragment = ""
		} else {
			self.RawFragment = f
		}
	}
}

// Returns a [UserInfo] containing the provided username and no password set.
fn User(username: str): &UserInfo {
	ret &UserInfo{username, "", false}
}

// Returns a [UserInfo] containing the provided username and password.
//
// This functionality should only be used with legacy web sites.
// RFC 2396 warns that interpreting Userinfo this way
// “is NOT RECOMMENDED, because the passing of authentication
// information in clear text (such as URI) has proven to be a
// security risk in almost every case where it has been used.”
fn UserPassword(username: str, password: str): &UserInfo {
	ret &UserInfo{username, password, true}
}

// Maybe rawURL is of the form scheme:path.
// (Scheme must be [a-zA-Z][a-zA-Z0-9+.-]*)
// If so, return scheme, path; else return "", rawURL.
fn getScheme(rawURL: str)!: (scheme: str, path: str) {
	mut i := 0
	for i < len(rawURL); i++ {
		c := rawURL[i]
		match {
		| 'a' <= c && c <= 'z' | 'A' <= c && c <= 'Z':
			// do nothing
		| '0' <= c && c <= '9' | c == '+' | c == '-' | c == '.':
			if i == 0 {
				ret "", rawURL
			}
		| c == ':':
			if i == 0 {
				error(errors::New("missing protocol scheme"))
			}
			ret rawURL[:i], rawURL[i+1:]
		|:
			// we have encountered an invalid character,
			// so there is no valid scheme
			ret "", rawURL
		}
	}
	ret "", rawURL
}

// Reports whether s is a valid userinfo string per RFC 3986
// Section 3.2.1:
//
//  userinfo    = *( unreserved / pct-encoded / sub-delims / ":" )
//  unreserved  = ALPHA / DIGIT / "-" / "." / "_" / "~"
//  sub-delims  = "!" / "$" / "&" / "'" / "(" / ")"
//                / "*" / "+" / "," / ";" / "="
//
// It doesn't validate pct-encoded. The caller does that via func unescape.
fn validUserinfo(s: str): bool {
	for _, r in s {
		if 'A' <= r && r <= 'Z' {
			continue
		}
		if 'a' <= r && r <= 'z' {
			continue
		}
		if '0' <= r && r <= '9' {
			continue
		}
		match r {
		| '-' | '.' | '_' | ':' | '~' | '!' | '$' | '&' | '\''
		| '(' | ')' | '*' | '+' | ',' | ';' | '=' | '%' | '@':
			continue
		|:
			ret false
		}
	}
	ret true
}

// Reports whether port is either an empty string or matches /^:\d*$/
fn validOptionalPort(port: str): bool {
	if port == "" {
		ret true
	}
	if port[0] != ':' {
		ret false
	}
	for _, b in port[1:] {
		if b < '0' || b > '9' {
			ret false
		}
	}
	ret true
}

// Reports whether s contains any ASCII control character.
fn strContainsCTLByte(s: str): bool {
	for _, b in s {
		if b < ' ' || b == 0x7f {
			ret true
		}
	}
	ret false
}

// Parses host as an authority without user
// information. That is, as host[:port].
fn parseHost(mut host: str)!: str {
	if strings::HasPrefix(host, "[") {
		// Parse an IP-Literal in RFC 3986 and RFC 6874.
		// E.g., "[fe80::1]", "[fe80::1%25en0]", "[fe80::1]:80".
		i := strings::LastIndex(host, "]")
		if i < 0 {
			error(errors::New("missing ']' in host"))
		}
		colonPort := host[i+1:]
		if !validOptionalPort(colonPort) {
			error(errors::New("invalid port " + colonPort + " after host"))
		}

		// RFC 6874 defines that %25 (%-encoded percent) introduces
		// the zone identifier, and the zone identifier can use basically
		// any %-encoding it likes. That's different from the host, which
		// can only %-encode non-ASCII bytes.
		// We do impose some restrictions on the zone, to avoid stupidity
		// like newlines.
		zone := strings::Index(host[:i], "%25")
		if zone >= 0 {
			host1 := unescape(host[:zone], encodingHost) else { error(error) }
			host2 := unescape(host[zone:i], encodingZone) else { error(error) }
			host3 := unescape(host[i:], encodingHost) else { error(error) }
			ret host1 + host2 + host3
		}
	} else {
		i := strings::LastIndex(host, ":")
		if i != -1 {
			colonPort := host[i:]
			if !validOptionalPort(colonPort) {
				error(errors::New("invalid port " + colonPort + " after host"))
			}
		}
	}

	host = unescape(host, encodingHost) else { error(error) }
	ret host
}

fn parseAuthority(authority: str)!: (user: &UserInfo, host: str) {
	i := strings::LastIndex(authority, "@")
	if i < 0 {
		host = parseHost(authority) else { error(error) }
		ret nil, host
	}
	host = parseHost(authority[i+1:]) else { error(error) }
	mut userinfo := authority[:i]
	if !validUserinfo(userinfo) {
		error(errors::New("invalid userinfo"))
	}
	if !strings::Contains(userinfo, ":") {
		userinfo = unescape(userinfo, encodingUserPassword) else { error(error) }
		user = User(userinfo)
	} else {
		mut username, mut password, _ := strings::Cut(userinfo, ":")
		username = unescape(username, encodingUserPassword) else { error(error) }
		password = unescape(password, encodingUserPassword) else { error(error) }
		user = UserPassword(username, password)
	}
	ret user, host
}

// Parses a URL from a string in one of two contexts. If
// viaRequest is true, the URL is assumed to have arrived via an HTTP request,
// in which case only absolute URLs or path-absolute relative URLs are allowed.
// If viaRequest is false, all forms of relative URLs are allowed.
fn parse(rawURL: str, viaRequest: bool)!: &URL {
	mut rest := ""

	if strContainsCTLByte(rawURL) {
		error(errors::New("invalid control character in URL"))
	}

	if rawURL == "" && viaRequest {
		error(errors::New("empty url"))
	}

	mut url := new(URL)

	if rawURL == "*" {
		url.Path = "*"
		ret url
	}

	// Split off possible leading "http:", "mailto:", etc.
	// Cannot contain escaped characters.
	url.Scheme, rest = getScheme(rawURL) else { error(error) }
	url.Scheme = strings::ToLower(url.Scheme)

	if strings::HasSuffix(rest, "?") && strings::Count(rest, "?") == 1 {
		url.ForceQuery = true
		rest = rest[:len(rest)-1]
	} else {
		rest, url.RawQuery, _ = strings::Cut(rest, "?")
	}

	if !strings::HasPrefix(rest, "/") {
		if url.Scheme != "" {
			// We consider rootless paths per RFC 3986 as opaque.
			url.Opaque = rest
			ret url
		}
		if viaRequest {
			error(errors::New("invalid URI for request"))
		}

		// Avoid confusion with malformed schemes, like cache_object:foo/bar.
		//
		// RFC 3986, §3.3:
		// In addition, a URI reference (Section 4.1) may be a relative-path reference,
		// in which case the first path segment cannot contain a colon (":") character.
		segment, _, _ := strings::Cut(rest, "/")
		if strings::Contains(segment, ":") {
			// First path segment has colon. Not allowed in relative URL.
			error(errors::New("first path segment in URL cannot contain colon"))
		}
	}

	if (url.Scheme != "" || !viaRequest && !strings::HasPrefix(rest, "///")) && strings::HasPrefix(rest, "//") {
		mut authority := ""
		authority, rest = rest[2:], ""
		i := strings::Index(authority, "/")
		if i >= 0 {
			authority, rest = authority[:i], authority[i:]
		}
		url.User, url.Host = parseAuthority(authority) else { error(error) }
	} else if url.Scheme != "" && strings::HasPrefix(rest, "/") {
		// OmitHost is set to true when rawURL has an empty host (authority).
		url.OmitHost = true
	}

	// Set Path and, optionally, RawPath.
	// RawPath is a hint of the encoding of Path. We don't want to set it if
	// the default escaping of Path is equivalent, to help make sure that people
	// don't rely on it in general.
	url.setPath(rest) else { error(error) }
	ret url
}

// Parses a raw url into a [URL] structure.
//
// The url may be relative (a path, without a host) or absolute
// (starting with a scheme). Trying to parse a hostname and path
// without a scheme is invalid but may not necessarily return an
// error, due to parsing ambiguities.
fn Parse(rawURL: str)!: &URL {
	// Cut off #frag
	u, frag, _ := strings::Cut(rawURL, "#")
	mut url := parse(u, false) else {
		error(&Error{"parse", u, error})
	}
	if frag == "" {
		ret url
	}
	url.setFragment(frag) else {
		error(&Error{"parse", rawURL, error})
	}
	ret url
}

// Parses a raw url into a [URL] structure. It assumes that url was
// received in an HTTP request, so the url is interpreted only as an
// absolute URI or an absolute path. The string url is assumed not to have
// a #fragment suffix.
// (Web browsers strip #fragment before sending the URL to a web server.)
fn ParseRequestURI(rawURL: str)!: &URL {
	ret parse(rawURL, true) else {
		error(&Error{"parse", rawURL, error})
	}
}

// Maps a string key to a list of values.
// It is typically used for query parameters and form values.
// The keys in a Values map are case-sensitive.
type Values: map[str][]str

impl Values {
	// Gets the first value associated with the given key.
	// If there are no values associated with the key, returns
	// the empty string. To access multiple values, use the map
	// directly.
	fn Get(self, key: str): str {
		vs := (*self)[key]
		if len(vs) == 0 {
			ret ""
		}
		ret vs[0]
	}

	// Sets the key to value. It replaces any existing values.
	fn Set(mut self, key: str, value: str) {
		(*self)[key] = [value]
	}

	// Adds the value to key. It appends to any existing values associated with key.
	fn Add(mut self, key: str, value: str) {
		(*self)[key] = append((*self)[key], value)
	}

	// Deletes the values associated with key.
	fn Del(mut self, key: str) {
		delete(*self, key)
	}

	// Reports whether a given key is set.
	fn Has(self, key: str): bool {
		_, ok := (*self)[key]
		ret ok
	}

	// Encodes the values into “URL encoded” form
	// ("bar=baz&foo=quux") sorted by key.
	fn Encode(self): str {
		if len(*self) == 0 {
			ret ""
		}
		mut keys := make([]str, 0, len(*self))
		for k in *self {
			keys = append(keys, k)
		}
		slices::Sort(keys)
		mut buf := strings::Builder{}
		for _, k in keys {
			vs := (*self)[k]
			keyEscaped := QueryEscape(k)
			for _, v in vs {
				if buf.Len() > 0 {
					buf.WriteByte('&')!
				}
				buf.WriteStr(keyEscaped)!
				buf.WriteByte('=')!
				buf.WriteStr(QueryEscape(v))!
			}
		}
		ret buf.Str()
	}
}

fn parseQuery(mut m: Values, mut query: str)! {
	for query != "" {
		mut key := ""
		key, query, _ = strings::Cut(query, "&")
		if strings::Contains(key, ";") {
			error(errors::New("invalid semicolon separator in query"))
		}
		if key == "" {
			continue
		}
		key, mut value, _ := strings::Cut(key, "=")
		key = QueryUnescape(key) else { error(error) }
		value = QueryUnescape(value) else { error(error) }
		m[key] = append(m[key], value)
	}
}

// Parses the URL-encoded query string and returns
// a map listing the values specified for each key.
// It always returns a non-nil map containing all the valid query parameters found;
// err describes the first decoding error encountered, if any.
//
// Query is expected to be a list of key=value settings separated by ampersands.
// A setting without an equals sign is interpreted as a key set to an empty value.
// Settings containing a non-URL-encoded semicolon are considered invalid.
fn ParseQuery(query: str)!: Values {
	let mut m: Values = {}
	parseQuery(m, query) else { error(error) }
	ret m
}

// Returns a [URL] string with the provided path elements joined to
// the existing path of base and the resulting path cleaned of any ./ or ../ elements.
fn JoinPath(base: str, elem: ...str)!: str {
	mut url := Parse(base) else { error(error) }
	ret url.JoinPath(elem...).Str()
}