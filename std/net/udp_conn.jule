// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use "std/io"
use "std/mem"
use "std/sys"
use "std/time"

// UDP connection.
// This structure represents server and client connections.
struct UDPConn {
	mut sockaddr4: sys::SockaddrIn
	mut sockaddr6: sys::SockaddrIn6
	mut fd:        &poll::FD
	Addr:          &UDPAddr
	v6:            bool
}

impl Conn for UDPConn {}
impl io::Reader for UDPConn {}
impl io::Writer for UDPConn {}
impl io::Stream for UDPConn {}
impl io::WriteCloser for UDPConn {}

impl UDPConn {
	// Binds new UDP listener and starts listening given address.
	// Returns relevant created &UDPConn if success.
	// If addr is not a valid address, it will forward relevant parse exceptionals.
	// In addition, any bind and listening error will be return as exceptional.
	//
	// See the [Dial] function for a description of the addr parameter.
	static fn Bind(addr: str)!: &UDPConn {
		ret udpBind(Network.UDP, addr) else { error(error) }
	}

	// Connects to UDP listener by given address.
	// Returns relevant created &UDPConn if success.
	// If addr is not a valid address, it will forward relevant parse exceptionals.
	// In addition, any bind and listening error will be return as exceptional.
	//
	// See the [Dial] function for a description of the addr parameter.
	static fn Dial(addr: str)!: &UDPConn {
		ret udpDial(Network.UDP, addr) else { error(error) }
	}

	// Read bytes to buffer from connection and returns read byte count.
	// The number of bytes read can never exceed the length of the buffer.
	// If the buffer is larger than the number of bytes that can be read,
	// the buffer will not cause an overflow.
	// It will panic if connection is closed.
	fn Read(mut self, mut buf: []byte)!: (n: int) {
		if self.fd == nil {
			panic("net: UDPConn.Read: connection is closed")
		}
		mut ok := false
		if self.v6 {
			n, ok = self.fd.ReadV6(buf, self.sockaddr6)
		} else {
			n, ok = self.fd.ReadV4(buf, self.sockaddr4)
		}
		if ok {
			ret n
		}
		error(lastErrorCode())
	}

	// Writes bytes to connection and returns written byte count.
	// The number of bytes written can never exceed the length of the buffer.
	fn Write(mut self, buf: []byte)!: (n: int) {
		if self.fd == nil {
			panic("net: UDPConn.Write: connection is closed")
		}
		mut ok := false
		if self.v6 {
			n, ok = self.fd.WriteV6(buf, self.sockaddr6)
		} else {
			n, ok = self.fd.WriteV4(buf, self.sockaddr4)
		}
		if ok {
			ret n
		}
		error(lastErrorCode())
	}

	// Sets read timeout for connection.
	// Timeout precision is microseconds.
	// If the timeout is below one microsecond it will be accepted as zero.
	// The zero timeout, clears current timeout if exist.
	fn SetReadTimeout(mut self, timeout: time::Duration)! {
		if self.fd == nil {
			panic("net: TCPConn.SetReadTimeout: connection is closed")
		}
		setSocketTimeout(poll::NetHandle(self.fd.File), sys::SO_RCVTIMEO, timeout) else { error(error) }
	}

	// Sets write timeout for connection.
	// Timeout precision is microseconds.
	// If the timeout is below one microsecond it will be accepted as zero.
	// The zero timeout, clears current timeout if exist.
	fn SetWriteTimeout(mut self, timeout: time::Duration)! {
		if self.fd == nil {
			panic("net: TCPConn.SetReadTimeout: connection is closed")
		}
		setSocketTimeout(poll::NetHandle(self.fd.File), sys::SO_SNDTIMEO, timeout) else { error(error) }
	}

	// Returns network name which is connected or listening.
	// If connection closed, returns Network.UDP as a general network.
	fn Network(self): Network {
		match {
		| self.fd == nil:
			ret Network.UDP
		| self.v6:
			ret Network.UDP6
		|:
			ret Network.UDP4
		}
	}

	// Closes connection.
	fn Close(mut self)! {
		if self.fd == nil {
			ret
		}
		if !self.fd.Close() {
			error(lastErrorCode())
		}
		self.fd = nil
		self.v6 = false
	}
}

fn udpBind(network: Network, &addr: str)!: &UDPConn {
	mut conn := UDPConn{
		Addr: UDPAddr.Resolve(network, addr) else { error(error) },
	}
	if conn.Addr.IP.Empty() {
		match network {
		| Network.UDP | Network.UDP4:
			handle := sys::Socket(sys::AF_INET, sys::SOCK_DGRAM, sys::IPPROTO_UDP)
			if handle < 0 {
				error(lastErrorCode())
			}
			conn.fd = newFD(handle, poll::SocketNoConn, sys::SOCK_DGRAM)
			conn.sockaddr4 = sys::SockaddrIn{}
			conn.sockaddr4.sin_family = sys::AF_INET
			conn.sockaddr4.sin_port = htons(conn.Addr.Port)
			conn.sockaddr4.sin_addr.s_addr = sys::INADDR_ANY
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&conn.sockaddr4), mem::SizeOf(conn.sockaddr4)) != 0 {
					conn.fd.Close()
					error(lastErrorCode())
				}
			}
		| Network.UDP6:
			conn.v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_DGRAM, sys::IPPROTO_UDP)
			if handle < 0 {
				error(lastErrorCode())
			}
			conn.fd = newFD(handle, poll::SocketNoConn, sys::SOCK_DGRAM)
			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			sockAddr.sin6_port = htons(conn.Addr.Port)
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					conn.fd.Close()
					error(lastErrorCode())
				}
			}
		|:
			error(&AddrError{Err: "invalid network: " + str(network)})
		}
	} else {
		mut ipv4 := conn.Addr.IP.To4()
		if ipv4.Empty() {
			if network == Network.UDP4 {
				error(&AddrError{Err: "expected IPv4 address but found IPv6", Addr: addr})
			}
			conn.v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_DGRAM, sys::IPPROTO_UDP)
			if handle < 0 {
				error(lastErrorCode())
			}
			conn.fd = newFD(handle, poll::SocketNoConn, sys::SOCK_DGRAM)
			conn.sockaddr6 = sys::SockaddrIn6{}
			conn.sockaddr6.sin6_family = sys::AF_INET6
			for i, b in conn.Addr.IP {
				conn.sockaddr6.sin6_addr.s6_addr[i] = b
			}
			conn.sockaddr6.sin6_port = htons(conn.Addr.Port)
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&conn.sockaddr6), mem::SizeOf(conn.sockaddr6)) != 0 {
					conn.fd.Close()
					error(lastErrorCode())
				}
			}
		} else {
			if network == Network.UDP6 {
				error(&AddrError{Err: "expected IPv6 address but found IPv4", Addr: addr})
			}
			conn.Addr.IP = ipv4
			handle := sys::Socket(sys::AF_INET, sys::SOCK_DGRAM, sys::IPPROTO_UDP)
			if handle < 0 {
				error(lastErrorCode())
			}
			conn.fd = newFD(handle, poll::SocketNoConn, sys::SOCK_DGRAM)
			conn.sockaddr4 = sys::SockaddrIn{}
			conn.sockaddr4.sin_family = sys::AF_INET
			conn.sockaddr4.sin_port = htons(conn.Addr.Port)
			conn.sockaddr4.sin_addr.s_addr = u32(beU64v4(conn.Addr.IP))
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&conn.sockaddr4), mem::SizeOf(conn.sockaddr4)) != 0 {
					conn.fd.Close()
					error(lastErrorCode())
				}
			}
		}
	}
	ret new(UDPConn, conn)
}

fn udpDial(network: Network, &addr: str)!: &UDPConn {
	mut conn := UDPConn{
		Addr: UDPAddr.Resolve(network, addr) else { error(error) },
	}

	if conn.Addr.IP.Empty() {
		match network {
		| Network.UDP | Network.UDP4:
			handle := sys::Socket(sys::AF_INET, sys::SOCK_DGRAM, sys::IPPROTO_UDP)
			if handle < 0 {
				error(lastErrorCode())
			}
			conn.fd = newFD(handle, poll::SocketNoConn, sys::SOCK_DGRAM)
			conn.sockaddr4 = sys::SockaddrIn{}
			conn.sockaddr4.sin_family = sys::AF_INET
			conn.sockaddr4.sin_port = htons(conn.Addr.Port)
			conn.sockaddr4.sin_addr.s_addr = sys::INADDR_ANY
		| Network.UDP6:
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_DGRAM, sys::IPPROTO_UDP)
			if handle < 0 {
				error(lastErrorCode())
			}
			conn.fd = newFD(handle, poll::SocketNoConn, sys::SOCK_DGRAM)
			conn.sockaddr6 = sys::SockaddrIn6{}
			conn.sockaddr6.sin6_family = sys::AF_INET6
			conn.sockaddr6.sin6_port = htons(conn.Addr.Port)
		|:
			error(&AddrError{Err: "invalid network: " + str(network)})
		}
	} else {
		mut ipv4 := conn.Addr.IP.To4()
		if ipv4.Empty() {
			if network == Network.UDP4 {
				error(&AddrError{Err: "expected IPv4 address but found IPv6", Addr: addr})
			}
			conn.v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_DGRAM, sys::IPPROTO_UDP)
			if handle < 0 {
				error(lastErrorCode())
			}
			conn.fd = newFD(handle, poll::SocketNoConn, sys::SOCK_DGRAM)
			conn.sockaddr6 = sys::SockaddrIn6{}
			conn.sockaddr6.sin6_family = sys::AF_INET6
			for i, b in conn.Addr.IP {
				conn.sockaddr6.sin6_addr.s6_addr[i] = b
			}
			conn.sockaddr6.sin6_port = htons(conn.Addr.Port)
		} else {
			if network == Network.UDP6 {
				error(&AddrError{Err: "expected IPv6 address but found IPv4", Addr: addr})
			}
			conn.Addr.IP = ipv4
			handle := sys::Socket(sys::AF_INET, sys::SOCK_DGRAM, sys::IPPROTO_UDP)
			if handle < 0 {
				error(lastErrorCode())
			}
			conn.fd = newFD(handle, poll::SocketNoConn, sys::SOCK_DGRAM)
			conn.sockaddr4 = sys::SockaddrIn{}
			conn.sockaddr4.sin_family = sys::AF_INET
			conn.sockaddr4.sin_port = htons(conn.Addr.Port)
			conn.sockaddr4.sin_addr.s_addr = u32(beU64v4(conn.Addr.IP))
		}
	}
	ret new(UDPConn, conn)
}