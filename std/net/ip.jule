// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/byteslite"
use "std/unsafe"

// An IP is a single IP address, wrapper for a slice of bytes.
// Functions in this package accept either 4-byte (IPv4)
// or 16-byte (IPv6) slices as input.
//
// Note that in this documentation, referring to an
// IP address as an IPv4 address or an IPv6 address
// is a semantic property of the address, not just the
// length of the byte slice: a 16-byte slice can still
// be an IPv4 address.
//
// Some methods might return mutable data.
// There is no immutability promises.
type IP: []byte

impl IP {
	// Returns empty IP address.
	fn Empty(): IP {
		ret nil
	}

	// Like self.Str except that it returns and empty string when IP is empty.
	fn ipEmptyStr(*self): str {
		if self.Empty() {
			ret ""
		}
		ret self.Str()
	}

	// Reports whether IP is empty.
	fn Empty(*self): bool {
		ret len(*self) == 0
	}

	// Reports wherher IPs are points to the same address.
	// An IPv4 address and that same address in IPv6 from are considered to be equal.
	fn Equal(*self, other: IP): bool {
		match {
		| len(*self) == len(other):
			ret str(*self) == str(other)
		| len(*self) == IPv4Len && len(other) == IPv6Len:
			ret str(other[:12]) == str(v4InV6Prefix) && str(*self) == str(other[12:])
		| len(*self) == IPv6Len && len(other) == IPv4Len:
			ret str((*self)[:12]) == str(v4InV6Prefix) && str((*self)[12:]) == str(other)
		|:
			ret false
		}
	}

	// Reports whether IP is an unspecified address,
	// which is "0.0.0.0" in IPv4 or "::" in IPv6.
	fn IsUnspecified(*self): bool {
		ret self.Equal(IPv4Zero) || self.Equal(IPv6Unspecified)
	}

	// Reports whether IP is a loopback address.
	fn IsLoopback(*self): bool {
		ip4 := unsafe { (*(&self)).To4() }
		if !ip4.Empty() {
			ret ip4[0] == 127
		}
		ret self.Equal(IPv6Loopback)
	}

	// Reports whether IP is a private address according to
	// RFC 1918 (for IPv4) and RFC 4193 (for IPv6).
	#disable boundary
	fn IsPrivate(*self): bool {
		ip4 := unsafe { (*(&self)).To4() }
		if !ip4.Empty() {
			// Following RFC 1918, Section 3. Private Address Space which says:
			//	The Internet Assigned Numbers Authority (IANA) has reserved the
			//	following three blocks of the IP address space for private internets:
			//		10.0.0.0        -   10.255.255.255  (10/8 prefix)
			//		172.16.0.0      -   172.31.255.255  (172.16/12 prefix)
			//		192.168.0.0     -   192.168.255.255 (192.168/16 prefix)
			ret ip4[0] == 10 ||
				(ip4[0] == 172 && ip4[1]&0xF0 == 16) ||
				(ip4[0] == 192 && ip4[1] == 168)
		}
		// Following RFC 4193, Section 8. IANA Considerations which says:
		//	The IANA has assigned the FC00::/7 prefix to "Unique Local Unicast".
		ret len(*self) == IPv6Len && (*self)[0]&0xFE == 0xFC
	}

	// Converts the IPv4 address to a 4-byte representation.
	// Returns empty if IP is not an IPv4 address.
	// Returned IP may use the common mutable allocation with self.
	#disable boundary
	fn To4(mut *self): IP {
		if len(*self) == IPv4Len {
			ret *self
		}
		if len(*self) == IPv6Len &&
			isZeros((*self)[:10]) &&
			(*self)[10] == 0xFF &&
			(*self)[11] == 0xFF {
			ret (*self)[12:16]
		}
		ret IP.Empty()
	}

	// Converts the IP address to a 16-byte representation.
	// Returns empty if address is not an IP address (it is the wrong length).
	#disable boundary
	fn To16(mut *self): IP {
		match {
		| len(*self) == IPv4Len:
			ret IPv4((*self)[0], (*self)[1], (*self)[2], (*self)[3])
		| len(*self) == IPv6Len:
			ret *self
		|:
			ret IP.Empty()
		}
	}

	// Returns string form of the IP address.
	// It returns one of 4 forms:
	//	- "<nil>", if ip is empty
	//	- dotted decimal ("192.0.2.1"), if ip is an IPv4 or IP4-mapped IPv6 address
	//	- IPv6 conforming to RFC 5952 ("2001:db8::1"), if ip is a valid IPv6 address
	//	- the hexadecimal form of ip, without punctuation, if no other cases apply
	fn Str(*self): str {
		if self.Empty() {
			ret "<nil>"
		}
		if len(*self) != IPv4Len && len(*self) != IPv6Len {
			ret "?" + hexStr(*self)
		}
		ip4 := unsafe { (*(&self)).To4() }
		if len(ip4) == IPv4Len {
			ret str4(ipAddrFrom4(ip4))
		}
		ret str16(ipAddrFrom16(*self))
	}
}

let v4InV6Prefix = IP([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF])

// Length of IPv4 address in bytes.
const IPv4Len = 1 << 2

// The IPv4 address known as limited broadcast.
// The IP that returned is statically allocated and mutable.
let mut Broadcast = IPv4(255, 255, 255, 255)

// The IPv4 address known as all systems.
// The IP that returned is statically allocated and mutable.
let mut IPv4AllSystems = IPv4(224, 0, 0, 1)

// The IPv4 address known as all routers.
// The IP that returned is statically allocated and mutable.
let mut IPv4AllRouters = IPv4(224, 0, 0, 2)

// The IPv4 address known as all zeros.
// The IP that returned is statically allocated and mutable.
let mut IPv4Zero = IPv4(0, 0, 0, 0)

// Returns the IP address (in 16-byte form) of the IPv4 address a.b.c.d.
#disable boundary
fn IPv4(a: byte, b: byte, c: byte, d: byte): IP {
	mut ip := make(IP, IPv6Len)
	copy(ip, v4InV6Prefix)
	ip[12] = a
	ip[13] = b
	ip[14] = c
	ip[15] = d
	ret ip
}

// Length of IPv6 address in bytes.
const IPv6Len = 1 << 4

// The IPv6 address known as all zeros.
// The IP that returned is statically allocated and mutable.
let mut IPv6Zero = IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

// The IPv6 address known as unspecified.
// The IP that returned is statically allocated and mutable.
let mut IPv6Unspecified = IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

// The IPv6 address known as loopback.
// The IP that returned is statically allocated and mutable.
let mut IPv6Loopback = IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])

// The IPv6 address known as interterface local all nodes.
// The IP that returned is statically allocated and mutable.
let mut IPv6InterfaceLocalAllNodes = IP([0xFF, 0x01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01])

// The IPv6 address known as link local all nodes.
// The IP that returned is statically allocated and mutable.
let mut IPv6LinkLocalAllNodes = IP([0xFF, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01])

// The IPv6 address known as link local all routers.
// The IP that returned is statically allocated and mutable.
let mut IPv6LinkLocalAllRouters = IP([0xFF, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x02])

// Reports whether addr is just all-zeros.
fn isZeros(ip: IP): bool {
	for _, b in ip {
		if b != 0 {
			ret false
		}
	}
	ret true
}

#disable boundary
fn hexStr(b: IP): str {
	mut s := make([]byte, (len(b)<<1)+1)
	for i, tn in b {
		s[i<<1], s[i<<1+1] = hexDigit[tn>>4], hexDigit[tn&0xF]
	}
	ret unsafe::StrFromBytes(s[:len(s)-1])
}

// Parses s as an IP address, returning the result.
// The string s can be in IPv4 dotted decimal ("192.0.2.1"), IPv6
// ("2001:db8::68"), or IPv4-mapped IPv6 ("::ffff:192.0.2.1") form.
// If s is not a valid textual representation of an IP address,
// it returns nil. The returned address is always 16 bytes,
// IPv4 addresses are returned in IPv4-mapped IPv6 form.
fn ParseIP(s: str): IP {
	mut ip := parseAddr(s) else { ret nil }
	if ip.Zone != "" {
		ret nil
	}
	ret ip.IP.To16()
}