// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/strings"
use "std/unsafe"

const hexDigit = "0123456789abcdef"

// Physical hardware address.
type HardwareAddr: []byte

impl HardwareAddr {
	// Parses s as an IEEE 802 MAC-48, EUI-48, EUI-64, or a 20-octet
	// IP over InfiniBand link-layer address using one of the following formats:
	//  00:00:5e:00:53:01
	//  02:00:5e:10:00:00:00:01
	//  00:00:00:00:fe:80:00:00:00:00:00:00:02:00:5e:10:00:00:00:01
	//  00-00-5e-00-53-01
	//  02-00-5e-10-00-00-00-01
	//  00-00-00-00-fe-80-00-00-00-00-00-00-02-00-5e-10-00-00-00-01
	//  0000.5e00.5301
	//  0200.5e10.0000.0001
	//  0000.0000.fe80.0000.0000.0000.0200.5e10.0000.0001
	//
	// Exceptional is always will be AddrError.Unable.
	static fn Parse(addr: str)!: HardwareAddr {
		if len(addr) < 14 {
			error(AddrError.Unable)
		}
		mut addrB := unsafe::StrBytes(addr)
		if addr[2] == ':' || addr[2] == '-' {
			if (len(addr)+1)%3 != 0 {
				error(AddrError.Unable)
			}
			n := (len(addr) + 1) / 3
			if n != 6 && n != 8 && n != 20 {
				error(AddrError.Unable)
			}
			mut hAddr := make(HardwareAddr, n)
			mut x, mut i := 0, 0
			for i < n {
				(hAddr[i]), ok := xtoi(addrB[x:], addr[2])
				if !ok {
					error(AddrError.Unable)
				}
				i++
				x += 3
			}
			ret hAddr
		} else if addr[4] == '.' {
			if (len(addr)+1)%5 != 0 {
				error(AddrError.Unable)
			}
			n := ((len(addr) + 1) << 1) / 5
			if n != 6 && n != 8 && n != 20 {
				error(AddrError.Unable)
			}
			mut hAddr := make(HardwareAddr, n)
			mut x, mut i := 0, 0
			for i < n {
				(hAddr[i]), mut ok := xtoi(addrB[x:x+2], 0)
				if !ok {
					error(AddrError.Unable)
				}
				hAddr[i+1], ok = xtoi(addrB[x+2:], addr[4])
				if !ok {
					error(AddrError.Unable)
				}
				i += 2
				x += 5
			}
			ret hAddr
		}
		error(AddrError.Unable)
	}

	// Returns address in string form.
	fn Str(self): str {
		if len(self) == 0 {
			ret ""
		}
		mut buf := strings::Builder{}
		buf.Grow(len(self)*3 - 1)
		for i, b in self {
			if i > 0 {
				buf.WriteByte(':')!
			}
			buf.WriteByte(hexDigit[b>>4])!
			buf.WriteByte(hexDigit[b&0xF])!
		}
		ret buf.Str()
	}
}