// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use "std/sys"
use "std/time"

// Listens the address on the named network.
// It will forward any exceptional from network connectors.
//
// For UDP network, the [ListenUDP] function should be used.
// If the network parameter is points UDP network, function will panic.
//
// See the [Dial] function for a description of the network and addr parameters.
fn Listen(network: Network, addr: str)!: Listener {
	match network {
	| TCP | TCP4 | TCP6:
		ret tcpBind(network, addr)?
	|:
		error(&AddrError{Err: "invalid network: " + str(network)})
	}
}

// Listens the address on the named network.
// It will forward any exceptional from network connectors.
// Just for UDP networks.
//
// See the [Dial] function for a description of the network and addr parameters.
fn ListenUDP(network: Network, addr: str)!: &UDPConn {
	ret udpBind(network, addr)?
}

// Connects to the address on the named network.
// Network should be one of the fields of the Network enum.
// The addr parameter is should represent valid address according to network.
//
// For TCP:
//	The address has the form "host:port".
//	The host must be a literal IP address, or a host name that can be
//	resolved to IP addresses such as "localhost".
//	The port must be a literal port number or a service name.
//	If the host is a literal IPv6 address it must be enclosed in brackets,
//	as in "[2001:db8::1]:80" or "[fe80::1%zone]:80".
//	The zone specifies the scope of the literal IPv6 address as defined
//	in RFC 4007. The functions [JoinHostPort] and [SplitHostPort] manipulate
//	a pair of host and port in this form.
//
//	If network is Tcp4, it will accept only IPv4 addresses and if address is IPv6,
//	will try to convert IPv4. If network is Tcp6, it will accept only IPv6 address and
//	address is IPv4, will not try to convert IPv6. If network is Tcp, it will use Tcp4
//	for empty addresses and try for IPv4 if possible. If address is IPv4 or IPv6 which
//	is converted to IPv4 successfully, will use Tcp4, otherwise IPv6 and Tcp6 preferred.
//
// For UDP:
//	The address has the form "host:port".
//	The host must be a literal IP address, or a host name that can be
//	resolved to IP addresses such as "localhost".
//	The port must be a literal port number or a service name.
//	If the host is a literal IPv6 address it must be enclosed in brackets,
//	as in "[2001:db8::1]:80" or "[fe80::1%zone]:80".
//	The zone specifies the scope of the literal IPv6 address as defined
//	in RFC 4007. The functions [JoinHostPort] and [SplitHostPort] manipulate
//	a pair of host and port in this form.
//
//	If network is Udp4, it will accept only IPv4 addresses and if address is IPv6,
//	will try to convert IPv4. If network is Udp6, it will accept only IPv6 address and
//	address is IPv4, will not try to convert IPv6. If network is Udp, it will use Udp4
//	for empty addresses and try for IPv4 if possible. If address is IPv4 or IPv6 which
//	is converted to IPv4 successfully, will use Udp4, otherwise IPv6 and Udp6 preferred.
//
// It will forward any exceptional from network connectors.
fn Dial(network: Network, addr: str)!: Conn {
	ret DialTimeout(network, addr, 0)?
}

// Same as Dial, but uses timeout.
// For UDP networks, timeout will be ignored.
// Timeout precision is microseconds.
// If the timeout is below one microsecond it will be ignored.
fn DialTimeout(network: Network, addr: str, timeout: time::Duration)!: Conn {
	match network {
	| TCP | TCP4 | TCP6:
		ret tcpDial(network, addr, timeout)?
	| UDP | UDP4 | UDP6:
		ret udpDial(network, addr)?
	|:
		error(&AddrError{Err: "invalid network: " + str(network)})
	}
}

fn getSocketAddr(handle: poll::NetHandle, addr: uintptr, len: sys::Socklen)! {
	sys::Getsockname(handle, addr, len)?
}

fn connectSocketNoTimeout(handle: poll::NetHandle, sockAddr: uintptr, sockLen: sys::Socklen)! {
	sys::Connect(handle, sockAddr, sockLen)?
}

fn timevalFromDuration(timeout: time::Duration): (tv: sys::Timeval, ok: bool) {
	sec := i64(timeout.Seconds())
	usec := i64((timeout - time::Duration(i64(time::Second)*sec)).Microseconds())
	ok = sys::NewTimeval(sec, usec, &tv)
	ret
}