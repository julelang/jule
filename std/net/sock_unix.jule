// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use integ "std/jule/integrated"
use "std/mem"
use "std/sys"
use "std/time"

fn closeSocketBlockingMode(handle: poll::NetHandle)! {
	mut arg := sys::Fcntl(handle, sys::F_GETFL, 0) else { error(error) }
	arg |= sys::O_NONBLOCK
	sys::Fcntl(handle, sys::F_SETFL, arg) else { error(error) }
}

fn openSocketBlockingMode(handle: poll::NetHandle)! {
	mut arg := sys::Fcntl(handle, sys::F_GETFL, 0) else { error(error) }
	arg &= ^sys::O_NONBLOCK
	sys::Fcntl(handle, sys::F_SETFL, arg) else { error(error) }
}

fn connectSocket(handle: poll::NetHandle, sockAddr: uintptr, sockLen: sys::Socklen, timeout: time::Duration)! {
	if timeout == 0 {
		connectSocketNoTimeout(handle, sockAddr, sockLen) else { error(error) }
		ret
	}
	mut tv, ok := timevalFromDuration(timeout)
	if !ok {
		error(ErrInvalidTimeout)
	}
	if tv.Sec == 0 && tv.Usec == 0 {
		connectSocketNoTimeout(handle, sockAddr, sockLen) else { error(error) }
		ret
	}
	closeSocketBlockingMode(handle) else { error(error) }
	sys::Connect(handle, sockAddr, sockLen) else {
		if error != sys::EINPROGRESS {
			error(error)
		}
		goto Select
	}
	ret
Select:
	mut fd := sys::FdSet{}
	fd.Zero()
	fd.Set(handle)
	mut emptyFD := sys::FdSet{}
	emptyFD.Zero()
	for {
		res := sys::Select(handle+1, emptyFD, fd, emptyFD, tv) else {
			if error != sys::EINTR {
				error(error)
			}
			use 0
		}
		if res > 0 {
			len2 := sys::Socklen(mem::SizeOf(int))
			opt := 0
			sys::Getsockopt(handle, sys::SOL_SOCKET, sys::SO_ERROR, uintptr(&opt), len2) else { error(error) }
			if opt != 0 {
				error(sys::Errno(opt))
			}
			break
		} else {
			// Timeout.
			error(ErrTimeout)
		}
	}
	openSocketBlockingMode(handle) else { error(error) }
}

fn setSocketTimeout(handle: poll::NetHandle, scope: int, timeout: time::Duration)! {
	tv, ok := timevalFromDuration(timeout)
	if !ok {
		error(ErrInvalidTimeout)
	}
	sys::Setsockopt(handle, sys::SOL_SOCKET, scope, uintptr(&tv), sys::Socklen(mem::SizeOf(tv))) else {
		error(error)
	}
}

fn accept(h: poll::NetHandle, addr: uintptr, addrlen: sys::Socklen)!: poll::NetHandle {
	for {
		ret sys::Accept(h, addr, addrlen) else {
			match error {
			| sys::EINTR:
				continue
			| sys::ECONNABORTED:
				// This means that a socket on the listen
				// queue was closed before we Accept()ed it;
				// it's a silly error, so try again.
				continue
			}
			error(error)
		}
	}
}