// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use integ "std/jule/integrated"
use "std/mem"
use "std/sys"
use "std/time"

fn lastErrorCode(): sys::Errno {
	ret sys::GetLastErrno()
}

fn closeSocketBlockingMode(handle: poll::NetHandle)! {
	mut arg := sys::Fcntl(handle, sys::F_GETFL, 0)
	if arg < 0 {
		error(lastErrorCode())
	}
	arg |= sys::O_NONBLOCK
	if sys::Fcntl(handle, sys::F_SETFL, arg) < 0 {
		error(lastErrorCode())
	}
}

fn openSocketBlockingMode(handle: poll::NetHandle)! {
	mut arg := sys::Fcntl(handle, sys::F_GETFL, 0)
	if arg < 0 {
		error(lastErrorCode())
	}
	arg &= ^sys::O_NONBLOCK
	if sys::Fcntl(handle, sys::F_SETFL, arg) < 0 {
		error(lastErrorCode())
	}
}

unsafe fn connectSocket(handle: poll::NetHandle, sockAddr: *sys::Sockaddr, sockLen: uint, timeout: time::Duration)! {
	if timeout == 0 {
		connectSocketNoTimeout(handle, sockAddr, sockLen) else { error(error) }
		ret
	}
	tv, ok := timevalFromDuration(timeout)
	if !ok {
		error(ErrInvalidTimeout)
	}
	if tv.Sec == 0 && tv.Usec == 0 {
		connectSocketNoTimeout(handle, sockAddr, sockLen) else { error(error) }
		ret
	}
	closeSocketBlockingMode(handle) else { error(error) }
	mut res := sys::Connect(handle, sockAddr, sockLen)
	if res < 0 {
		err := lastErrorCode()
		if err != sys::EINPROGRESS {
			error(err)
		}
	} else {
		ret
	}
	mut fd := sys::Fd{}
	sys::FdZero(&fd)
	sys::FdSet(handle, &fd)
lookup:
	for {
		res = sys::Select(handle+1, nil, &fd, nil, &tv)
		err := lastErrorCode()
		match {
		| res < 0 && err != sys::EINTR:
			error(err)
		| res > 0:
			len2 := (integ::UnsignedInt)(mem::SizeOf(int))
			opt := 0
			if sys::Getsockopt(handle, sys::SOL_SOCKET, sys::SO_ERROR, &opt, &len2) < 0 {
				error(lastErrorCode())
			}
			if opt != 0 {
				error(opt)
			}
			break lookup
		|:
			// Timeout.
			error(ErrTimeout)
		}
	}
	openSocketBlockingMode(handle) else { error(error) }
}

fn setSocketTimeout(handle: poll::NetHandle, scope: int, timeout: time::Duration)! {
	tv, ok := timevalFromDuration(timeout)
	if !ok {
		error(ErrInvalidTimeout)
	}
	unsafe {
		if sys::Setsockopt(handle, sys::SOL_SOCKET, scope, &tv, mem::SizeOf(tv)) < 0 {
			error(lastErrorCode())
		}
	}
}

unsafe fn accept(h: poll::NetHandle, addr: *sys::Sockaddr, addrLen: *poll::AddrLen): (poll::NetHandle, ok: bool) {
	for {
		handle := sys::Accept(h, addr, addrLen)
		ok = handle != -1
		if ok {
			ret handle, ok
		}
		err := lastErrorCode()
		match err {
		| sys::EINTR:
			continue
		| sys::ECONNABORTED:
			// This means that a socket on the listen
			// queue was closed before we Accept()ed it;
			// it's a silly error, so try again.
			continue
		}
		ret 0, false
	}
}