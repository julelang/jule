// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/byteslite"
use "std/runtime"
use "std/strings"
use "std/unsafe"

struct parseAddrError {
	input: str // the string given to ParseAddr
	msg:   str // an explanation of the parse failure
	at:    str // optionally, the unparsed portion of in at which the error occurred.
}

impl parseAddrError {
	fn Str(*self): str {
		if self.at != "" {
			ret self.msg + " (input " + self.input + ") (at " + self.at + ")"
		}
		ret self.msg + " (input" + self.input + ")"
	}
}

// Returns the address of the IPv4 address given by the 4-bytes representation.
fn ipAddrFrom4(ip: IP): u128 {
	ret u128{
		hi: 0,
		lo: 0xFFFF00000000 | u64(ip[0])<<24 | u64(ip[1])<<16 | u64(ip[2])<<8 | u64(ip[3]),
	}
}

// Returns the address of the IPv6 address given by the 16-bytes representation.
fn ipAddrFrom16(ip: IP): u128 {
	ret u128{
		hi: beU64(ip[:8]),
		lo: beU64(ip[8:]),
	}
}

fn beU64(ip: IP): u64 {
	ret u64(ip[7]) | u64(ip[6])<<8 | u64(ip[5])<<16 | u64(ip[4])<<24 |
		u64(ip[3])<<32 | u64(ip[2])<<40 | u64(ip[1])<<48 | u64(ip[0])<<56
}

fn beU64v4(ip: IP): u64 {
	ret u64(ip[3])<<24 | u64(ip[2])<<16 | u64(ip[1])<<8 | u64(ip[0])
}

fn bePutU64v4(mut ip: IP, v: u64) {
	ip[3] = byte(v >> 24)
	ip[2] = byte(v >> 16)
	ip[1] = byte(v >> 8)
	ip[0] = byte(v)
}

fn bePutU64(mut ip: IP, v: u64) {
	ip[7] = byte(v)
	ip[6] = byte(v >> 8)
	ip[5] = byte(v >> 16)
	ip[4] = byte(v >> 24)
	ip[3] = byte(v >> 32)
	ip[2] = byte(v >> 40)
	ip[1] = byte(v >> 48)
	ip[0] = byte(v >> 56)
}

// Returns the i'th byte of ip. If ip is not an IPv4, v4 returns
// unspecified garbage.
fn v4(ip: u128, i: u8): u8 {
	ret u8(ip.lo >> ((3 - i) << 3))
}

// Returns the i'th 16-bit word of ip. If ip is an IPv4 address,
// this accesses the IPv4-mapped IPv6 address form of the IP.
fn v6u16(ip: u128, i: u8): u16 {
	mut p := u64((i / 4) % 2)
	if p == 0 {
		p = ip.hi
	} else {
		p = ip.lo
	}
	ret u16(p >> ((3 - i%4) << 4))
}

// String of the hex digits from 0 to f. It's used in
// appendDecimal and appendHex to format IP addresses.
const digits = "0123456789abcdef"

fn appendDecimal(mut &s: *strings::Builder, x: u8) {
	if x >= 100 {
		s.WriteByte(digits[x/100])!
	}
	if x >= 10 {
		s.WriteByte(digits[x/10%10])!
	}
	s.WriteByte(digits[x%10])!
}

fn appendHex(mut &s: *strings::Builder, x: u16) {
	if x >= 0x1000 {
		s.WriteByte(digits[x>>12])!
	}
	if x >= 0x100 {
		s.WriteByte(digits[x>>8&0xF])!
	}
	if x >= 0x10 {
		s.WriteByte(digits[x>>4&0xF])!
	}
	s.WriteByte(digits[x&0xF])!
}

fn str4(ip: u128): str {
	const Max = len("255.255.255.255")
	mut s := strings::Builder{}
	s.Grow(Max)
	appendDecimal(&s, v4(ip, 0))
	s.WriteByte('.')!
	appendDecimal(&s, v4(ip, 1))
	s.WriteByte('.')!
	appendDecimal(&s, v4(ip, 2))
	s.WriteByte('.')!
	appendDecimal(&s, v4(ip, 3))
	ret s.Str()
}

fn str16(ip: u128): str {
	const Max = len("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff%enp5s0")
	mut s := strings::Builder{}
	s.Grow(Max)

	mut zeroStart, mut zeroEnd := u8(255), u8(255)
	mut i := u8(0)
	for i < 8; i++ {
		mut j := i
		for j < 8 && v6u16(ip, j) == 0 {
			j++
		}
		mut l := j - i
		if l >= 2 && l > zeroEnd-zeroStart {
			zeroStart, zeroEnd = i, j
		}
	}

	i = 0
	for i < 8; i++ {
		if i == zeroStart {
			s.WriteStr("::")!
			i = zeroEnd
			if i >= 8 {
				break
			}
		} else if i > 0 {
			s.WriteByte(':')!
		}
		appendHex(&s, v6u16(ip, i))
	}

	ret s.Str()
}

fn parseIPv4Fields(addr: str, off: int, end: int, mut ip: IP)! {
	mut val, mut pos := 0, 0
	mut digLen := 0 // number of digits in current octet
	mut s := addr[off:end]
	mut i := 0
	for i < len(s); i++ {
		if s[i] >= '0' && s[i] <= '9' {
			if digLen == 1 && val == 0 {
				error(&parseAddrError{input: addr, msg: "IPv4 field has octet with leading zero"})
			}
			val = val*10 + int(s[i]) - '0'
			digLen++
			if val > 255 {
				error(&parseAddrError{input: addr, msg: "IPv4 field has value >255"})
			}
		} else if s[i] == '.' {
			// .1.2.3
			// 1.2.3.
			// 1..2.3
			if i == 0 || i == len(s)-1 || s[i-1] == '.' {
				error(&parseAddrError{input: addr, msg: "IPv4 field must have at least one digit", at: s[i:]})
			}
			// 1.2.3.4.5
			if pos == 3 {
				error(&parseAddrError{input: addr, msg: "IPv4 address too long"})
			}
			ip[pos] = byte(val)
			pos++
			val = 0
			digLen = 0
		} else {
			error(&parseAddrError{input: addr, msg: "unexpected character", at: s[i:]})
		}
	}
	if pos < 3 {
		error(&parseAddrError{input: addr, msg: "IPv4 address too short"})
	}
	ip[3] = byte(val)
}

fn parseIPv4(addr: str)!: IP {
	mut ip := make(IP, 4)
	parseIPv4Fields(addr, 0, len(addr), ip)?
	ret ip
}

// Parses addr as an IPv6 address (in form "2001:db8::68").
fn parseIPv6(addr: str)!: TCPAddr {
	mut s := addr

	// Split off the zone right from the start. Yes it's a second scan
	// of the string, but trying to handle it inline makes a bunch of
	// other inner loop conditionals more expensive, and it ends up
	// being slower.
	let mut zone: str = ""
	mut i := byteslite::IndexByteStr(s, '%')
	if i != -1 {
		s, zone = s[:i], s[i+1:]
		if len(zone) == 0 {
			// Not allowed to have an empty zone if explicitly specified.
			error(&parseAddrError{input: addr, msg: "zone must be a non-empty string"})
		}
	}

	mut ip := make(IP, 16)
	mut ellipsis := -1 // Position of ellipsis in IP.

	// Might have leading ellipsis.
	if len(s) >= 2 && s[0] == ':' && s[1] == ':' {
		ellipsis = 0
		s = s[2:]
		// Might be only ellipsis.
		if len(s) == 0 {
			mut tcpAddr := TCPAddr{
				IP: IPv6Unspecified.To16(),
				Zone: zone,
			}
			ret tcpAddr
		}
	}

	// Loop, parsing hex numbers followed by colon.
	i = 0
	for i < 16 {
		// Hex number. Similar to parseIPv4, inlining the hex number
		// parsing yields a significant performance increase.
		mut off := 0
		mut acc := u32(0)
		for off < len(s); off++ {
			c := s[off]
			if c >= '0' && c <= '9' {
				acc = (acc << 4) + u32(c-'0')
			} else if c >= 'a' && c <= 'f' {
				acc = (acc << 4) + u32(c-'a'+10)
			} else if c >= 'A' && c <= 'F' {
				acc = (acc << 4) + u32(c-'A'+10)
			} else {
				break
			}
			if off > 3 {
				// More than 4 digits in group, fail.
				error(&parseAddrError{input: addr, msg: "each group must have 4 or less digits", at: s})
			}
			if acc > u32(u16.Max) {
				// Overflow, fail.
				error(&parseAddrError{input: addr, msg: "IPv6 field has value >2^16", at: s})
			}
		}
		if off == 0 {
			// No digits found, fail.
			error(&parseAddrError{input: addr, msg: "each colon-separated field must have at least one digit", at: s})
		}

		// If followed by dot, might be in trailing IPv4.
		if off < len(s) && s[off] == '.' {
			if ellipsis < 0 && i != 12 {
				// Not the right place.
				error(&parseAddrError{input: addr, msg: "embedded IPv4 address must replace the final 2 fields of the address", at: s})
			}
			if i+4 > 16 {
				// Not enough room.
				error(&parseAddrError{input: addr, msg: "too many hex fields to fit and embedded IPv4 at the end of the address", at: s})
			}

			mut end := len(addr)
			if len(zone) > 0 {
				end -= len(zone) + 1
			}
			parseIPv4Fields(addr, end-len(s), end, ip[i:i+4])?
			s = s[:0]
			i += 4
			break
		}

		// Save this 16-bit chunk.
		ip[i] = byte(acc >> 8)
		ip[i+1] = byte(acc)
		i += 2

		// Stop at end of string.
		s = s[off:]
		if len(s) == 0 {
			break
		}

		// Otherwise must be followed by colon and more.
		if s[0] != ':' {
			error(&parseAddrError{input: addr, msg: "unexpected character, want colon", at: s})
		} else if len(s) == 1 {
			error(&parseAddrError{input: addr, msg: "colon must be followed by more characters", at: s})
		}
		s = s[1:]

		// Look for ellipsis.
		if s[0] == ':' {
			if ellipsis >= 0 { // already have one
				error(&parseAddrError{input: addr, msg: "multiple :: in address", at: s})
			}
			ellipsis = i
			s = s[1:]
			if len(s) == 0 { // can be at end
				break
			}
		}
	}
	// Must have used entire string.
	if len(s) != 0 {
		error(&parseAddrError{input: addr, msg: "trailing garbage after address", at: s})
	}

	// If didn't parse enough, expand ellipsis.
	if i < 16 {
		if ellipsis < 0 {
			error(&parseAddrError{input: addr, msg: "address string too short"})
		}
		n := 16 - i
		mut j := i - 1
		for j >= ellipsis; j-- {
			ip[j+n] = ip[j]
		}
		j = ellipsis
		for j < ellipsis+n; j++ {
			ip[j] = 0
		}
	} else if ellipsis >= 0 {
		// Ellipsis must represent at least one 0 group.
		error(&parseAddrError{input: addr, msg: "the :: must expand to at least one field of zeros"})
	}

	// Parse IP address.
	u128addr := ipAddrFrom16(ip)
	bePutU64(ip[:8], u128addr.hi)
	bePutU64(ip[8:], u128addr.lo)
	mut tcpAddr := TCPAddr{
		IP: ip,
		Zone: str(zone),
	}
	tcpAddr.IP = tcpAddr.IP.To16()
	ret tcpAddr
}

fn htons(x: int): u16 {
	if runtime::BigEndian {
		ret u16(x)
	}
	ret ((u16(x) & 0xFF) << 8) | ((u16(x) & 0xFF00) >> 8)
}

fn ntohs(x: int): u16 {
	if runtime::BigEndian {
		ret u16(x)
	}
	ret ((u16(x) & 0xFF) << 8) | ((u16(x) & 0xFF00) >> 8)
}