// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use "std/mem"
use "std/sys"
use "std/time"

// TCP listener.
// In most cases, represents TCP server.
struct TCPListener {
	addr:   &TCPAddr
	mut v6: bool
	mut fd: &poll::FD
}

impl Listener for TCPListener {}

impl TCPListener {
	// Binds new TCP listener and starts listening given address.
	// Returns relevant created &TCPListener if success.
	// If addr is not a valid address, it will forward relevant parse exceptionals.
	// In addition, any bind and listening error will be return as exceptional.
	//
	// See the [Dial] function for a description of the addr parameter.
	static fn Bind(addr: str)!: &TCPListener {
		ret tcpBind(Network.TCP, addr) else { error(error) }
	}

	// Connects to TCP listener by given address.
	// Returns relevant created &TCPConn if success.
	// If addr is not a valid address, it will forward relevant parse exceptionals.
	// In addition, any bind and listening error will be return as exceptional.
	//
	// See the [Dial] function for a description of the addr parameter.
	static fn Dial(addr: str)!: &TCPConn {
		ret tcpDial(Network.TCP, addr, 0) else { error(error) }
	}

	// Same as TCPListener.Dial, but uses timeout.
	static fn DialTimeout(addr: str, timeout: time::Duration)!: &TCPConn {
		ret tcpDial(Network.TCP, addr, timeout) else { error(error) }
	}

	// Accepts incoming connection, returns &TCPConn.
	// Panics if connection is closed.
	fn Accept(self)!: Conn {
		if self.fd == nil {
			panic("net: TCPListener.Accept: connection is not open")
		}
		if self.v6 { // IPv6
			mut clientAddr := sys::SockaddrIn6{}
			clientAddrLen := unsafe { poll::AddrLen(mem::SizeOf(clientAddr)) }
			handle := unsafe { sys::Accept(poll::NetHandle(self.fd.File), (*sys::Sockaddr)(&clientAddr), &clientAddrLen) }
			if handle < 0 {
				error(lastErrorCode())
			}
			mut ip := make(IP, IPv6Len)
			unsafe {
				getSocketAddr(handle, (*sys::Sockaddr)(&clientAddr), clientAddrLen) else { error(error) }
			}
			for i in ip {
				ip[i] = clientAddr.sin6_addr.s6_addr[i]
			}
			ret &TCPConn{
				Addr: &TCPAddr{
					IP: ip,
					Port: int(ntohs(int(clientAddr.sin6_port))),
				},
				fd: poll::FD.New(u64(handle), poll::Socket) else { error(error) },
				v6: true,
			}
		} else { // IPv4
			mut clientAddr := sys::SockaddrIn{}
			clientAddrLen := unsafe { poll::AddrLen(mem::SizeOf(clientAddr)) }
			handle := unsafe { sys::Accept(poll::NetHandle(self.fd.File), (*sys::Sockaddr)(&clientAddr), &clientAddrLen) }
			if handle < 0 {
				error(lastErrorCode())
			}
			mut ip := make(IP, IPv4Len)
			unsafe {
				getSocketAddr(handle, (*sys::Sockaddr)(&clientAddr), clientAddrLen) else { error(error) }
			}
			bePutU64v4(ip, u64(clientAddr.sin_addr.s_addr))
			ret &TCPConn{
				Addr: &TCPAddr{
					IP: ip,
					Port: int(ntohs(int(clientAddr.sin_port))),
				},
				fd: poll::FD.New(u64(handle), poll::Socket) else { error(error) },
			}
		}
	}

	// Returns network name which is listening.
	// If connection closed, returns Network.TCP as a general network.
	fn Network(self): Network {
		match {
		| self.fd == nil:
			ret Network.TCP
		| self.v6:
			ret Network.TCP6
		|:
			ret Network.TCP4
		}
	}

	// Closes connection.
	fn Close(mut self)! {
		if self.fd == nil {
			ret
		}
		if !self.fd.Close() {
			error(lastErrorCode())
		}
		self.fd = nil
		self.v6 = false
	}
}

fn tcpBind(network: Network, &addr: str)!: &TCPListener {
	mut tcpAddr := TCPAddr.Resolve(network, addr) else { error(error) }
	mut fd := (&poll::FD)(nil)
	mut v6 := false
	if tcpAddr.IP.Empty() {
		match network {
		| Network.TCP | Network.TCP4:
			mut handle := sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}

			fd = poll::FD.New(u64(handle), poll::Socket) else { error(error) }

			mut sockAddr := sys::SockaddrIn{}
			sockAddr.sin_family = sys::AF_INET
			sockAddr.sin_port = htons(tcpAddr.Port)
			sockAddr.sin_addr.s_addr = sys::INADDR_ANY
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					fd.Close()
					error(lastErrorCode())
				}
			}
		| Network.TCP6:
			v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}

			fd = poll::FD.New(u64(handle), poll::Socket) else { error(error) }

			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			sockAddr.sin6_port = htons(tcpAddr.Port)
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					fd.Close()
					error(lastErrorCode())
				}
			}
		|:
			error(&AddrError{Err: "invalid network: " + str(network)})
		}
	} else {
		mut ipv4 := tcpAddr.IP.To4()
		if ipv4.Empty() {
			if network == Network.TCP4 {
				error(&AddrError{Err: "expected IPv4 address but found IPv6", Addr: addr})
			}
			v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}

			fd = poll::FD.New(u64(handle), poll::Socket) else { error(error) }

			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			for i, b in tcpAddr.IP {
				sockAddr.sin6_addr.s6_addr[i] = b
			}
			sockAddr.sin6_port = htons(tcpAddr.Port)
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					fd.Close()
					error(lastErrorCode())
				}
			}
		} else {
			if network == Network.TCP6 {
				error(&AddrError{Err: "expected IPv6 address but found IPv4", Addr: addr})
			}
			tcpAddr.IP = ipv4
			handle := sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}

			fd = poll::FD.New(u64(handle), poll::Socket) else { error(error) }

			mut sockAddr := sys::SockaddrIn{}
			sockAddr.sin_family = sys::AF_INET
			sockAddr.sin_port = htons(tcpAddr.Port)
			sockAddr.sin_addr.s_addr = u32(beU64v4(tcpAddr.IP))
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					fd.Close()
					error(lastErrorCode())
				}
			}
		}
	}
	const MaxQueueLength = 10 // Length of maximum connection waiters.
	if sys::Listen(poll::NetHandle(fd.File), MaxQueueLength) < 0 {
		fd.Close()
		error(lastErrorCode())
	}
	ret &TCPListener{
		v6: v6,
		addr: tcpAddr,
		fd: fd,
	}
}

fn tcpDial(network: Network, &addr: str, timeout: time::Duration)!: &TCPConn {
	mut tcpAddr := TCPAddr.Resolve(network, addr) else { error(error) }
	mut fd := (&poll::FD)(nil)
	mut v6 := false
	if tcpAddr.IP.Empty() {
		match network {
		| Network.TCP | Network.TCP4:
			handle := sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}

			fd = poll::FD.New(u64(handle), poll::Socket) else { error(error) }

			mut sockAddr := sys::SockaddrIn{}
			sockAddr.sin_family = sys::AF_INET
			sockAddr.sin_port = htons(tcpAddr.Port)
			sockAddr.sin_addr.s_addr = sys::INADDR_ANY
			unsafe {
				connectSocket(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr), timeout) else {
					fd.Close()
					error(error)
				}
			}
		| Network.TCP6:
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}

			fd = poll::FD.New(u64(handle), poll::Socket) else { error(error) }

			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			sockAddr.sin6_port = htons(tcpAddr.Port)
			unsafe {
				connectSocket(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr), timeout) else {
					fd.Close()
					error(error)
				}
			}
		|:
			error(&AddrError{Err: "invalid network: " + str(network)})
		}
	} else {
		mut ipv4 := tcpAddr.IP.To4()
		if ipv4.Empty() {
			if network == Network.TCP4 {
				error(&AddrError{Err: "expected IPv4 address but found IPv6", Addr: addr})
			}
			v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}

			fd = poll::FD.New(u64(handle), poll::Socket) else { error(error) }

			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			for i, b in tcpAddr.IP {
				sockAddr.sin6_addr.s6_addr[i] = b
			}
			sockAddr.sin6_port = htons(tcpAddr.Port)
			unsafe {
				connectSocket(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr), timeout) else {
					fd.Close()
					error(error)
				}
			}
		} else {
			if network == Network.TCP6 {
				error(&AddrError{Err: "expected IPv6 address but found IPv4", Addr: addr})
			}
			tcpAddr.IP = ipv4
			handle := sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}

			fd = poll::FD.New(u64(handle), poll::Socket) else { error(error) }

			mut sockAddr := sys::SockaddrIn{}
			sockAddr.sin_family = sys::AF_INET
			sockAddr.sin_port = htons(tcpAddr.Port)
			sockAddr.sin_addr.s_addr = u32(beU64v4(tcpAddr.IP))
			unsafe {
				connectSocket(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr), timeout) else {
					fd.Close()
					error(error)
				}
			}
		}
	}
	ret &TCPConn{
		Addr: tcpAddr,
		fd: fd,
		v6: v6,
	}
}