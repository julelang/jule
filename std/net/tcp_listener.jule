// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use "std/mem"
use "std/sys"
use "std/time"

// TCP listener.
// In most cases, represents TCP server.
struct TCPListener {
	addr:   &TCPAddr
	mut v6: bool
	mut fd: &netFD
}

impl Listener for TCPListener {}

impl TCPListener {
	// Binds new TCP listener and starts listening given address.
	// Returns relevant created &TCPListener if success.
	// If addr is not a valid address, it will forward relevant parse exceptionals.
	// In addition, any bind and listening error will be return as exceptional.
	//
	// See the [Dial] function for a description of the addr parameter.
	fn Bind(addr: str)!: &TCPListener {
		ret tcpBind(Network.TCP, addr)?
	}

	// Connects to TCP listener by given address.
	// Returns relevant created &TCPConn if success.
	// If addr is not a valid address, it will forward relevant parse exceptionals.
	// In addition, any bind and listening error will be return as exceptional.
	//
	// See the [Dial] function for a description of the addr parameter.
	fn Dial(addr: str)!: &TCPConn {
		ret tcpDial(Network.TCP, addr, 0)?
	}

	// Same as TCPListener.Dial, but uses timeout.
	fn DialTimeout(addr: str, timeout: time::Duration)!: &TCPConn {
		ret tcpDial(Network.TCP, addr, timeout)?
	}

	// Accepts incoming connection, returns &TCPConn.
	// Panics if connection is closed.
	fn Accept(*self)!: Conn {
		if self.fd == nil {
			panic("net: TCPListener.Accept: connection is not open")
		}
		if self.v6 { // IPv6
			mut clientAddr := sys::RawSockaddrInet6{}
			clientAddrLen := sys::Socklen(mem::SizeOf(clientAddr))
			handle := accept(self.fd.Handle(), uintptr(&clientAddr), clientAddrLen)?
			mut ip := make(IP, IPv6Len)
			unsafe {
				getSocketAddr(handle, uintptr(&clientAddr), clientAddrLen)?
			}
			copy(ip, IP(clientAddr.Addr[:]))
			ret &TCPConn{
				Addr: &TCPAddr{
					IP: ip,
					Port: int(ntohs(int(clientAddr.Port))),
				},
				fd: newFD(handle, poll::Socket, sys::SOCK_STREAM),
				v6: true,
			}
		} else { // IPv4
			mut clientAddr := sys::RawSockaddrInet4{}
			clientAddrLen := sys::Socklen(mem::SizeOf(clientAddr))
			handle := accept(self.fd.Handle(), uintptr(&clientAddr), clientAddrLen)?
			mut ip := make(IP, IPv4Len)
			unsafe {
				getSocketAddr(handle, uintptr(&clientAddr), clientAddrLen)?
			}
			copy(ip, IP(clientAddr.Addr[:]))
			ret &TCPConn{
				Addr: &TCPAddr{
					IP: ip,
					Port: int(ntohs(int(clientAddr.Port))),
				},
				fd: newFD(handle, poll::Socket, sys::SOCK_STREAM),
			}
		}
	}

	// Returns network name which is listening.
	// If connection closed, returns Network.TCP as a general network.
	fn Network(*self): Network {
		match {
		| self.fd == nil:
			ret Network.TCP
		| self.v6:
			ret Network.TCP6
		|:
			ret Network.TCP4
		}
	}

	// Closes connection.
	fn Close(mut *self)! {
		if self.fd == nil {
			ret
		}
		self.fd.Close()?
		self.fd = nil
		self.v6 = false
	}
}

fn tcpBind(network: Network, addr: str)!: &TCPListener {
	mut tcpAddr := TCPAddr.Resolve(network, addr)?
	mut fd := (&netFD)(nil)
	mut v6 := false
	if tcpAddr.IP.Empty() {
		match network {
		| TCP | TCP4:
			mut handle := sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)?

			fd = newFD(handle, poll::Socket, sys::SOCK_STREAM)

			mut sockAddr := sys::RawSockaddrInet4{}
			sockAddr.Family = sys::AF_INET
			sockAddr.Port = htons(tcpAddr.Port)
			sys::Bind(handle, uintptr(&sockAddr), sys::Socklen(mem::SizeOf(sockAddr))) else {
				fd.Close()?
				error(error)
			}
		| TCP6:
			v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)?

			fd = newFD(handle, poll::Socket, sys::SOCK_STREAM)

			mut sockAddr := sys::RawSockaddrInet6{}
			sockAddr.Family = sys::AF_INET6
			sockAddr.Port = htons(tcpAddr.Port)
			sys::Bind(handle, uintptr(&sockAddr), sys::Socklen(mem::SizeOf(sockAddr))) else {
				fd.Close()?
				error(error)
			}
		|:
			error(&AddrError{Err: "invalid network: " + str(network)})
		}
	} else {
		mut ipv4 := tcpAddr.IP.To4()
		if ipv4.Empty() {
			if network == Network.TCP4 {
				error(&AddrError{Err: "expected IPv4 address but found IPv6", Addr: addr})
			}
			v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)?

			fd = newFD(handle, poll::Socket, sys::SOCK_STREAM)

			mut sockAddr := sys::RawSockaddrInet6{}
			sockAddr.Family = sys::AF_INET6
			sockAddr.Port = htons(tcpAddr.Port)
			ipv6 := tcpAddr.IP.To16()
			copy(sockAddr.Addr[:], ipv6)
			sys::Bind(handle, uintptr(&sockAddr), sys::Socklen(mem::SizeOf(sockAddr))) else {
				fd.Close()?
				error(error)
			}
		} else {
			if network == Network.TCP6 {
				error(&AddrError{Err: "expected IPv6 address but found IPv4", Addr: addr})
			}
			tcpAddr.IP = ipv4
			handle := sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)?

			fd = newFD(handle, poll::Socket, sys::SOCK_STREAM)

			mut sockAddr := sys::RawSockaddrInet4{}
			sockAddr.Family = sys::AF_INET
			sockAddr.Port = htons(tcpAddr.Port)
			copy(sockAddr.Addr[:], ipv4)
			sys::Bind(handle, uintptr(&sockAddr), sys::Socklen(mem::SizeOf(sockAddr))) else {
				fd.Close()?
				error(error)
			}
		}
	}
	const MaxQueueLength = 10 // Length of maximum connection waiters.
	sys::Listen(fd.Handle(), MaxQueueLength) else {
		fd.Close()?
		error(error)
	}
	ret &TCPListener{
		v6: v6,
		addr: tcpAddr,
		fd: fd,
	}
}

fn tcpDial(network: Network, addr: str, timeout: time::Duration)!: &TCPConn {
	mut tcpAddr := TCPAddr.Resolve(network, addr)?
	mut fd := (&netFD)(nil)
	mut v6 := false
	if tcpAddr.IP.Empty() {
		match network {
		| TCP | TCP4:
			handle := sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)?

			fd = newFD(handle, poll::Socket, sys::SOCK_STREAM)

			mut sockAddr := sys::RawSockaddrInet4{}
			sockAddr.Family = sys::AF_INET
			sockAddr.Port = htons(tcpAddr.Port)
			connectSocket(handle, uintptr(&sockAddr), sys::Socklen(mem::SizeOf(sockAddr)), timeout) else {
				fd.Close()?
				error(error)
			}
		| TCP6:
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)?

			fd = newFD(handle, poll::Socket, sys::SOCK_STREAM)

			mut sockAddr := sys::RawSockaddrInet6{}
			sockAddr.Family = sys::AF_INET6
			sockAddr.Port = htons(tcpAddr.Port)
			connectSocket(handle, uintptr(&sockAddr), sys::Socklen(mem::SizeOf(sockAddr)), timeout) else {
				fd.Close()?
				error(error)
			}
		|:
			error(&AddrError{Err: "invalid network: " + str(network)})
		}
	} else {
		mut ipv4 := tcpAddr.IP.To4()
		if ipv4.Empty() {
			if network == Network.TCP4 {
				error(&AddrError{Err: "expected IPv4 address but found IPv6", Addr: addr})
			}
			v6 = true
			handle := sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)?

			fd = newFD(handle, poll::Socket, sys::SOCK_STREAM)

			mut sockAddr := sys::RawSockaddrInet6{}
			sockAddr.Family = sys::AF_INET6
			sockAddr.Port = htons(tcpAddr.Port)
			ipv6 := tcpAddr.IP.To16()
			copy(sockAddr.Addr[:], ipv6)
			connectSocket(handle, uintptr(&sockAddr), sys::Socklen(mem::SizeOf(sockAddr)), timeout) else {
				fd.Close()?
				error(error)
			}
		} else {
			if network == Network.TCP6 {
				error(&AddrError{Err: "expected IPv6 address but found IPv4", Addr: addr})
			}
			tcpAddr.IP = ipv4
			handle := sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)?

			fd = newFD(handle, poll::Socket, sys::SOCK_STREAM)

			mut sockAddr := sys::RawSockaddrInet4{}
			sockAddr.Family = sys::AF_INET
			sockAddr.Port = htons(tcpAddr.Port)
			copy(sockAddr.Addr[:], ipv4)
			connectSocket(handle, uintptr(&sockAddr), sys::Socklen(mem::SizeOf(sockAddr)), timeout) else {
				fd.Close()?
				error(error)
			}
		}
	}
	ret &TCPConn{
		Addr: tcpAddr,
		fd: fd,
		v6: v6,
	}
}