// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/conv"

// Represents the address of a TCP end point.
struct TCPAddr {
	IP:   IP
	Port: int
	Zone: str // IPv6 scoped addressing zone.
}

impl Addr for TCPAddr {
	// Returns the address's network name.
	fn Network(*self): str {
		ret "tcp"
	}

	// Returns string form of address.
	fn Str(*self): str {
		ip := self.IP.ipEmptyStr()
		if self.Zone != "" {
			ret JoinHostPort(ip+"%"+self.Zone, conv::Itoa(self.Port))
		}
		ret JoinHostPort(ip, conv::Itoa(self.Port))
	}
}

impl TCPAddr {
	// Returns an address of TCP end point.
	// The network must be a TCP network name.
	//
	// If the host in the address parameter is not a literal IP address or
	// the port is not a literal port number, it resolves the
	// address to an address of TCP end point.
	// Otherwise, it parses the address as a pair of literal IP address
	// and port number.
	// The address parameter can use a host name, but this is not
	// recommended, because it will return at most one of the host name's
	// IP addresses.
	//
	// See the [Dial] function for a description of the network and address parameters.
	fn Resolve(mut network: Network, address: str)!: &TCPAddr {
		match network {
		| TCP | TCP4 | TCP6:
			mut addrs := resolveInternetAddrList(network, address)?
			ret addrs.forResolve(network, address).(&TCPAddr)
		|:
			error(&AddrError{Err: "invalid network: " + str(network)})
		}
	}
}