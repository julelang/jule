// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/mem"
use "std/sys"
use "std/unicode/utf16"
use "std/unicode/utf8"

// This information adopted from the Go programming language:
//
// Windows ReadFile and WSARecv use DWORD (u32) parameter to pass buffer length.
// This prevents us reading blocks larger than 4GB.
// See golang.org/issue/26923.
const maxRW = 1 << 30 // 1GB is large enough and keeps subsequent reads aligned

// FD is a file descriptor.
// Provides internal, common implementation for
// file descriptors, console handles, and sockets.
struct FD {
	// The file descriptor should be compatible
	// with pointers and other integer kinds such as UNIX file descriptors.
	File:  u64
	Flags: int

	// Whether this is a streaming descriptor,
	// as opposed to a packet-based descriptor like a UDP socket.
	IsStream: bool

	// Whether a zero byte read indicates EOF. This is false for a
	// message based socket connection.
	ZeroReadIsEOF: bool

	// For console input/output.
	lastbits:       []byte // first few bytes of the last incomplete rune in last write
	readu16:        []u16  // buffer to hold u16s obtained with ReadConsole
	readbyte:       []byte // buffer to hold decoding of readu16 from utf16 to utf8
	readbyteOffset: int    // readbyte[readOffset:] is yet to be consumed with file.Read
}

impl FD {
	fn Init(mut *self)! {
		// Disable SIO_UDP_CONNRESET behavior.
		// http://support.microsoft.com/kb/263823
		if self.Flags&SocketNoConn == SocketNoConn {
			r := u32(0)
			flag := u32(0)
			size := u32(mem::SizeOf(flag))
			fr := unsafe { sys::WSAIoctl(self.File, sys::SIO_UDP_CONNRESET, (*byte)(&flag), size, nil, 0, &r) }
			if fr != 0 {
				error(sys::Errno(sys::WSAGetLastError()))
			}
		}
	}

	// Writes bytes to the file descriptor and returns written byte count.
	// The number of bytes written can never exceed the length of the buf.
	fn Write(mut *self, buf: []byte)!: (n: int) {
		if len(buf) == 0 {
			// If the caller wanted a zero byte write, return immediately
			// without trying to write.
			ret 0
		}

		mut buf2 := unsafe { *(&buf) } // break immutability, do not mutable the content
		for len(buf2) > 0 {
			mut b := buf2
			if len(b) > maxRW {
				b = b[:maxRW]
			}
			mut nn := 0
			match {
			| self.Flags&Console == Console:
				nn = self.writeConsole(b) else { error(error) }
			| self.Flags&File == File | self.Flags&Pipe == Pipe:
				nn = self.writeFile(b) else { error(error) }
			| self.Flags&Socket == Socket:
				nn = len(b)
				sys::Send(NetHandle(self.File), b, 0) else { error(error) }
			|:
				panic("std/internal/poll: unimplemented/unsupported file descriptor kind for Write")
			}
			n += nn
			buf2 = buf2[n:]
		}
		ret n
	}

	// Like Write, but wraps sendto syscall.
	// General for V4 and V6. Unsafe variant.
	fn WriteV(mut *self, buf: []byte, addr: uintptr, addrLen: sys::Socklen)!: (n: int) {
		if self.Flags&SocketNoConn != SocketNoConn {
			panic("std/internal/poll: unimplemented/unsupported file descriptor kind for WriteV")
		}
		if len(buf) == 0 {
			// If the caller wanted a zero byte read, return immediately
			// without trying to read.
			ret 0
		}
		for {
			mut max := len(buf)
			if max-n > maxRW {
				max = n + maxRW
			}
			part := buf[n:max]
			sys::Sendto(NetHandle(self.File), part, 0, addr, addrLen) else { error(error) }
			n += len(part)
			if n == len(buf) {
				ret
			}
		}
	}

	// Writes buf to file handle, returns written byte count.
	// Returns -1 if error occurred.
	fn writeFile(mut *self, mut buf: []byte)!: (n: int) {
		ret sys::WriteFile(sys::Handle(self.File), buf) else { error(error) }
	}

	// Writes buf to console handle, returns written byte count.
	// Returns -1 if error occurred.
	fn writeConsole(mut *self, mut buf: []byte)!: (n: int) {
		n = len(buf)
		mut runes := make([]rune, 0, 256)
		if len(self.lastbits) > 0 {
			buf = append(self.lastbits, buf...)
			self.lastbits = nil
		}
		for len(buf) >= utf8::UTFMax || utf8::FullRune(buf) {
			r, l := utf8::DecodeRune(buf)
			runes = append(runes, r)
			buf = buf[l:]
		}
		if len(buf) > 0 {
			self.lastbits = make([]byte, len(buf))
			copy(self.lastbits, buf)
		}
		// This information adopted from the Go programming language:
		//
		// sys::WriteConsole seems to fail, if given large buffer.
		// So limit the buffer to 16000 characters. This number was
		// discovered by experimenting with sys::WriteConsole.
		const maxWrite = 16000
		for len(runes) > 0 {
			mut m := len(runes)
			if m > maxWrite {
				m = maxWrite
			}
			chunk := runes[:m]
			runes = runes[m:]
			mut u16s := utf16::Encode(chunk)
			for len(u16s) > 0 {
				mut written := u32(0)
				unsafe { sys::WriteConsole(sys::Handle(self.File), &u16s[0], u32(len(u16s)), &written, nil) else { error(error) } }
				u16s = u16s[written:]
			}
		}
		ret
	}

	// Read bytes to buffer from the file descriptor and returns read byte count.
	// The number of bytes read can never exceed the length of the buf.
	// If the buf is larger than the number of bytes that can be read,
	// the buffer will not cause an overflow. Offset will be shifted
	// by the number of bytes read.
	fn Read(mut *self, mut buf: []byte)!: (n: int) {
		if len(buf) == 0 {
			// If the caller wanted a zero byte read, return immediately
			// without trying to read.
			ret 0
		}

		if len(buf) > maxRW {
			buf = buf[:maxRW]
		}

		match {
		| self.Flags&Console == Console:
			n = self.readConsole(buf) else { error(error) }
		| self.Flags&File == File | self.Flags&Pipe == Pipe:
			n = self.readFile(buf) else { error(error) }
		| self.Flags&Socket == Socket:
			n = sys::Recv(NetHandle(self.File), buf, 0) else { error(error) }
		|:
			panic("std/internal/poll: unimplemented/unsupported file descriptor kind for Read")
		}
		ret
	}

	// Like Read, but wraps recvfrom syscall.
	// General for V4 and V6. Unsafe variant.
	fn ReadV(mut *self, mut buf: []byte, addr: uintptr, addrLen: sys::Socklen)!: (n: int) {
		if self.Flags&SocketNoConn != SocketNoConn {
			panic("std/internal/poll: unimplemented/unsupported file descriptor kind for ReadV")
		}
		if len(buf) == 0 {
			// If the caller wanted a zero byte read, return immediately
			// without trying to read.
			ret 0
		}
		if len(buf) > maxRW {
			buf = buf[:maxRW]
		}
		ret sys::Recvfrom(NetHandle(self.File), buf, 0, addr, addrLen) else { error(error) }
	}

	// Reads from file handle into buf, returns read byte count.
	fn readFile(mut *self, mut buf: []byte)!: (n: int) {
		ret sys::ReadFile(sys::Handle(self.File), buf) else {
			if error == sys::ERROR_BROKEN_PIPE {
				// Work around ERROR_BROKEN_PIPE is returned on reading EOF from stdin.
				ret 0
			}
			error(error)
		}
	}

	// Reads from console handle into buf, returns read byte count.
	fn readConsole(mut *self, mut buf: []byte)!: (n: int) {
		if self.readu16 == nil {
			// This information adopted from the Go programming language:
			//
			// Note: sys::ReadConsole fails for very large buffers.
			// The limit is somewhere around (but not exactly) 16384.
			// Stay well below.
			self.readu16 = make([]u16, 0, 10000)
			self.readbyte = make([]byte, 0, 4*cap(self.readu16))
		}

		for self.readbyteOffset >= len(self.readbyte) {
			n = cap(self.readu16) - len(self.readu16)
			if n > len(buf) {
				n = len(buf)
			}
			mut nw := u32(0)
			unsafe {
				sys::ReadConsole(
					sys::Handle(self.File),
					&self.readu16[:len(self.readu16)+1][len(self.readu16)],
					u32(n),
					&nw) else { error(error) }
			}
			u16s := self.readu16[:len(self.readu16)+int(nw)]
			self.readu16 = self.readu16[:0]
			mut b := self.readbyte[:0]
			mut i := 0
			for i < len(u16s); i++ {
				mut r := rune(u16s[i])
				if utf16::IsSurrogate(r) {
					if i+1 == len(u16s) {
						if nw > 0 {
							// Save half surrogate pair for next time.
							self.readu16 = self.readu16[:1]
							self.readu16[0] = u16(r)
							break
						}
						r = utf8::RuneError
					} else {
						r = utf16::DecodeRune(r, rune(u16s[i+1]))
						if r != utf8::RuneError {
							i++
						}
					}
				}
				b = utf8::AppendRune(b, r)
			}
			self.readbyte = b
			self.readbyteOffset = 0
			if nw == 0 {
				break
			}
		}

		src := self.readbyte[self.readbyteOffset:]
		mut i := 0
		for i < len(src) && i < len(buf); i++ {
			x := src[i]
			if x == 0x1A { // Ctrl-Z
				if i == 0 {
					self.readbyteOffset++
				}
				break
			}
			buf[i] = x
		}
		self.readbyteOffset += i
		ret i
	}

	// Sets offset to next Read/Write operation and returns the new offset.
	// whence: 0 (Seek.Set) means, relative to the whence of the file, 1 (Seek.Cur)
	// means relative to the current offset, and 2 (Seek.End) means relative to end.
	fn Seek(mut *self, offset: i64, whence: int)!: (newoffset: i64) {
		ret sys::Seek(sys::Handle(self.File), offset, whence) else { error(error) }
	}

	// Imitates the POSIX ftruncate function.
	fn Ftruncate(mut *self, size: i64)! {
		sys::Ftruncate(sys::Handle(self.File), size) else { error(error) }
	}

	// Wraps sys::FlushFileBuffers.
	fn Fsync(mut *self)! {
		sys::FlushFileBuffers(sys::Handle(self.File)) else { error(error) }
	}

	// Closes file descriptor.
	fn Close(mut *self)! {
		match {
		| self.Flags&File == File | self.Flags&Pipe == Pipe | self.Flags&Pipe == Pipe | self.Flags&Console == Console:
			sys::CloseHandle(sys::Handle(self.File)) else { error(error) }
		| self.Flags&Socket == Socket | self.Flags&SocketNoConn == SocketNoConn:
			sys::CloseSocket(NetHandle(self.File)) else { error(error) }
		|:
			panic("std/internal/poll: unimplemented/unsupported file descriptor kind for Close")
		}
	}
}