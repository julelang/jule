// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/mem"
use "std/sys"

// FD flags. Kind flags should not be combined like File|Console|Socket.
const (
	File         = 1 << iota // Standard file descriptor.
	Socket                   // Socket file descriptor, not connectionless, such as TCP.
	SocketNoConn             // Like Socket kind, but connectionless, such as UDP.
	Console                  // Console file descriptor.
	Pipe                     // Pipe.
)

impl FD {
	// Returns new FD by file and kind.
	static fn New(file: u64, flags: int)!: &FD {
		mut f := &FD{
			File: file,
			Flags: flags,
		}
		f.Init() else { error(error) }
		ret f
	}

	// Like Read, but wraps the recvfrom syscall.
	fn ReadV4(mut self, mut buf: []byte, addr: sys::SockaddrInet4): (n: int, ok: bool) {
		addrLen := mem::SizeOf(addr)
		ret unsafe { self.ReadV(buf, &addr, addrLen) }
	}

	// Like Read, but wraps the recvfrom syscall.
	fn ReadV6(mut self, mut buf: []byte, addr: sys::SockaddrInet6): (n: int, ok: bool) {
		addrLen := mem::SizeOf(addr)
		ret unsafe { self.ReadV(buf, &addr, addrLen) }
	}

	// Like Write, but wraps the sendto syscall.
	fn WriteV4(mut self, buf: []byte, addr: sys::SockaddrInet4): (n: int, ok: bool) {
		addrLen := mem::SizeOf(addr)
		ret unsafe { self.WriteV(buf, &addr, addrLen) }
	}

	// Like Write, but wraps the sendo syscall.
	fn WriteV6(mut self, buf: []byte, addr: sys::SockaddrInet6): (n: int, ok: bool) {
		addrLen := mem::SizeOf(addr)
		ret unsafe { self.WriteV(buf, &addr, addrLen) }
	}
}