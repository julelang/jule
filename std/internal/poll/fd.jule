// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/io"
use "std/mem"
use "std/sys"

// FD flags. Kind flags should not be combined like File|Console|Socket.
const (
	File         = 1 << iota // Standard file descriptor.
	Socket                   // Socket file descriptor, not connectionless, such as TCP.
	SocketNoConn             // Like Socket kind, but connectionless, such as UDP.
	Console                  // Console file descriptor.
	Pipe                     // Pipe.
)

impl FD {
	// Returns new FD by file and kind.
	fn New(file: u64, flags: int)!: &FD {
		mut f := &FD{
			File: file,
			Flags: flags,
		}
		f.Init()?
		ret f
	}

	// Returns io::EOF when fd is available for reading end of file.
	// Otherwise returns n.
	fn statEOF(*self, n: int): int {
		if n == 0 && self.ZeroReadIsEOF {
			ret io::EOF
		}
		ret n
	}

	// Like Read, but wraps the recvfrom syscall.
	fn ReadV4(mut *self, mut buf: []byte, addr: sys::SockaddrInet4)!: (n: int) {
		addrLen := mem::SizeOf(addr)
		ret self.ReadV(buf, uintptr(&addr), sys::Socklen(addrLen))?
	}

	// Like Read, but wraps the recvfrom syscall.
	fn ReadV6(mut *self, mut buf: []byte, addr: sys::SockaddrInet6)!: (n: int) {
		addrLen := mem::SizeOf(addr)
		ret self.ReadV(buf, uintptr(&addr), sys::Socklen(addrLen))?
	}

	// Like Write, but wraps the sendto syscall.
	fn WriteV4(mut *self, buf: []byte, addr: sys::SockaddrInet4)!: (n: int) {
		addrLen := mem::SizeOf(addr)
		ret self.WriteV(buf, uintptr(&addr), sys::Socklen(addrLen))?
	}

	// Like Write, but wraps the sendo syscall.
	fn WriteV6(mut *self, buf: []byte, addr: sys::SockaddrInet6)!: (n: int) {
		addrLen := mem::SizeOf(addr)
		ret self.WriteV(buf, uintptr(&addr), sys::Socklen(addrLen))?
	}
}