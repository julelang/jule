// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/byteslite"
use "std/testing"

struct indexByteCase {
	bytes: []byte
	b:     byte
	i:     int
}

let casesIndexByte: []indexByteCase = [
	{[1, 2, 3, 4, 5, 6, 5, 4], 89, -1},
	{[1, 2, 3, 4, 5, 6, 5, 4], 1, 0},
	{[1, 2, 3, 4, 5, 6, 5, 4], 4, 3},
	{[1, 2, 3, 4, 5, 6, 5, 4], 5, 4},
]

let casesLastIndexByte: []indexByteCase = [
	{[1, 2, 3, 4, 5, 6, 5, 4], 89, -1},
	{[1, 2, 3, 4, 5, 6, 5, 4], 1, 0},
	{[1, 2, 3, 4, 5, 6, 5, 4], 4, 7},
	{[1, 2, 3, 4, 5, 6, 5, 4], 5, 6},
]

#test
fn testIndexByte(t: &testing::T) {
	for _, case in casesIndexByte {
		i := byteslite::IndexByte(case.bytes, case.b)
		if i != case.i {
			t.Errorf("expected {} for FindByte({}, {}), found {}", case.i, case.bytes, case.b, i)
		}
	}
}

#test
fn testLastIndexByte(t: &testing::T) {
	for _, case in casesLastIndexByte {
		i := byteslite::LastIndexByte(case.bytes, case.b)
		if i != case.i {
			t.Errorf("expected {} for FindByte({}, {}), found {}", case.i, case.bytes, case.b, i)
		}
	}
}