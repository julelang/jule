// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Converts decimal byte pointer to int.
// Return integer and success state.
unsafe fn AtoiBp(mut b: *byte, mut n: int): (i: int, ok: bool) {
	mut neg := *b == '-'
	if neg {
		if n == 1 {
			ret
		}
		n--
		b++
	}
	for n > 0; n-- {
		if '0' <= *b && *b <= '9' {
			i *= 10
			i += int(*b - '0')
		} else {
			ret
		}
		b++
	}
	ok = true
	if neg {
		i = -i
	}
	ret
}

// Same as AtoiBp.
fn Atoi(s: str): (i: int, ok: bool) {
	i, ok = unsafe { AtoiBp(&s[0], len(s)) }
	ret
}

// Converts hexadecimal bytes of string to int.
// Returns number, characters consumed, success state.
fn Xbtoi(s: []byte): (n: int, i: int, ok: bool) {
	for i < len(s); i++ {
		if '0' <= s[i] && s[i] <= '9' {
			n <<= 4
			n += int(s[i] - '0')
		} else if 'a' <= s[i] && s[i] <= 'f' {
			n <<= 4
			n += int(s[i]-'a') + 10
		} else if 'A' <= s[i] && s[i] <= 'F' {
			n <<= 4
			n += int(s[i]-'A') + 10
		} else {
			break
		}
	}
	if i == 0 {
		ret 0, i, false
	}
	ret n, i, true
}