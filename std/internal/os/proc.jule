// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Returns environment variables.
fn Environ(): []str {
	ret environ()
}

// Retrieves the value of the environment variable named by the key.
// It returns the value, which will be empty if the variable is not present.
// To distinguish between an empty value and an found value, use [LookupEnv].
fn Getenv(key: str): str {
	v, _ := LookupEnv(key)
	ret v
}

// Retrieves the value of the environment variable named by the key.
// If the variable is present in the environment the value (which may be empty)
// is returned and the boolean is true. Otherwise the returned value will be
// empty and the boolean will be false.
fn LookupEnv(key: str): (value: str, found: bool) {
	ret lookupenv(key)
}

// Sets the value of the environment variable named by the key.
fn Setenv(key: str, value: str)! {
	setenv(key, value) else { error(error) }
}