// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"

// Reports whether a and b equal.
// Based on comptime, simple implementation.
// For dynamic types, uses underlying equal function.
fn DeepEqual[T](a: T, b: T): bool {
	const t = comptime::TypeOf(T)
	const match {
	| t.CanNil():
		if a == nil {
			ret b == nil
		}
		if b == nil {
			ret false
		}
	}
	const match t.Kind() {
	| comptime::Any | comptime::Trait | comptime::TypeEnum:
		ret a == b
	| comptime::SmartPtr:
		ret DeepEqual(*a, *b)
	| comptime::Str | comptime::Bool
	| comptime::F32 | comptime::F64
	| comptime::Int | comptime::I8 | comptime::I16 | comptime::I32 | comptime::I64
	| comptime::Uint | comptime::Uintptr | comptime::U8 | comptime::U16 | comptime::U32 | comptime::U64:
		ret a == b
	| comptime::Struct:
		const av = comptime::ValueOf(a)
		const bv = comptime::ValueOf(b)
		const for i in t.Fields() {
			if !DeepEqual(av.FieldByIndex(i).Unwrap(), bv.FieldByIndex(i).Unwrap()) {
				ret false
			}
		}
		ret true
	|:
		panic("std/internal/cmd: DeepEqual: unsupported type: " + t.Str())
	}
}