// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/runtime"

// Returns string based on b, the parameter b means first byte of string.
// The returned string uses n as length.
// Will not perform garbage collection.
fn Str(b: *byte, n: int): str {
	mut s := ""
	unsafe {
		mut sp := (*runtime::Str)(&s)
		sp.Buffer.Data = *(&b)
		sp.Slice = sp.Buffer.Data
		sp.Len = n
	}
	ret s
}

// Returns slice based on e, the parameter e means first element of slice.
// Will not perform garbage collection.
fn Slice[Elem](mut e: *Elem, len: int, cap: int): []Elem {
	mut buf := []Elem(nil)
	unsafe {
		mut sp := (*runtime::Slice[Elem])(&buf)
		sp.Data.Data = e
		sp.Data.Ref = nil
		sp.Slice = sp.Data.Data
		sp.Len, sp.Cap = len, cap
	}
	ret buf
}

// Alias for Slice(b, n, n).
fn Bytes(mut b: *byte, n: int): []byte {
	ret Slice(b, n, n)
}

// Alias for Slice(&s[0], len(s), len(s)).
// Returns nil if len(s) == 0.
fn StrBytes(s: str): []byte {
	if len(s) == 0 {
		ret nil
	}
	ret Slice(&s[0], len(s), len(s))
}

// Alias for Str(&b[0], len(b), len(b)).
// Returns empty string if len(b) == 0.
fn BytesStr(b: []byte): str {
	if len(b) == 0 {
		ret ""
	}
	ret Str(&b[0], len(b))
}

// Same as [BytesStr] but keeps garbage collection.
fn StrFromBytes(b: []byte): str { ret unsafe { *(*str)(&b) } }

// Same as [StrBytes] but keeps garbage collection.
fn BytesFromStr(s: str): []byte {
	let mut b: []byte
	unsafe {
		*(*str)(&b) = s
		mut sp := (*runtime::Slice[byte])(&b)
		sp.Cap = sp.Len
	}
	ret b
}