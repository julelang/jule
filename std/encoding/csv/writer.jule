// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/encoding/csv/writer.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use "std/bytes"
use "std/io"
use "std/unicode"
use "std/unicode/utf8"
use "std/unsafe"

// A Writer writes records using CSV encoding.
//
// As returned by new, a Writer writes records terminated by a
// newline and uses ',' as the field delimiter. The exported fields can be
// changed to customize the details before the first call to write or write_all.
//
// Comma is the field delimiter.
//
// If UseCRLF is true, the Writer ends each output line with \r\n instead of \n.
//
// The writes of individual records are buffered.
// After all data has been written, the client should call the
// Flush method to guarantee all data has been forwarded to
// the underlying io::Writer.
struct Writer {
	Comma:   rune // Field delimiter (set to ',' by new)
	UseCRLF: bool // True to use \r\n as the line terminator

	w: io::Writer
}

impl Writer {
	// Returns new Writer instance that writes w.
	static fn New(mut w: io::Writer): &Writer {
		ret &Writer{
			Comma: ',',
			w: w,
		}
	}

	// Reports whether our field must be enclosed in quotes.
	// Fields with a comma, fields with a quote or newline, and
	// fields which start with a space must be enclosed in quotes.
	// We used to quote empty strings, but we do not anymore.
	// The two representations should be equivalent, but Postgres distinguishes
	// quoted vs non-quoted empty string during database imports, and it has
	// an option to force the quoted behavior for non-quoted CSV but it has
	// no option to force the non-quoted behavior for quoted CSV, making
	// CSV with quoted empty strings strictly less useful.
	// Not quoting the empty string also makes this package match the behavior
	// of Microsoft Excel and Google Drive.
	// For Postgres, quote the data terminating string `\.`.
	fn fieldNeedsQuotes(self, field: []byte): bool {
		if len(field) == 0 {
			ret false
		}
		if len(field) == 2 && field[0] == '\\' && field[1] == '.' {
			ret true
		}
		if self.Comma < utf8::RuneSelf {
			mut i := 0
			for i < len(field); i++ {
				c := field[i]
				if c == '\n' || c == '\r' || c == '"' || c == byte(self.Comma) {
					ret true
				}
			}
		} else if bytes::ContainsRune(field, self.Comma) ||
			bytes::ContainsAny(field, "\"\r\n") {
			ret true
		}
		r1, _ := utf8::DecodeRune(field)
		ret unicode::IsSpace(r1)
	}

	// Writes a single CSV record along with any necessary quoting.
	// A record is a slice of strings with each string being one field.
	fn Write(mut self, record: []str)! {
		if !validDelim(self.Comma) {
			error(errInvalidDelim)
		}
		for (n, mut field) in record {
			if n > 0 {
				mut bytes := make([]byte, utf8::UTFMax)
				j := utf8::EncodeRune(bytes, self.Comma)
				self.w.Write(bytes[:j]) else { error(error) }
			}

			// Use fb instead of field to avoid copying.
			mut fb := unsafe::StrBytes(field)

			// If we don't have to have a quoted field then just
			// write out the field and continue to the next field.
			if !self.fieldNeedsQuotes(fb) {
				self.w.Write(fb) else { error(error) }
				continue
			}

			self.w.Write(['"']) else { error(error) }

			for len(fb) > 0 {
				// Search for special characters.
				mut i := bytes::IndexAny(fb, "\"\r\n")
				if i < 0 {
					i = len(fb)
				}

				// Copy verbatim everything before the special character.
				self.w.Write(fb[:i]) else { error(error) }
				fb = fb[i:]

				// Encode the special character.
				if len(fb) > 0 {
					match fb[0] {
					| '"':
						self.w.Write(unsafe::StrBytes(`""`)) else { error(error) }
					| '\r':
						if !self.UseCRLF {
							self.w.Write(['\r']) else { error(error) }
						}
					| '\n':
						if self.UseCRLF {
							self.w.Write(unsafe::StrBytes("\r\n")) else { error(error) }
						} else {
							self.w.Write(unsafe::StrBytes("\n")) else { error(error) }
						}
					}
					fb = fb[1:]
				}
			}

			self.w.Write(unsafe::StrBytes("\"")) else { error(error) }
		}
		if self.UseCRLF {
			self.w.Write(unsafe::StrBytes("\r\n")) else { error(error) }
		} else {
			self.w.Write(unsafe::StrBytes("\n")) else { error(error) }
		}
	}

	// Writes multiple CSV records using [Writer.Write].
	fn WriteAll(mut self, records: [][]str)! {
		for _, record in records {
			self.Write(record) else { error(error) }
		}
	}
}