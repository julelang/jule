// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/fmt"
use "std/internal/cmp"
use "std/slices"
use "std/strings"
use "std/testing"
use "std/unicode/utf8"

struct readTest {
	Name:      str
	Input:     str
	Output:    [][]str
	Positions: [][][2]int
	Errors:    []any

	// These fields are copied into the Reader
	Comma:              rune
	Comment:            rune
	UseFieldsPerRecord: bool // false (default) means FieldsPerRecord is -1
	FieldsPerRecord:    int
	LazyQuotes:         bool
	TrimLeadingSpace:   bool
	ReuseRecord:        bool
}

// In these tests, the §, ¶ and ∑ characters in readTest.Input are used to denote
// the start of a field, a record boundary and the position of an error respectively.
// They are removed before parsing and are used to verify the position
// information reported by FieldPos.

static mut readTests: []readTest = [
	{
		Name: "Simple",
		Input: "§a,§b,§c\n",
		Output: [["a", "b", "c"]],
	},
	{
		Name: "CRLF",
		Input: "§a,§b\r\n¶§c,§d\r\n",
		Output: [["a", "b"], ["c", "d"]],
	},
	{
		Name: "BareCR",
		Input: "§a,§b\rc,§d\r\n",
		Output: [["a", "b\rc", "d"]],
	},
	{
		Name: "RFC4180test",
		Input: `§#field1,§field2,§field3
¶§"aaa",§"bb
b",§"ccc"
¶§"a,a",§"b""bb",§"ccc"
¶§zzz,§yyy,§xxx
`,
		Output: [
			["#field1", "field2", "field3"],
			["aaa", "bb\nb", "ccc"],
			["a,a", `b"bb`, "ccc"],
			["zzz", "yyy", "xxx"],
		],
		UseFieldsPerRecord: true,
		FieldsPerRecord: 0,
	},
	{
		Name: "NoEOLTest",
		Input: "§a,§b,§c",
		Output: [["a", "b", "c"]],
	},
	{
		Name: "Semicolon",
		Input: "§a;§b;§c\n",
		Output: [["a", "b", "c"]],
		Comma: ';',
	},
	{
		Name: "MultiLine",
		Input: `§"two
line",§"one line",§"three
line
field"`,
		Output: [["two\nline", "one line", "three\nline\nfield"]],
	},
	{
		Name: "BlankLine",
		Input: "§a,§b,§c\n\n¶§d,§e,§f\n\n",
		Output: [
			["a", "b", "c"],
			["d", "e", "f"],
		],
	},
	{
		Name: "BlankLineFieldCount",
		Input: "§a,§b,§c\n\n¶§d,§e,§f\n\n",
		Output: [
			["a", "b", "c"],
			["d", "e", "f"],
		],
		UseFieldsPerRecord: true,
		FieldsPerRecord: 0,
	},
	{
		Name: "TrimSpace",
		Input: " §a,  §b,   §c\n",
		Output: [["a", "b", "c"]],
		TrimLeadingSpace: true,
	},
	{
		Name: "LeadingSpace",
		Input: "§ a,§  b,§   c\n",
		Output: [[" a", "  b", "   c"]],
	},
	{
		Name: "Comment",
		Input: "#1,2,3\n§a,§b,§c\n#comment",
		Output: [["a", "b", "c"]],
		Comment: '#',
	},
	{
		Name: "NoComment",
		Input: "§#1,§2,§3\n¶§a,§b,§c",
		Output: [["#1", "2", "3"], ["a", "b", "c"]],
	},
	{
		Name: "LazyQuotes",
		Input: `§a "word",§"1"2",§a",§"b`,
		Output: [[`a "word"`, `1"2`, `a"`, `b`]],
		LazyQuotes: true,
	},
	{
		Name: "BareQuotes",
		Input: `§a "word",§"1"2",§a"`,
		Output: [[`a "word"`, `1"2`, `a"`]],
		LazyQuotes: true,
	},
	{
		Name: "BareDoubleQuotes",
		Input: `§a""b,§c`,
		Output: [[`a""b`, `c`]],
		LazyQuotes: true,
	},
	{
		Name: "BadDoubleQuotes",
		Input: `§a∑""b,c`,
		Errors: [&ParseError{Err: ErrBareQuote}],
	},
	{
		Name: "TrimQuote",
		Input: ` §"a",§" b",§c`,
		Output: [["a", " b", "c"]],
		TrimLeadingSpace: true,
	},
	{
		Name: "BadBareQuote",
		Input: `§a ∑"word","b"`,
		Errors: [&ParseError{Err: ErrBareQuote}],
	},
	{
		Name: "BadTrailingQuote",
		Input: `§"a word",b∑"`,
		Errors: [&ParseError{Err: ErrBareQuote}],
	},
	{
		Name: "ExtraneousQuote",
		Input: `§"a ∑"word","b"`,
		Errors: [&ParseError{Err: ErrQuote}],
	},
	{
		Name: "BadFieldCount",
		Input: "§a,§b,§c\n¶∑§d,§e",
		Errors: [nil, &ParseError{Err: ErrFieldCount}],
		Output: [["a", "b", "c"], ["d", "e"]],
		UseFieldsPerRecord: true,
		FieldsPerRecord: 0,
	},
	{
		Name: "BadFieldCountMultiple",
		Input: "§a,§b,§c\n¶∑§d,§e\n¶∑§f",
		Errors: [nil, &ParseError{Err: ErrFieldCount}, &ParseError{Err: ErrFieldCount}],
		Output: [["a", "b", "c"], ["d", "e"], ["f"]],
		UseFieldsPerRecord: true,
		FieldsPerRecord: 0,
	},
	{
		Name: "BadFieldCount1",
		Input: `§∑a,§b,§c`,
		Errors: [&ParseError{Err: ErrFieldCount}],
		Output: [["a", "b", "c"]],
		UseFieldsPerRecord: true,
		FieldsPerRecord: 2,
	},
	{
		Name: "FieldCount",
		Input: "§a,§b,§c\n¶§d,§e",
		Output: [["a", "b", "c"], ["d", "e"]],
	},
	{
		Name: "TrailingCommaEOF",
		Input: "§a,§b,§c,§",
		Output: [["a", "b", "c", ""]],
	},
	{
		Name: "TrailingCommaEOL",
		Input: "§a,§b,§c,§\n",
		Output: [["a", "b", "c", ""]],
	},
	{
		Name: "TrailingCommaSpaceEOF",
		Input: "§a,§b,§c, §",
		Output: [["a", "b", "c", ""]],
		TrimLeadingSpace: true,
	},
	{
		Name: "TrailingCommaSpaceEOL",
		Input: "§a,§b,§c, §\n",
		Output: [["a", "b", "c", ""]],
		TrimLeadingSpace: true,
	},
	{
		Name: "TrailingCommaLine3",
		Input: "§a,§b,§c\n¶§d,§e,§f\n¶§g,§hi,§",
		Output: [["a", "b", "c"], ["d", "e", "f"], ["g", "hi", ""]],
		TrimLeadingSpace: true,
	},
	{
		Name: "NotTrailingComma3",
		Input: "§a,§b,§c,§ \n",
		Output: [["a", "b", "c", " "]],
	},
	{
		Name: "CommaFieldTest",
		Input: `§x,§y,§z,§w
¶§x,§y,§z,§
¶§x,§y,§,§
¶§x,§,§,§
¶§,§,§,§
¶§"x",§"y",§"z",§"w"
¶§"x",§"y",§"z",§""
¶§"x",§"y",§"",§""
¶§"x",§"",§"",§""
¶§"",§"",§"",§""
`,
		Output: [
			["x", "y", "z", "w"],
			["x", "y", "z", ""],
			["x", "y", "", ""],
			["x", "", "", ""],
			["", "", "", ""],
			["x", "y", "z", "w"],
			["x", "y", "z", ""],
			["x", "y", "", ""],
			["x", "", "", ""],
			["", "", "", ""],
		],
	},
	{
		Name: "TrailingCommaIneffective1",
		Input: "§a,§b,§\n¶§c,§d,§e",
		Output: [
			["a", "b", ""],
			["c", "d", "e"],
		],
		TrimLeadingSpace: true,
	},
	{
		Name: "ReadAllReuseRecord",
		Input: "§a,§b\n¶§c,§d",
		Output: [
			["a", "b"],
			["c", "d"],
		],
		ReuseRecord: true,
	},
	{
		Name: "StartLine1",                   // Go's issue 19019
		Input: "§a,\"b\nc∑\"d,e",
		Errors: [&ParseError{Err: ErrQuote}],
	},
	{
		Name: "StartLine2",
		Input: "§a,§b\n¶§\"d\n\n,e∑",
		Errors: [nil, &ParseError{Err: ErrQuote}],
		Output: [["a", "b"]],
	},
	{
		Name: "CRLFInQuotedField",           // Go's issue 21201
		Input: "§A,§\"Hello\r\nHi\",§B\r\n",
		Output: [
			["A", "Hello\nHi", "B"],
		],
	},
	{
		Name: "BinaryBlobField",             // Go's issue 19410
		Input: "§x09\x41\xb4\x1c,§aktau",
		Output: [["x09A\xb4\x1c", "aktau"]],
	},
	{
		Name: "TrailingCR",
		Input: "§field1,§field2\r",
		Output: [["field1", "field2"]],
	},
	{
		Name: "QuotedTrailingCR",
		Input: "§\"field\"\r",
		Output: [["field"]],
	},
	{
		Name: "QuotedTrailingCRCR",
		Input: "§\"field∑\"\r\r",
		Errors: [&ParseError{Err: ErrQuote}],
	},
	{
		Name: "FieldCR",
		Input: "§field\rfield\r",
		Output: [["field\rfield"]],
	},
	{
		Name: "FieldCRCR",
		Input: "§field\r\rfield\r\r",
		Output: [["field\r\rfield\r"]],
	},
	{
		Name: "FieldCRCRLF",
		Input: "§field\r\r\n¶§field\r\r\n",
		Output: [["field\r"], ["field\r"]],
	},
	{
		Name: "FieldCRCRLFCR",
		Input: "§field\r\r\n¶§\rfield\r\r\n\r",
		Output: [["field\r"], ["\rfield\r"]],
	},
	{
		Name: "FieldCRCRLFCRCR",
		Input: "§field\r\r\n¶§\r\rfield\r\r\n¶§\r\r",
		Output: [["field\r"], ["\r\rfield\r"], ["\r"]],
	},
	{
		Name: "MultiFieldCRCRLFCRCR",
		Input: "§field1,§field2\r\r\n¶§\r\rfield1,§field2\r\r\n¶§\r\r,§",
		Output: [
			["field1", "field2\r"],
			["\r\rfield1", "field2\r"],
			["\r\r", ""],
		],
	},
	{
		Name: "NonASCIICommaAndComment",
		Input: "§a£§b,c£ \t§d,e\n€ comment\n",
		Output: [["a", "b,c", "d,e"]],
		TrimLeadingSpace: true,
		Comma: '£',
		Comment: '€',
	},
	{
		Name: "NonASCIICommaAndCommentWithQuotes",
		Input: "§a€§\"  b,\"€§ c\nλ comment\n",
		Output: [["a", "  b,", " c"]],
		Comma: '€',
		Comment: 'λ',
	},
	{
		// λ and θ start with the same byte.
		// This tests that the parser doesn't confuse such characters.
		Name: "NonASCIICommaConfusion",
		Input: "§\"abθcd\"λ§efθgh",
		Output: [["abθcd", "efθgh"]],
		Comma: 'λ',
		Comment: '€',
	},
	{
		Name: "NonASCIICommentConfusion",
		Input: "§λ\n¶§λ\nθ\n¶§λ\n",
		Output: [["λ"], ["λ"], ["λ"]],
		Comment: 'θ',
	},
	{
		Name: "QuotedFieldMultipleLF",
		Input: "§\"\n\n\n\n\"",
		Output: [["\n\n\n\n"]],
	},
	{
		Name: "MultipleCRLF",
		Input: "\r\n\r\n\r\n\r\n",
	},
	//{
	//	// The implementation may read each line in several chunks if it doesn't fit entirely
	//	// in the read buffer, so we should test the code to handle that condition.
	//	Name: "HugeLines",
	//	Input: strings::Repeat("#ignore\n", 10000) + "§" + strings::Repeat("@", 5000) + ",§" + strings::Repeat("*", 5000),
	//	Output: [[strings::Repeat("@", 5000), strings::Repeat("*", 5000)]],
	//	Comment: '#',
	//},
	{
		Name: "QuoteWithTrailingCRLF",
		Input: "§\"foo∑\"bar\"\r\n",
		Errors: [&ParseError{Err: ErrQuote}],
	},
	{
		Name: "LazyQuoteWithTrailingCRLF",
		Input: "§\"foo\"bar\"\r\n",
		Output: [[`foo"bar`]],
		LazyQuotes: true,
	},
	{
		Name: "DoubleQuoteWithTrailingCRLF",
		Input: "§\"foo\"\"bar\"\r\n",
		Output: [[`foo"bar`]],
	},
	{
		Name: "EvenQuotes",
		Input: `§""""""""`,
		Output: [[`"""`]],
	},
	{
		Name: "OddQuotes",
		Input: `§"""""""∑`,
		Errors: [&ParseError{Err: ErrQuote}],
	},
	{
		Name: "LazyOddQuotes",
		Input: `§"""""""`,
		Output: [[`"""`]],
		LazyQuotes: true,
	},
	{
		Name: "BadComma1",
		Comma: '\n',
		Errors: [errInvalidDelim],
	},
	{
		Name: "BadComma2",
		Comma: '\r',
		Errors: [errInvalidDelim],
	},
	{
		Name: "BadComma3",
		Comma: '"',
		Errors: [errInvalidDelim],
	},
	{
		Name: "BadComma4",
		Comma: utf8::RuneError,
		Errors: [errInvalidDelim],
	},
	{
		Name: "BadComment1",
		Comment: '\n',
		Errors: [errInvalidDelim],
	},
	{
		Name: "BadComment2",
		Comment: '\r',
		Errors: [errInvalidDelim],
	},
	{
		Name: "BadComment3",
		Comment: utf8::RuneError,
		Errors: [errInvalidDelim],
	},
	{
		Name: "BadCommaComment",
		Comma: 'X',
		Comment: 'X',
		Errors: [errInvalidDelim],
	},
]

#test
fn testRead(t: &testing::T) {
	newReader := fn(tt: readTest): (&Reader, [][][2]int, map[int][2]int, str) {
		mut positions, errPositions, input := makePositions(tt.Input)
		mut r := Reader.New(strings::Reader.New(input))

		if tt.Comma != 0 {
			r.Comma = tt.Comma
		}
		r.Comment = tt.Comment
		if tt.UseFieldsPerRecord {
			r.FieldsPerRecord = tt.FieldsPerRecord
		} else {
			r.FieldsPerRecord = -1
		}
		r.LazyQuotes = tt.LazyQuotes
		r.TrimLeadingSpace = tt.TrimLeadingSpace
		r.ReuseRecord = tt.ReuseRecord
		ret r, positions, errPositions, input
	}
	for (_, mut tt) in readTests {
		mut r, positions, errPositions, input := newReader(tt)
		let mut err: any
		out := r.ReadAll() else {
			err = error
			use nil
		}
		mut wantErr := firstError(tt.Errors, positions, errPositions)
		if wantErr != nil {
			if fmt::Format("{}", err) != fmt::Format("{}", wantErr) {
				t.Errorf("ReadAll() error mismatch:\ngot  {} ({})\nwant {} ({})", err, err, wantErr, wantErr)
			}
			if out != nil {
				t.Errorf("ReadAll() output:\ngot  {}\nwant nil", out)
			}
		} else {
			if err != nil {
				t.Errorf("unexpected Readall() error: {}", err)
			}
			if !cmp::DeepEqual(out, tt.Output) {
				t.Errorf("ReadAll() output:\ngot  {}\nwant {}", out, tt.Output)
			}
		}
		// Check input offset after call ReadAll()
		inputByteSize := len(input)
		inputOffset := r.InputOffset()
		if err == nil && i64(inputByteSize) != inputOffset {
			t.Errorf("wrong input offset after call ReadAll():\ngot:  {}\nwant: {}\ninput: {}", inputOffset, inputByteSize, input)
		}

		// Check field and error positions.
		r, _, _, _ = newReader(tt)
		mut recNum := 0
		for ; recNum++ {
			if len(tt.Output) <= recNum {
				break
			}
			err = nil
			rec := r.Read() else {
				err = error
				use nil
			}
			wantErr = nil
			if recNum < len(tt.Errors) && tt.Errors[recNum] != nil {
				wantErr = errorWithPosition(tt.Errors[recNum], recNum, positions, errPositions)
			}
			if fmt::Format("{}", err) != fmt::Format("{}", wantErr) {
				t.Errorf("Read() error at record {}:\ngot {} ({})\nwant {} ({})", recNum, err, err, wantErr, wantErr)
			}
			// ErrFieldCount is explicitly non-fatal.
			if err != nil {
				e, ok := err.(&ParseError)
				if !ok || e.Err != ErrFieldCount {
					if recNum < len(tt.Output) {
						t.Errorf("need more records; got {} want {}", recNum, len(tt.Output))
					}
				}
				break
			}
			{
				got, want := rec, tt.Output[recNum]
				if !slices::Equal(got, want) {
					t.Errorf("Read vs ReadAll mismatch;\ngot {}\nwant {}", got, want)
				}
			}
			pos := positions[recNum]
			if len(pos) != len(rec) {
				t.Errorf("mismatched position length at record {}", recNum)
			}
			for i in rec {
				line, col := r.FieldPos(i)
				got, want := [2]int([line, col]), pos[i]
				if got != want {
					t.Errorf("position mismatch at record {}, field {};\ngot {}\nwant {}", recNum, i, got, want)
				}
			}
		}
	}
}

// Returns the first non-nil error in errs,
// with the position adjusted according to the error's
// index inside positions.
fn firstError(mut errs: []any, positions: [][][2]int, errPositions: map[int][2]int): any {
	for (i, mut err) in errs {
		if err != nil {
			ret errorWithPosition(err, i, positions, errPositions)
		}
	}
	ret nil
}

fn errorWithPosition(mut err: any, recNum: int, positions: [][][2]int, errPositions: map[int][2]int): any {
	mut parseErr, mut ok := err.(&ParseError)
	if !ok {
		ret err
	}
	if recNum >= len(positions) {
		panic(fmt::Format("no positions found for error at record {}", recNum))
	}
	errPos, ok := errPositions[recNum]
	if !ok {
		panic(fmt::Format("no error position found for error at record {}", recNum))
	}
	mut parseErr1 := new(ParseError, *parseErr)
	parseErr1.StartLine = positions[recNum][0][0]
	parseErr1.Line = errPos[0]
	parseErr1.Column = errPos[1]
	ret parseErr1
}

// Returns the expected field positions of all
// the fields in text, the positions of any errors, and the text with the position markers
// removed.
//
// The start of each field is marked with a § symbol;
// CSV lines are separated by ¶ symbols;
// Error positions are marked with ∑ symbols.
fn makePositions(mut text: str): ([][][2]int, map[int][2]int, str) {
	mut buf := make([]byte, 0, len(text))
	let mut positions: [][][2]int
	mut errPositions := map[int][2]int{}
	mut line, mut col := 1, 1
	mut recNum := 0

	for len(text) > 0 {
		r, size := utf8::DecodeRuneStr(text)
		match r {
		| '\n':
			line++
			col = 1
			buf = append(buf, '\n')
		| '§':
			if len(positions) == 0 {
				positions = append(positions, [])
			}
			positions[len(positions)-1] = append(positions[len(positions)-1], [line, col])
		| '¶':
			positions = append(positions, [])
			recNum++
		| '∑':
			errPositions[recNum] = [line, col]
		|:
			buf = append(buf, text[:size]...)
			col += size
		}
		text = text[size:]
	}
	ret positions, errPositions, str(buf)
}