// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/encoding/base64"
use "std/testing"

fn encodeMapXKey[Map](t: &testing::T, m: Map, kind: str) {
	bytes := Encode(m) else {
		t.Errorf("Encode({}) failed", kind)
		ret
	}
	if !Valid(bytes) {
		t.Errorf("Valid() returns false for Encode({})", kind)
	}
}

#test
fn testEncodeMapStrKey(t: &testing::T) {
	let encodeMap: map[str]str = {
		"foo": "foo value",
		"bar": "bar value",
		"baz": "baz value",
	}
	encodeMapXKey(t, encodeMap, "map[str]str")

	type Str: str
	let encodeMap2: map[Str]Str = {
		"foo": "foo value",
		"bar": "bar value",
		"baz": "baz value",
	}
	encodeMapXKey(t, encodeMap2, "map[Str]Str")
}

#test
fn testEncodeMapNumKey(t: &testing::T) {
	let encodeMap: map[int]str = {
		234: "foo value",
		49: "bar value",
		0: "baz value",
	}
	encodeMapXKey(t, encodeMap, "map[int]str")

	type Int: int
	let encodeMap2: map[Int]str = {
		234: "foo value",
		49: "bar value",
		0: "baz value",
	}
	encodeMapXKey(t, encodeMap2, "map[Int]str")
}

#test
fn testEncodeSlice(t: &testing::T) {
	s := ["foo", "bar", "baz"]
	mut bytes := Encode(s) else {
		t.Errorf("Encode([]str) failed")
		ret
	}
	if !Valid(bytes) {
		t.Errorf("Valid() returns false for Encode([]str)")
	}

	type StrSlice: []str
	s2 := StrSlice(s)
	bytes = Encode(s2) else {
		t.Errorf("Encode(StrSlice) failed")
		ret
	}
	if !Valid(bytes) {
		t.Errorf("Valid() returns false for Encode(StrSlice)")
	}
}

#test
fn testEncodeArray(t: &testing::T) {
	let a: [3]str = ["foo", "bar", "baz"]
	mut bytes := Encode(a) else {
		t.Errorf("Encode([3]str) failed")
		ret
	}
	if !Valid(bytes) {
		t.Errorf("Valid() returns false for Encode([3]str)")
	}

	type StrArray: [3]str
	a2 := StrArray(a)
	bytes = Encode(a2) else {
		t.Errorf("Encode(StrArray) failed")
		ret
	}
	if !Valid(bytes) {
		t.Errorf("Valid() returns false for Encode(StrArray)")
	}
}

#test
fn testEncodeNum(t: &testing::T) {
	nums := [
		0.,
		-0,
		1,
		-1,
		0.1,
		-0.1,
		1234,
		-1234,
		12.34,
		-12.34,
		12E0,
		12E1,
		12e34,
		12E-0,
		12e+1,
		12e-34,
		-12E0,
		-12E1,
		-12e34,
		-12E-0,
		-12e+1,
		-12e-34,
		1.2E0,
		1.2E1,
		1.2e34,
		1.2E-0,
		1.2e+1,
		1.2e-34,
		-1.2E0,
		-1.2E1,
		-1.2e34,
		-1.2E-0,
		-1.2e+1,
		-1.2e-34,
		0E0,
		0E1,
		0e34,
		0E-0,
		0e+1,
		0e-34,
		-0E0,
		-0E1,
		-0e34,
		-0E-0,
		-0e+1,
		-0e-34,
	]
	bytes := Encode(nums) else {
		t.Errorf("Encode(nums) failed")
		ret
	}
	if !Valid(bytes) {
		t.Errorf("Valid() returns false for Encode(nums)")
	}
}

struct strCase {
	input:  str
	output: []byte
}

static strCases: []strCase = [
	{"", []byte(`""`)},
	{"hello world", []byte(`"hello world"`)},
	{"baykuş", []byte(`"baykuş"`)},
	{"\"hello\xffworld\"", []byte(`"\"hello\ufffdworld\""`)},
	{"foo", []byte(`"foo"`)},
	{"baz", []byte(`"baz"`)},
	{"a\u1234", [34, 97, 225, 136, 180, 34]},
	{"\"hello\xed\xa0\x80\xed\xb0\x80world\"", []byte(`"\"hello\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdworld\""`)},
	{"\x00", []byte(`"\u0000"`)},
	{"\x01", []byte(`"\u0001"`)},
	{"\x02", []byte(`"\u0002"`)},
	{"\x03", []byte(`"\u0003"`)},
	{"\x04", []byte(`"\u0004"`)},
	{"\x05", []byte(`"\u0005"`)},
	{"\x06", []byte(`"\u0006"`)},
	{"\x07", []byte(`"\u0007"`)},
	{"\x08", []byte(`"\b"`)},
	{"\x09", []byte(`"\t"`)},
	{"\x0a", []byte(`"\n"`)},
	{"\x0b", []byte(`"\u000b"`)},
	{"\x0c", []byte(`"\f"`)},
	{"\x0d", []byte(`"\r"`)},
	{"\x0e", []byte(`"\u000e"`)},
	{"\x0f", []byte(`"\u000f"`)},
	{"\x10", []byte(`"\u0010"`)},
	{"\x11", []byte(`"\u0011"`)},
	{"\x12", []byte(`"\u0012"`)},
	{"\x13", []byte(`"\u0013"`)},
	{"\x14", []byte(`"\u0014"`)},
	{"\x15", []byte(`"\u0015"`)},
	{"\x16", []byte(`"\u0016"`)},
	{"\x17", []byte(`"\u0017"`)},
	{"\x18", []byte(`"\u0018"`)},
	{"\x19", []byte(`"\u0019"`)},
	{"\x1a", []byte(`"\u001a"`)},
	{"\x1b", []byte(`"\u001b"`)},
	{"\x1c", []byte(`"\u001c"`)},
	{"\x1d", []byte(`"\u001d"`)},
	{"\x1e", []byte(`"\u001e"`)},
	{"\x1f", []byte(`"\u001f"`)},
]

#test
fn testEncodeStr(t: &testing::T) {
	for _, case in strCases {
		bytes := Encode(case.input) else {
			t.Errorf("Encode(stsr) failed")
			ret
		}
		if len(bytes) != len(case.output) {
			t.Errorf("expected {} for {}, found {}", case.output, case.input, bytes)
			continue
		}
		for i in bytes {
			if bytes[i] != case.output[i] {
				t.Errorf("expected {} for {}, found {}", case.output, case.input, bytes)
				break
			}
		}
	}
}

struct encodeByteSliceCase {
	input:  []byte
	output: []byte
}

static encodeByteSliceCases: []encodeByteSliceCase = [
	{input: []byte(`foobar`), output: []byte(`"Zm9vYmFy"`)},
	{input: []byte(`hello world`), output: []byte(`"aGVsbG8gd29ybGQ="`)},
	{input: []byte("\"hello\xed\xa0\x80\xed\xb0\x80world\""), output: []byte(`"ImhlbGxv7aCA7bCAd29ybGQi"`)},
]

#test
fn testEncodeByteSlice(t: &testing::T) {
	for _, case in encodeByteSliceCases {
		bytes := Encode(case.input) else {
			t.Errorf("Encode({}) failed", case.input)
			ret
		}
		if !Valid(bytes) {
			t.Errorf("Valid() returns false for Encode({})", case.input)
		}
		if len(bytes) != len(case.output) {
			t.Errorf("expected {} for {}, found {}", case.output, case.input, bytes)
			continue
		}
		for i in bytes {
			if bytes[i] != case.output[i] {
				t.Errorf("expected {} for {}, found {}", case.output, case.input, bytes)
				break
			}
		}
	}
}

// Encode tree is base structure for the pseudo big JSON.
struct encodeTree {
	Str1: str
	Str2: str
	Num1: int
	Num2: f64
	Bool: bool
	Node: &encodeTree
}

type abc: int

impl abc {
	fn EncodeJSON(self)!: []byte {
		match self {
		| 1:
			ret []byte("true")
		| 0:
			ret []byte("false")
		|:
			panic("unimplemented case")
		}
	}

	fn DecodeJSON(mut self, data: []byte)! {
		match {
		| str(data) == "true":
			self = 1
		| str(data) == "false":
			self = 0
		}
	}
}

#test
fn testCustomEncode(t: &testing::T) {
	mut a := new(abc, 0)
	mut r := Encode(a) else {
		t.Errorf("want false, threw exception")
		use []byte("false")
	}
	if str(r) != "false" {
		t.Errorf("want false, found {}", str(r))
	}
	*a = 1
	r = Encode(a) else {
		t.Errorf("want true, threw exception")
		use []byte("true")
	}
	if str(r) != "true" {
		t.Errorf("want true, found {}", str(r))
	}
}

#test
fn testCustomEncode1(t: &testing::T) {
	mut a := abc(0)
	mut r := Encode(a) else {
		t.Errorf("want false, threw exception")
		use []byte("false")
	}
	if str(r) != "false" {
		t.Errorf("want false, found {}", str(r))
	}
	a = 1
	r = Encode(a) else {
		t.Errorf("want true, threw exception")
		use []byte("true")
	}
	if str(r) != "true" {
		t.Errorf("want true, found {}", str(r))
	}
}

type abc2: &int

impl abc2 {
	fn EncodeJSON(self)!: []byte {
		match *self {
		| 1:
			ret []byte("true")
		| 0:
			ret []byte("false")
		|:
			panic("unimplemented case")
		}
	}

	fn DecodeJSON(mut self, data: []byte)! {
		match {
		| str(data) == "true":
			*self = 1
		| str(data) == "false":
			*self = 0
		}
	}
}

#test
fn testCustomEncode2(t: &testing::T) {
	mut a := abc2(new(int, 0))
	mut r := Encode(a) else {
		t.Errorf("want false, threw exception")
		use []byte("false")
	}
	if str(r) != "false" {
		t.Errorf("want false, found {}", str(r))
	}
	*a = 1
	r = Encode(a) else {
		t.Errorf("want true, threw exception")
		use []byte("true")
	}
	if str(r) != "true" {
		t.Errorf("want true, found {}", str(r))
	}
}

#test
fn testCustomEncode3(t: &testing::T) {
	mut a := new(abc2, abc2(new(int, 0)))
	mut r := Encode(a) else {
		t.Errorf("want false, threw exception")
		use []byte("false")
	}
	if str(r) != "false" {
		t.Errorf("want false, found {}", str(r))
	}
	**a = 1
	r = Encode(a) else {
		t.Errorf("want true, threw exception")
		use []byte("true")
	}
	if str(r) != "true" {
		t.Errorf("want true, found {}", str(r))
	}
}

struct taggedFields {
	Foo: int
	foo: int
	fo1: int `json:"foo1"`
	bar: int `json:"baz"`
	baz: int `json:"Foo"`
	Bar: int `json:"-"`
}

#test
fn testTaggedFields(t: &testing::T) {
	mut tf := taggedFields{10, 20, 30, 40, 50, 60}
	data := Encode(tf) else {
		t.Errorf("tagged fields returns exception for Encode")
		ret
	}
	if str(data) != `{"Foo":10,"foo1":30,"baz":40}` {
		t.Errorf("tagged fields encode incorrect")
		ret
	}
	tf = taggedFields{}
	Decode(data, tf) else {
		t.Errorf("tagged fields returns exception for Decode")
		ret
	}
	if (tf != taggedFields{Foo: 10, fo1: 30, bar: 40}) {
		t.Errorf("tagged fields decode incorrect")
		ret
	}
}