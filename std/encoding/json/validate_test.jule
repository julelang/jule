// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct validCase {
	data: str
	ok:   bool
}

let validCases: []validCase = [
	{``, false},
	{`foo`, false},
	{`}{`, false},
	{`{]`, false},
	{`{}`, true},
	{`{"foo":"bar"}`, true},
	{`{"foo":"bar","bar":{"baz":["qux"]}}`, true},
	{`"hello world"`, true},
	{`""`, true},
	{`{},`, false},
	{`,{}`, false},
	{`{`, false},
	{`nul`, false},
	{`null`, true},
	{`nulll`, false},
	{`true`, true},
	{`false`, true},
	{`fal`, false},
	{`tru`, false},
	{`     `, false},
	{`1234`, true},
	{`1234 1234`, false},
	{`{ "foo": null, "bar": { "baz": [] } }`, true},
	{`{ "foo": null, "bar": { "baz": [}] } }`, false},
	{`{ "foo": null, "bar": { "baz": nul } }`, false},
	{`
{
	"x": "hello world",
	"y": {
		"foo": false,
		"baz": true
	}
}
`,
		true,
	},
]

let validNumberCases = [
	"0",
	"-0",
	"1",
	"-1",
	"0.1",
	"-0.1",
	"1234",
	"-1234",
	"12.34",
	"-12.34",
	"12E0",
	"12E1",
	"12e34",
	"12E-0",
	"12e+1",
	"12e-34",
	"-12E0",
	"-12E1",
	"-12e34",
	"-12E-0",
	"-12e+1",
	"-12e-34",
	"1.2E0",
	"1.2E1",
	"1.2e34",
	"1.2E-0",
	"1.2e+1",
	"1.2e-34",
	"-1.2E0",
	"-1.2E1",
	"-1.2e34",
	"-1.2E-0",
	"-1.2e+1",
	"-1.2e-34",
	"0E0",
	"0E1",
	"0e34",
	"0E-0",
	"0e+1",
	"0e-34",
	"-0E0",
	"-0E1",
	"-0e34",
	"-0E-0",
	"-0e+1",
	"-0e-34",
]

let invalidNumberCases = [
	"",
	"   ",
	"invalid",
	"1.0.1",
	"1..1",
	"-1-2",
	"012a42",
	"01.2",
	"012",
	"12E12.12",
	"1e2e3",
	"1e+-2",
	"1e--23",
	"1e",
	"e1",
	"1e+",
	"1ea",
	"1a",
	"1.a",
	"1.",
	"01",
	"1.e1",
]

#test
fn testValid(t: &testing::T) {
	for _, case in validCases {
		ok := Valid([]byte(case.data))
		if ok != case.ok {
			t.Errorf("expected {} for {}, found {}", case.ok, case.data, ok)
		}
	}
}

#test
fn testValidForValidNumbers(t: &testing::T) {
	for _, case in validNumberCases {
		if !Valid([]byte(case)) {
			t.Errorf("{} should be valid", case)
		}
	}
}

#test
fn testValidForInvalidNumbers(t: &testing::T) {
	for _, case in invalidNumberCases {
		if Valid([]byte(case)) {
			t.Errorf("{} should be invalid", case)
		}
	}
}