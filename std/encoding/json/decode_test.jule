// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/conv"
use "std/encoding"
use "std/strings"
use "std/testing"
use "std/unsafe"

#test
fn testDecodeNumber(t: &testing::T) {
	numbers := [
		"0",
		"1",
		"-1",
		"100",
		"-100",
		"0.5",
		"-0.5",
		"123.456",
		"-123.456",
		"1e3",
		"1E3",
		"1e+3",
		"1e-3",
		"-1e3",
		"-1E3",
		"-1e+3",
		"-1e-3",
		"1.23e4",
		"1.23E4",
		"1.23e+4",
		"1.23e-4",
		"-1.23e4",
		"-1.23E4",
		"-1.23e+4",
		"-1.23e-4",
		"0.0",
		"1.0",
		"2.0e5",
		"2.0E5",
	]
	for i, n in numbers {
		mut f := f64(0)
		Decode(unsafe::StrBytes(n), f) else {
			t.Errorf("#{} test failed", i)
			continue
		}
	}
}

#test
fn testDecodeStr(t: &testing::T) {
	for i, case in strCases {
		if i == 3 || i == 7 {
			// Skip error rune cases.
			continue
		}
		mut s := ""
		Decode(case.output, s) else {
			t.Errorf("Decode(case.output, \"{}\") failed", s)
			ret
		}
		if s != case.input {
			t.Errorf("expected \"{}\" for {}, found \"{}\"", str(case.input), str(case.output), s)
		}

		type Str: str
		mut s2 := Str("")
		Decode(case.output, s2) else {
			t.Errorf("Decode(case.output, \"{}\") failed", s2)
			ret
		}
		if s2 != Str(case.input) {
			t.Errorf("expected \"{}\" for {}, found \"{}\"", str(case.input), str(case.output), s2)
		}
	}
}

#test
fn testDecodeMapStrKey(t: &testing::T) {
	const json = `{"foo": "foo key","bar": "bar key", "baz": "baz key"}`
	let mut m: map[str]str = nil
	Decode([]byte(json), m) else {
		t.Errorf("Decode({}, map[str]str) failed", json)
		ret
	}
	_, mut ok := m["foo"]
	t.Assert(ok, `m["foo"] is not exist`)
	_, ok = m["bar"]
	t.Assert(ok, `m["bar"] is not exist`)
	_, ok := m["baz"]
	t.Assert(ok, `m["baz"] is not exist`)

	type Str: str
	let mut m2: map[Str]Str = nil
	Decode([]byte(json), m2) else {
		t.Errorf("Decode({}, map[Str]Str) failed", json)
		ret
	}
	_, ok = m2["foo"]
	t.Assert(ok, `m2["foo"] is not exist`)
	_, ok = m2["bar"]
	t.Assert(ok, `m2["bar"] is not exist`)
	_, ok := m2["baz"]
	t.Assert(ok, `m2["baz"] is not exist`)
}

#test
fn testDecodeMapNumKey(t: &testing::T) {
	const json = `{"234": "foo key","49": "bar key", "0": "baz key"}`
	let mut m: map[int]str = nil
	Decode([]byte(json), m) else {
		t.Errorf("Decode({}, map[int]str) failed", json)
		ret
	}
	_, mut ok := m[234]
	t.Assert(ok, `m[234] is not exist`)
	_, ok = m[49]
	t.Assert(ok, `m[49] is not exist`)
	_, ok := m[0]
	t.Assert(ok, `m[0] is not exist`)

	type Int: int
	let mut m2: map[Int]str = nil
	Decode([]byte(json), m2) else {
		t.Errorf("Decode({}, map[Int]str) failed", json)
		ret
	}
	_, ok = m2[234]
	t.Assert(ok, `m2[234] is not exist`)
	_, ok = m2[49]
	t.Assert(ok, `m2[49] is not exist`)
	_, ok := m2[0]
	t.Assert(ok, `m2[0] is not exist`)
}

#test
fn testDecodeArray(t: &testing::T) {
	const json = `["foo", "bar", "baz"]`
	let mut a: [3]str
	Decode([]byte(json), a) else {
		t.Errorf("Decode({}, a) failed", json)
		ret
	}
	t.Assert(a[0] == "foo", `a[0] != "foo"`)
	t.Assert(a[1] == "bar", `a[1] != "bar"`)
	t.Assert(a[2] == "baz", `a[2] != "baz"`)

	type Str: str
	let mut a2: [3]Str
	Decode([]byte(json), a2) else {
		t.Errorf("Decode({}, a2) failed", json)
		ret
	}
	t.Assert(a2[0] == "foo", `a2[0] != "foo"`)
	t.Assert(a2[1] == "bar", `a2[1] != "bar"`)
	t.Assert(a2[2] == "baz", `a2[2] != "baz"`)
}

#test
fn testDecodeArrayWithRemainder(t: &testing::T) {
	const json = `["foo", "bar", "baz"]`
	let mut a: [5]str = ["foo", "foo", "foo", "foo", "foo"]
	Decode([]byte(json), a) else {
		t.Errorf("Decode({}) failed", json)
		ret
	}
	t.Assert(a[0] == "foo", `a[0] != "foo"`)
	t.Assert(a[1] == "bar", `a[1] != "bar"`)
	t.Assert(a[2] == "baz", `a[2] != "baz"`)
	t.Assert(a[3] == "", `a[3] != ""`)
	t.Assert(a[4] == "", `a[4] != ""`)
}

#test
fn testDecodeSlice(t: &testing::T) {
	const json = `["foo", "bar", "baz"]`
	mut s := []str(nil)
	Decode([]byte(json), s) else {
		t.Errorf("Decode({}, s) failed", json)
		ret
	}
	t.Assert(len(s) == 3, `len(s) != 3`)
	t.Assert(s[0] == "foo", `s[0] != "foo"`)
	t.Assert(s[1] == "bar", `s[1] != "bar"`)
	t.Assert(s[2] == "baz", `s[2] != "baz"`)

	type Str: str
	mut s2 := []Str(nil)
	Decode([]byte(json), s2) else {
		t.Errorf("Decode({}, s) failed", json)
		ret
	}
	t.Assert(len(s2) == 3, `len(s2) != 3`)
	t.Assert(s2[0] == "foo", `s2[0] != "foo"`)
	t.Assert(s2[1] == "bar", `s2[1] != "bar"`)
	t.Assert(s2[2] == "baz", `s2[2] != "baz"`)
}

#test
fn testDecodeSliceWithRemainder(t: &testing::T) {
	const json = `["foo", "bar", "baz"]`
	mut s := ["foo", "foo", "foo", "foo", "foo"]
	Decode([]byte(json), s) else {
		t.Errorf("Decode({}) failed", json)
		ret
	}
	t.Assert(len(s) == 3, `len(s) != 3`)
	t.Assert(s[0] == "foo", `s[0] != "foo"`)
	t.Assert(s[1] == "bar", `s[1] != "bar"`)
	t.Assert(s[2] == "baz", `s[2] != "baz"`)
}

#test
fn testDecodeByteSlice(t: &testing::T) {
	type byte2: byte
	type byteSlice: []byte2
	for _, case in encodeByteSliceCases {
		mut bytes := []byte(nil)
		Decode(case.output, bytes) else {
			t.Errorf("Decode({}) failed", case.output)
			ret
		}
		if len(bytes) != len(case.input) {
			t.Errorf("expected {} for {}, found {}", case.input, case.output, bytes)
			continue
		}
		for i in bytes {
			if bytes[i] != case.input[i] {
				t.Errorf("expected {} for {}, found {}", case.input, case.output, bytes)
				break
			}
		}
	}
	for _, case in encodeByteSliceCases {
		mut bytes := byteSlice(nil)
		Decode(case.output, bytes) else {
			t.Errorf("Decode({}) failed", case.output)
			ret
		}
		if len(bytes) != len(case.input) {
			t.Errorf("expected {} for {}, found {}", case.input, case.output, bytes)
			continue
		}
		for i in bytes {
			if bytes[i] != byte2(case.input[i]) {
				t.Errorf("expected {} for {}, found {}", case.input, case.output, bytes)
				break
			}
		}
	}
}

#test
fn testCustomDecode(t: &testing::T) {
	mut b := []byte("false")
	mut a := new(abc, -1)
	Decode(b, a) else {
		t.Errorf("want 0, threw exception")
		*a = 0
	}
	if *a != 0 {
		t.Errorf("want 0, found {}", *a)
	}
	*a = -1
	b = []byte("true")
	Decode(b, a) else {
		t.Errorf("want 1, threw exception")
		*a = 1
	}
	if *a != 1 {
		t.Errorf("want 1, found {}", *a)
	}
}

#test
fn testCustomDecode1(t: &testing::T) {
	mut b := []byte("false")
	mut a := abc(-1)
	Decode(b, a) else {
		t.Errorf("want 0, threw exception")
		a = 0
	}
	if a != 0 {
		t.Errorf("want 0, found {}", a)
	}
	a = -1
	b = []byte("true")
	Decode(b, a) else {
		t.Errorf("want 1, threw exception")
		a = 1
	}
	if a != 1 {
		t.Errorf("want 1, found {}", a)
	}
}

#test
fn testCustomDecode2(t: &testing::T) {
	mut b := []byte("false")
	mut a := abc2(new(int, -1))
	Decode(b, a) else {
		t.Errorf("want 0, threw exception")
		*a = 0
	}
	if *a != 0 {
		t.Errorf("want 0, found {}", *a)
	}
	*a = -1
	b = []byte("true")
	Decode(b, a) else {
		t.Errorf("want 1, threw exception")
		*a = 1
	}
	if *a != 1 {
		t.Errorf("want 1, found {}", *a)
	}
}

#test
fn testCustomDecode3(t: &testing::T) {
	mut b := []byte("false")
	mut a := new(abc2, abc2(new(int, -1)))
	Decode(b, a) else {
		t.Errorf("want 0, threw exception")
		**a = 0
	}
	if **a != 0 {
		t.Errorf("want 0, found {}", **a)
	}
	**a = -1
	b = []byte("true")
	Decode(b, a) else {
		t.Errorf("want 1, threw exception")
		**a = 1
	}
	if **a != 1 {
		t.Errorf("want 1, found {}", **a)
	}
}

struct objectfoo {
	bar: str
	baz: str
}

impl encoding::JSONEncoder for objectfoo {
	fn EncodeJSON(self)!: []byte {
		mapJSON := map[str]str{
			"bar": self.bar,
			"baz": self.baz,
		}
		ret Encode(mapJSON) else { error(error) }
	}
}

impl encoding::JSONDecoder for objectfoo {
	fn DecodeJSON(mut self, data: []byte)! {
		mut mapJSON := map[str]str{}
		Decode(data, mapJSON) else { error(error) }
		self.bar, _ = mapJSON["bar"]
		self.baz, _ = mapJSON["baz"]
	}
}

#test
fn testObjectCustomDecode(t: &testing::T) {
	mut f := objectfoo{bar: "hello", baz: "custom json"}
	bytes := Encode(f) else {
		t.Errorf("encode failed")
		ret
	}
	f = objectfoo{}
	Decode(bytes, f) else {
		t.Errorf("decode failed")
		ret
	}
	if f.bar != "hello" {
		t.Errorf("objectfoo.bar != \"hello\", found \"{}\"", f.bar)
	}
	if f.baz != "custom json" {
		t.Errorf("objectfoo.baz != \"custom json\", found \"{}\"", f.baz)
	}
}

fn printArray(mut &s: strings::Builder, a: Value) {
	if a == nil {
		s.WriteStr("nil")!
		ret
	}
	match type a {
	| String:
		s.WriteStr("\"")!
		s.WriteStr(str(a.(String)))!
		s.WriteStr("\"")!
	| Bool:
		if a.(Bool) {
			s.WriteStr("true")!
		} else {
			s.WriteStr("false")!
		}
	| Number:
		s.WriteStr(conv::FormatFloat(f64(a.(Number)), 'f', -1, 64))!
	| Array:
		s.WriteByte('[')!
		for _, e in a.(Array) {
			printArray(s, e)
			s.WriteByte(',')!
		}
		s.WriteByte(']')!
	|:
		panic("unreachable")
	}
}

#test
fn testDynDecode(t: &testing::T) {
	mut v := new(Value)
	data := []byte(`
{
	"foo": "pi",
	"bar": "number",
	"baz": {
		"foo2": 123.456,
		"bar2": null
	},
	"fiz": [
		"barbaz",
		1234,
		-1234,
		123.456,
		null,
		false,
		true
	]
}
`)
	Decode(data, v) else {
		t.Errorf("unexpected error: {}", error)
		ret
	}
	mut ok := false
	mut m, ok := (*v).(Object)
	if !ok {
		t.Errorf("value is not object")
		ret
	}
	*v, ok = m["foo"]
	if !ok {
		t.Errorf("key is not exist: foo")
	} else {
		s, (ok) := (*v).(String)
		if ok {
			if s != "pi" {
				t.Errorf("key foo is not `pi`")
			}
		} else {
			t.Errorf("key foo is not string")
		}
	}
	*v, ok = m["bar"]
	if !ok {
		t.Errorf("key is not exist: bar")
	} else {
		s, (ok) := (*v).(String)
		if ok {
			if s != "number" {
				t.Errorf("key bar is not `number`")
			}
		} else {
			t.Errorf("key bar is not string")
		}
	}
	*v, ok = m["baz"]
	if !ok {
		t.Errorf("key is not exist: baz")
	} else {
		mut sm, (ok) := (*v).(Object)
		if ok {
			*v, ok = sm["foo2"]
			if ok {
				number, (ok) := (*v).(Number)
				if ok {
					if number != 123.456 {
						t.Errorf("key bar2 is not 123.456")
					}
				} else {
					t.Errorf("key bar2 is not number")
				}
			}
			*v, ok = sm["bar2"]
			if ok {
				if *v != nil {
					t.Errorf("key bar2 is not nil")
				}
			} else {
				t.Errorf("key is not exist: bar2")
			}
		} else {
			t.Errorf("key baz is not object")
		}
	}
	*v, ok = m["fiz"]
	if !ok {
		t.Errorf("key is not exist: fiz")
	} else {
		_, (ok) := (*v).(Array)
		if ok {
			mut s := strings::Builder{}
			printArray(s, *v)
			found := s.Str()
			want := `["barbaz",1234,-1234,123.456,nil,false,true,]`
			if found != want {
				t.Errorf("key fiz is not expected array;\n\tfound: {}\n\t want: {}", found, want)
			}
		} else {
			t.Errorf("key fiz is not array")
		}
	}
}