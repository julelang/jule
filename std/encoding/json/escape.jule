// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Returns the value true if the ASCII character with the given array
// position can be represented inside a JSON string without any further
// escaping.
//
// All values are true except for the ASCII control characters (0-31), the
// double quote ("), and the backslash character ("\").
fn isSafe(b: byte): bool {
	ret b != '"' && b != '\\' && b > 31
}

// Returns the value true if the ASCII character with the given
// array position can be safely represented inside a JSON string, embedded
// inside of HTML <script> tags, without any additional escaping.
//
// All values are true except for the ASCII control characters (0-31), the
// double quote ("), the backslash character ("\"), HTML opening and closing
// tags ("<" and ">"), and the ampersand ("&").
fn isHTMLSafe(b: byte): bool {
	ret b != '"' && b != '&' && b != '<' && b != '>' && b != '\\' && b > 31
}

fn appendHTMLEscape(mut &dst: buffer, src: []byte) {
	// The characters can only appear in string literals,
	// so just scan the string one byte at a time.
	mut start := 0
	for i, c in src {
		if c == '<' || c == '>' || c == '&' {
			dst.write(src[start:i])
			dst.writeByte('\\')
			dst.writeByte('u')
			dst.writeByte('0')
			dst.writeByte('0')
			dst.writeByte(hex[c>>4])
			dst.writeByte(hex[c&0xF])
			start = i + 1
		}
		// Convert U+2028 and U+2029 (E2 80 A8 and E2 80 A9).
		if c == 0xE2 && i+2 < len(src) && src[i+1] == 0x80 && src[i+2]&^1 == 0xA8 {
			dst.write(src[start:i])
			dst.writeByte('\\')
			dst.writeByte('u')
			dst.writeByte('2')
			dst.writeByte('0')
			dst.writeByte('2')
			dst.writeByte(hex[src[i+2]&0xF])
			start = i + len("\u2029")
		}
	}
	dst.write(src[start:])
}