// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Binary encoding implementation for big-endian order.
struct BigEndian{}

impl BigEndian {
	// Encodes unsigned 16-bit integer into 2-bytes slice.
	fn PutU16(mut b: []byte, x: u16) {
		b[0] = byte(x >> 8)
		b[1] = byte(x)
	}

	// Encodes unsigned 16-bit integer and appends to slice.
	fn AppendU16(mut b: []byte, x: u16): []byte {
		ret append(b,
			byte(x>>8),
			byte(x))
	}

	// Decodes unsigned 16-bit integer from 2-bytes.
	fn DecodeU16(b: []byte): u16 {
		ret u16(b[1]) | u16(b[0])<<8
	}

	// Encodes unsigned 32-bit integer into 4-bytes slice.
	fn PutU32(mut b: []byte, x: u32) {
		b[0] = byte(x >> 24)
		b[1] = byte(x >> 16)
		b[2] = byte(x >> 8)
		b[3] = byte(x)
	}

	// Encodes unsigned 32-bit integer and appends to slice.
	fn AppendU32(mut b: []byte, x: u32): []byte {
		ret append(b,
			byte(x>>24),
			byte(x>>16),
			byte(x>>8),
			byte(x))
	}

	// Decodes unsigned 32-bit integer from 4-bytes.
	fn DecodeU32(b: []byte): u32 {
		ret u32(b[3]) | u32(b[2])<<8 | u32(b[1])<<16 | u32(b[0])<<24
	}

	// Encodes unsigned 64-bit integer into 8-bytes slice.
	fn PutU64(mut b: []byte, x: u64) {
		b[0] = byte(x >> 56)
		b[1] = byte(x >> 48)
		b[2] = byte(x >> 40)
		b[3] = byte(x >> 32)
		b[4] = byte(x >> 24)
		b[5] = byte(x >> 16)
		b[6] = byte(x >> 8)
		b[7] = byte(x)
	}

	// Encodes unsigned 64-bit integer and appends to slice.
	fn AppendU64(mut b: []byte, x: u64): []byte {
		ret append(b,
			byte(x>>56),
			byte(x>>48),
			byte(x>>40),
			byte(x>>32),
			byte(x>>24),
			byte(x>>16),
			byte(x>>8),
			byte(x))
	}

	// Decodes unsigned 64-bit integer from 8-bytes.
	fn DecodeU64(b: []byte): u64 {
		ret u64(b[7]) | u64(b[6])<<8 | u64(b[5])<<16 | u64(b[4])<<24 |
			u64(b[3])<<32 | u64(b[2])<<40 | u64(b[1])<<48 | u64(b[0])<<56
	}
}