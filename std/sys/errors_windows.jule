// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/conv"
use integ "std/jule/integrated"

cpp fn FormatMessageW(flags: cpp.DWORD, msgsrc: *unsafe, msgid: cpp.DWORD, langid: cpp.DWORD, mut buf: *integ::Wchar, size: cpp.DWORD, args: *unsafe): cpp.DWORD

// Windows reserves errors >= 1<<29 for application use.
const APPLICATION_ERROR = 1 << 29

// Common error codes for Jule specific implementations.
// This codes are intended for common use, not Windows API.
const E2BIG = Errno(APPLICATION_ERROR + 0)
const EACCES = Errno(APPLICATION_ERROR + 1)
const EADDRINUSE = Errno(APPLICATION_ERROR + 2)
const EADDRNOTAVAIL = Errno(APPLICATION_ERROR + 3)
const EADV = Errno(APPLICATION_ERROR + 4)
const EAFNOSUPPORT = Errno(APPLICATION_ERROR + 5)
const EAGAIN = Errno(APPLICATION_ERROR + 6)
const EALREADY = Errno(APPLICATION_ERROR + 7)
const EBADE = Errno(APPLICATION_ERROR + 8)
const EBADF = Errno(APPLICATION_ERROR + 9)
const EBADFD = Errno(APPLICATION_ERROR + 10)
const EBADMSG = Errno(APPLICATION_ERROR + 11)
const EBADR = Errno(APPLICATION_ERROR + 12)
const EBADRQC = Errno(APPLICATION_ERROR + 13)
const EBADSLT = Errno(APPLICATION_ERROR + 14)
const EBFONT = Errno(APPLICATION_ERROR + 15)
const EBUSY = Errno(APPLICATION_ERROR + 16)
const ECANCELED = Errno(APPLICATION_ERROR + 17)
const ECHILD = Errno(APPLICATION_ERROR + 18)
const ECHRNG = Errno(APPLICATION_ERROR + 19)
const ECOMM = Errno(APPLICATION_ERROR + 20)
const ECONNABORTED = Errno(APPLICATION_ERROR + 21)
const ECONNREFUSED = Errno(APPLICATION_ERROR + 22)
const ECONNRESET = Errno(APPLICATION_ERROR + 23)
const EDEADLK = Errno(APPLICATION_ERROR + 24)
const EDEADLOCK = Errno(APPLICATION_ERROR + 25)
const EDESTADDRREQ = Errno(APPLICATION_ERROR + 26)
const EDOM = Errno(APPLICATION_ERROR + 27)
const EDOTDOT = Errno(APPLICATION_ERROR + 28)
const EDQUOT = Errno(APPLICATION_ERROR + 29)
const EEXIST = Errno(APPLICATION_ERROR + 30)
const EFAULT = Errno(APPLICATION_ERROR + 31)
const EFBIG = Errno(APPLICATION_ERROR + 32)
const EHOSTDOWN = Errno(APPLICATION_ERROR + 33)
const EHOSTUNREACH = Errno(APPLICATION_ERROR + 34)
const EIDRM = Errno(APPLICATION_ERROR + 35)
const EILSEQ = Errno(APPLICATION_ERROR + 36)
const EINPROGRESS = Errno(APPLICATION_ERROR + 37)
const EINTR = Errno(APPLICATION_ERROR + 38)
const EINVAL = Errno(APPLICATION_ERROR + 39)
const EIO = Errno(APPLICATION_ERROR + 40)
const EISCONN = Errno(APPLICATION_ERROR + 41)
const EISDIR = Errno(APPLICATION_ERROR + 42)
const EISNAM = Errno(APPLICATION_ERROR + 43)
const EKEYEXPIRED = Errno(APPLICATION_ERROR + 44)
const EKEYREJECTED = Errno(APPLICATION_ERROR + 45)
const EKEYREVOKED = Errno(APPLICATION_ERROR + 46)
const EL2HLT = Errno(APPLICATION_ERROR + 47)
const EL2NSYNC = Errno(APPLICATION_ERROR + 48)
const EL3HLT = Errno(APPLICATION_ERROR + 49)
const EL3RST = Errno(APPLICATION_ERROR + 50)
const ELIBACC = Errno(APPLICATION_ERROR + 51)
const ELIBBAD = Errno(APPLICATION_ERROR + 52)
const ELIBEXEC = Errno(APPLICATION_ERROR + 53)
const ELIBMAX = Errno(APPLICATION_ERROR + 54)
const ELIBSCN = Errno(APPLICATION_ERROR + 55)
const ELNRNG = Errno(APPLICATION_ERROR + 56)
const ELOOP = Errno(APPLICATION_ERROR + 57)
const EMEDIUMTYPE = Errno(APPLICATION_ERROR + 58)
const EMFILE = Errno(APPLICATION_ERROR + 59)
const EMLINK = Errno(APPLICATION_ERROR + 60)
const EMSGSIZE = Errno(APPLICATION_ERROR + 61)
const EMULTIHOP = Errno(APPLICATION_ERROR + 62)
const ENAMETOOLONG = Errno(APPLICATION_ERROR + 63)
const ENAVAIL = Errno(APPLICATION_ERROR + 64)
const ENETDOWN = Errno(APPLICATION_ERROR + 65)
const ENETRESET = Errno(APPLICATION_ERROR + 66)
const ENETUNREACH = Errno(APPLICATION_ERROR + 67)
const ENFILE = Errno(APPLICATION_ERROR + 68)
const ENOANO = Errno(APPLICATION_ERROR + 69)
const ENOBUFS = Errno(APPLICATION_ERROR + 70)
const ENOCSI = Errno(APPLICATION_ERROR + 71)
const ENODATA = Errno(APPLICATION_ERROR + 72)
const ENODEV = Errno(APPLICATION_ERROR + 73)
const ENOEXEC = Errno(APPLICATION_ERROR + 74)
const ENOKEY = Errno(APPLICATION_ERROR + 75)
const ENOLCK = Errno(APPLICATION_ERROR + 76)
const ENOLINK = Errno(APPLICATION_ERROR + 77)
const ENOMEDIUM = Errno(APPLICATION_ERROR + 78)
const ENOMEM = Errno(APPLICATION_ERROR + 79)
const ENOMSG = Errno(APPLICATION_ERROR + 80)
const ENONET = Errno(APPLICATION_ERROR + 81)
const ENOPKG = Errno(APPLICATION_ERROR + 82)
const ENOPROTOOPT = Errno(APPLICATION_ERROR + 83)
const ENOSPC = Errno(APPLICATION_ERROR + 84)
const ENOSR = Errno(APPLICATION_ERROR + 85)
const ENOSTR = Errno(APPLICATION_ERROR + 86)
const ENOSYS = Errno(APPLICATION_ERROR + 87)
const ENOTBLK = Errno(APPLICATION_ERROR + 88)
const ENOTCONN = Errno(APPLICATION_ERROR + 89)
const ENOTEMPTY = Errno(APPLICATION_ERROR + 90)
const ENOTNAM = Errno(APPLICATION_ERROR + 91)
const ENOTRECOVERABLE = Errno(APPLICATION_ERROR + 92)
const ENOTSOCK = Errno(APPLICATION_ERROR + 93)
const ENOTSUP = Errno(APPLICATION_ERROR + 94)
const ENOTTY = Errno(APPLICATION_ERROR + 95)
const ENOTUNIQ = Errno(APPLICATION_ERROR + 96)
const ENXIO = Errno(APPLICATION_ERROR + 97)
const EOPNOTSUPP = Errno(APPLICATION_ERROR + 98)
const EOVERFLOW = Errno(APPLICATION_ERROR + 99)
const EOWNERDEAD = Errno(APPLICATION_ERROR + 100)
const EPERM = Errno(APPLICATION_ERROR + 101)
const EPFNOSUPPORT = Errno(APPLICATION_ERROR + 102)
const EPIPE = Errno(APPLICATION_ERROR + 103)
const EPROTO = Errno(APPLICATION_ERROR + 104)
const EPROTONOSUPPORT = Errno(APPLICATION_ERROR + 105)
const EPROTOTYPE = Errno(APPLICATION_ERROR + 106)
const ERANGE = Errno(APPLICATION_ERROR + 107)
const EREMCHG = Errno(APPLICATION_ERROR + 108)
const EREMOTE = Errno(APPLICATION_ERROR + 109)
const EREMOTEIO = Errno(APPLICATION_ERROR + 110)
const ERESTART = Errno(APPLICATION_ERROR + 111)
const EROFS = Errno(APPLICATION_ERROR + 112)
const ESHUTDOWN = Errno(APPLICATION_ERROR + 113)
const ESOCKTNOSUPPORT = Errno(APPLICATION_ERROR + 114)
const ESPIPE = Errno(APPLICATION_ERROR + 115)
const ESRCH = Errno(APPLICATION_ERROR + 116)
const ESRMNT = Errno(APPLICATION_ERROR + 117)
const ESTALE = Errno(APPLICATION_ERROR + 118)
const ESTRPIPE = Errno(APPLICATION_ERROR + 119)
const ETIME = Errno(APPLICATION_ERROR + 120)
const ETIMEDOUT = Errno(APPLICATION_ERROR + 121)
const ETOOMANYREFS = Errno(APPLICATION_ERROR + 122)
const ETXTBSY = Errno(APPLICATION_ERROR + 123)
const EUCLEAN = Errno(APPLICATION_ERROR + 124)
const EUNATCH = Errno(APPLICATION_ERROR + 125)
const EUSERS = Errno(APPLICATION_ERROR + 126)
const EWOULDBLOCK = Errno(APPLICATION_ERROR + 127)
const EXDEV = Errno(APPLICATION_ERROR + 128)
const EXFULL = Errno(APPLICATION_ERROR + 129)
const EWINDOWS = Errno(APPLICATION_ERROR + 130)

const FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100
const FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x00002000
const FORMAT_MESSAGE_FROM_HMODULE = 0x00000800
const FORMAT_MESSAGE_FROM_STRING = 0x00000400
const FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000
const FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200

// Error strings for invented errors.
static errors: [...]str = [
	"argument list too long",
	"permission denied",
	"address already in use",
	"cannot assign requested address",
	"advertise error",
	"address family not supported by protocol",
	"resource temporarily unavailable",
	"operation already in progress",
	"invalid exchange",
	"bad file descriptor",
	"file descriptor in bad state",
	"bad message",
	"invalid request descriptor",
	"invalid request code",
	"invalid slot",
	"bad font file format",
	"device or resource busy",
	"operation canceled",
	"no child processes",
	"channel number out of range",
	"communication error on send",
	"software caused connection abort",
	"connection refused",
	"connection reset by peer",
	"resource deadlock avoided",
	"resource deadlock avoided",
	"destination address required",
	"numerical argument out of domain",
	"RFS specific error",
	"disk quota exceeded",
	"file exists",
	"bad address",
	"file too large",
	"host is down",
	"no route to host",
	"identifier removed",
	"invalid or incomplete multibyte or wide character",
	"operation now in progress",
	"interrupted system call",
	"invalid argument",
	"input/output error",
	"transport endpoint is already connected",
	"is a directory",
	"is a named type file",
	"key has expired",
	"key was rejected by service",
	"key has been revoked",
	"level 2 halted",
	"level 2 not synchronized",
	"level 3 halted",
	"level 3 reset",
	"can not access a needed shared library",
	"accessing a corrupted shared library",
	"cannot exec a shared library directly",
	"attempting to link in too many shared libraries",
	".lib section in a.out corrupted",
	"link number out of range",
	"too many levels of symbolic links",
	"wrong medium type",
	"too many open files",
	"too many links",
	"message too long",
	"multihop attempted",
	"file name too long",
	"no XENIX semaphores available",
	"network is down",
	"network dropped connection on reset",
	"network is unreachable",
	"too many open files in system",
	"no anode",
	"no buffer space available",
	"no CSI structure available",
	"no data available",
	"no such device",
	"exec format error",
	"required key not available",
	"no locks available",
	"link has been severed",
	"no medium found",
	"cannot allocate memory",
	"no message of desired type",
	"machine is not on the network",
	"package not installed",
	"protocol not available",
	"no space left on device",
	"out of streams resources",
	"device not a stream",
	"function not implemented",
	"block device required",
	"transport endpoint is not connected",
	"directory not empty",
	"not a XENIX named type file",
	"state not recoverable",
	"socket operation on non-socket",
	"operation not supported",
	"inappropriate ioctl for device",
	"name not unique on network",
	"no such device or address",
	"operation not supported",
	"value too large for defined data type",
	"owner died",
	"operation not permitted",
	"protocol family not supported",
	"broken pipe",
	"protocol error",
	"protocol not supported",
	"protocol wrong type for socket",
	"numerical result out of range",
	"remote address changed",
	"object is remote",
	"remote I/O error",
	"interrupted system call should be restarted",
	"read-only file system",
	"cannot send after transport endpoint shutdown",
	"socket type not supported",
	"illegal seek",
	"no such process",
	"srmount error",
	"stale NFS file handle",
	"streams pipe error",
	"timer expired",
	"connection timed out",
	"too many references: cannot splice",
	"text file busy",
	"structure needs cleaning",
	"protocol driver not attached",
	"too many users",
	"resource temporarily unavailable",
	"invalid cross-device link",
	"exchange full",
	"not supported by windows",
]

// Underliying type of Errno for Windows.
type errno = uintptr

fn getLastErrno(): Errno { ret Errno(GetLastError()) }

fn langid(pri: u16, sub: u16): u32 { ret u32(sub)<<10 | u32(pri) }

fn formatError(e: Errno): str {
	// deal with special jule errors
	idx := int(e - APPLICATION_ERROR)
	if 0 <= idx && idx < len(errors) {
		ret errors[idx]
	}
	let flags: u32 = FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ARGUMENT_ARRAY | FORMAT_MESSAGE_IGNORE_INSERTS
	mut b := make([]u16, 300)
	mut n := unsafe { cpp.FormatMessageW(cpp.DWORD(flags), nil, cpp.DWORD(e), cpp.DWORD(langid(LANG_ENGLISH, SUBLANG_ENGLISH_US)), (*integ::Wchar)(&b[0]), cpp.DWORD(len(b)), nil) }
	if n == 0 {
		n = unsafe { cpp.FormatMessageW(cpp.DWORD(flags), nil, cpp.DWORD(e), cpp.DWORD(0), (*integ::Wchar)(&b[0]), cpp.DWORD(len(b)), nil) }
		if n == 0 {
			ret "winapi error #" + conv::Itoa(int(e))
		}
	}
	// trim terminating \r and \n
	for n > 0 && (b[n-1] == '\n' || b[n-1] == '\r'); n-- {
	}
	ret integ::UTF16ToStr(b[:n])
}