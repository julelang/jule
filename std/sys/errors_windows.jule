// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/conv"
use integ "std/jule/integrated"

cpp fn FormatMessageW(flags: cpp.DWORD, msgsrc: *unsafe, msgid: cpp.DWORD, langid: cpp.DWORD, mut buf: *integ::Wchar, size: cpp.DWORD, args: *unsafe): cpp.DWORD

const (
	ERROR_ACCESS_DENIED          = Errno(5)
	ERROR_ALREADY_EXISTS         = Errno(183)
	ERROR_BROKEN_PIPE            = Errno(109)
	ERROR_BUFFER_OVERFLOW        = Errno(111)
	ERROR_DIR_NOT_EMPTY          = Errno(145)
	ERROR_ENVVAR_NOT_FOUND       = Errno(203)
	ERROR_FILE_EXISTS            = Errno(80)
	ERROR_FILE_NOT_FOUND         = Errno(2)
	ERROR_HANDLE_EOF             = Errno(38)
	ERROR_INSUFFICIENT_BUFFER    = Errno(122)
	ERROR_INVALID_NAME           = Errno(123)
	ERROR_IO_PENDING             = Errno(997)
	ERROR_MOD_NOT_FOUND          = Errno(126)
	ERROR_MORE_DATA              = Errno(234)
	ERROR_NETNAME_DELETED        = Errno(64)
	ERROR_NOT_FOUND              = Errno(1168)
	ERROR_NOT_READY              = Errno(21)
	ERROR_NO_MORE_FILES          = Errno(18)
	ERROR_OPERATION_ABORTED      = Errno(995)
	ERROR_PATH_NOT_FOUND         = Errno(3)
	ERROR_PRIVILEGE_NOT_HELD     = Errno(1314)
	ERROR_PROC_NOT_FOUND         = Errno(127)
	ERROR_CURRENT_DIRECTORY      = Errno(16)
	ERROR_LOCK_VIOLATION         = Errno(33)
	ERROR_WRITE_PROTECT          = Errno(19)
	ERROR_DISK_FULL              = Errno(39)
	ERROR_NOT_SUPPORTED          = Errno(50)
	ERROR_FILENAME_EXCED_RANGE   = Errno(206)
	ERROR_INVALID_PARAMETER      = Errno(87)
	ERROR_ALREADY_EXIST          = Errno(183)
	ERROR_BAD_LENGTH             = Errno(24)
	ERROR_SHARING_VIOLATION      = Errno(32)
	ERROR_CALL_NOT_IMPLEMENTED   = Errno(120)
	ERROR_LOCK_FAILED            = Errno(167)
	ERROR_NO_TOKEN               = Errno(1008)
	ERROR_NO_UNICODE_TRANSLATION = Errno(1113)
	ERROR_CANT_ACCESS_FILE       = Errno(1920)
	ERROR_INVALID_HANDLE         = Errno(6)
	ERROR_BAD_NETPATH            = Errno(53)
	ERROR_SEEK                   = Errno(25)
)

const (
	WSAEACCES       = Errno(10013)
	WSAECONNABORTED = Errno(10053)
	WSAECONNRESET   = Errno(10054)
	WSAEWOULDBLOCK  = Errno(10035)
)

// Windows reserves errors >= 1<<29 for application use.
const APPLICATION_ERROR = 1 << 29

// Common error codes for Jule specific implementations.
// This codes are intended for common use, not Windows API.
const (
	E2BIG           = Errno(APPLICATION_ERROR + 0)
	EACCES          = Errno(APPLICATION_ERROR + 1)
	EADDRINUSE      = Errno(APPLICATION_ERROR + 2)
	EADDRNOTAVAIL   = Errno(APPLICATION_ERROR + 3)
	EADV            = Errno(APPLICATION_ERROR + 4)
	EAFNOSUPPORT    = Errno(APPLICATION_ERROR + 5)
	EAGAIN          = Errno(APPLICATION_ERROR + 6)
	EALREADY        = Errno(APPLICATION_ERROR + 7)
	EBADE           = Errno(APPLICATION_ERROR + 8)
	EBADF           = Errno(APPLICATION_ERROR + 9)
	EBADFD          = Errno(APPLICATION_ERROR + 10)
	EBADMSG         = Errno(APPLICATION_ERROR + 11)
	EBADR           = Errno(APPLICATION_ERROR + 12)
	EBADRQC         = Errno(APPLICATION_ERROR + 13)
	EBADSLT         = Errno(APPLICATION_ERROR + 14)
	EBFONT          = Errno(APPLICATION_ERROR + 15)
	EBUSY           = Errno(APPLICATION_ERROR + 16)
	ECANCELED       = Errno(APPLICATION_ERROR + 17)
	ECHILD          = Errno(APPLICATION_ERROR + 18)
	ECHRNG          = Errno(APPLICATION_ERROR + 19)
	ECOMM           = Errno(APPLICATION_ERROR + 20)
	ECONNABORTED    = Errno(APPLICATION_ERROR + 21)
	ECONNREFUSED    = Errno(APPLICATION_ERROR + 22)
	ECONNRESET      = Errno(APPLICATION_ERROR + 23)
	EDEADLK         = Errno(APPLICATION_ERROR + 24)
	EDEADLOCK       = Errno(APPLICATION_ERROR + 25)
	EDESTADDRREQ    = Errno(APPLICATION_ERROR + 26)
	EDOM            = Errno(APPLICATION_ERROR + 27)
	EDOTDOT         = Errno(APPLICATION_ERROR + 28)
	EDQUOT          = Errno(APPLICATION_ERROR + 29)
	EEXIST          = Errno(APPLICATION_ERROR + 30)
	EFAULT          = Errno(APPLICATION_ERROR + 31)
	EFBIG           = Errno(APPLICATION_ERROR + 32)
	EHOSTDOWN       = Errno(APPLICATION_ERROR + 33)
	EHOSTUNREACH    = Errno(APPLICATION_ERROR + 34)
	EIDRM           = Errno(APPLICATION_ERROR + 35)
	EILSEQ          = Errno(APPLICATION_ERROR + 36)
	EINPROGRESS     = Errno(APPLICATION_ERROR + 37)
	EINTR           = Errno(APPLICATION_ERROR + 38)
	EINVAL          = Errno(APPLICATION_ERROR + 39)
	EIO             = Errno(APPLICATION_ERROR + 40)
	EISCONN         = Errno(APPLICATION_ERROR + 41)
	EISDIR          = Errno(APPLICATION_ERROR + 42)
	EISNAM          = Errno(APPLICATION_ERROR + 43)
	EKEYEXPIRED     = Errno(APPLICATION_ERROR + 44)
	EKEYREJECTED    = Errno(APPLICATION_ERROR + 45)
	EKEYREVOKED     = Errno(APPLICATION_ERROR + 46)
	EL2HLT          = Errno(APPLICATION_ERROR + 47)
	EL2NSYNC        = Errno(APPLICATION_ERROR + 48)
	EL3HLT          = Errno(APPLICATION_ERROR + 49)
	EL3RST          = Errno(APPLICATION_ERROR + 50)
	ELIBACC         = Errno(APPLICATION_ERROR + 51)
	ELIBBAD         = Errno(APPLICATION_ERROR + 52)
	ELIBEXEC        = Errno(APPLICATION_ERROR + 53)
	ELIBMAX         = Errno(APPLICATION_ERROR + 54)
	ELIBSCN         = Errno(APPLICATION_ERROR + 55)
	ELNRNG          = Errno(APPLICATION_ERROR + 56)
	ELOOP           = Errno(APPLICATION_ERROR + 57)
	EMEDIUMTYPE     = Errno(APPLICATION_ERROR + 58)
	EMFILE          = Errno(APPLICATION_ERROR + 59)
	EMLINK          = Errno(APPLICATION_ERROR + 60)
	EMSGSIZE        = Errno(APPLICATION_ERROR + 61)
	EMULTIHOP       = Errno(APPLICATION_ERROR + 62)
	ENAMETOOLONG    = Errno(APPLICATION_ERROR + 63)
	ENAVAIL         = Errno(APPLICATION_ERROR + 64)
	ENETDOWN        = Errno(APPLICATION_ERROR + 65)
	ENETRESET       = Errno(APPLICATION_ERROR + 66)
	ENETUNREACH     = Errno(APPLICATION_ERROR + 67)
	ENFILE          = Errno(APPLICATION_ERROR + 68)
	ENOANO          = Errno(APPLICATION_ERROR + 69)
	ENOBUFS         = Errno(APPLICATION_ERROR + 70)
	ENOCSI          = Errno(APPLICATION_ERROR + 71)
	ENODATA         = Errno(APPLICATION_ERROR + 72)
	ENODEV          = Errno(APPLICATION_ERROR + 73)
	ENOEXEC         = Errno(APPLICATION_ERROR + 74)
	ENOKEY          = Errno(APPLICATION_ERROR + 75)
	ENOLCK          = Errno(APPLICATION_ERROR + 76)
	ENOLINK         = Errno(APPLICATION_ERROR + 77)
	ENOMEDIUM       = Errno(APPLICATION_ERROR + 78)
	ENOMEM          = Errno(APPLICATION_ERROR + 79)
	ENOMSG          = Errno(APPLICATION_ERROR + 80)
	ENONET          = Errno(APPLICATION_ERROR + 81)
	ENOPKG          = Errno(APPLICATION_ERROR + 82)
	ENOPROTOOPT     = Errno(APPLICATION_ERROR + 83)
	ENOSPC          = Errno(APPLICATION_ERROR + 84)
	ENOSR           = Errno(APPLICATION_ERROR + 85)
	ENOSTR          = Errno(APPLICATION_ERROR + 86)
	ENOSYS          = Errno(APPLICATION_ERROR + 87)
	ENOTBLK         = Errno(APPLICATION_ERROR + 88)
	ENOTCONN        = Errno(APPLICATION_ERROR + 89)
	ENOTEMPTY       = Errno(APPLICATION_ERROR + 90)
	ENOTNAM         = Errno(APPLICATION_ERROR + 91)
	ENOTRECOVERABLE = Errno(APPLICATION_ERROR + 92)
	ENOTSOCK        = Errno(APPLICATION_ERROR + 93)
	ENOTSUP         = Errno(APPLICATION_ERROR + 94)
	ENOTTY          = Errno(APPLICATION_ERROR + 95)
	ENOTUNIQ        = Errno(APPLICATION_ERROR + 96)
	ENXIO           = Errno(APPLICATION_ERROR + 97)
	EOPNOTSUPP      = Errno(APPLICATION_ERROR + 98)
	EOVERFLOW       = Errno(APPLICATION_ERROR + 99)
	EOWNERDEAD      = Errno(APPLICATION_ERROR + 100)
	EPERM           = Errno(APPLICATION_ERROR + 101)
	EPFNOSUPPORT    = Errno(APPLICATION_ERROR + 102)
	EPIPE           = Errno(APPLICATION_ERROR + 103)
	EPROTO          = Errno(APPLICATION_ERROR + 104)
	EPROTONOSUPPORT = Errno(APPLICATION_ERROR + 105)
	EPROTOTYPE      = Errno(APPLICATION_ERROR + 106)
	ERANGE          = Errno(APPLICATION_ERROR + 107)
	EREMCHG         = Errno(APPLICATION_ERROR + 108)
	EREMOTE         = Errno(APPLICATION_ERROR + 109)
	EREMOTEIO       = Errno(APPLICATION_ERROR + 110)
	ERESTART        = Errno(APPLICATION_ERROR + 111)
	EROFS           = Errno(APPLICATION_ERROR + 112)
	ESHUTDOWN       = Errno(APPLICATION_ERROR + 113)
	ESOCKTNOSUPPORT = Errno(APPLICATION_ERROR + 114)
	ESPIPE          = Errno(APPLICATION_ERROR + 115)
	ESRCH           = Errno(APPLICATION_ERROR + 116)
	ESRMNT          = Errno(APPLICATION_ERROR + 117)
	ESTALE          = Errno(APPLICATION_ERROR + 118)
	ESTRPIPE        = Errno(APPLICATION_ERROR + 119)
	ETIME           = Errno(APPLICATION_ERROR + 120)
	ETIMEDOUT       = Errno(APPLICATION_ERROR + 121)
	ETOOMANYREFS    = Errno(APPLICATION_ERROR + 122)
	ETXTBSY         = Errno(APPLICATION_ERROR + 123)
	EUCLEAN         = Errno(APPLICATION_ERROR + 124)
	EUNATCH         = Errno(APPLICATION_ERROR + 125)
	EUSERS          = Errno(APPLICATION_ERROR + 126)
	EWOULDBLOCK     = Errno(APPLICATION_ERROR + 127)
	EXDEV           = Errno(APPLICATION_ERROR + 128)
	EXFULL          = Errno(APPLICATION_ERROR + 129)
	EWINDOWS        = Errno(APPLICATION_ERROR + 130)
)

const (
	FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100
	FORMAT_MESSAGE_ARGUMENT_ARRAY  = 0x00002000
	FORMAT_MESSAGE_FROM_HMODULE    = 0x00000800
	FORMAT_MESSAGE_FROM_STRING     = 0x00000400
	FORMAT_MESSAGE_FROM_SYSTEM     = 0x00001000
	FORMAT_MESSAGE_IGNORE_INSERTS  = 0x00000200
)

// Error strings for invented errors.
static errors: [...]str = [
	"argument list too long",
	"permission denied",
	"address already in use",
	"cannot assign requested address",
	"advertise error",
	"address family not supported by protocol",
	"resource temporarily unavailable",
	"operation already in progress",
	"invalid exchange",
	"bad file descriptor",
	"file descriptor in bad state",
	"bad message",
	"invalid request descriptor",
	"invalid request code",
	"invalid slot",
	"bad font file format",
	"device or resource busy",
	"operation canceled",
	"no child processes",
	"channel number out of range",
	"communication error on send",
	"software caused connection abort",
	"connection refused",
	"connection reset by peer",
	"resource deadlock avoided",
	"resource deadlock avoided",
	"destination address required",
	"numerical argument out of domain",
	"RFS specific error",
	"disk quota exceeded",
	"file exists",
	"bad address",
	"file too large",
	"host is down",
	"no route to host",
	"identifier removed",
	"invalid or incomplete multibyte or wide character",
	"operation now in progress",
	"interrupted system call",
	"invalid argument",
	"input/output error",
	"transport endpoint is already connected",
	"is a directory",
	"is a named type file",
	"key has expired",
	"key was rejected by service",
	"key has been revoked",
	"level 2 halted",
	"level 2 not synchronized",
	"level 3 halted",
	"level 3 reset",
	"can not access a needed shared library",
	"accessing a corrupted shared library",
	"cannot exec a shared library directly",
	"attempting to link in too many shared libraries",
	".lib section in a.out corrupted",
	"link number out of range",
	"too many levels of symbolic links",
	"wrong medium type",
	"too many open files",
	"too many links",
	"message too long",
	"multihop attempted",
	"file name too long",
	"no XENIX semaphores available",
	"network is down",
	"network dropped connection on reset",
	"network is unreachable",
	"too many open files in system",
	"no anode",
	"no buffer space available",
	"no CSI structure available",
	"no data available",
	"no such device",
	"exec format error",
	"required key not available",
	"no locks available",
	"link has been severed",
	"no medium found",
	"cannot allocate memory",
	"no message of desired type",
	"machine is not on the network",
	"package not installed",
	"protocol not available",
	"no space left on device",
	"out of streams resources",
	"device not a stream",
	"function not implemented",
	"block device required",
	"transport endpoint is not connected",
	"directory not empty",
	"not a XENIX named type file",
	"state not recoverable",
	"socket operation on non-socket",
	"operation not supported",
	"inappropriate ioctl for device",
	"name not unique on network",
	"no such device or address",
	"operation not supported",
	"value too large for defined data type",
	"owner died",
	"operation not permitted",
	"protocol family not supported",
	"broken pipe",
	"protocol error",
	"protocol not supported",
	"protocol wrong type for socket",
	"numerical result out of range",
	"remote address changed",
	"object is remote",
	"remote I/O error",
	"interrupted system call should be restarted",
	"read-only file system",
	"cannot send after transport endpoint shutdown",
	"socket type not supported",
	"illegal seek",
	"no such process",
	"srmount error",
	"stale NFS file handle",
	"streams pipe error",
	"timer expired",
	"connection timed out",
	"too many references: cannot splice",
	"text file busy",
	"structure needs cleaning",
	"protocol driver not attached",
	"too many users",
	"resource temporarily unavailable",
	"invalid cross-device link",
	"exchange full",
	"not supported by windows",
]

// More invented values for signals
const (
	SIGHUP  = Signal(0x1)
	SIGINT  = Signal(0x2)
	SIGQUIT = Signal(0x3)
	SIGILL  = Signal(0x4)
	SIGTRAP = Signal(0x5)
	SIGABRT = Signal(0x6)
	SIGBUS  = Signal(0x7)
	SIGFPE  = Signal(0x8)
	SIGKILL = Signal(0x9)
	SIGSEGV = Signal(0xb)
	SIGPIPE = Signal(0xd)
	SIGALRM = Signal(0xe)
	SIGTERM = Signal(0xf)
)

static signals: [...]str = [
	"hangup",
	"interrupt",
	"quit",
	"illegal instruction",
	"trace/breakpoint trap",
	"aborted",
	"bus error",
	"floating point exception",
	"killed",
	"user defined signal 1",
	"segmentation fault",
	"user defined signal 2",
	"broken pipe",
	"alarm clock",
	"terminated",
]

fn GetLastErrno(): Errno { ret Errno(GetLastError()) }

fn langid(pri: u16, sub: u16): u32 { ret u32(sub)<<10 | u32(pri) }

fn formatError(e: Errno): str {
	// deal with special jule errors
	idx := int(e - APPLICATION_ERROR)
	if 0 <= idx && idx < len(errors) {
		ret errors[idx]
	}
	let flags: u32 = FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ARGUMENT_ARRAY | FORMAT_MESSAGE_IGNORE_INSERTS
	mut b := make([]u16, 300)
	mut n := unsafe { cpp.FormatMessageW(cpp.DWORD(flags), nil, cpp.DWORD(e), cpp.DWORD(langid(LANG_ENGLISH, SUBLANG_ENGLISH_US)), (*integ::Wchar)(&b[0]), cpp.DWORD(len(b)), nil) }
	if n == 0 {
		n = unsafe { cpp.FormatMessageW(cpp.DWORD(flags), nil, cpp.DWORD(e), cpp.DWORD(0), (*integ::Wchar)(&b[0]), cpp.DWORD(len(b)), nil) }
		if n == 0 {
			ret "winapi error #" + conv::Itoa(int(e))
		}
	}
	// trim terminating \r and \n
	for n > 0 && (b[n-1] == '\n' || b[n-1] == '\r'); n-- {
	}
	ret integ::UTF16ToStr(b[:n])
}