// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/conv"
use integ "std/jule/integrated"

cpp fn FormatMessageW(flags: cpp.DWORD, msgsrc: *unsafe, msgid: cpp.DWORD, langid: cpp.DWORD, mut buf: *integ::Wchar, size: cpp.DWORD, args: *unsafe): cpp.DWORD

const (
	ERROR_ACCESS_DENIED          = Errno(5)
	ERROR_ALREADY_EXISTS         = Errno(183)
	ERROR_BROKEN_PIPE            = Errno(109)
	ERROR_BUFFER_OVERFLOW        = Errno(111)
	ERROR_DIR_NOT_EMPTY          = Errno(145)
	ERROR_ENVVAR_NOT_FOUND       = Errno(203)
	ERROR_FILE_EXISTS            = Errno(80)
	ERROR_FILE_NOT_FOUND         = Errno(2)
	ERROR_HANDLE_EOF             = Errno(38)
	ERROR_INSUFFICIENT_BUFFER    = Errno(122)
	ERROR_INVALID_NAME           = Errno(123)
	ERROR_IO_PENDING             = Errno(997)
	ERROR_MOD_NOT_FOUND          = Errno(126)
	ERROR_MORE_DATA              = Errno(234)
	ERROR_NETNAME_DELETED        = Errno(64)
	ERROR_NOT_FOUND              = Errno(1168)
	ERROR_NOT_READY              = Errno(21)
	ERROR_NO_MORE_FILES          = Errno(18)
	ERROR_OPERATION_ABORTED      = Errno(995)
	ERROR_PATH_NOT_FOUND         = Errno(3)
	ERROR_PRIVILEGE_NOT_HELD     = Errno(1314)
	ERROR_PROC_NOT_FOUND         = Errno(127)
	ERROR_CURRENT_DIRECTORY      = Errno(16)
	ERROR_LOCK_VIOLATION         = Errno(33)
	ERROR_WRITE_PROTECT          = Errno(19)
	ERROR_DISK_FULL              = Errno(39)
	ERROR_NOT_SUPPORTED          = Errno(50)
	ERROR_FILENAME_EXCED_RANGE   = Errno(206)
	ERROR_INVALID_PARAMETER      = Errno(87)
	ERROR_ALREADY_EXIST          = Errno(183)
	ERROR_BAD_LENGTH             = Errno(24)
	ERROR_SHARING_VIOLATION      = Errno(32)
	ERROR_CALL_NOT_IMPLEMENTED   = Errno(120)
	ERROR_LOCK_FAILED            = Errno(167)
	ERROR_NO_TOKEN               = Errno(1008)
	ERROR_NO_UNICODE_TRANSLATION = Errno(1113)
	ERROR_CANT_ACCESS_FILE       = Errno(1920)
	ERROR_INVALID_HANDLE         = Errno(6)
	ERROR_BAD_NETPATH            = Errno(53)
	ERROR_SEEK                   = Errno(25)
)

const (
	WSAEACCES       = Errno(10013)
	WSAECONNABORTED = Errno(10053)
	WSAECONNRESET   = Errno(10054)
	WSAEWOULDBLOCK  = Errno(10035)
)

// Windows reserves errors >= 1<<29 for application use.
const APPLICATION_ERROR = 1 << 29

// Common error codes for Jule specific implementations.
// This codes are intended for common use, not Windows API.
const (
	E2BIG = Errno(APPLICATION_ERROR + iota)
	EACCES
	EADDRINUSE
	EADDRNOTAVAIL
	EADV
	EAFNOSUPPORT
	EAGAIN
	EALREADY
	EBADE
	EBADF
	EBADFD
	EBADMSG
	EBADR
	EBADRQC
	EBADSLT
	EBFONT
	EBUSY
	ECANCELED
	ECHILD
	ECHRNG
	ECOMM
	ECONNABORTED
	ECONNREFUSED
	ECONNRESET
	EDEADLK
	EDEADLOCK
	EDESTADDRREQ
	EDOM
	EDOTDOT
	EDQUOT
	EEXIST
	EFAULT
	EFBIG
	EHOSTDOWN
	EHOSTUNREACH
	EIDRM
	EILSEQ
	EINPROGRESS
	EINTR
	EINVAL
	EIO
	EISCONN
	EISDIR
	EISNAM
	EKEYEXPIRED
	EKEYREJECTED
	EKEYREVOKED
	EL2HLT
	EL2NSYNC
	EL3HLT
	EL3RST
	ELIBACC
	ELIBBAD
	ELIBEXEC
	ELIBMAX
	ELIBSCN
	ELNRNG
	ELOOP
	EMEDIUMTYPE
	EMFILE
	EMLINK
	EMSGSIZE
	EMULTIHOP
	ENAMETOOLONG
	ENAVAIL
	ENETDOWN
	ENETRESET
	ENETUNREACH
	ENFILE
	ENOANO
	ENOBUFS
	ENOCSI
	ENODATA
	ENODEV
	ENOEXEC
	ENOKEY
	ENOLCK
	ENOLINK
	ENOMEDIUM
	ENOMEM
	ENOMSG
	ENONET
	ENOPKG
	ENOPROTOOPT
	ENOSPC
	ENOSR
	ENOSTR
	ENOSYS
	ENOTBLK
	ENOTCONN
	ENOTEMPTY
	ENOTNAM
	ENOTRECOVERABLE
	ENOTSOCK
	ENOTSUP
	ENOTTY
	ENOTUNIQ
	ENXIO
	EOPNOTSUPP
	EOVERFLOW
	EOWNERDEAD
	EPERM
	EPFNOSUPPORT
	EPIPE
	EPROTO
	EPROTONOSUPPORT
	EPROTOTYPE
	ERANGE
	EREMCHG
	EREMOTE
	EREMOTEIO
	ERESTART
	EROFS
	ESHUTDOWN
	ESOCKTNOSUPPORT
	ESPIPE
	ESRCH
	ESRMNT
	ESTALE
	ESTRPIPE
	ETIME
	ETIMEDOUT
	ETOOMANYREFS
	ETXTBSY
	EUCLEAN
	EUNATCH
	EUSERS
	EWOULDBLOCK
	EXDEV
	EXFULL
	EWINDOWS
)

const (
	FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100
	FORMAT_MESSAGE_ARGUMENT_ARRAY  = 0x00002000
	FORMAT_MESSAGE_FROM_HMODULE    = 0x00000800
	FORMAT_MESSAGE_FROM_STRING     = 0x00000400
	FORMAT_MESSAGE_FROM_SYSTEM     = 0x00001000
	FORMAT_MESSAGE_IGNORE_INSERTS  = 0x00000200
)

// Error strings for invented errors.
let errors: [...]str = [
	"argument list too long",
	"permission denied",
	"address already in use",
	"cannot assign requested address",
	"advertise error",
	"address family not supported by protocol",
	"resource temporarily unavailable",
	"operation already in progress",
	"invalid exchange",
	"bad file descriptor",
	"file descriptor in bad state",
	"bad message",
	"invalid request descriptor",
	"invalid request code",
	"invalid slot",
	"bad font file format",
	"device or resource busy",
	"operation canceled",
	"no child processes",
	"channel number out of range",
	"communication error on send",
	"software caused connection abort",
	"connection refused",
	"connection reset by peer",
	"resource deadlock avoided",
	"resource deadlock avoided",
	"destination address required",
	"numerical argument out of domain",
	"RFS specific error",
	"disk quota exceeded",
	"file exists",
	"bad address",
	"file too large",
	"host is down",
	"no route to host",
	"identifier removed",
	"invalid or incomplete multibyte or wide character",
	"operation now in progress",
	"interrupted system call",
	"invalid argument",
	"input/output error",
	"transport endpoint is already connected",
	"is a directory",
	"is a named type file",
	"key has expired",
	"key was rejected by service",
	"key has been revoked",
	"level 2 halted",
	"level 2 not synchronized",
	"level 3 halted",
	"level 3 reset",
	"can not access a needed shared library",
	"accessing a corrupted shared library",
	"cannot exec a shared library directly",
	"attempting to link in too many shared libraries",
	".lib section in a.out corrupted",
	"link number out of range",
	"too many levels of symbolic links",
	"wrong medium type",
	"too many open files",
	"too many links",
	"message too long",
	"multihop attempted",
	"file name too long",
	"no XENIX semaphores available",
	"network is down",
	"network dropped connection on reset",
	"network is unreachable",
	"too many open files in system",
	"no anode",
	"no buffer space available",
	"no CSI structure available",
	"no data available",
	"no such device",
	"exec format error",
	"required key not available",
	"no locks available",
	"link has been severed",
	"no medium found",
	"cannot allocate memory",
	"no message of desired type",
	"machine is not on the network",
	"package not installed",
	"protocol not available",
	"no space left on device",
	"out of streams resources",
	"device not a stream",
	"function not implemented",
	"block device required",
	"transport endpoint is not connected",
	"directory not empty",
	"not a XENIX named type file",
	"state not recoverable",
	"socket operation on non-socket",
	"operation not supported",
	"inappropriate ioctl for device",
	"name not unique on network",
	"no such device or address",
	"operation not supported",
	"value too large for defined data type",
	"owner died",
	"operation not permitted",
	"protocol family not supported",
	"broken pipe",
	"protocol error",
	"protocol not supported",
	"protocol wrong type for socket",
	"numerical result out of range",
	"remote address changed",
	"object is remote",
	"remote I/O error",
	"interrupted system call should be restarted",
	"read-only file system",
	"cannot send after transport endpoint shutdown",
	"socket type not supported",
	"illegal seek",
	"no such process",
	"srmount error",
	"stale NFS file handle",
	"streams pipe error",
	"timer expired",
	"connection timed out",
	"too many references: cannot splice",
	"text file busy",
	"structure needs cleaning",
	"protocol driver not attached",
	"too many users",
	"resource temporarily unavailable",
	"invalid cross-device link",
	"exchange full",
	"not supported by windows",
]

// More invented values for signals
const (
	SIGHUP  = Signal(0x1)
	SIGINT  = Signal(0x2)
	SIGQUIT = Signal(0x3)
	SIGILL  = Signal(0x4)
	SIGTRAP = Signal(0x5)
	SIGABRT = Signal(0x6)
	SIGBUS  = Signal(0x7)
	SIGFPE  = Signal(0x8)
	SIGKILL = Signal(0x9)
	SIGSEGV = Signal(0xb)
	SIGPIPE = Signal(0xd)
	SIGALRM = Signal(0xe)
	SIGTERM = Signal(0xf)
)

let signals: [...]str = [
	"hangup",
	"interrupt",
	"quit",
	"illegal instruction",
	"trace/breakpoint trap",
	"aborted",
	"bus error",
	"floating point exception",
	"killed",
	"user defined signal 1",
	"segmentation fault",
	"user defined signal 2",
	"broken pipe",
	"alarm clock",
	"terminated",
]

fn GetLastErrno(): Errno { ret Errno(GetLastError()) }

fn langid(pri: u16, sub: u16): u32 { ret u32(sub)<<10 | u32(pri) }

fn formatError(e: Errno): str {
	// deal with special jule errors
	idx := int(e - APPLICATION_ERROR)
	if 0 <= idx && idx < len(errors) {
		ret errors[idx]
	}
	let flags: u32 = FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ARGUMENT_ARRAY | FORMAT_MESSAGE_IGNORE_INSERTS
	mut b := make([]u16, 300)
	mut n := unsafe { cpp.FormatMessageW(cpp.DWORD(flags), nil, cpp.DWORD(e), cpp.DWORD(langid(LANG_ENGLISH, SUBLANG_ENGLISH_US)), (*integ::Wchar)(&b[0]), cpp.DWORD(len(b)), nil) }
	if n == 0 {
		n = unsafe { cpp.FormatMessageW(cpp.DWORD(flags), nil, cpp.DWORD(e), cpp.DWORD(0), (*integ::Wchar)(&b[0]), cpp.DWORD(len(b)), nil) }
		if n == 0 {
			ret "winapi error #" + conv::Itoa(int(e))
		}
	}
	// trim terminating \r and \n
	for n > 0 && (b[n-1] == '\n' || b[n-1] == '\r'); n-- {
	}
	ret integ::UTF16ToStr(b[:n])
}