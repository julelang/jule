// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"

cpp use "<arpa/inet.h>"
cpp use "<netinet/in.h>"
cpp use "<sys/socket.h>"
cpp use "<sys/time.h>"

cpp fn socket(int, int, int): int
cpp unsafe fn bind(int, *cpp.sockaddr, uint): int
cpp unsafe fn connect(int, *cpp.sockaddr, uint): int
cpp fn listen(int, int): int
cpp unsafe fn accept(int, *cpp.sockaddr, len: *u32): int
cpp unsafe fn send(int, *unsafe, uint, int): int
cpp unsafe fn recv(int, *unsafe, uint, int): int
cpp unsafe fn recvfrom(int, *unsafe, uint, int, *cpp.sockaddr, *u32): int
cpp unsafe fn sendto(int, *unsafe, uint, int, *cpp.sockaddr, u32): int
cpp unsafe fn getsockopt(int, int, int, *unsafe, *integ::UnsignedInt): int
cpp unsafe fn setsockopt(int, int, int, *unsafe, uint): int
cpp unsafe fn getsockname(int, *cpp.sockaddr, *u32): int

const INVALID_SOCKET = -1

// C's socket function.
fn Socket(domain: int, t: int, protocol: int): int {
	ret cpp.socket(domain, t, protocol)
}

// C's bind function.
unsafe fn Bind(handle: int, addr: *unsafe, len: uint): int {
	ret cpp.bind(handle, (*cpp.sockaddr)(addr), len)
}

// C's connect function.
unsafe fn Connect(handle: int, addr: *unsafe, len: uint): int {
	ret cpp.connect(handle, (*cpp.sockaddr)(addr), len)
}

// C's listen function.
fn Listen(handle: int, backlog: int): int {
	ret cpp.listen(handle, backlog)
}

// C's accept function.
unsafe fn Accept(handle: int, addr: *unsafe, len: *u32): int {
	ret cpp.accept(handle, (*cpp.sockaddr)(addr), len)
}

// C's recv function.
unsafe fn Recv(handle: int, mut buf: *unsafe, len: uint, flags: int): int {
	ret cpp.recv(handle, buf, len, flags)
}

// C's recvfrom function.
unsafe fn Recvfrom(handle: int, mut buf: *unsafe, len: uint, flags: int, srcAddr: *unsafe, addrLen: *u32): int {
	ret cpp.recvfrom(handle, buf, len, flags, (*cpp.sockaddr)(srcAddr), addrLen)
}

// C's send function.
unsafe fn Send(handle: int, mut buf: *unsafe, len: uint, flags: int): int {
	ret cpp.send(handle, buf, len, flags)
}

// C's recvfrom function.
unsafe fn Sendto(handle: int, mut buf: *unsafe, len: uint, flags: int, srcAddr: *unsafe, addrLen: u32): int {
	ret cpp.sendto(handle, buf, len, flags, (*cpp.sockaddr)(srcAddr), addrLen)
}

// C's getsockopt function.
unsafe fn Getsockopt(handle: int, level: int, option: int, buf: *unsafe, len: *integ::UnsignedInt): int {
	ret cpp.getsockopt(handle, level, option, buf, len)
}

// C's setsockopt function.
unsafe fn Setsockopt(handle: int, level: int, option: int, buf: *unsafe, len: uint): int {
	ret cpp.setsockopt(handle, level, option, buf, len)
}

// C's getsockname function.
unsafe fn Getsockname(handle: int, addr: *unsafe, len: *u32): int {
	ret cpp.getsockname(handle, (*cpp.sockaddr)(addr), len)
}