// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

type Socklen: uint

const (
	GetFileExInfoStandard = 0
	GetFileExMaxInfoLevel = 1
)

struct Win32FindData {
	FileAttributes:    u32
	CreationTime:      Filetime
	LastAccessTime:    Filetime
	LastWriteTime:     Filetime
	FileSizeHigh:      u32
	FileSizeLow:       u32
	Reserved0:         u32
	Reserved1:         u32
	FileName:          [MAX_PATH - 1]u16
	AlternateFileName: [13]u16
}

struct Filetime {
	LowDateTime:  u32
	HighDateTime: u32
}

impl Filetime {
	// Returns Filetime ft in nanoseconds
	// since Epoch (00:00:00 UTC, January 1, 1970).
	fn Nanoseconds(self): i64 {
		// 100-nanosecond intervals since January 1, 1601
		mut nsec := i64(self.HighDateTime)<<32 | i64(self.LowDateTime)
		// change starting time to the Epoch (00:00:00 UTC, January 1, 1970)
		nsec -= 116444736000000000
		// convert into nanoseconds
		nsec *= 100
		ret nsec
	}
}

struct Win32FileAttributeData {
	FileAttributes: u32
	CreationTime:   Filetime
	LastAccessTime: Filetime
	LastWriteTime:  Filetime
	FileSizeHigh:   u32
	FileSizeLow:    u32
}

const (
	GENERIC_READ    = 0x80000000
	GENERIC_WRITE   = 0x40000000
	GENERIC_EXECUTE = 0x20000000
	GENERIC_ALL     = 0x10000000
)

const (
	FILE_SHARE_READ              = 0x00000001
	FILE_SHARE_WRITE             = 0x00000002
	FILE_SHARE_DELETE            = 0x00000004
	FILE_ATTRIBUTE_READONLY      = 0x00000001
	FILE_ATTRIBUTE_HIDDEN        = 0x00000002
	FILE_ATTRIBUTE_SYSTEM        = 0x00000004
	FILE_ATTRIBUTE_DIRECTORY     = 0x00000010
	FILE_ATTRIBUTE_ARCHIVE       = 0x00000020
	FILE_ATTRIBUTE_NORMAL        = 0x00000080
	FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400
)

const INVALID_FILE_ATTRIBUTES = 0xffffffff

const (
	FILE_TYPE_CHAR    = 0x0002
	FILE_TYPE_DISK    = 0x0001
	FILE_TYPE_PIPE    = 0x0003
	FILE_TYPE_REMOTE  = 0x8000
	FILE_TYPE_UNKNOWN = 0x0000
)

const (
	FILE_BEGIN   = 0
	FILE_CURRENT = 1
	FILE_END     = 2
)

const (
	FILE_LIST_DIRECTORY   = 0x00000001
	FILE_WRITE_EA         = 0x00000010
	FILE_APPEND_DATA      = 0x00000004
	FILE_WRITE_ATTRIBUTES = 0x00000100
)

const (
	STANDARD_RIGHTS_REQUIRED = 0xf0000
	STANDARD_RIGHTS_READ     = 0x20000
	STANDARD_RIGHTS_WRITE    = 0x20000
	STANDARD_RIGHTS_EXECUTE  = 0x20000
	STANDARD_RIGHTS_ALL      = 0x1F0000
)

const (
	PROCESS_TERMINATE         = 1
	PROCESS_QUERY_INFORMATION = 0x00000400
	SYNCHRONIZE               = 0x00100000
)

const (
	CREATE_NEW        = 1
	CREATE_ALWAYS     = 2
	OPEN_EXISTING     = 3
	OPEN_ALWAYS       = 4
	TRUNCATE_EXISTING = 5
)

const (
	FSCTL_GET_REPARSE_POINT          = 0x900A8
	MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16 * 1024
	_IO_REPARSE_TAG_MOUNT_POINT      = 0xA0000003
	IO_REPARSE_TAG_SYMLINK           = 0xA000000C
	SYMBOLIC_LINK_FLAG_DIRECTORY     = 0x1
	_SYMLINK_FLAG_RELATIVE           = 1
)

const (
	FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000
	FILE_FLAG_BACKUP_SEMANTICS   = 0x02000000
	FILE_FLAG_OVERLAPPED         = 0x40000000
)

const (
	LANG_ENGLISH       = 0x09
	SUBLANG_ENGLISH_US = 0x01
)

struct SecurityAttributes {
	Length:             u32
	SecurityDescriptor: uintptr
	InheritHandle:      u32
}

struct ByHandleFileInformation {
	FileAttributes:     u32
	CreationTime:       Filetime
	LastAccessTime:     Filetime
	LastWriteTime:      Filetime
	VolumeSerialNumber: u32
	FileSizeHigh:       u32
	FileSizeLow:        u32
	NumberOfLinks:      u32
	FileIndexHigh:      u32
	FileIndexLow:       u32
}

const (
	IOC_OUT                            = 0x40000000
	IOC_IN                             = 0x80000000
	IOC_VENDOR                         = 0x18000000
	IOC_INOUT                          = IOC_IN | IOC_OUT
	IOC_WS2                            = 0x08000000
	SIO_GET_EXTENSION_FUNCTION_POINTER = IOC_INOUT | IOC_WS2 | 6
	SIO_KEEPALIVE_VALS                 = IOC_IN | IOC_VENDOR | 4
	SIO_UDP_CONNRESET                  = IOC_IN | IOC_VENDOR | 12
)

type secType = i32
type usecType = i32

// Invented values to support what package os expects.
struct Timeval {
	Sec:  i32
	Usec: i32
}

struct SockaddrInet4 {
	Family: u16
	Port:   u16
	Addr:   [4]byte /* in_addr */
	Zero:   [8]u8
}

struct SockaddrInet6 {
	Family:   u16
	Port:     u16
	Flowinfo: u32
	Addr:     [16]byte /* in6_addr */
	Scope_id: u32
}

const FD_SETSIZE = 64

struct FdSet {
	Count: u32
	Array: [FD_SETSIZE]uintptr
}

impl FdSet {
	// Adds fd to the set fds.
	fn Set(mut self, fd: uintptr) {
		let mut i: u32
		for i < self.Count; i++ {
			if self.Array[i] == fd {
				break
			}
		}
		if i == self.Count {
			if self.Count < FD_SETSIZE {
				self.Array[i] = fd
				self.Count++
			}
		}
	}

	// Returns whether fd is in the set fds.
	fn IsSet(mut self, fd: uintptr): bool {
		let mut i: u32
		for i < self.Count; i++ {
			if self.Array[i] == fd {
				ret true
			}
		}
		ret false
	}

	// Clears the set fds.
	fn Zero(mut self) {
		self.Count = 0
	}
}

// LoadLibrary flags for determining from where to search for a DLL
const (
	DONT_RESOLVE_DLL_REFERENCES               = 0x1
	LOAD_LIBRARY_AS_DATAFILE                  = 0x2
	LOAD_WITH_ALTERED_SEARCH_PATH             = 0x8
	LOAD_IGNORE_CODE_AUTHZ_LEVEL              = 0x10
	LOAD_LIBRARY_AS_IMAGE_RESOURCE            = 0x20
	LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE        = 0x40
	LOAD_LIBRARY_REQUIRE_SIGNED_TARGET        = 0x80
	LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR          = 0x100
	LOAD_LIBRARY_SEARCH_APPLICATION_DIR       = 0x200
	LOAD_LIBRARY_SEARCH_USER_DIRS             = 0x400
	LOAD_LIBRARY_SEARCH_SYSTEM32              = 0x800
	LOAD_LIBRARY_SEARCH_DEFAULT_DIRS          = 0x1000
	LOAD_LIBRARY_SAFE_CURRENT_DIRS            = 0x00002000
	LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER = 0x00004000
	LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY      = 0x00008000
)