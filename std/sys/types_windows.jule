// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// It is a C enum in the Windows API.
cpp type GET_FILEEX_INFO_LEVELS: int

const GetFileExInfoStandard = 0
const GetFileExMaxInfoLevel = 1

struct Win32FindData {
	FileAttributes:    u32
	CreationTime:      Filetime
	LastAccessTime:    Filetime
	LastWriteTime:     Filetime
	FileSizeHigh:      u32
	FileSizeLow:       u32
	Reserved0:         u32
	Reserved1:         u32
	FileName:          [MAX_PATH - 1]u16
	AlternateFileName: [13]u16
}

struct Filetime {
	LowDateTime:  u32
	HighDateTime: u32
}

impl Filetime {
	// Returns Filetime ft in nanoseconds
	// since Epoch (00:00:00 UTC, January 1, 1970).
	fn Nanoseconds(self): i64 {
		// 100-nanosecond intervals since January 1, 1601
		mut nsec := i64(self.HighDateTime)<<32 + i64(self.LowDateTime)
		// change starting time to the Epoch (00:00:00 UTC, January 1, 1970)
		nsec -= 116444736000000000
		// convert into nanoseconds
		nsec *= 100
		ret nsec
	}
}

struct Win32FileAttributeData {
	FileAttributes: u32
	CreationTime:   Filetime
	LastAccessTime: Filetime
	LastWriteTime:  Filetime
	FileSizeHigh:   u32
	FileSizeLow:    u32
}

const GENERIC_READ = 0x80000000
const GENERIC_WRITE = 0x40000000
const GENERIC_EXECUTE = 0x20000000
const GENERIC_ALL = 0x10000000

const FILE_SHARE_READ = 0x00000001
const FILE_SHARE_WRITE = 0x00000002
const FILE_SHARE_DELETE = 0x00000004
const FILE_ATTRIBUTE_READONLY = 0x00000001
const FILE_ATTRIBUTE_HIDDEN = 0x00000002
const FILE_ATTRIBUTE_SYSTEM = 0x00000004
const FILE_ATTRIBUTE_DIRECTORY = 0x00000010
const FILE_ATTRIBUTE_ARCHIVE = 0x00000020
const FILE_ATTRIBUTE_NORMAL = 0x00000080
const FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400

const INVALID_FILE_ATTRIBUTES = 0xffffffff

const FILE_TYPE_CHAR = 0x0002
const FILE_TYPE_DISK = 0x0001
const FILE_TYPE_PIPE = 0x0003
const FILE_TYPE_REMOTE = 0x8000
const FILE_TYPE_UNKNOWN = 0x0000

const FILE_BEGIN = 0
const FILE_CURRENT = 1
const FILE_END = 2

const FILE_LIST_DIRECTORY = 0x00000001
const FILE_APPEND_DATA = 0x00000004
const FILE_WRITE_ATTRIBUTES = 0x00000100

const CREATE_NEW = 1
const CREATE_ALWAYS = 2
const OPEN_EXISTING = 3
const OPEN_ALWAYS = 4
const TRUNCATE_EXISTING = 5

const FSCTL_GET_REPARSE_POINT = 0x900A8
const MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16 * 1024
const _IO_REPARSE_TAG_MOUNT_POINT = 0xA0000003
const IO_REPARSE_TAG_SYMLINK = 0xA000000C
const SYMBOLIC_LINK_FLAG_DIRECTORY = 0x1
const _SYMLINK_FLAG_RELATIVE = 1

const FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000
const FILE_FLAG_BACKUP_SEMANTICS = 0x02000000
const FILE_FLAG_OVERLAPPED = 0x40000000

struct SecurityAttributes {
	Length:             u32
	SecurityDescriptor: uintptr
	InheritHandle:      u32
}

struct ByHandleFileInformation {
	FileAttributes:     u32
	CreationTime:       Filetime
	LastAccessTime:     Filetime
	LastWriteTime:      Filetime
	VolumeSerialNumber: u32
	FileSizeHigh:       u32
	FileSizeLow:        u32
	NumberOfLinks:      u32
	FileIndexHigh:      u32
	FileIndexLow:       u32
}