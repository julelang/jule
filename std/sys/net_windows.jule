// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Useful links;
// - https://github.com/wine-mirror/wine/blob/master/include/winsock2.h

#pass "-lws2_32"

use integ "std/jule/integrated"

cpp use "<winsock2.h>"
cpp use "<ws2ipdef.h>"

#typedef
cpp struct WSADATA{}

cpp struct sockaddr{}

#typedef
cpp struct fd_set{}

cpp unsafe fn select(int, *cpp.fd_set, *cpp.fd_set, *cpp.fd_set, *cpp.timeval): int
cpp fn socket(int, int, int): uintptr
cpp unsafe fn bind(uintptr, *cpp.sockaddr, Socklen): int
cpp unsafe fn connect(uintptr, *cpp.sockaddr, Socklen): int
cpp fn listen(uintptr, int): int
cpp unsafe fn accept(uintptr, *cpp.sockaddr, *integ::Int): uintptr
cpp unsafe fn send(uintptr, *integ::Char, Socklen, int): int
cpp unsafe fn recv(uintptr, *integ::Char, Socklen, int): int
cpp unsafe fn recvfrom(uintptr, *integ::Char, int, int, *cpp.sockaddr, *integ::Int): int
cpp unsafe fn sendto(uintptr, *integ::Char, int, int, *cpp.sockaddr, integ::Int): int
cpp fn closesocket(uintptr): int
cpp unsafe fn WSAStartup(u16, mut _: *cpp.WSADATA): int
cpp unsafe fn getsockopt(uintptr, int, int, *integ::Char, *integ::Int): int
cpp unsafe fn setsockopt(uintptr, int, int, *integ::Char, int): int
cpp unsafe fn getsockname(uintptr, *cpp.sockaddr, *integ::Int): int
cpp unsafe fn WSAIoctl(u64, cpp.DWORD, *unsafe, cpp.DWORD, *unsafe, cpp.DWORD, *cpp.DWORD, *unsafe, *unsafe): int

// C's WSADATA struct.
type WsaData: cpp.WSADATA

const (
	INVALID_SOCKET = ^uintptr(0)
	SOCKET_ERROR   = -1
)

// Socket types
const (
	SOCK_STREAM    = 1
	SOCK_DGRAM     = 2
	SOCK_RAW       = 3
	SOCK_RDM       = 4
	SOCK_SEQPACKET = 5
)

// Address families.
const (
	AF_UNSPEC = 0
	AF_UNIX   = 1
	AF_INET   = 2
	AF_INET6  = 23
)

// IP protocols.
const (
	IPPROTO_IP  = 0
	IPPROTO_TCP = 6
	IPPROTO_UDP = 17
)

const INADDR_ANY = 0

const SOL_SOCKET = 0xFFFF

const (
	SO_ERROR    = 0x1007
	SO_RCVTIMEO = 0x1006
	SO_SNDTIMEO = 0x1005
)

fn Socket(domain: int, typ: int, proto: int)!: (fd: uintptr) {
	fd = cpp.socket(domain, typ, proto)
	if fd == INVALID_SOCKET {
		error(Errno(WSAGetLastError()))
	}
	ret
}

fn Bind(s: uintptr, addr: uintptr, addrlen: Socklen)! {
	r := unsafe { cpp.bind(s, (*cpp.sockaddr)(addr), addrlen) }
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn Connect(s: uintptr, addr: uintptr, addrlen: Socklen)! {
	r := unsafe { cpp.connect(s, (*cpp.sockaddr)(addr), addrlen) }
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn Listen(s: uintptr, backlog: int)! {
	r := cpp.listen(s, backlog)
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn Accept(s: uintptr, addr: uintptr, addrlen: Socklen)!: (fd: uintptr) {
	addrlen2 := unsafe { integ::Int(addrlen) }
	fd = unsafe { cpp.accept(s, (*cpp.sockaddr)(addr), &addrlen2) }
	if fd == INVALID_SOCKET {
		error(Errno(WSAGetLastError()))
	}
	ret
}

fn Recv(s: uintptr, mut buf: []byte, flags: int)!: (n: int) {
	n = unsafe { cpp.recv(s, (*integ::Char)(&buf[0]), Socklen(len(buf)), flags) }
	if n == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
	ret
}

fn Recvfrom(s: uintptr, mut p: []byte, flags: int, from: uintptr, fromlen: Socklen)!: (n: int) {
	fromlen2 := unsafe { integ::Int(fromlen) }
	n = unsafe { cpp.recvfrom(s, (*integ::Char)(&p[0]), len(p), flags, (*cpp.sockaddr)(from), &fromlen2) }
	if n == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
	ret
}

fn Send(s: uintptr, buf: []byte, flags: int)! {
	r := unsafe { cpp.send(s, (*integ::Char)(&buf[0]), Socklen(len(buf)), flags) }
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn Sendto(s: uintptr, buf: []byte, flags: int, to: uintptr, addrlen: Socklen)! {
	r := unsafe { cpp.sendto(s, (*integ::Char)(&buf[0]), len(buf), flags, (*cpp.sockaddr)(to), integ::Int(addrlen)) }
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn CloseSocket(s: uintptr)! {
	r := cpp.closesocket(s)
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn WSAStartup(verReq: u16, mut &data: WsaData)! {
	r := unsafe { cpp.WSAStartup(verReq, (*cpp.WSADATA)(&data)) }
	if r != 0 {
		error(Errno(WSAGetLastError()))
	}
}

unsafe fn WSAIoctl(h: u64, iocc: u32, inbuf: *byte, cbif: u32, outbuf: *byte, cbob: u32, cbbr: *u32): int {
	ret cpp.WSAIoctl(h, cpp.DWORD(iocc), inbuf, cpp.DWORD(cbif), outbuf, cpp.DWORD(cbob), (*cpp.DWORD)(cbbr), nil, nil)
}

fn MakeWord(a: u8, b: u8): u16 {
	ret u16(a) | u16(b)<<8
}

fn Getsockopt(s: uintptr, level: int, name: int, val: uintptr, vallen: Socklen)! {
	vallen2 := unsafe { integ::Int(vallen) }
	r := unsafe { cpp.getsockopt(s, level, name, (*integ::Char)(val), &vallen2) }
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn Setsockopt(s: uintptr, level: int, name: int, val: uintptr, vallen: Socklen)! {
	r := unsafe { cpp.setsockopt(s, level, name, (*integ::Char)(val), int(vallen)) }
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn Getsockname(fd: uintptr, addr: uintptr, addrlen: Socklen)! {
	addrlen2 := unsafe { integ::Int(addrlen) }
	r := unsafe { cpp.getsockname(fd, (*cpp.sockaddr)(addr), &addrlen2) }
	if r == SOCKET_ERROR {
		error(Errno(WSAGetLastError()))
	}
}

fn Select(nfd: int, mut &r: FdSet, mut &w: FdSet, mut &e: FdSet, mut &timeout: Timeval)!: (n: int) {
	n = unsafe { cpp.select(nfd, (*cpp.fd_set)(&r), (*cpp.fd_set)(&w), (*cpp.fd_set)(&e), (*cpp.timeval)(&timeout)) }
	if n < 0 {
		error(Errno(WSAGetLastError()))
	}
	ret
}