// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Useful links;
// - https://github.com/wine-mirror/wine/blob/master/include/winsock2.h

#pass "-lws2_32"

use integ "std/jule/integrated"

cpp use "<winsock2.h>"
cpp use "<ws2ipdef.h>"

#typedef
cpp struct WSADATA{}

cpp fn socket(int, int, int): uintptr
cpp unsafe fn bind(uintptr, *cpp.sockaddr, uint): int
cpp unsafe fn connect(uintptr, *cpp.sockaddr, uint): int
cpp fn listen(uintptr, int): int
cpp unsafe fn accept(uintptr, *cpp.sockaddr, *integ::Int): uintptr
cpp unsafe fn send(uintptr, *integ::Char, uint, int): int
cpp unsafe fn recv(uintptr, *integ::Char, uint, int): int
cpp unsafe fn recvfrom(uintptr, *integ::Char, int, int, *cpp.sockaddr, *integ::Int): int
cpp unsafe fn sendto(uintptr, *integ::Char, int, int, *cpp.sockaddr, integ::Int): int
cpp fn closesocket(uintptr): int
cpp unsafe fn WSAStartup(u16, mut _: *cpp.WSADATA): int
cpp unsafe fn getsockopt(uintptr, int, int, *integ::Char, *integ::Int): int
cpp unsafe fn setsockopt(uintptr, int, int, *integ::Char, int): int
cpp unsafe fn getsockname(uintptr, *cpp.sockaddr, *integ::Int): int
cpp unsafe fn WSAIoctl(u64, cpp.DWORD, *unsafe, cpp.DWORD, *unsafe, cpp.DWORD, *cpp.DWORD, *unsafe, *unsafe): int

// C's WSADATA struct.
type WsaData: cpp.WSADATA

const (
	INVALID_SOCKET = ^uintptr(0)
	SOCKET_ERROR = -1
)

// Socket types
const (
	SOCK_STREAM = 1
	SOCK_DGRAM = 2
	SOCK_RAW = 3
	SOCK_RDM = 4
	SOCK_SEQPACKET = 5
)

// Address families.
const (
	AF_UNSPEC = 0
	AF_UNIX = 1
	AF_INET = 2
	AF_INET6 = 23
)

// IP protocols.
const (
	IPPROTO_IP = 0
	IPPROTO_TCP = 6
	IPPROTO_UDP = 17
)

const INADDR_ANY = 0

const SOL_SOCKET = 0xFFFF

const (
	SO_ERROR = 0x1007
	SO_RCVTIMEO = 0x1006
	SO_SNDTIMEO = 0x1005
)

unsafe fn Fdzero(mut fd: *FdSet) {
	fd.Count = 0
}

unsafe fn Fdset(handle: uintptr, mut fd: *FdSet) {
	let mut i: u32
	for i < fd.Count; i++ {
		if fd.Array[i] == handle {
			break
		}
	}
	if i == fd.Count {
		if fd.Count < FD_SETSIZE {
			fd.Array[i] = handle
			fd.Count++
		}
	}
}

unsafe fn FdIsset(handle: uintptr, mut fd: *FdSet): int {
	let mut i: u32
	for i < fd.Count; i++ {
		if fd.Array[i] == handle {
			ret 1
		}
	}
	ret 0
}

// C's socket function.
fn Socket(domain: int, t: int, protocol: int): uintptr {
	ret cpp.socket(domain, t, protocol)
}

// C's bind function.
unsafe fn Bind(handle: uintptr, addr: *unsafe, len: uint): int {
	ret cpp.bind(handle, (*cpp.sockaddr)(addr), len)
}

// C's connect function.
unsafe fn Connect(handle: uintptr, addr: *unsafe, len: uint): int {
	ret cpp.connect(handle, (*cpp.sockaddr)(addr), len)
}

// C's listen function.
fn Listen(handle: uintptr, backlog: int): int {
	ret cpp.listen(handle, backlog)
}

// C's accept function.
unsafe fn Accept(handle: uintptr, addr: *unsafe, len: *integ::Int): uintptr {
	ret cpp.accept(handle, (*cpp.sockaddr)(addr), len)
}

// C's recv function.
unsafe fn Recv(handle: uintptr, mut buf: *byte, len: uint, flags: int): int {
	ret cpp.recv(handle, (*integ::Char)(buf), len, flags)
}

// C's recvfrom function.
unsafe fn Recvfrom(handle: uintptr, mut buf: *byte, len: int, flags: int, from: *unsafe, fromLen: *integ::Int): int {
	ret cpp.recvfrom(handle, (*integ::Char)(buf), len, flags, (*cpp.sockaddr)(from), fromLen)
}

// C's send function.
unsafe fn Send(handle: uintptr, mut buf: *byte, len: uint, flags: int): int {
	ret cpp.send(handle, (*integ::Char)(buf), len, flags)
}

// C's sendto function.
unsafe fn Sendto(handle: uintptr, mut buf: *byte, len: int, flags: int, to: *unsafe, toLen: integ::Int): int {
	ret cpp.sendto(handle, (*integ::Char)(buf), len, flags, (*cpp.sockaddr)(to), toLen)
}

// C's closesocket function.
fn CloseSocket(handle: uintptr): int {
	ret cpp.closesocket(handle)
}

// C's WSAStartup function.
unsafe fn WSAStartup(verReq: u16, mut data: *WsaData): int {
	ret cpp.WSAStartup(verReq, (*cpp.WSADATA)(data))
}

// C's WSAIoctl function.
unsafe fn WSAIoctl(h: u64, iocc: u32, inbuf: *byte, cbif: u32, outbuf: *byte, cbob: u32, cbbr: *u32): int {
	ret cpp.WSAIoctl(h, cpp.DWORD(iocc), inbuf, cpp.DWORD(cbif), outbuf, cpp.DWORD(cbob), (*cpp.DWORD)(cbbr), nil, nil)
}

// C's MAKEWORD macro.
fn MakeWord(a: u8, b: u8): u16 {
	ret u16(a) | u16(b)<<8
}

// C's getsockopt function.
unsafe fn Getsockopt(handle: uintptr, level: int, option: int, buf: *integ::Char, len: *integ::Int): int {
	ret cpp.getsockopt(handle, level, option, buf, len)
}

// C's setsockopt function.
unsafe fn Setsockopt(handle: uintptr, level: int, option: int, buf: *integ::Char, len: int): int {
	ret cpp.setsockopt(handle, level, option, buf, len)
}

// C's getsockname function.
unsafe fn Getsockname(handle: uintptr, addr: *unsafe, len: *integ::Int): int {
	ret cpp.getsockname(handle, (*cpp.sockaddr)(addr), len)
}