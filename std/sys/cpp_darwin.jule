// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Deprecated: Use libSystem wrappers instead of libc wrappers.

use integ "std/jule/integrated"

cpp use "<arpa/inet.h>"
cpp use "<fcntl.h>"
cpp use "<netinet/in.h>"
cpp use "<sched.h>"
cpp use "<signal.h>"
cpp use "<sys/socket.h>"
cpp use "<sys/stat.h>"
cpp use "<sys/sysctl.h>"
cpp use "<sys/time.h>"
cpp use "<sys/wait.h>"
cpp use "<unistd.h>"

cpp type size_t: u64

cpp struct stat{}

cpp struct sockaddr{}

#typedef
cpp struct timeval{}

#typedef
cpp struct fd_set{}

cpp fn pipe(mut *integ::Int): int
cpp fn exit(code: int)
cpp fn lseek(handle: int, offset: i64, origin: int): i64
cpp fn read(handle: int, dest: *unsafe, n: uint): int
cpp fn close(handle: int): int
cpp fn write(handle: int, buff: *unsafe, n: uint): int
cpp fn fcntl(int, int, int): int
cpp fn open(path: *integ::Char, flag: int, mode: u32): int
cpp fn openat(int, *integ::Char, int, u32): int
cpp fn chdir(path: *integ::Char): int
cpp fn remove(path: *integ::Char): int
cpp fn mkdir(path: *integ::Char, mode: int): int
cpp fn rmdir(path: *integ::Char): int
cpp fn unlink(path: *integ::Char): int
cpp fn getenv(key: *integ::Char): *integ::Char
cpp fn setenv(key: *integ::Char, val: *integ::Char, overwrite: integ::Int): int
cpp fn ftruncate(fd: int, size: i64): int
cpp fn fsync(fd: int): int
cpp fn unlinkat(int, *integ::Char, int): int
cpp fn mkdirat(int, *integ::Char, u32): int
cpp fn fstatat(int, *integ::Char, *cpp.stat, int): int
cpp fn select(int, *cpp.fd_set, *cpp.fd_set, *cpp.fd_set, *cpp.timeval): int
cpp fn socket(int, int, int): int
cpp fn bind(int, *cpp.sockaddr, uint): int
cpp fn connect(int, *cpp.sockaddr, uint): int
cpp fn listen(int, int): int
cpp fn accept(int, *cpp.sockaddr, len: *u32): int
cpp fn send(int, *unsafe, uint, int): int
cpp fn recv(int, *unsafe, uint, int): int
cpp fn recvfrom(int, *unsafe, uint, int, *cpp.sockaddr, *u32): int
cpp fn sendto(int, *unsafe, uint, int, *cpp.sockaddr, u32): int
cpp fn getsockopt(int, int, int, *unsafe, *integ::UnsignedInt): int
cpp fn setsockopt(int, int, int, *unsafe, uint): int
cpp fn getsockname(int, *cpp.sockaddr, *u32): int
cpp fn sysctl(name: *integ::Int, uint, oldp: *unsafe, oldplen: *cpp.size_t, newp: *unsafe, newplen: uint): int
cpp fn faccessat(dirfd: int, pathname: *integ::Char, mode: u32, flags: int): int
cpp fn sched_yield(): int
cpp fn fork(): int
cpp fn execve(*integ::Char, **integ::Char, **integ::Char)
cpp fn kill(pid: int, sig: int): int
cpp fn waitpid(pid: int, mut status: *integ::Int, options: int): int
cpp fn dup2(old: int, new: int): int