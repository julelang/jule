// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

impl FdSet {
	// Adds fd to the set fds.
	fn Set(mut self, fd: int) {
		self.Bits[fd/NFDBITS] |= (1 << (uintptr(fd) % NFDBITS))
	}

	// Removes fd from the set fds.
	fn Clear(mut self, fd: int) {
		self.Bits[fd/NFDBITS] &= ^(1 << (uintptr(fd) % NFDBITS))
	}

	// Returns whether fd is in the set fds.
	fn IsSet(mut self, fd: int): bool {
		ret self.Bits[fd/NFDBITS]&(1<<(uintptr(fd)%NFDBITS)) != 0
	}

	// Clears the set fds.
	fn Zero(mut self) {
		for i in self.Bits {
			self.Bits[i] = 0
		}
	}
}