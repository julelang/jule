// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"

cpp use "<dirent.h>"
cpp use "<fcntl.h>"
cpp use "<unistd.h>"

#typedef
cpp struct DIR{}

cpp struct dirent{}

cpp struct stat{}

cpp fn fcntl(int, int, int): int
cpp unsafe fn opendir(path: *integ::Char): *cpp.DIR
cpp unsafe fn closedir(mut dir: *cpp.DIR): int
cpp unsafe fn readdir(mut dir: *cpp.DIR): *unsafe
cpp unsafe fn open(path: *integ::Char, flag: int, mode: int): int
cpp unsafe fn getcwd(buff: *integ::Char, bufflen: uint): *integ::Char
cpp unsafe fn chdir(path: *integ::Char): int
cpp unsafe fn remove(path: *integ::Char): int
cpp unsafe fn mkdir(path: *integ::Char, mode: int): int
cpp unsafe fn rmdir(path: *integ::Char): int
cpp unsafe fn unlink(path: *integ::Char): int
cpp unsafe fn getenv(key: *integ::Char): *integ::Char
cpp unsafe fn setenv(key: *integ::Char, val: *integ::Char, overwrite: integ::Int): int
cpp fn ftruncate(fd: int, size: i64): int
cpp fn fsync(fd: int): int

static STDIN: uintptr = 0
static STDOUT: uintptr = 1
static STDERR: uintptr = 2

// These values are the same on all known Unix systems.
// If we find a discrepancy some day, we can split them out.
const (
	F_GETFD    = 1
	F_SETFD    = 2
	F_GETFL    = 3
	F_SETFL    = 4
	FD_CLOEXEC = 1
)

// Calls C's fcntl function.
fn Fcntl(handle: int, cmd: int, arg: int): int {
	ret cpp.fcntl(handle, cmd, arg)
}

// Calls C's ftruncate function.
fn Ftruncate(fd: int, size: i64): int {
	ret cpp.ftruncate(fd, size)
}

// Calls C's fsync function.
fn Fsync(fd: int): int {
	ret cpp.fsync(fd)
}

// Calls C's stat function.
unsafe fn Stat(path: *byte, mut stat: *SysStat): int {
	ret integ::Emit[int]("stat({}, {})", (*integ::Char)(path), (*cpp.stat)(stat))
}

// Calls C's lstat function.
unsafe fn Lstat(path: *byte, mut stat: *SysStat): int {
	ret integ::Emit[int]("lstat({}, {})", (*integ::Char)(path), (*cpp.stat)(stat))
}

// Wrapper for C's open function.
unsafe fn Open(path: *byte, flag: int, mode: int): int {
	ret cpp.open((*integ::Char)(path), flag, mode)
}

// Reads current working directory into buff.
// Returns pointer to buff if success, nil pointer if error occurs.
unsafe fn Getcwd(buff: *byte, bufflen: uint): *byte {
	ret (*byte)(cpp.getcwd((*integ::Char)(buff), bufflen))
}

// Calls C's opendir function.
unsafe fn Opendir(path: *byte): *unsafe { ret cpp.opendir((*integ::Char)(path)) }

// Calls C's readdir function.
unsafe fn Readdir(mut dir: *unsafe): *Dirent { ret (*Dirent)(cpp.readdir((*cpp.DIR)(dir))) }

// Calls C's closedir function.
unsafe fn Closedir(mut dir: *unsafe): int { ret cpp.closedir((*cpp.DIR)(dir)) }

// Calls C's chdir function.
unsafe fn Chdir(path: *byte): int { ret cpp.chdir((*integ::Char)(path)) }

// Wrapper for C's remove function.
unsafe fn Remove(path: *byte): int { ret cpp.remove((*integ::Char)(path)) }

// Wrapper for C's mkdir function.
unsafe fn Mkdir(path: *byte, mode: int): int {
	ret cpp.mkdir((*integ::Char)(path), mode)
}

// Wrapper for C's rmdir function.
unsafe fn Rmdir(path: *byte): int { ret cpp.rmdir((*integ::Char)(path)) }

// Wrapper for C's unlink function.
unsafe fn Unlink(path: *byte): int { ret cpp.unlink((*integ::Char)(path)) }

// Retrieves the value of the environment variable named by the key.
// It returns the value, which will be empty if the variable is not present.
unsafe fn Getenv(key: *byte): (val: str, unset: bool) {
	valPtr := cpp.getenv((*integ::Char)(key))
	if valPtr == nil {
		unset = true
	} else {
		val = integ::BytePtrToStr((*byte)(valPtr))
	}
	ret
}

// Wrapper for C's setenv function.
// Reports whether it successful.
unsafe fn Setenv(key: *byte, val: *byte, overwrite: integ::Int): bool {
	ret cpp.setenv((*integ::Char)(key), (*integ::Char)(val), overwrite) == 0
}

// Wrapper for C's lseek function.
fn Seek(handle: int, offset: i64, origin: int): i64 {
	ret cpp.lseek(handle, offset, origin)
}

impl FdSet {
	// Adds fd to the set fds.
	fn Set(mut self, fd: int) {
		self.Bits[fd/NFDBITS] |= (1 << (uintptr(fd) % NFDBITS))
	}

	// Removes fd from the set fds.
	fn Clear(mut self, fd: int) {
		self.Bits[fd/NFDBITS] &= ^(1 << (uintptr(fd) % NFDBITS))
	}

	// Returns whether fd is in the set fds.
	fn IsSet(mut self, fd: int): bool {
		ret self.Bits[fd/NFDBITS]&(1<<(uintptr(fd)%NFDBITS)) != 0
	}

	// Clears the set fds.
	fn Zero(mut self) {
		for i in self.Bits {
			self.Bits[i] = 0
		}
	}
}