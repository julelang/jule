// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#pass "-lshell32" // Link shell32.lib

use integ "std/jule/integrated"

cpp use "<fcntl.h>"
cpp use "<io.h>"
cpp use "<windows.h>"

cpp type DWORD: u32
cpp type HANDLE: *unsafe

cpp type _mode_t: uint
cpp type _off_t: uint

cpp struct _stat {
	st_mode: cpp._mode_t
	st_size: cpp._off_t
}

#typedef
cpp struct LARGE_INTEGER {
	QuadPart: i64
}

#typedef
cpp struct WIN32_FIND_DATAW{}

#typedef
cpp struct SECURITY_ATTRIBUTES{}

#typedef
cpp struct BY_HANDLE_FILE_INFORMATION{}

cpp fn GetStdHandle(stdh: uintptr): *unsafe
cpp unsafe fn CloseHandle(stdh: *unsafe): bool
cpp unsafe fn _wstat(path: *integ::Wchar, mut handle: *cpp._stat): int
cpp unsafe fn _wopen(path: *integ::Wchar, flag: int, mode: int): int
cpp unsafe fn GetEnvironmentVariableW(key: *integ::Wchar, mut out: *integ::Wchar, nSize: cpp.DWORD): cpp.DWORD
cpp unsafe fn SetEnvironmentVariableW(key: *integ::Wchar, val: *integ::Wchar): bool
cpp fn GetLastError(): u32
cpp unsafe fn GetCurrentDirectoryW(bufflen: u32, buff: *integ::Wchar): u32
cpp unsafe fn SetCurrentDirectoryW(path: *integ::Wchar): bool
cpp unsafe fn GetFullPathNameW(path: *integ::Wchar, bufflen: u32, buff: *integ::Wchar, fname: **integ::Wchar): u32
cpp unsafe fn DeleteFileW(path: *integ::Wchar): bool
cpp unsafe fn CreateDirectoryW(path: *integ::Wchar, passNullHere: *bool): bool
cpp unsafe fn RemoveDirectoryW(path: *integ::Wchar): bool
cpp unsafe fn GetConsoleMode(handle: cpp.HANDLE, mut mode: *cpp.DWORD): bool
cpp unsafe fn SetConsoleMode(handle: cpp.HANDLE, mode: cpp.DWORD): bool
cpp unsafe fn WriteConsoleW(handle: cpp.HANDLE, buffer: *unsafe,
	toWrite: cpp.DWORD, written: *cpp.DWORD, reserved: *unsafe): bool
cpp unsafe fn ReadConsoleW(handle: cpp.HANDLE, mut buffer: *unsafe,
	toRead: cpp.DWORD, read: *cpp.DWORD, inputControl: *unsafe): bool
cpp fn WSAGetLastError(): int
cpp unsafe fn FindFirstFileW(*integ::Wchar, *cpp.WIN32_FIND_DATAW): cpp.HANDLE
cpp unsafe fn FindNextFileW(cpp.HANDLE, *cpp.WIN32_FIND_DATAW): int
cpp fn FindClose(cpp.HANDLE): int
cpp unsafe fn GetFileAttributesExW(name: *integ::Wchar, infoLevel: cpp.GET_FILEEX_INFO_LEVELS, info: *unsafe): bool
cpp unsafe fn CreateFileW(path: *integ::Wchar, desiredAccess: cpp.DWORD, shareMode: cpp.DWORD, securityAttrs: *cpp.SECURITY_ATTRIBUTES, creationDisposition: cpp.DWORD, flagsAndAttrs: cpp.DWORD, templateFile: cpp.HANDLE): cpp.HANDLE
cpp unsafe fn GetFileType(h: cpp.HANDLE): cpp.DWORD
cpp unsafe fn GetFileInformationByHandle(h: cpp.HANDLE, *cpp.BY_HANDLE_FILE_INFORMATION): bool
cpp unsafe fn ReadFile(h: cpp.HANDLE, buf: *unsafe, bytesToRead: cpp.DWORD, mut bytesRead: *cpp.DWORD, overlap: *cpp.OVERLAPPED): bool
cpp unsafe fn WriteFile(h: cpp.HANDLE, buf: *unsafe, bytesToWrite: cpp.DWORD, mut bytesWritten: *cpp.DWORD, overlap: *cpp.OVERLAPPED): bool
cpp unsafe fn SetEndOfFile(h: cpp.HANDLE): bool
cpp unsafe fn FlushFileBuffers(h: cpp.HANDLE): bool
cpp unsafe fn CreatePipe(r: *cpp.HANDLE, w: *cpp.HANDLE, attrs: *cpp.SECURITY_ATTRIBUTES, size: cpp.DWORD): bool
cpp unsafe fn SetFilePointerEx(h: cpp.HANDLE, toMove: cpp.LARGE_INTEGER, mut newPointer: *cpp.LARGE_INTEGER, moveMethod: cpp.DWORD): bool
cpp unsafe fn GetFileAttributesW(name: *integ::Wchar): cpp.DWORD

#typedef
cpp struct OVERLAPPED{}

// C's stat.
type SysStat: cpp._stat

type Handle: uintptr

const InvalidHandle = ^Handle(0)

static STDIN = GetStdHandle(uintptr(int(STD_INPUT_HANDLE)))
static STDOUT = GetStdHandle(uintptr(int(STD_OUTPUT_HANDLE)))
static STDERR = GetStdHandle(uintptr(int(STD_ERROR_HANDLE)))

fn GetStdHandle(stdh: uintptr): Handle { ret Handle(cpp.GetStdHandle(stdh)) }
unsafe fn CloseHandle(stdh: Handle): bool { ret cpp.CloseHandle(unsafe { (*unsafe)(stdh) }) }

// Calls C's _wstat function.
unsafe fn Wstat(path: *u16, mut stat: *SysStat): int {
	ret cpp._wstat((*integ::Wchar)(path), (*cpp._stat)(stat))
}

// Wrapper for C's _wopen function.
unsafe fn Wopen(path: *u16, flag: int, mode: int): int {
	ret cpp._wopen((*integ::Wchar)(&path[0]), flag, mode)
}

// Wrapper for C's _wopen function.
unsafe fn SetEndOfFile(h: Handle): bool {
	ret cpp.SetEndOfFile(cpp.HANDLE(h))
}

// Creates an anonymous pipe, and returns handles to the read and write ends of the pipe.
unsafe fn CreatePipe(mut r: *Handle, mut w: *Handle, attrs: *SecurityAttributes, size: u32): bool {
	ret cpp.CreatePipe((*cpp.HANDLE)(r), (*cpp.HANDLE)(w), (*cpp.SECURITY_ATTRIBUTES)(attrs), cpp.DWORD(size))
}

// Flushes the buffers of a specified file and causes all buffered data to be written to a file.
unsafe fn FlushFileBuffers(h: Handle): bool {
	ret cpp.FlushFileBuffers(cpp.HANDLE(h))
}

// Returns last Windows error.
fn GetLastError(): u32 { ret cpp.GetLastError() }

// Reads working directory into buff and returns read
// rune count of current process. Returns 0 if fail.
unsafe fn GetCurrentDirectory(bufflen: u32, mut buff: *u16): u32 {
	ret cpp.GetCurrentDirectoryW(bufflen, (*integ::Wchar)(buff))
}

// Sets working directory to path.
// Reports operation is success.
unsafe fn SetCurrentDirectory(path: *u16): bool {
	ret cpp.SetCurrentDirectoryW((*integ::Wchar)(path))
}

// Create file.
unsafe fn CreateFile(path: *u16, desiredAccess: u32, shareMode: u32, securityAttrs: *SecurityAttributes, creationDisposition: u32, flagsAndAttrs: u32, templateFile: Handle): Handle {
	ret Handle(cpp.CreateFileW(
		(*integ::Wchar)(path),
		cpp.DWORD(desiredAccess),
		cpp.DWORD(shareMode),
		(*cpp.SECURITY_ATTRIBUTES)(securityAttrs),
		cpp.DWORD(creationDisposition),
		cpp.DWORD(flagsAndAttrs),
		cpp.HANDLE(templateFile)))
}

// Read file.
unsafe fn ReadFile(h: Handle, buf: *unsafe, bytesToRead: u32, mut bytesRead: *u32, overlap: *unsafe): bool {
	ret cpp.ReadFile(cpp.HANDLE(h), buf, cpp.DWORD(bytesToRead), (*cpp.DWORD)(bytesRead), (*cpp.OVERLAPPED)(overlap))
}

// Write file.
unsafe fn WriteFile(h: Handle, buf: *unsafe, bytesToWrite: u32, mut bytesWritten: *u32, overlap: *unsafe): bool {
	ret cpp.WriteFile(cpp.HANDLE(h), buf, cpp.DWORD(bytesToWrite), (*cpp.DWORD)(bytesWritten), (*cpp.OVERLAPPED)(overlap))
}

// Calls Windows's GetFileType function.
unsafe fn GetFileType(h: Handle): u32 {
	ret u32(cpp.GetFileType(cpp.HANDLE(h)))
}

// Calls Windows's GetFileInformationByHandle function.
unsafe fn GetFileInformationByHandle(h: Handle, info: *ByHandleFileInformation): bool {
	ret cpp.GetFileInformationByHandle(cpp.HANDLE(h), (*cpp.BY_HANDLE_FILE_INFORMATION)(info))
}

// Delete file.
unsafe fn DeleteFile(path: *u16): bool {
	ret cpp.DeleteFileW((*integ::Wchar)(path))
}

// Creates directory.
unsafe fn CreateDirectory(path: *u16): bool {
	ret cpp.CreateDirectoryW((*integ::Wchar)(path), nil)
}

// Removes empty directory.
unsafe fn RemoveDirectory(path: *u16): bool {
	ret cpp.RemoveDirectoryW((*integ::Wchar)(path))
}

// Calls Windows's GetFullPathNameW function.
unsafe fn GetFullPathName(path: *u16, bufflen: u32,
	buff: *u16, fname: **u16): u32 {
	ret cpp.GetFullPathNameW((*integ::Wchar)(path), bufflen, (*integ::Wchar)(buff), (**integ::Wchar)(fname))
}

// Calls Windows's GetConsoleMode function.
unsafe fn GetConsoleMode(handle: Handle, mut mode: *u32): bool {
	ret unsafe { cpp.GetConsoleMode(cpp.HANDLE(handle), (*cpp.DWORD)(mode)) }
}

// Calls Windows's SetConsoleMode function.
unsafe fn SetConsoleMode(handle: Handle, mode: u32): bool {
	ret unsafe { cpp.SetConsoleMode(cpp.HANDLE(handle), cpp.DWORD(mode)) }
}

// Calls Windows's WriteConsoleW function.
unsafe fn WriteConsole(handle: Handle, buffer: *u16, toWrite: u32,
	mut &written: u32, reserved: *unsafe): bool {
	ret cpp.WriteConsoleW(cpp.HANDLE(handle), (*unsafe)(buffer),
		cpp.DWORD(toWrite), (*cpp.DWORD)(&written), reserved)
}

// Calls Windows's ReadConsoleW function.
// Passes nil pointer for input control.
unsafe fn ReadConsole(handle: Handle, mut buffer: *u16, toRead: u32,
	mut &read: u32): bool {
	ret cpp.ReadConsoleW(cpp.HANDLE(handle), (*unsafe)(buffer),
		cpp.DWORD(toRead), (*cpp.DWORD)(&read), nil)
}

// Calls Windows's WSAGetLastError function.
fn WSAGetLastError(): int {
	ret cpp.WSAGetLastError()
}

// Call's Windows FindFirstFileW function.
unsafe fn FindFirstFile(path: *u16, mut data: *Win32FindData): Handle {
	ret Handle(cpp.FindFirstFileW((*integ::Wchar)(path), (*cpp.WIN32_FIND_DATAW)(data)))
}

// Call's Windows FindNextFileW function.
unsafe fn FindNextFile(h: Handle, mut data: *Win32FindData): int {
	ret cpp.FindNextFileW(cpp.HANDLE(h), (*cpp.WIN32_FIND_DATAW)(data))
}

// Call's Windows FindClose function.
fn FindClose(h: Handle): int {
	ret unsafe { cpp.FindClose(cpp.HANDLE(h)) }
}

// Windows's GetEnvironmentVariableW function.
unsafe fn GetEnvironmentVariable(key: *u16, mut out: *u16, outLen: u32): u32 {
	ret u32(cpp.GetEnvironmentVariableW((*integ::Wchar)(key), (*integ::Wchar)(out), cpp.DWORD(outLen)))
}

// Windows's SetEnvironmentVariableW function.
unsafe fn SetEnvironmentVariable(key: *u16, val: *u16): bool {
	ret cpp.SetEnvironmentVariableW((*integ::Wchar)(key), (*integ::Wchar)(val))
}

// Windows's GetFileAttributesExW function.
unsafe fn GetFileAttributesEx(name: *u16, infoLevel: int, info: *unsafe): bool {
	ret cpp.GetFileAttributesExW((*integ::Wchar)(name), cpp.GET_FILEEX_INFO_LEVELS(infoLevel), info)
}

// Windows's GetFileAttributes function.
unsafe fn GetFileAttributesW(name: *u16): u32 {
	ret u32(cpp.GetFileAttributesW((*integ::Wchar)(name)))
}

// Calls SetFilePointerEx.
// See https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-setfilepointerex
unsafe fn setFilePointerEx(handle: Handle, distToMove: i64, newFilePointer: *i64, whence: u32): (ok: bool) {
	let mut liOffset: cpp.LARGE_INTEGER
	liOffset.QuadPart = distToMove

	let mut newPos: cpp.LARGE_INTEGER
	ok = cpp.SetFilePointerEx(cpp.HANDLE(handle), liOffset, &newPos, cpp.DWORD(whence))
	if !ok {
		ret false
	}
	if newFilePointer != nil {
		*newFilePointer = newPos.QuadPart
	}
	ret true
}

// Imitates the POSIX seek function.
unsafe fn Seek(h: Handle, offset: i64, whence: int): (newoffset: i64) {
	let mut w: u32
	match whence {
	| 0: // io::SeekStart
		w = FILE_BEGIN
	| 1: // io::SeekCurrent
		w = FILE_CURRENT
	| 2: // io::SeekEnd
		w = FILE_END
	}
	ok := unsafe { setFilePointerEx(h, offset, &newoffset, w) }
	if !ok {
		newoffset = -1
	}
	ret
}

// Imitates the POSIX ftruncate function.
unsafe fn Ftruncate(h: Handle, size: i64): int {
	w := Seek(h, size, 0)
	if w == -1 {
		ret -1
	}
	if SetEndOfFile(h) {
		ret 0
	}
	ret -1
}