// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Seek whence values.
const SeekStart = 0   // seek relative to the origin of the file
const SeekCurrent = 1 // seek relative to the current offset
const SeekEnd = 2     // seek relative to the end

// Implements the basic Read method.
//
// Reads up to len(buf) bytes into buf. It returns the number of bytes
// read (0 <= n <= len(buf)). Even if Read returns n < len(buf),
// it may use all of buf as scratch space during the call.
// If some data is available but not len(buf) bytes, Read conventionally
// returns what is available instead of waiting for more.
//
// If len(buf) == 0, Read should always return n == 0.
// Implementations of Read are should return zero byte count for EOF.
// If len(buf) != 0 and EOF reached, should return zero byte count to represent EOF.
//
// The Read method mutable because implementation may should do mutable operations,
// or this method may called needed from the mutable method, which is not cannot be internally mutable.
// Such a mutable behaviors should be documented by the implementation.
//
// Implementations must not retain buf.
// Exceptionals are not standardized. Should be documented by implementations.
trait Reader {
	fn Read(mut self, mut buf: []byte)!: (n: int)
}

// Implements the basic Write method.
//
// Write writes len(buf) bytes from buf to the underlying data stream.
// It returns the number of bytes written from buf (0 <= n <= len(buf))
// and any error encountered that caused the write to stop early.
// Write must remain the slice data without any mutation after call.
//
// Implementations must not retain buf.
// Exceptionals are not standardized. Should be documented by implementations.
trait Writer {
	fn Write(mut self, buf: []byte)!: (n: int)
}

// Implements the basic WriteStr method.
//
// The WriteStr method similar to Writer.Write method but takes string.
// Behavior should be same as the Writer.Write method.
//
// Implementations must not retain s.
// Exceptionals are not standardized. Should be documented by implementations.
trait StrWriter {
	fn WriteStr(mut self, s: str)!: (n: int)
}

// Implements the basic ReadByte method.
//
// It should read byte and return one for n without throwing exceptional if success.
// It should return zero n for EOF.
// If read failed, should throw exceptional.
//
// The ReadByte method mutable because of same reasons of the `Writer` trait.
//
// Exceptionals are not standardized. Should be documented by implementations.
trait ByteReader {
	fn ReadByte(mut self)!: (byte, n: int)
}

// Implements the basic WriteByte method.
//
// It should write byte and return without throwing exceptional if success.
// If write failed, should throw exceptional.
//
// Exceptionals are not standardized. Should be documented by implementations.
trait ByteWriter {
	fn WriteByte(mut self, b: byte)!
}

// Implements the basic ReadRune method.
//
// It should read rune and return without throwing exceptional if success.
// If read failed, should throw exceptional.
//
// The ReadRune method mutable because of same reasons of the `Writer` trait.
//
// Exceptionals are not standardized. Should be documented by implementations.
trait RuneReader {
	fn ReadRune(mut self)!: rune
}

// Implements the basic WriteRune method.
//
// It should write rune and return written count without throwing exceptional if success.
// If write failed, should throw exceptional.
//
// The return count may be based on bytes or runes by implementation.
// For example, for bytes, it may return count of written bytes,
// or for runes returns one for a single rune. It should be documented by the implementation.
//
// Exceptionals are not standardized. Should be documented by implementations.
trait RuneWriter {
	fn WriteRune(mut self, r: rune)!: (n: int)
}

// Implements the basic Close method.
//
// The behavior of the Close method is not standardized.
// Specific implementations should document their own behavior.
// After first call the Close method behavior may be undefined,
// but exceptional throw recommended if any error should be occur.
//
// The Close method mutable because of same reasons of the `Writer` trait.
//
// Exceptionals are not standardized. Should be documented by implementations.
trait Closer {
	fn Close(mut self)!
}

// The trait that wraps the basic ReadAt method.
//
// It reads len(p) bytes into p starting at offset off in the
// underlying input source. It returns the number of bytes
// read (0 <= n <= len(p)) and any error encountered.
//
// If n < len(p), it throws an exception explaining why more bytes were not read.
// In this respect, ReadAt is stricter than Read.
//
// Even if n < len(p), it may use all of p as scratch space during the call.
// If some data is available but not len(p) bytes, it blocks until either all
// the data is available or an error occurs.
// In this respect ReadAt is different from Read.
//
// It should return zero n for EOF.
//
// If it is reading from an input source with a seek offset,
// it should not affect nor be affected by the underlying
// seek offset.
//
// Clients of ReadAt can execute parallel ReadAt calls on the
// same input source.
//
// Implementations must not retain p.
trait ReaderAt {
	fn ReadAt(mut self, mut p: []byte, off: i64)!: (n: int)
}

// The trait that wraps the WriteTo method.
//
// It writes data to w until there's no more data to write or
// when an error occurs. The return value n is the number of bytes
// written. Any error encountered during the write is also forwarded.
trait WriterTo {
	fn WriteTo(mut self, mut w: Writer)!: (n: i64)
}

// Inheritance group for the Reader and Closer traits.
trait ReadCloser {
	Reader
	Closer
}

// Inheritance group for the Writer and Closer traits.
trait WriteCloser {
	Writer
	Closer
}

// Inheritance group for the Reader and Writer traits.
trait ReadWriter {
	Reader
	Writer
}

// Inheritance group for the Reader, ReadCloser, Writer, WriteCloser, ReadWriter and Closer traits.
trait Stream {
	Reader
	ReadCloser
	Writer
	WriteCloser
	ReadWriter
	Closer
}

struct discard{}

impl Writer for discard {
	fn Write(mut self, buf: []byte)!: (n: int) {
		ret len(buf)
	}
}

impl StrWriter for discard {
	fn WriteStr(mut self, s: str)!: (n: int) {
		ret len(s)
	}
}

// A [Writer] on which all Write calls succeed without doing anything.
static mut Discard = discard{}

// Copy copies from src to dst until either EOF is reached
// on src or an error occurs. It returns the number of bytes
// copied and the first error encountered while copying, if any.
//
// Forwards any exceptional and may be throw InvalidWrite or ShortWrite.
fn Copy(mut dst: Writer, mut src: Reader)!: (written: i64) {
	ret copyBuffer(dst, src, nil) else { error(error) }
}

// Identical to Copy except that it stages through the
// provided buffer (if one is required) rather than allocating a
// temporary one. If buf is nil, one is allocated; otherwise if it has
// zero length, it panics.
fn CopyBuffer(mut dst: Writer, mut src: Reader, mut buf: []byte)!: (written: i64) {
	if buf != nil && len(buf) == 0 {
		panic("std/io: empty buffer in CopyBuffer")
	}
	ret copyBuffer(dst, src, buf) else { error(error) }
}

// Actual implementation of Copy and CopyBuffer.
// if buf is nil, one is allocated.
fn copyBuffer(mut dst: Writer, mut src: Reader, mut buf: []byte)!: (written: i64) {
	if buf == nil {
		buf = make([]byte, 32*1024)
	}
	for {
		nr := src.Read(buf) else { error(error) }
		if nr == 0 { // EOF
			break
		}
		if nr > 0 {
			nw := dst.Write(buf[0:nr]) else { error(error) }
			if nw < 0 || nr < nw {
				error(errInvalidWrite)
			}
			written += i64(nw)
			if nr != nw {
				error(ErrShortWrite)
			}
		}
	}
	ret written
}

// Writes the contents of the string s to w, which accepts a slice of bytes.
// The [Writer.write] is invoked directly.
fn WriteStr(mut w: Writer, s: str)!: (n: int) {
	ret w.Write([]byte(s)) else { error(error) }
}