// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/ef4f2a05972f9b729f5edb897d581f496675f588/src/unicode/utf16/utf16.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Package utf16 implements encoding and decoding of UTF-16 sequences.

// The conditions replacementChar==unicode::ReplacementChar and
// maxRune==unicode::MaxRune are verified in the tests.
// Defining them locally avoids this package depending on package unicode.

const replacementChar = '\uFFFD' // Unicode replacement character.
const maxRune = '\U0010FFFF'     // Maximum valid Unicode code point.

// 0xd800-0xdc00 encodes the high 10 bits of a pair.
// 0xdc00-0xe000 encodes the low 10 bits of a pair.
// the value is those 20 bits plus 0x10000.
const surr1 = 0xd800
const surr2 = 0xdc00
const surr3 = 0xe000

const surrSelf = 0x10000

// Reports whether the specified Unicode code point
// can appear in a surrogate pair.
fn IsSurrogate(r: rune): bool {
	ret surr1 <= r && r < surr3
}

// Returns the number of 16-bit words in the UTF-16 encoding of the rune.
// It returns -1 if the rune is not a valid value to encode in UTF-16.
fn RuneLen(r: rune): int {
	match {
	| 0 <= r && r < surr1 | surr3 <= r && r < surrSelf:
		ret 1
	| surrSelf <= r && r <= maxRune:
		ret 2
	|:
		ret -1
	}
}

// Returns the UTF-16 decoding of a surrogate pair.
// If the pair is not a valid UTF-16 surrogate pair, DecodeRune returns
// the Unicode replacement code point U+FFFD.
fn DecodeRune(r1: rune, r2: rune): rune {
	if surr1 <= r1 && r1 < surr2 && surr2 <= r2 && r2 < surr3 {
		ret (r1-surr1)<<10 | (r2 - surr2) + surrSelf
	}
	ret replacementChar
}

// Returns the UTF-16 surrogate pair r1, r2 for the given rune.
// If the rune is not a valid Unicode code point or does not need encoding,
// encode_rune returns U+FFFD, U+FFFD.
fn EncodeRune(mut r: rune): (r1: rune, r2: rune) {
	if r < surrSelf || r > maxRune {
		ret replacementChar, replacementChar
	}
	r -= surrSelf
	ret surr1 + (r>>10)&0x3ff, surr2 + r&0x3ff
}

// Returns the UTF-16 encoding of the Unicode code point sequence s.
fn Encode(s: []rune): []u16 {
	mut n := len(s)
	for _, v in s {
		if v >= surrSelf {
			n++
		}
	}

	mut a := make([]u16, n)
	n = 0
	for _, v in s {
		match {
		| 0 <= v && v < surr1 | surr3 <= v && v < surrSelf:
			// normal rune
			a[n] = u16(v)
			n++
		| surrSelf <= v && v <= maxRune:
			// needs surrogate sequence
			r1, r2 := EncodeRune(v)
			a[n] = u16(r1)
			a[n+1] = u16(r2)
			n += 2
		|:
			a[n] = u16(replacementChar)
			n++
		}
	}
	ret a[:n]
}

// Returns the Unicode code point sequence represented by the UTF-16 encoding s.
fn Decode(s: []u16): []rune {
	// Preallocate capacity to hold up to 64 runes.
	// Decode inlines, so the allocation can live on the stack.
	mut buf := make([]rune, 0, 64)
	ret decode(s, buf)
}

// Appends to buf the Unicode code point sequence represented
// by the UTF-16 encoding s and return the extended buffer.
fn decode(s: []u16, mut buf: []rune): []rune {
	mut i := 0
	for i < len(s); i++ {
		mut ar := rune(0)
		r := s[i]
		match {
		| r < surr1 | surr3 <= r:
			// normal rune
			ar = rune(r)
		| surr1 <= r && r < surr2 && i+1 < len(s) &&
			surr2 <= s[i+1] && s[i+1] < surr3:
			// valid surrogate sequence
			ar = DecodeRune(rune(r), rune(s[i+1]))
			i++
		|:
			// invalid surrogate sequence
			ar = replacementChar
		}
		buf = append(buf, ar)
	}
	ret buf
}

// Appends the UTF-16 encoding of the Unicode code point r
// to the end of p and returns the extended buffer. If the rune is not
// a valid Unicode code point, it appends the encoding of U+FFFD.
fn AppendRune(mut a: []u16, r: rune): []u16 {
	match {
	| 0 <= r && r < surr1 | surr3 <= r && r < surrSelf:
		// normal rune
		ret append(a, u16(r))
	| surrSelf <= r && r <= maxRune:
		// needs surrogate sequence
		r1, r2 := EncodeRune(r)
		ret append(a, u16(r1), u16(r2))
	}
	ret append(a, replacementChar)
}