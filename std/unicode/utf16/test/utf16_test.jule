// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use "std/testing"
use "std/unicode"
use "std/unicode/utf16"

struct encodeTest {
	inp: []rune
	out: []u16
}

let encodeCases: []encodeTest = [
	{[1, 2, 3, 4], [1, 2, 3, 4]},
	{[0xffff, 0x10000, 0x10001, 0x12345, 0x10ffff],
		[0xffff, 0xd800, 0xdc00, 0xd800, 0xdc01, 0xd808, 0xdf45, 0xdbff, 0xdfff],
	},
	{['a', 'b', 0xd7ff, 0xd800, 0xdfff, 0xe000, 0x110000, -1],
		['a', 'b', 0xd7ff, 0xfffd, 0xfffd, 0xe000, 0xfffd, 0xfffd],
	},
]

fn eq[S: []E, E](a: S, b: S): bool {
	if len(a) != len(b) {
		ret false
	}
	for i in a {
		if a[i] != b[i] {
			ret false
		}
	}
	ret true
}

#test
fn testEncode(t: &testing::T) {
	for _, tt in encodeCases {
		out := utf16::Encode(tt.inp)
		if !eq(out, tt.out) {
			t.Errorf("Encode({}) = {}; want {}", tt.inp, out, tt.out)
		}
	}
}

#test
fn testAppendRune(t: &testing::T) {
	for _, tt in encodeCases {
		mut out := []u16(nil)
		for _, u in tt.inp {
			out = utf16::AppendRune(out, u)
		}
		if !eq(out, tt.out) {
			t.Errorf("AppendRune({}) = {}; want {}", tt.inp, out, tt.out)
		}
	}
}

#test
fn testEncodeRune(t: &testing::T) {
	for i, tt in encodeCases {
		mut j := 0
		for _, r in tt.inp {
			r1, r2 := utf16::EncodeRune(r)
			if r < 0x10000 || r > unicode::MaxRune {
				if j >= len(tt.out) {
					t.Errorf("{}: ran out of tt.out", i)
					break
				}
				if r1 != unicode::ReplacementChar || r2 != unicode::ReplacementChar {
					t.Errorf("EncodeRune({}) = {}, {}; want 0xfffd, 0xfffd", r, r1, r2)
				}
				j++
			} else {
				if j+1 >= len(tt.out) {
					t.Errorf("{}: ran out of tt.out", i)
					break
				}
				if r1 != rune(tt.out[j]) || r2 != rune(tt.out[j+1]) {
					t.Errorf("EncodeRune({}) = {}, {}; want {}, {}", r, r1, r2, tt.out[j], tt.out[j+1])
				}
				j += 2
				dec := utf16::DecodeRune(r1, r2)
				if dec != r {
					t.Errorf("DecodeRune({}, {}) = {}; want {}", r1, r2, dec, r)
				}
			}
		}
		if j != len(tt.out) {
			t.Errorf("{}: EncodeRune didn't generate enough output", i)
		}
	}
}

struct decodeTest {
	inp: []u16
	out: []rune
}

let decodeCases: []decodeTest = [
	{[1, 2, 3, 4], [1, 2, 3, 4]},
	{[0xffff, 0xd800, 0xdc00, 0xd800, 0xdc01, 0xd808, 0xdf45, 0xdbff, 0xdfff],
		[0xffff, 0x10000, 0x10001, 0x12345, 0x10ffff],
	},
	{[0xd800, 'a'], [0xfffd, 'a']},
	{[0xdfff], [0xfffd]},
]

#test
fn testDecode(t: &testing::T) {
	for _, tt in decodeCases {
		out := utf16::Decode(tt.inp)
		if !eq(out, tt.out) {
			t.Errorf("Decode({}) = {}; want {}", tt.inp, out, tt.out)
		}
	}
}

struct decodeRuneTest {
	r1:   rune
	r2:   rune
	want: rune
}

let decodeRuneCases: []decodeRuneTest = [
	{0xd800, 0xdc00, 0x10000},
	{0xd800, 0xdc01, 0x10001},
	{0xd808, 0xdf45, 0x12345},
	{0xdbff, 0xdfff, 0x10ffff},
	{0xd800, 'a', 0xfffd},      // illegal, replacement rune substituted
]

#test
fn testDecodeRune(t: &testing::T) {
	for i, tt in decodeRuneCases {
		got := utf16::DecodeRune(tt.r1, tt.r2)
		if got != tt.want {
			t.Errorf("{}: DecodeRune({}, {}) = {}; want {}", i, tt.r1, tt.r2, got, tt.want)
		}
	}
}

struct surrogateTest {
	r:    rune
	want: bool
}

let surrogateCases: []surrogateTest = [
	// from https://en.wikipedia.org/wiki/UTF-16
	{'\u007A', false},     // LATIN SMALL LETTER Z
	{'\u6C34', false},     // CJK UNIFIED IDEOGRAPH-6C34 (water)
	{'\uFEFF', false},     // Byte Order Mark
	{'\U00010000', false}, // LINEAR B SYLLABLE B008 A (first non-BMP code point)
	{'\U0001D11E', false}, // MUSICAL SYMBOL G CLEF
	{'\U0010FFFD', false}, // PRIVATE USE CHARACTER-10FFFD (last Unicode code point)

	{0xd7ff, false},       // surr1-1
	{0xd800, true},        // surr1
	{0xdc00, true},        // surr2
	{0xe000, false},       // surr3
	{0xdfff, true},        // surr3-1
]

#test
fn testIsSurrogate(t: &testing::T) {
	for i, tt in surrogateCases {
		got := utf16::IsSurrogate(tt.r)
		if got != tt.want {
			t.Errorf("{}: IsSurrogate({}) = {}; want {}", i, tt.r, got, tt.want)
		}
	}
}

struct runeLenTest {
	r:      rune
	length: int
}

#test
fn testRuneLen(t: &testing::T) {
	for _, tt in []runeLenTest([
		{0, 1},
		{utf16::Surr1 - 1, 1},
		{utf16::Surr3, 1},
		{utf16::SurrSelf - 1, 1},
		{utf16::SurrSelf, 2},
		{utf16::MaxRune, 2},
		{utf16::MaxRune + 1, -1},
		{-1, -1},
	]) {
		length := utf16::RuneLen(tt.r)
		if length != tt.length {
			t.Errorf("RuneLen({}) = {}, want {}", tt.r, length, tt.length)
		}
	}
}