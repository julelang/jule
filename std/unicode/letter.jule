// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/b8e533a7cdc60d84a0c52bfaf3dcb5bf148ac3a8/src/unicode/letter.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Maximum valid Unicode code point.
const MaxRune = '\U0010FFFF'

// Represents invalid code points.
const ReplacementChar = '\uFFFD'

// Maximum ASCII value.
const MaxASCII = '\u007F'

// Maximum Latin-1 value.
const MaxLatin1 = '\u00FF'

// Indices into the delta arrays inside CaseRanges for case mapping.
const (
	UpperCase = 0
	LowerCase = 1
	TitleCase = 2
	MaxCase = 3
)

// If the Delta field of a CaseRange is UpperLower, it means
// this CaseRange represents a sequence of the form (say)
// Upper Lower Upper Lower.
const upperLower = MaxRune + 1 // (Cannot be a valid delta.)

// The maximum size table for linear search for non-Latin1 rune.
// Derived by running 'go test -calibrate'.
const linearMax = 18

// to make the CaseRanges text shorter
type d: [MaxCase]rune

// CASE_ORBIT is defined in tables.jule as []FoldPair. Right now all the
// entries fit in uint16, so use uint16. If that changes, compilation
// will fail (the constants in the composite literal will not fit in u16)
// and the types here can change to u32.
struct foldPair {
	from: u16
	to:   u16
}

// Represents a range of Unicode code points for simple (one
// code point to one code point) case conversion.
// The range runs from lo to hi inclusive, with a fixed stride of 1. Deltas
// are the number to add to the code point to reach the code point for a
// different case for that character. They may be negative. If zero, it
// means the character is in the corresponding case. There is a special
// case representing sequences of alternating corresponding Upper and Lower
// pairs. It appears with a fixed delta of
//
//	{UpperLower, UpperLower, UpperLower}
//
// The constant UpperLower has an otherwise impossible delta value.
struct CaseRange {
	Lo:    u32
	Hi:    u32
	Delta: d
}

// Represents of a range of 16-bit Unicode code points. The range runs from lo to hi
// inclusive and has the specified stride.
struct Range16 {
	Lo:     u16
	Hi:     u16
	Stride: u16
}

// Represents of a range of Unicode code points and is used when one or
// more of the values will not fit in 16 bits. The range runs from lo to hi
// inclusive and has the specified stride. lo and hi must always be >= 1<<16.
struct Range32 {
	Lo:     u32
	Hi:     u32
	Stride: u32
}

// Defines a set of Unicode code points by listing the ranges of
// code points within the set. The ranges are listed in two slices
// to save space: a slice of 16-bit ranges and a slice of 32-bit ranges.
// The two slices must be in sorted order and non-overlapping.
// Also, R32 should contain only values >= 0x10000 (1<<16).
struct RangeTable {
	R16:         []Range16
	R32:         []Range32
	LatinOffset: int // number of entries in R16 with Hi <= MaxLatin1
}

// to maps the rune using the specified case mapping.
// It additionally reports whether caseRange contained a mapping for r.
fn to(case: int, r: rune, caseRange: []CaseRange): (mappedRune: rune, foundMapping: bool) {
	if case < 0 || MaxCase <= case {
		ret ReplacementChar, false // as reasonable an error as any
	}

	// binary search over ranges
	mut lo := 0
	mut hi := len(caseRange)
	for lo < hi {
		m := lo + (hi-lo)/2
		cr := caseRange[m]
		if rune(cr.Lo) <= r && r <= rune(cr.Hi) {
			delta := cr.Delta[case]
			if delta > MaxRune {
				// In an Upper-Lower sequence, which always starts with
				// an UpperCase letter, the real deltas always look like:
				//	{0, 1, 0}    UpperCase (Lower is next)
				//	{-1, 0, -1}  LowerCase (Upper, Title are previous)
				// The characters at even offsets from the beginning of the
				// sequence are upper case; the ones at odd offsets are lower.
				// The correct mapping can be done by clearing or setting the low
				// bit in the sequence offset.
				// The constants UpperCase and TitleCase are even while LowerCase
				// is odd so we take the low bit from case.
				ret rune(cr.Lo) + ((r-rune(cr.Lo))&^1 | rune(case&1)), true
			}
			ret r + delta, true
		}
		if r < rune(cr.Lo) {
			hi = m
		} else {
			lo = m + 1
		}
	}
	ret r, false
}

// Maps the rune to the specified case: UpperCase, LowerCase, or TitleCase.
fn To(case: int, mut r: rune): rune {
	r, _ = to(case, r, CaseRanges)
	ret r
}

// Maps the rune to upper case.
fn ToUpper(mut r: rune): rune {
	if r <= MaxASCII {
		if 'a' <= r && r <= 'z' {
			r -= 'a' - 'A'
		}
		ret r
	}
	ret To(UpperCase, r)
}

// Maps the rune to lower case.
fn ToLower(mut r: rune): rune {
	if r <= MaxASCII {
		if 'A' <= r && r <= 'Z' {
			r += 'a' - 'A'
		}
		ret r
	}
	ret To(LowerCase, r)
}

// Reports whether r is in the sorted slice of 16-bit ranges.
fn is16(ranges: []Range16, r: u16): bool {
	if len(ranges) <= linearMax || r <= MaxLatin1 {
		for i in ranges {
			range := &ranges[i]
			unsafe {
				if r < range.Lo {
					ret false
				}
				if r <= range.Hi {
					ret range.Stride == 1 || (r-range.Lo)%range.Stride == 0
				}
			}
		}
		ret false
	}

	// binary search over ranges
	mut lo := 0
	mut hi := len(ranges)
	for lo < hi {
		m := lo + (hi-lo)/2
		range := &ranges[m]
		unsafe {
			if range.Lo <= r && r <= range.Hi {
				ret range.Stride == 1 || (r-range.Lo)%range.Stride == 0
			}
			if r < range.Lo {
				hi = m
			} else {
				lo = m + 1
			}
		}
	}
	ret false
}

// Reports whether r is in the sorted slice of 32-bit ranges.
fn is32(ranges: []Range32, r: u32): bool {
	if len(ranges) <= linearMax {
		for i in ranges {
			range := &ranges[i]
			unsafe {
				if r < range.Lo {
					ret false
				}
				if r <= range.Hi {
					ret range.Stride == 1 || (r-range.Lo)%range.Stride == 0
				}
			}
		}
		ret false
	}

	// binary search over ranges
	mut lo := 0
	mut hi := len(ranges)
	for lo < hi {
		m := lo + (hi-lo)/2
		range := &ranges[m]
		unsafe {
			if range.Lo <= r && r <= range.Hi {
				ret range.Stride == 1 || (r-range.Lo)%range.Stride == 0
			}
			if r < range.Lo {
				hi = m
			} else {
				lo = m + 1
			}
		}
	}
	ret false
}

// Reports whether the rune is in the specified table of ranges.
fn Is(rangeTab: &RangeTable, r: rune): bool {
	&R16 := rangeTab.R16
	// Compare as u32 to correctly handle negative runes.
	if len(R16) > 0 && u32(r) <= u32(R16[len(R16)-1].Hi) {
		ret is16(R16, u16(r))
	}
	&R32 := rangeTab.R32
	if len(R32) > 0 && r >= rune(R32[0].Lo) {
		ret is32(R32, u32(r))
	}
	ret false
}

// Reports whether the rune is a member of one of the ranges.
fn In(r: rune, ranges: ...&RangeTable): bool {
	for _, inside in ranges {
		if Is(inside, r) {
			ret true
		}
	}
	ret false
}

fn isExcludingLatin(rangeTab: &RangeTable, r: rune): bool {
	{
		&R16 := rangeTab.R16
		// Compare as u32 to correctly handle negative runes.
		off := rangeTab.LatinOffset
		if len(R16) > off && u32(r) <= u32(R16[len(R16)-1].Hi) {
			ret is16(R16[off:], u16(r))
		}
	}
	&R32 := rangeTab.R32
	if len(R32) > 0 && r >= rune(R32[0].Lo) {
		ret is32(R32, u32(r))
	}
	ret false
}

// Reports whether the rune is an upper case letter.
fn IsUpper(r: rune): bool {
	// See comment in is_graphic.
	if u32(r) <= MaxLatin1 {
		ret properties[u8(r)]&pLmask == pLu
	}
	ret isExcludingLatin(Upper, r)
}

// Reports whether the rune is a lower case letter.
fn IsLower(r: rune): bool {
	// See comment in is_graphic.
	if u32(r) <= MaxLatin1 {
		ret properties[u8(r)]&pLmask == pLl
	}
	ret isExcludingLatin(Lower, r)
}

// Converts r to case using CaseRange cr.
fn convertCase(case: int, r: rune, cr: &CaseRange): rune {
	delta := cr.Delta[case]
	if delta > MaxRune {
		// In an Upper-Lower sequence, which always starts with
		// an UpperCase letter, the real deltas always look like:
		//	{0, 1, 0}    UpperCase (Lower is next)
		//	{-1, 0, -1}  LowerCase (Upper, Title are previous)
		// The characters at even offsets from the beginning of the
		// sequence are upper case; the ones at odd offsets are lower.
		// The correct mapping can be done by clearing or setting the low
		// bit in the sequence offset.
		// The constants UpperCase and TitleCase are even while LowerCase
		// is odd so we take the low bit from case.
		ret rune(cr.Lo) + ((r-rune(cr.Lo))&^1 | rune(case&1))
	}
	ret r + delta
}

// Returns the CaseRange mapping for rune r or nil if no
// mapping exists for r.
fn lookupCaseRange(r: rune, caseRange: []CaseRange): &CaseRange {
	// binary search over ranges
	mut lo := 0
	mut hi := len(caseRange)
	for lo < hi {
		m := int(uint(lo+hi) >> 1)
		mut cr := unsafe { (&CaseRange)(&caseRange[m]) }
		if rune(cr.Lo) <= r && r <= rune(cr.Hi) {
			ret cr
		}
		if r < rune(cr.Lo) {
			hi = m
		} else {
			lo = m + 1
		}
	}
	ret nil
}

// Iterates over Unicode code points equivalent under
// the Unicode-defined simple case folding. Among the code points
// equivalent to rune (including rune itself), SimpleFold returns the
// smallest rune > r if one exists, or else the smallest rune >= 0.
// If r is not a valid Unicode code point, SimpleFold(r) returns r.
//
// For example:
//
//	SimpleFold('A') = 'a'
//	SimpleFold('a') = 'A'
//
//	SimpleFold('K') = 'k'
//	SimpleFold('k') = '\u212A' (Kelvin symbol, K)
//	SimpleFold('\u212A') = 'K'
//
//	SimpleFold('1') = '1'
//
//	SimpleFold(-2) = -2
fn SimpleFold(r: rune): rune {
	if r < 0 || r > MaxRune {
		ret r
	}

	if int(r) < len(asciiFold) {
		ret rune(asciiFold[r])
	}

	// Consult caseOrbit table for special cases.
	mut lo := 0
	mut hi := len(caseOrbit)
	for lo < hi {
		m := int(uint(lo+hi) >> 1)
		if rune(caseOrbit[m].from) < r {
			lo = m + 1
		} else {
			hi = m
		}
	}
	if lo < len(caseOrbit) && rune(caseOrbit[lo].from) == r {
		ret rune(caseOrbit[lo].to)
	}

	// No folding specified. This is a one- or two-element
	// equivalence class containing rune and ToLower(rune)
	// and ToUpper(rune) if they are different from rune.
	cr := lookupCaseRange(r, CaseRanges)
	if cr != nil {
		l := convertCase(LowerCase, r, cr)
		if l != r {
			ret l
		}
		ret convertCase(UpperCase, r, cr)
	}
	ret r
}