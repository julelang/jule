// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.21.0/src/unicode/graphic.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Bit masks for each code point under U+0100, for fast lookup.
const __P_C = 1                // a control character.
const __P_P = 2                // a punctuation character.
const __P_N = 4                // a numeral.
const __P_S = 8                // a symbolic character.
const __P_Z = 16               // a spacing character.
const __P_LU = 32              // an upper-case letter.
const __P_LL = 64              // a lower-case letter.
const __PP = 128               // a printable character according to Jule's definition.
const __PG = __PP | __P_Z      // a graphical character according to the Unicode definition.
const __P_LO = __P_LL | __P_LU // a letter that is neither upper nor lower case.
const __P_L_MASK = __P_LO

// Defines the set of graphic characters according to Unicode.
static GraphicRanges = [L, M, N, P, S, ZS]

// Defines the set of printable characters according to Jule.
// ASCII space, U+0020, is handled separately.
static PrintRanges = [L, M, N, P, S]

// Such characters include letters, marks, numbers, punctuation, symbols, and
// spaces, from categories L, M, N, P, S, ZS.
fn IsGraphic(r: rune): bool {
	// We convert to u32 to avoid the extra test for negative,
	// and in the index we convert to uint8 to avoid the range check.
	if u32(r) <= MaxLatin1 {
		ret _PROPERTIES[u8(r)]&__PG != 0
	}
	ret IsIn(r, GraphicRanges...)
}

// Reports whether the rune is a member of one of the ranges.
fn IsIn(r: rune, ranges: ...&RangeTable): bool {
	for _, inside in ranges {
		if Is(inside, r) {
			ret true
		}
	}
	ret false
}

// Reports whether the rune is a letter (category L).
fn IsLetter(r: rune): bool {
	if u32(r) <= MaxLatin1 {
		ret _PROPERTIES[u8(r)]&(__P_L_MASK) != 0
	}
	ret isExcludingLatin(Letter, r)
}

// Reports whether the rune is a number (category N).
fn IsNumber(r: rune): bool {
	if u32(r) <= MaxLatin1 {
		ret _PROPERTIES[u8(r)]&__P_N != 0
	}
	ret isExcludingLatin(Number, r)
}

// Reports whether the rune is a Unicode punctuation character (category P).
fn IsPunct(r: rune): bool {
	if u32(r) <= MaxLatin1 {
		ret _PROPERTIES[u8(r)]&__P_P != 0
	}
	ret Is(Punct, r)
}

// Reports whether the rune is a space character as defined
// by Unicode's White Space property; in the Latin-1 space
// this is
//
//	'\t', '\n', '\v', '\f', '\r', ' ', U+0085 (NEL), U+00A0 (NBSP).
//
// Other definitions of spacing characters are set by category
// Z and property Pattern_White_Space.
fn IsSpace(r: rune): bool {
	// This property isn't the same as Z; special-case it.
	if u32(r) <= MaxLatin1 {
		match r {
		| '\t' | '\n' | '\v' | '\f' | '\r' | ' ' | 0x85 | 0xA0:
			ret true
		}
		ret false
	}
	ret isExcludingLatin(WhiteSpace, r)
}

// Reports whether the rune is defined as printable by Jule. Such
// characters include letters, marks, numbers, punctuation, symbols, and the
// ASCII space character, from categories [L], [M], [N], [P], [S] and the ASCII space
// character. This categorization is the same as [IsGraphic] except that the
// only spacing character is ASCII space, U+0020.
fn IsPrint(r: rune): bool {
	if u32(r) <= MaxLatin1 {
		ret _PROPERTIES[u8(r)]&__PP != 0
	}
	ret In(r, PrintRanges...)
}