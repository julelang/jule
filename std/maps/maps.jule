// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Reports whether maps are the same length and contains same keys and values.
// The nil maps considered as zero-length map.
// The floating-point NaNs are not considered equal.
fn Equal[M: ~map[K]V, K: comparable, V: comparable](m1: M, m2: M): bool {
	if len(m1) != len(m2) {
		ret false
	}
	for k, v1 in m1 {
		v2, ok := m2[k]
		if !ok || v1 != v2 {
			ret false
		}
	}
	ret true
}

// Returns all keys in a slice of map.
// Returns nil if m == nil || len(m) == 0.
fn Keys[M: ~map[K]V, K, V](mut m: M): []K {
	if len(m) == 0 {
		ret nil
	}
	mut s := make([]K, 0, len(m))
	for (mut k) in m {
		s = append(s, k)
	}
	ret s
}

// Returns all values in a slice of map.
// Returns nil if m == nil || len(m) == 0.
fn Values[M: ~map[K]V, K, V](mut m: M): []V {
	if len(m) == 0 {
		ret nil
	}
	mut s := make([]V, 0, len(m))
	for (_, mut v) in m {
		s = append(s, v)
	}
	ret s
}