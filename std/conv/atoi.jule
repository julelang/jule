// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/c3dff93a8c927c426770b27fee0457a544ef4be6/src/strconv/atoi.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

const intSize = 32 << (^uint(0) >> 63)

// Is the size in bits of an int or uint value.
const IntSize = intSize

// Is a lower-case letter if and only if
// c is either that lower-case letter or the equivalent upper-case letter.
// Instead of writing c == 'x' || c == 'X' one can write lower(c) == 'x'.
// Note that lower of non-letters can produce other non-letters.
fn lower(c: byte): byte {
	ret c | ('x' - 'X')
}

// Is like [ParseInt] but for unsigned numbers.
//
// A sign prefix is not permitted.
fn ParseUint(mut s: str, mut base: int, mut bitSize: int)!: u64 {
	const fnParseUint = "ParseUint"

	if s == "" {
		error(syntaxError(fnParseUint, s))
	}

	base0 := base == 0

	s0 := s
	match {
	| 2 <= base && base <= 36:
		// valid base; nothing to do
	| base == 0:
		// Look for octal, hex prefix.
		base = 10
		if s[0] == '0' {
			match {
			| len(s) >= 3 && lower(s[1]) == 'b':
				base = 2
				s = s[2:]
			| len(s) >= 3 && lower(s[1]) == 'o':
				base = 8
				s = s[2:]
			| len(s) >= 3 && lower(s[1]) == 'x':
				base = 16
				s = s[2:]
			|:
				base = 8
				s = s[1:]
			}
		}
	|:
		error(baseError(fnParseUint, s0, base))
	}

	if bitSize == 0 {
		bitSize = IntSize
	} else if bitSize < 0 || bitSize > 64 {
		error(bitSizeError(fnParseUint, s0, bitSize))
	}

	// Cutoff is the smallest number such that cutoff*base > maxUint64.
	// Use compile-time constants for common cases.
	let mut cutoff: u64
	match base {
	| 10:
		cutoff = u64.Max/10 + 1
	| 16:
		cutoff = u64.Max/16 + 1
	|:
		cutoff = u64.Max/u64(base) + 1
	}

	maxVal := u64(1)<<uint(bitSize) - 1

	mut underscores := false
	let mut n: u64
	for _, c in []byte(s) {
		let mut d: byte
		match {
		| c == '_' && base0:
			underscores = true
			continue
		| '0' <= c && c <= '9':
			d = c - '0'
		| 'a' <= lower(c) && lower(c) <= 'z':
			d = lower(c) - 'a' + 10
		|:
			error(syntaxError(fnParseUint, s0))
		}

		if d >= byte(base) {
			error(syntaxError(fnParseUint, s0))
		}

		if n >= cutoff {
			// n*base overflows
			error(rangeError(fnParseUint, s0))
		}
		n *= u64(base)

		n1 := n + u64(d)
		if n1 < n || n1 > maxVal {
			// n+d overflows
			error(rangeError(fnParseUint, s0))
		}
		n = n1
	}

	if underscores && !underscoreOK(s0) {
		error(syntaxError(fnParseUint, s0))
	}

	ret n
}

// Interprets a string s in the given base (0, 2 to 36) and
// bit size (0 to 64) and returns the corresponding value i.
//
// The string may begin with a leading sign: "+" or "-".
//
// If the base argument is 0, the true base is implied by the string's
// prefix following the sign (if present): 2 for "0b", 8 for "0" or "0o",
// 16 for "0x", and 10 otherwise. Also, for argument base 0 only,
// underscore characters are permitted as defined by the Jule syntax for
// [integer literals].
//
// The bitSize argument specifies the integer type
// that the result must fit into. Bit sizes 0, 8, 16, 32, and 64
// correspond to int, i8, i16, i32, and i64.
// If bitSize is below 0 or above 64, an error is returned.
//
// The errors that it returns have concrete type [&NumError]
// and include err.Num = s. If s is empty or contains invalid  digits,
// err.Err = [ErrSyntax]; if the value corresponding to s cannot be
// represented by a signed integer of the given size,  err.Err = [ErrRange].
//
// [integer literals]: https://manual.jule.dev/introduction/data-types#integer-literals
fn ParseInt(mut s: str, base: int, mut bitSize: int)!: i64 {
	const fnParseInt = "ParseInt"

	if s == "" {
		error(syntaxError(fnParseInt, s))
	}

	// Pick off leading sign.
	s0 := s
	mut neg := false
	if s[0] == '+' {
		s = s[1:]
	} else if s[0] == '-' {
		neg = true
		s = s[1:]
	}

	// Convert unsigned and check range.
	un := ParseUint(s, base, bitSize) else {
		mut nerr := (&NumError)(error)
		if nerr.Err != ErrRange {
			nerr.Func = fnParseInt
			nerr.Num = s0
			error(error)
		}
		maxVal := u64(1)<<uint(bitSize) - 1
		use maxVal
	}

	if bitSize == 0 {
		bitSize = IntSize
	}

	cutoff := u64(1 << uint(bitSize-1))
	if !neg && un >= cutoff {
		error(rangeError(fnParseInt, s0))
	}
	if neg && un > cutoff {
		error(rangeError(fnParseInt, s0))
	}
	mut n := i64(un)
	if neg {
		n = -n
	}
	ret n
}

// Is equivalent to ParseInt(s, 10, 0), converted to int.
fn Atoi(mut s: str)!: int {
	const fnAtoi = "Atoi"

	sLen := len(s)
	if intSize == 32 && (0 < sLen && sLen < 10) ||
		intSize == 64 && (0 < sLen && sLen < 19) {
		// Fast path for small integers that fit int type.
		s0 := s
		if s[0] == '-' || s[0] == '+' {
			s = s[1:]
			if len(s) < 1 {
				error(syntaxError(fnAtoi, s0))
			}
		}

		mut n := 0
		for (_, mut ch) in []byte(s) {
			ch -= '0'
			if ch > 9 {
				error(syntaxError(fnAtoi, s0))
			}
			n = n*10 + int(ch)
		}
		if s0[0] == '-' {
			n = -n
		}
		ret n
	}

	// Slow path for invalid, big, or underscored integers.
	int64 := ParseInt(s, 10, 0) else {
		mut nerr, ok := (&NumError)(error)
		if ok {
			nerr.Func = fnAtoi
		}
		error(error)
	}
	ret int(int64)
}

// Reports whether the underscores in s are allowed.
// Checking them in this one function lets all the parsers skip over them simply.
// Underscore must appear only between digits or between a base prefix and a digit.
fn underscoreOK(mut s: str): bool {
	// saw tracks the last character (class) we saw:
	// ^ for beginning of number,
	// 0 for a digit or base prefix,
	// _ for an underscore,
	// ! for none of the above.
	mut saw := '^'
	mut i := 0

	// Optional sign.
	if len(s) >= 1 && (s[0] == '-' || s[0] == '+') {
		s = s[1:]
	}

	// Optional base prefix.
	mut hex := false
	if len(s) >= 2 && s[0] == '0' && (lower(s[1]) == 'b' || lower(s[1]) == 'o' || lower(s[1]) == 'x') {
		i = 2
		saw = '0' // base prefix counts as a digit for "underscore as digit separator"
		hex = lower(s[1]) == 'x'
	}

	// Number proper.
	for i < len(s); i++ {
		// Digits are always okay.
		if '0' <= s[i] && s[i] <= '9' || hex && 'a' <= lower(s[i]) && lower(s[i]) <= 'f' {
			saw = '0'
			continue
		}
		// Underscore must follow digit.
		if s[i] == '_' {
			if saw != '0' {
				ret false
			}
			saw = '_'
			continue
		}
		// Underscore must also be followed by digit.
		if saw == '_' {
			ret false
		}
		// Saw non-digit, non-underscore.
		saw = '!'
	}
	ret saw != '_'
}