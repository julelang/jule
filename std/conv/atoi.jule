// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/strconv/atoi.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

const _INT_SIZE = 32 << (^uint(0) >> 63)

// Is the size in bits of an int or uint value.
const IntSize = _INT_SIZE

// Is a lower-case letter if and only if
// c is either that lower-case letter or the equivalent upper-case letter.
// Instead of writing c == 'x' || c == 'X' one can write lower(c) == 'x'.
// Note that lower of non-letters can produce other non-letters.
fn lower(c: byte): byte {
	ret c | ('x' - 'X')
}

fn parseUint(mut &s: str, mut base: int, mut bitSize: int): (u64, err: int) {
	err = noError
	if s == "" {
		ret 0, Error.InvalidSyntax
	}

	match {
	| 2 <= base && base <= 36:
		// valid base; nothing to do
	| base == 0:
		// Look for octal, hex prefix.
		base = 10
		if s[0] == '0' {
			match {
			| len(s) >= 3 && lower(s[1]) == 'b':
				base = 2
				s = s[2:]
			| len(s) >= 3 && lower(s[1]) == 'o':
				base = 8
				s = s[2:]
			| len(s) >= 3 && lower(s[1]) == 'x':
				base = 16
				s = s[2:]
			|:
				base = 8
				s = s[1:]
			}
		}
	|:
		ret 0, Error.InvalidBase
	}

	if bitSize == 0 {
		bitSize = IntSize
	} else if bitSize < 0 || bitSize > 64 {
		ret 0, Error.InvalidBitSize
	}

	// Cutoff is the smallest number such that cutoff*base > u64.Max.
	// Use compile-time constants for common cases.
	mut cutoff := u64(0)
	match base {
	| 10:
		cutoff = u64.Max/10 + 1
	| 16:
		cutoff = u64.Max/16 + 1
	|:
		cutoff = u64.Max/u64(base) + 1
	}

	mut maxVal := u64(0)
	match bitSize {
	| 32:
		maxVal = u32.Max
	| 64:
		maxVal = u64.Max
	}

	mut n := u64(0)
	for _, c in []byte(s) {
		mut d := byte(0)
		match {
		| '0' <= c && c <= '9':
			d = c - '0'
		| 'a' <= lower(c) && lower(c) <= 'z':
			d = lower(c) - 'a' + 10
		| c == '_':
			continue
		|:
			ret 0, Error.InvalidSyntax
		}

		if d >= byte(base) {
			ret 0, Error.InvalidSyntax
		}

		if n >= cutoff {
			// n*base overflows
			ret maxVal, Error.OutOfRange
		}
		n *= u64(base)

		n1 := n + u64(d)
		if n1 < n || n1 > maxVal {
			// n+d overflows
			ret maxVal, Error.OutOfRange
		}
		n = n1
	}

	ret n, noError
}

// Is like ParseInt but for unsigned numbers.
//
// A sign prefix is not permitted.
fn ParseUint(mut s: str, mut base: int, mut bitSize: int)!: u64 {
	un, err := parseUint(s, base, bitSize)
	if err != noError {
		error(intToError(err))
	}
	ret un
}

// Interprets a string s in the given base (0, 2 to 36) and
// bit size (0 to 64) and returns the corresponding value i.
//
// The string may begin with a leading sign: "+" or "-".
//
// If the base argument is 0, the true base is implied by the string's
// prefix following the sign (if present): 2 for "0b", 8 for "0" or "0o",
// 16 for "0x", and 10 otherwise.
//
// The bitSize argument specifies the integer type
// that the result must fit into. Bit sizes 0, 8, 16, 32, and 64
// correspond to int, i8, i16, i32, and i64.
// If bitSize is below 0 or above 64, throws exception.
//
// The exception errors that parse_int throws have concrete type Error.
// If s is empty or contains invalid digits, exception = Error.InvalidSyntax;
// if the value corresponding to s cannot be represented by a signed integer of
// the given size, exception = Error.OutOfRange.
fn ParseInt(mut s: str, base: int, mut bitSize: int)!: i64 {
	if s == "" {
		error(Error.InvalidSyntax)
	}

	// Pick off leading sign.
	mut neg := false
	if s[0] == '+' {
		s = s[1:]
	} else if s[0] == '-' {
		neg = true
		s = s[1:]
	}

	// Convert unsigned and check range.
	mut un, err := parseUint(s, base, bitSize)
	if err != noError && err != Error.OutOfRange {
		error(intToError(err))
	}

	if bitSize == 0 {
		bitSize = IntSize
	}

	cutoff := u64(1 << uint(bitSize-1))
	if !neg && un >= cutoff {
		error(Error.OutOfRange)
	}
	if neg && un > cutoff {
		error(Error.OutOfRange)
	}
	mut n := i64(un)
	if neg {
		n = -n
	}
	ret n
}

// Is equivalent to ParseInt(s, 10, 0), converted to int.
fn Atoi(s: str)!: int {
	ret int(ParseInt(s, 10, 0) else { error(error) })
}