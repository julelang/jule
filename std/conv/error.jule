// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/errors"
use "std/runtime"

// Indicates that a value does not have the right syntax for the target type.
// Mutation is undefined behavior.
let mut ErrSyntax = errors::New("invalid syntax")

// That a value is out of range for the target type.
// Mutation is undefined behavior.
let mut ErrRange = errors::New("value out of range")

// Records a failed conversion.
struct NumError {
	Func: str // the failing function (ParseBool, ParseInt, ParseUint, ParseFloat, ParseComplex)
	Num:  str // the input
	Err:  any // the reason the conversion failed (e.g. ErrRange, ErrSyntax, etc.)
}

impl NumError {
	fn Str(*self): str {
		ret "conv::" + self.Func + ": " + "parsing " + Quote(self.Num) + ": " + runtime::toStr(self.Err)
	}
}

fn syntaxError(f: str, s: str): &NumError {
	ret &NumError{f, s, ErrSyntax}
}

fn rangeError(f: str, s: str): &NumError {
	ret &NumError{f, s, ErrRange}
}

fn baseError(f: str, s: str, base: int): &NumError {
	ret &NumError{f, s, errors::New("invalid base " + Itoa(base))}
}

fn bitSizeError(f: str, s: str, bitSize: int): &NumError {
	ret &NumError{f, s, errors::New("invalid bit size " + Itoa(bitSize))}
}