// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/strconv/quote.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use "std/internal/byteslite"
use "std/unicode"
use "std/unicode/utf8"
use "std/unsafe"

const lowerhex = "0123456789abcdef"
const upperhex = "0123456789ABCDEF"

// Reports whether the string contains the byte c.
fn contains(s: str, c: byte): bool {
	ret byteslite::IndexByteStr(s, c) != -1
}

fn quoteWith(s: str, quote: byte, ASCIIonly: bool, graphicOnly: bool): str {
	ret unsafe::StrFromBytes(appendQuotedWith(make([]byte, 0, 3*len(s)/2), s, quote, ASCIIonly, graphicOnly))
}

fn quoteRuneWith(r: rune, quote: byte, ASCIIonly: bool, graphicOnly: bool): str {
	ret unsafe::StrFromBytes(appendQuotedRuneWith(nil, r, quote, ASCIIonly, graphicOnly))
}

fn appendQuotedWith(mut buf: []byte, mut s: str, quote: byte, ASCIIonly: bool, graphicOnly: bool): []byte {
	// Often called with big strings, so preallocate. If there's quoting,
	// this is conservative but still helps a lot.
	if cap(buf)-len(buf) < len(s) {
		mut nBuf := make([]byte, len(buf), len(buf)+1+len(s)+1)
		copy(nBuf, buf)
		buf = nBuf
	}
	buf = append(buf, quote)
	mut width := 0
	for len(s) > 0; s = s[width:] {
		mut r := rune(s[0])
		width = 1
		if r >= utf8::RuneSelf {
			r, width = utf8::DecodeRuneStr(s)
		}
		if width == 1 && r == utf8::RuneError {
			buf = append(buf, `\x`...)
			buf = append(buf, lowerhex[s[0]>>4])
			buf = append(buf, lowerhex[s[0]&0xF])
			continue
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly)
	}
	buf = append(buf, quote)
	ret buf
}

fn appendQuotedRuneWith(mut buf: []byte, mut r: rune, quote: byte, ASCIIonly: bool, graphicOnly: bool): []byte {
	buf = append(buf, quote)
	if !utf8::ValidRune(r) {
		r = utf8::RuneError
	}
	buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly)
	buf = append(buf, quote)
	ret buf
}

fn appendEscapedRune(mut buf: []byte, mut r: rune, quote: byte, ASCIIonly: bool, graphicOnly: bool): []byte {
	if r == rune(quote) || r == '\\' { // always backslashed
		buf = append(buf, '\\')
		buf = append(buf, byte(r))
		ret buf
	}
	if ASCIIonly {
		if r < utf8::RuneSelf && unicode::IsPrint(r) {
			buf = append(buf, byte(r))
			ret buf
		}
	} else if unicode::IsPrint(r) || graphicOnly && isInGraphicList(r) {
		ret utf8::AppendRune(buf, r)
	}
	match r {
	| '\a':
		buf = append(buf, `\a`...)
	| '\b':
		buf = append(buf, `\b`...)
	| '\f':
		buf = append(buf, `\f`...)
	| '\n':
		buf = append(buf, `\n`...)
	| '\r':
		buf = append(buf, `\r`...)
	| '\t':
		buf = append(buf, `\t`...)
	| '\v':
		buf = append(buf, `\v`...)
	|:
		match {
		| r < ' ' || r == 0x7f:
			buf = append(buf, `\x`...)
			buf = append(buf, lowerhex[byte(r)>>4])
			buf = append(buf, lowerhex[byte(r)&0xF])
		| !utf8::ValidRune(r):
			r = 0xFFFD
			fall
		| r < 0x10000:
			buf = append(buf, `\u`...)
			mut s := 12
			for s >= 0; s -= 4 {
				buf = append(buf, lowerhex[r>>uint(s)&0xF])
			}
		|:
			buf = append(buf, `\U`...)
			mut s := 28
			for s >= 0; s -= 4 {
				buf = append(buf, lowerhex[r>>uint(s)&0xF])
			}
		}
	}
	ret buf
}

// Returns a double-quoted Jule string literal representing s. The
// returned string uses Jule escape sequences (\t, \n, \xFF, \u0100) for
// control characters and non-printable characters as defined by
// [unicode::IsPrint].
fn Quote(s: str): str {
	ret quoteWith(s, '"', false, false)
}

// Appends a double-quoted Jule string literal representing s,
// as generated by [Quote], to dst and returns the extended buffer.
fn AppendQuote(mut dst: []byte, s: str): []byte {
	ret appendQuotedWith(dst, s, '"', false, false)
}

// Returns a double-quoted Jule string literal representing s.
// The returned string uses Jule escape sequences (\t, \n, \xFF, \u0100) for
// non-ASCII characters and non-printable characters as defined by [IsPrint].
fn QuoteToASCII(s: str): str {
	ret quoteWith(s, '"', true, false)
}

// Appends a double-quoted Jule string literal representing s,
// as generated by [QuoteToASCII], to dst and returns the extended buffer.
fn AppendQuoteToASCII(mut dst: []byte, s: str): []byte {
	ret appendQuotedWith(dst, s, '"', true, false)
}

// Returns a double-quoted Jule string literal representing s.
// The returned string leaves Unicode graphic characters, as defined by
// [IsGraphic], unchanged and uses Jule escape sequences (\t, \n, \xFF, \u0100)
// for non-graphic characters.
fn QuoteToGraphic(s: str): str {
	ret quoteWith(s, '"', false, true)
}

// Appends a double-quoted Jule string literal representing s,
// as generated by [QuoteToGraphic], to dst and returns the extended buffer.
fn AppendQuoteToGraphic(mut dst: []byte, s: str): []byte {
	ret appendQuotedWith(dst, s, '"', false, true)
}

// Returns a single-quoted Jule character literal representing the
// rune. The returned string uses Jule escape sequences (\t, \n, \xFF, \u0100)
// for control characters and non-printable characters as defined by [IsPrint].
// If r is not a valid Unicode code point, it is interpreted as the Unicode
// replacement character U+FFFD.
fn QuoteRune(r: rune): str {
	ret quoteRuneWith(r, '\'', false, false)
}

// Appends a single-quoted Jule character literal representing the rune,
// as generated by [QuoteRune], to dst and returns the extended buffer.
fn AppendQuoteRune(mut dst: []byte, r: rune): []byte {
	ret appendQuotedRuneWith(dst, r, '\'', false, false)
}

// Returns a single-quoted Jule character literal representing
// the rune. The returned string uses Jule escape sequences (\t, \n, \xFF,
// \u0100) for non-ASCII characters and non-printable characters as defined
// by [IsPrint].
// If r is not a valid Unicode code point, it is interpreted as the Unicode
// replacement character U+FFFD.
fn QuoteRuneToASCII(r: rune): str {
	ret quoteRuneWith(r, '\'', true, false)
}

// Appends a single-quoted Jule character literal representing the rune,
// as generated by [QuoteRuneToASCII], to dst and returns the extended buffer.
fn AppendQuoteRuneToASCII(mut dst: []byte, r: rune): []byte {
	ret appendQuotedRuneWith(dst, r, '\'', true, false)
}

// Returns a single-quoted Jule character literal representing
// the rune. If the rune is not a Unicode graphic character,
// as defined by [IsGraphic], the returned string will use a Jule escape sequence
// (\t, \n, \xFF, \u0100).
// If r is not a valid Unicode code point, it is interpreted as the Unicode
// replacement character U+FFFD.
fn QuoteRuneToGraphic(r: rune): str {
	ret quoteRuneWith(r, '\'', false, true)
}

// Appends a single-quoted Jule character literal representing the rune,
// as generated by [QuoteRuneToGraphic], to dst and returns the extended buffer.
fn AppendQuoteRuneToGraphic(mut dst: []byte, r: rune): []byte {
	ret appendQuotedRuneWith(dst, r, '\'', false, true)
}

// Reports whether the string s can be represented
// unchanged as a single-line backquoted string without control
// characters other than tab.
fn CanBackquote(mut s: str): bool {
	for len(s) > 0 {
		r, wid := utf8::DecodeRuneStr(s)
		s = s[wid:]
		if wid > 1 {
			if r == '\ufeff' {
				ret false // BOMs are invisible and should not be quoted.
			}
			continue // All other multibyte runes are correctly encoded and assumed printable.
		}
		if r == utf8::RuneError {
			ret false
		}
		if (r < ' ' && r != '\t') || r == '`' || r == '\u007F' {
			ret false
		}
	}
	ret true
}

fn unhex(b: byte): (v: rune, ok: bool) {
	c := rune(b)
	match {
	| '0' <= c && c <= '9':
		ret c - '0', true
	| 'a' <= c && c <= 'f':
		ret c - 'a' + 10, true
	| 'A' <= c && c <= 'F':
		ret c - 'A' + 10, true
	}
	ret
}

// Decodes the first character or byte in the escaped string
// or character literal represented by the string s.
// It returns four values:
//
//  1. value, the decoded Unicode code point or byte value;
//  2. multibyte, a boolean indicating whether the decoded character requires a multibyte UTF-8 representation;
//  3. tail, the remainder of the string after the character; and
//  4. an error that will be nil if the character is syntactically valid.
//
// The second argument, quote, specifies the type of literal being parsed
// and therefore which escaped quote character is permitted.
// If set to a single quote, it permits the sequence \' and disallows unescaped '.
// If set to a double quote, it permits \" and disallows unescaped ".
// If set to zero, it does not permit either escape and allows both quote characters to appear unescaped.
fn UnquoteChar(mut s: str, quote: byte)!: (value: rune, multibyte: bool, tail: str) {
	// easy cases
	if len(s) == 0 {
		error(ErrSyntax)
	}
	mut c := s[0]
	match {
	| c == quote && (quote == '\'' || quote == '"'):
		error(ErrSyntax)
	| c >= utf8::RuneSelf:
		r, size := utf8::DecodeRuneStr(s)
		ret r, true, s[size:]
	| c != '\\':
		ret rune(s[0]), false, s[1:]
	}

	// hard case: c is backslash
	if len(s) <= 1 {
		error(ErrSyntax)
	}
	c = s[1]
	s = s[2:]

	match c {
	| 'a':
		value = '\a'
	| 'b':
		value = '\b'
	| 'f':
		value = '\f'
	| 'n':
		value = '\n'
	| 'r':
		value = '\r'
	| 't':
		value = '\t'
	| 'v':
		value = '\v'
	| 'x' | 'u' | 'U':
		mut n := 0
		match c {
		| 'x':
			n = 2
		| 'u':
			n = 4
		| 'U':
			n = 8
		}
		let mut v: rune
		if len(s) < n {
			error(ErrSyntax)
		}
		mut j := 0
		for j < n; j++ {
			x, ok := unhex(s[j])
			if !ok {
				error(ErrSyntax)
			}
			v = v<<4 | x
		}
		s = s[n:]
		if c == 'x' {
			// single-byte string, possibly not UTF-8
			value = v
			break
		}
		if !utf8::ValidRune(v) {
			error(ErrSyntax)
		}
		value = v
		multibyte = true
	| '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7':
		mut v := rune(c) - '0'
		if len(s) < 2 {
			error(ErrSyntax)
		}
		mut j := 0
		for j < 2; j++ { // one digit already; two more
			x := rune(s[j]) - '0'
			if x < 0 || x > 7 {
				error(ErrSyntax)
			}
			v = (v << 3) | x
		}
		s = s[2:]
		if v > 255 {
			error(ErrSyntax)
		}
		value = v
	| '\\':
		value = '\\'
	| '\'' | '"':
		if c != quote {
			error(ErrSyntax)
		}
		value = rune(c)
	|:
		error(ErrSyntax)
	}
	tail = s
	ret
}

// Returns the quoted string (as understood by [Unquote]) at the prefix of s.
// If s does not start with a valid quoted string, it returns an error.
fn QuotedPrefix(s: str)!: str {
	out, _, mut err := unquote(s, false)
	if err != nil {
		error(err)
	}
	ret out
}

// Interprets s as a single-quoted, double-quoted,
// or backquoted Jule string literal, returning the string value
// that s quotes. (If s is single-quoted, it would be a Jule
// character literal; Unquote returns the corresponding
// one-character string. For an empty character literal
// Unquote returns the empty string.)
fn Unquote(s: str)!: str {
	out, rem, mut err := unquote(s, true)
	if len(rem) > 0 {
		error(ErrSyntax)
	}
	if err != nil {
		error(err)
	}
	ret out
}

// Parses a quoted string at the start of the input,
// returning the parsed prefix, the remaining suffix, and any parse errors.
// If unescape is true, the parsed prefix is unescaped,
// otherwise the input prefix is provided verbatim.
fn unquote(mut input: str, unescape: bool): (out: str, rem: str, err: any) {
	// Determine the quote form and optimistically find the terminating quote.
	if len(input) < 2 {
		ret "", input, ErrSyntax
	}
	quote := input[0]
	mut end := byteslite::IndexByteStr(input[1:], quote)
	if end < 0 {
		ret "", input, ErrSyntax
	}
	end += 2 // position after terminating quote; may be wrong if escape sequences are present
	match quote {
	| '`':
		match {
		| !unescape:
			out = input[:end] // include quotes
		| !contains(input[:end], '\r'):
			out = input[len("`") : end-len("`")] // exclude quotes
		|:
			// Carriage return characters ('\r') inside raw string literals
			// are discarded from the raw string value.
			mut buf := make([]byte, 0, end-len("`")-len("\r")-len("`"))
			mut i := len("`")
			for i < end-len("`"); i++ {
				if input[i] != '\r' {
					buf = append(buf, input[i])
				}
			}
			out = unsafe::StrFromBytes(buf)
		}
		// NOTE: Prior implementations did not verify that raw strings consist
		// of valid UTF-8 characters and we continue to not verify it as such.
		// The Jule specification does not explicitly require valid UTF-8,
		// but only mention that it is implicitly valid for Jule source code
		// (which must be valid UTF-8).
		ret out, input[end:], nil
	| '"' | '\'':
		// Handle quoted strings without any escape sequences.
		if !contains(input[:end], '\\') && !contains(input[:end], '\n') {
			let mut valid: bool
			match quote {
			| '"':
				valid = utf8::ValidStr(input[len(`"`) : end-len(`"`)])
			| '\'':
				r, n := utf8::DecodeRuneStr(input[len("'") : end-len("'")])
				valid = len("'")+n+len("'") == end && (r != utf8::RuneError || n != 1)
			}
			if valid {
				out = input[:end]
				if unescape {
					out = out[1 : end-1] // exclude quotes
				}
				ret out, input[end:], nil
			}
		}

		// Handle quoted strings with escape sequences.
		let mut buf: []byte
		in0 := input
		input = input[1:] // skip starting quote
		if unescape {
			buf = make([]byte, 0, 3*end/2) // try to avoid more allocations
		}
		for len(input) > 0 && input[0] != quote {
			// Process the next character,
			// rejecting any unescaped newline characters which are invalid.
			r, multibyte, (rem) := UnquoteChar(input, quote) else {
				ret "", in0, ErrSyntax
			}
			if input[0] == '\n' {
				ret "", in0, ErrSyntax
			}
			input = rem

			// Append the character if unescaping the input.
			if unescape {
				if r < utf8::RuneSelf || !multibyte {
					buf = append(buf, byte(r))
				} else {
					buf = utf8::AppendRune(buf, r)
				}
			}

			// Single quoted strings must be a single character.
			if quote == '\'' {
				break
			}
		}

		// Verify that the string ends with a terminating quote.
		if !(len(input) > 0 && input[0] == quote) {
			ret "", in0, ErrSyntax
		}
		input = input[1:] // skip terminating quote

		if unescape {
			ret unsafe::StrFromBytes(buf), input, nil
		}
		ret in0[:len(in0)-len(input)], input, nil
	|:
		ret "", input, ErrSyntax
	}
}

// Binary search without NaN checks.
fn bsearch[S: []E, E: u16 | u32](s: S, v: E): (int, bool) {
	n := len(s)
	mut i, mut j := 0, n
	for i < j {
		h := i + (j-i)>>1
		if s[h] < v {
			i = h + 1
		} else {
			j = h
		}
	}
	ret i, i < n && s[i] == v
}

// Reports whether the rune is defined as a Graphic by Unicode. Such
// characters include letters, marks, numbers, punctuation, symbols, and
// spaces, from categories L, M, N, P, S, and Zs.
fn IsGraphic(r: rune): bool {
	if unicode::IsPrint(r) {
		ret true
	}
	ret isInGraphicList(r)
}

// Lists the graphic runes not matched by unicode::IsPrint.
static isGraphic: []u16 = [
	0x00a0,
	0x1680,
	0x2000,
	0x2001,
	0x2002,
	0x2003,
	0x2004,
	0x2005,
	0x2006,
	0x2007,
	0x2008,
	0x2009,
	0x200a,
	0x202f,
	0x205f,
	0x3000,
]

// Reports whether the rune is in the isGraphic list. This separation
// from IsGraphic allows quoteWith to avoid two calls to unicode::IsPrint.
// Should be called only if unicode::IsPrint fails.
fn isInGraphicList(r: rune): bool {
	// We know r must fit in 16 bits.
	if r > 0xFFFF {
		ret false
	}
	_, found := bsearch(isGraphic, u16(r))
	ret found
}