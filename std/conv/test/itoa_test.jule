// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/conv"
use "std/testing"

struct itob64Test {
	input: i64
	base:  int
	out:   str
}

static itob64tests: []itob64Test = [
	{0, 10, "0"},
	{1, 10, "1"},
	{-1, 10, "-1"},
	{12345678, 10, "12345678"},
	{-987654321, 10, "-987654321"},
	{1<<31 - 1, 10, "2147483647"},
	{-1<<31 + 1, 10, "-2147483647"},
	{1<<31, 10, "2147483648"},
	{-1<<31, 10, "-2147483648"},
	{1<<31 + 1, 10, "2147483649"},
	{-1<<31 - 1, 10, "-2147483649"},
	{1<<32 - 1, 10, "4294967295"},
	{-1<<32 + 1, 10, "-4294967295"},
	{1<<32, 10, "4294967296"},
	{-1<<32, 10, "-4294967296"},
	{1<<32 + 1, 10, "4294967297"},
	{-1<<32 - 1, 10, "-4294967297"},
	{1<<50, 10, "1125899906842624"},
	{1<<63 - 1, 10, "9223372036854775807"},
	{-1<<63 + 1, 10, "-9223372036854775807"},
	{-1<<63, 10, "-9223372036854775808"},
	{0, 2, "0"},
	{10, 2, "1010"},
	{-1, 2, "-1"},
	{1<<15, 2, "1000000000000000"},
	{-8, 8, "-10"},
	{057635436545, 8, "57635436545"},
	{1<<24, 8, "100000000"},
	{16, 16, "10"},
	{-0x123456789abcdef, 16, "-123456789abcdef"},
	{1<<63 - 1, 16, "7fffffffffffffff"},
	{1<<63 - 1, 2, "111111111111111111111111111111111111111111111111111111111111111"},
	{-1<<63, 2, "-1000000000000000000000000000000000000000000000000000000000000000"},
	{16, 17, "g"},
	{25, 25, "10"},
	{(((((17*35+24)*35+21)*35+34)*35+12)*35+24)*35 + 32, 35, "holycow"},
	{(((((17*36+24)*36+21)*36+34)*36+12)*36+24)*36 + 32, 36, "holycow"},
]

#test
fn testItoa(t: &testing::T) {
	for _, test in itob64tests {
		mut s := conv::FormatInt(test.input, test.base)
		if s != test.out {
			t.Errorf("FormatInt({}, {}) = {} want {}",
				test.input, test.base, s, test.out)
		}
		mut x := conv::AppendInt([]byte("abc"), test.input, test.base)
		if str(x) != "abc"+test.out {
			t.Errorf("AppendInt({}, {}, {}) = {} want {}",
				"abc", test.input, test.base, x, test.out)
		}

		if test.input >= 0 {
			s = conv::FormatUint(u64(test.input), test.base)
			if s != test.out {
				t.Errorf("FormatUint(%v, %v) = %v want %v",
					test.input, test.base, s, test.out)
			}
			x = conv::AppendUint(nil, u64(test.input), test.base)
			if str(x) != test.out {
				t.Errorf("AppendUint(%q, %v, %v) = %q want %v",
					"abc", u64(test.input), test.base, x, test.out)
			}
		}

		if test.base == 10 && i64(int(test.input)) == test.input {
			s = conv::Itoa(int(test.input))
			if s != test.out {
				t.Errorf("Itoa({}) = {} want {}",
					test.input, s, test.out)
			}
		}
	}
}

struct uitob64Test {
	input: u64
	base:  int
	out:   str
}

static uitob64tests: []uitob64Test = [
	{1<<63 - 1, 10, "9223372036854775807"},
	{1<<63, 10, "9223372036854775808"},
	{1<<63 + 1, 10, "9223372036854775809"},
	{1<<64 - 2, 10, "18446744073709551614"},
	{1<<64 - 1, 10, "18446744073709551615"},
	{1<<64 - 1, 2, "1111111111111111111111111111111111111111111111111111111111111111"},
]

#test
fn testUitoa(t: &testing::T) {
	for _, test in uitob64tests {
		s := conv::FormatUint(test.input, test.base)
		if s != test.out {
			t.Errorf("FormatUint({}, {}) = {} want {}",
				test.input, test.base, s, test.out)
		}
		x := conv::AppendUint([]byte("abc"), test.input, test.base)
		if str(x) != "abc"+test.out {
			t.Errorf("AppendUint({}, {}, {}) = {} want {}",
				"abc", test.input, test.base, x, test.out)
		}
	}
}

struct varlenUintTest {
	input: u64
	out:   str
}

static varlenUints: []varlenUintTest = [
	{1, "1"},
	{12, "12"},
	{123, "123"},
	{1234, "1234"},
	{12345, "12345"},
	{123456, "123456"},
	{1234567, "1234567"},
	{12345678, "12345678"},
	{123456789, "123456789"},
	{1234567890, "1234567890"},
	{12345678901, "12345678901"},
	{123456789012, "123456789012"},
	{1234567890123, "1234567890123"},
	{12345678901234, "12345678901234"},
	{123456789012345, "123456789012345"},
	{1234567890123456, "1234567890123456"},
	{12345678901234567, "12345678901234567"},
	{123456789012345678, "123456789012345678"},
	{1234567890123456789, "1234567890123456789"},
	{12345678901234567890, "12345678901234567890"},
]

#test
fn testFormatUintVarlen(t: &testing::T) {
	for _, test in varlenUints {
		s := conv::FormatUint(test.input, 10)
		if s != test.out {
			t.Errorf("FormatUint({}, 10) = {} want {}", test.input, s, test.out)
		}
	}
}