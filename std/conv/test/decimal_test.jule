// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/conv"
use "std/testing"

struct shiftTest {
	i:     u64
	shift: int
	out:   str
}

let shifttests: []shiftTest = [
	{0, -100, "0"},
	{0, 100, "0"},
	{1, 100, "1267650600228229401496703205376"},
	{1, -100,
		"0.00000000000000000000000000000078886090522101180541" +
			"17285652827862296732064351090230047702789306640625",
	},
	{12345678, 8, "3160493568"},
	{12345678, -8, "48225.3046875"},
	{195312, 9, "99999744"},
	{1953125, 9, "1000000000"},
]

#test
fn testDecimalShift(t: &testing::T) {
	mut i := 0
	for i < len(shifttests); i++ {
		&test := unsafe { &(*(&shifttests[i])) }
		mut d := conv::NewDecimal(test.i)
		d.Shift(test.shift)
		s := d.Str()
		if s != test.out {
			t.Errorf("Decimal {} << {} = {}, want {}",
				test.i, test.shift, s, test.out)
		}
	}
}

struct roundTest {
	i:       u64
	nd:      int
	down:    str
	round:   str
	up:      str
	integer: u64
}

let roundtests: []roundTest = [
	{0, 4, "0", "0", "0", 0},
	{12344999, 4, "12340000", "12340000", "12350000", 12340000},
	{12345000, 4, "12340000", "12340000", "12350000", 12340000},
	{12345001, 4, "12340000", "12350000", "12350000", 12350000},
	{23454999, 4, "23450000", "23450000", "23460000", 23450000},
	{23455000, 4, "23450000", "23460000", "23460000", 23460000},
	{23455001, 4, "23450000", "23460000", "23460000", 23460000},
	{99994999, 4, "99990000", "99990000", "100000000", 99990000},
	{99995000, 4, "99990000", "100000000", "100000000", 100000000},
	{99999999, 4, "99990000", "100000000", "100000000", 100000000},
	{12994999, 4, "12990000", "12990000", "13000000", 12990000},
	{12995000, 4, "12990000", "13000000", "13000000", 13000000},
	{12999999, 4, "12990000", "13000000", "13000000", 13000000},
]

#test
fn testDecimalRound(t: &testing::T) {
	mut i := 0
	for i < len(roundtests); i++ {
		&test := unsafe { &(*(&roundtests[i])) }
		mut d := conv::NewDecimal(test.i)
		d.RoundDown(test.nd)
		mut s := d.Str()
		if s != test.down {
			t.Errorf("Decimal {} RoundDown {} = {}, want {}",
				test.i, test.nd, s, test.down)
		}
		d = conv::NewDecimal(test.i)
		d.Round(test.nd)
		s = d.Str()
		if s != test.round {
			t.Errorf("Decimal {} Round {} = {}, want {}",
				test.i, test.nd, s, test.down)
		}
		d = conv::NewDecimal(test.i)
		d.RoundUp(test.nd)
		s = d.Str()
		if s != test.up {
			t.Errorf("Decimal {} RoundUp {} = {}, want {}",
				test.i, test.nd, s, test.up)
		}
	}
}

struct roundIntTest {
	i:       u64
	shift:   int
	integer: u64
}

let roundinttests: []roundIntTest = [
	{0, 100, 0},
	{512, -8, 2},
	{513, -8, 2},
	{640, -8, 2},
	{641, -8, 3},
	{384, -8, 2},
	{385, -8, 2},
	{383, -8, 1},
	{1, 100, 1<<64 - 1},
	{1000, 0, 1000},
]

#test
fn testDecimalRoundedInteger(t: &testing::T) {
	mut i := 0
	for i < len(roundinttests); i++ {
		test := roundinttests[i]
		mut d := conv::NewDecimal(test.i)
		d.Shift(test.shift)
		integer := d.RoundedInteger()
		if integer != test.integer {
			t.Errorf("Decimal {} >> {} RoundedInteger = {}, want {}",
				test.i, test.shift, integer, test.integer)
		}
	}
}