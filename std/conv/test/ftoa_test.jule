// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/conv"
use "std/math"
use "std/math/rand"
use "std/runtime"
use "std/testing"

struct ftoaTest {
	f:    f64
	fmt:  byte
	prec: int
	s:    str
}

fn fdiv(a: f64, b: f64): f64 { ret a / b }

const (
	below1e23 = 99999999999999974834176.0
	above1e23 = 100000000000000008388608.0
)

let ftoatests: []ftoaTest = [
	{1, 'e', 5, "1.00000e+00"},
	{1, 'f', 5, "1.00000"},
	{1, 'g', 5, "1"},
	{1, 'g', -1, "1"},
	{1, 'x', -1, "0x1p+00"},
	{1, 'x', 5, "0x1.00000p+00"},
	{20, 'g', -1, "20"},
	{20, 'x', -1, "0x1.4p+04"},
	{1234567.8, 'g', -1, "1.2345678e+06"},
	{1234567.8, 'x', -1, "0x1.2d687cccccccdp+20"},
	{200000, 'g', -1, "200000"},
	{200000, 'x', -1, "0x1.86ap+17"},
	{200000, 'X', -1, "0X1.86AP+17"},
	{2000000, 'g', -1, "2e+06"},
	{1e10, 'g', -1, "1e+10"},

	// g conversion and zero suppression
	{400, 'g', 2, "4e+02"},
	{40, 'g', 2, "40"},
	{4, 'g', 2, "4"},
	{.4, 'g', 2, "0.4"},
	{.04, 'g', 2, "0.04"},
	{.004, 'g', 2, "0.004"},
	{.0004, 'g', 2, "0.0004"},
	{.00004, 'g', 2, "4e-05"},
	{.000004, 'g', 2, "4e-06"},

	// ...
	{0, 'e', 5, "0.00000e+00"},
	{0, 'f', 5, "0.00000"},
	{0, 'g', 5, "0"},
	{0, 'g', -1, "0"},
	{0, 'x', 5, "0x0.00000p+00"},

	// ...
	{-1, 'e', 5, "-1.00000e+00"},
	{-1, 'f', 5, "-1.00000"},
	{-1, 'g', 5, "-1"},
	{-1, 'g', -1, "-1"},

	// ...
	{12, 'e', 5, "1.20000e+01"},
	{12, 'f', 5, "12.00000"},
	{12, 'g', 5, "12"},
	{12, 'g', -1, "12"},

	// ...
	{123456700, 'e', 5, "1.23457e+08"},
	{123456700, 'f', 5, "123456700.00000"},
	{123456700, 'g', 5, "1.2346e+08"},
	{123456700, 'g', -1, "1.234567e+08"},

	// ...
	{1.2345e6, 'e', 5, "1.23450e+06"},
	{1.2345e6, 'f', 5, "1234500.00000"},
	{1.2345e6, 'g', 5, "1.2345e+06"},

	// Round to even
	{1.2345e6, 'e', 3, "1.234e+06"},
	{1.2355e6, 'e', 3, "1.236e+06"},
	{1.2345, 'f', 3, "1.234"},
	{1.2355, 'f', 3, "1.236"},
	{1234567890123456.5, 'e', 15, "1.234567890123456e+15"},
	{1234567890123457.5, 'e', 15, "1.234567890123458e+15"},
	{108678236358137.625, 'g', -1, "1.0867823635813762e+14"},

	// ...
	{1e23, 'e', 17, "9.99999999999999916e+22"},
	{1e23, 'f', 17, "99999999999999991611392.00000000000000000"},
	{1e23, 'g', 17, "9.9999999999999992e+22"},

	// ...
	{1e23, 'e', -1, "1e+23"},
	{1e23, 'f', -1, "100000000000000000000000"},
	{1e23, 'g', -1, "1e+23"},

	// ...
	{below1e23, 'e', 17, "9.99999999999999748e+22"},
	{below1e23, 'f', 17, "99999999999999974834176.00000000000000000"},
	{below1e23, 'g', 17, "9.9999999999999975e+22"},

	// ...
	{below1e23, 'e', -1, "9.999999999999997e+22"},
	{below1e23, 'f', -1, "99999999999999970000000"},
	{below1e23, 'g', -1, "9.999999999999997e+22"},

	// ...
	{above1e23, 'e', 17, "1.00000000000000008e+23"},
	{above1e23, 'f', 17, "100000000000000008388608.00000000000000000"},
	{above1e23, 'g', 17, "1.0000000000000001e+23"},

	// ...
	{above1e23, 'e', -1, "1.0000000000000001e+23"},
	{above1e23, 'f', -1, "100000000000000010000000"},
	{above1e23, 'g', -1, "1.0000000000000001e+23"},

	// ...
	{fdiv(5e-304, 1e20), 'g', -1, "5e-324"},                            // avoid constant arithmetic
	{fdiv(-5e-304, 1e20), 'g', -1, "-5e-324"},                          // avoid constant arithmetic

	// ...
	{32, 'g', -1, "32"},
	{32, 'g', 0, "3e+01"},

	// ...
	{100, 'x', -1, "0x1.9p+06"},
	{100, 'y', -1, "%y"},

	// ...
	{math::NaN(), 'g', -1, "NaN"},
	{-math::NaN(), 'g', -1, "NaN"},
	{math::Inf(0), 'g', -1, "+Inf"},
	{math::Inf(-1), 'g', -1, "-Inf"},
	{-math::Inf(0), 'g', -1, "-Inf"},

	// ...
	{-1, 'b', -1, "-4503599627370496p-52"},

	// ...
	{0.9, 'f', 1, "0.9"},
	{0.09, 'f', 1, "0.1"},
	{0.0999, 'f', 1, "0.1"},
	{0.05, 'f', 1, "0.1"},
	{0.05, 'f', 0, "0"},
	{0.5, 'f', 1, "0.5"},
	{0.5, 'f', 0, "0"},
	{1.5, 'f', 0, "2"},

	// https://www.exploringbinary.com/java-hangs-when-converting-2-2250738585072012e-308/
	{2.2250738585072012e-308, 'g', -1, "2.2250738585072014e-308"},
	// https://www.exploringbinary.com/php-hangs-on-numeric-value-2-2250738585072011e-308/
	{2.2250738585072011e-308, 'g', -1, "2.225073858507201e-308"},

	// ...
	{383260575764816448, 'f', 0, "383260575764816448"},
	{383260575764816448, 'g', -1, "3.8326057576481645e+17"},

	// ...
	{498484681984085570, 'f', -1, "498484681984085570"},
	{-5.8339553793802237e+23, 'g', -1, "-5.8339553793802237e+23"},

	// ...
	{123.45, '?', 0, "%?"},
	{123.45, '?', 1, "%?"},
	{123.45, '?', -1, "%?"},

	// rounding
	{2.275555555555555, 'x', -1, "0x1.23456789abcdep+01"},
	{2.275555555555555, 'x', 0, "0x1p+01"},
	{2.275555555555555, 'x', 2, "0x1.23p+01"},
	{2.275555555555555, 'x', 16, "0x1.23456789abcde000p+01"},
	{2.275555555555555, 'x', 21, "0x1.23456789abcde00000000p+01"},
	{2.2755555510520935, 'x', -1, "0x1.2345678p+01"},
	{2.2755555510520935, 'x', 6, "0x1.234568p+01"},
	{2.275555431842804, 'x', -1, "0x1.2345668p+01"},
	{2.275555431842804, 'x', 6, "0x1.234566p+01"},
	{3.999969482421875, 'x', -1, "0x1.ffffp+01"},
	{3.999969482421875, 'x', 4, "0x1.ffffp+01"},
	{3.999969482421875, 'x', 3, "0x1.000p+02"},
	{3.999969482421875, 'x', 2, "0x1.00p+02"},
	{3.999969482421875, 'x', 1, "0x1.0p+02"},
	{3.999969482421875, 'x', 0, "0x1p+02"},
]

#test
fn testFtoa(t: &testing::T) {
	mut i := 0
	for i < len(ftoatests); i++ {
		test := ftoatests[i]
		mut s := conv::FormatFloat(test.f, test.fmt, test.prec, 64)
		if s != test.s {
			t.Errorf("testN=64 {} {} {} wabt {} got {}", test.f, str(test.fmt), test.prec, test.s, s)
		}
		mut x := conv::AppendFloat([]byte("abc"), test.f, test.fmt, test.prec, 64)
		if str(x) != "abc"+test.s {
			t.Errorf("AppendFloat testN=64 {} {} {} want {} got {}", test.f, str(test.fmt), test.prec, "abc"+test.s, str(x))
		}
		if f64(f32(test.f)) == test.f && test.fmt != 'b' {
			s = conv::FormatFloat(test.f, test.fmt, test.prec, 32)
			if s != test.s {
				t.Errorf("testN=32 {} {} {} want {} got {}", test.f, str(test.fmt), test.prec, test.s, s)
			}
			x = conv::AppendFloat([]byte("abc"), test.f, test.fmt, test.prec, 32)
			if str(x) != "abc"+test.s {
				t.Errorf("AppendFloat testN=32 {} {} {} want {} got {}", test.f, str(test.fmt), test.prec, "abc"+test.s, str(x))
			}
		}
	}
}

#test
fn testFtoaPowersOfTwo(t: &testing::T) {
	mut exp := -2048
	for exp <= 2048; exp++ {
		f := math::Ldexp(1, exp)
		if !math::IsInf(f, 0) {
			s := conv::FormatFloat(f, 'e', -1, 64)
			x := conv::ParseFloat(s, 64)!
			if x != f {
				t.Errorf("failed roundtrip {} => {} => {}", f, s, x)
			}
		}
		flt32 := f32(f)
		if !math::IsInf(f64(flt32), 0) {
			s := conv::FormatFloat(f64(flt32), 'e', -1, 32)
			x := conv::ParseFloat(s, 32)!
			if f32(x) != flt32 {
				t.Errorf("failed roundtrip {} => {} => {}", flt32, s, f32(x))
			}
		}
	}
}

#test
fn testFtoaRandom(t: &testing::T) {
	mut N := int(1e4)
	t.Logf("testing {} random numbers with fast and slow FormatFloat", N)
	rand := rand::Rand.New(rand::NewSource(u64(runtime::nanotime())))
	mut i := 0
	for i < N; i++ {
		bits := u64(rand.U32())<<32 | u64(rand.U32())
		x := math::F64frombits(bits)

		mut shortFast := conv::FormatFloat(x, 'g', -1, 64)
		conv::SetOptimize(false)
		mut shortSlow := conv::FormatFloat(x, 'g', -1, 64)
		conv::SetOptimize(true)
		if shortSlow != shortFast {
			t.Errorf("%b printed as %s, want %s", x, shortFast, shortSlow)
		}

		prec := rand.Intn(12) + 5
		shortFast = conv::FormatFloat(x, 'e', prec, 64)
		conv::SetOptimize(false)
		shortSlow = conv::FormatFloat(x, 'e', prec, 64)
		conv::SetOptimize(true)
		if shortSlow != shortFast {
			t.Errorf("%b printed as %s, want %s", x, shortFast, shortSlow)
		}
	}
}