// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/conv"
use "std/testing"

struct formatCmplxTest {
	c:       cmplx128
	fmt:     byte
	prec:    int
	bitSize: int
	out:     str
}

let testsFormatCmplx: []formatCmplxTest = [
	// a variety of signs
	{1 + 2i, 'g', -1, 128, "(1+2i)"},
	{3 - 4i, 'g', -1, 128, "(3-4i)"},
	{-5 + 6i, 'g', -1, 128, "(-5+6i)"},
	{-7 - 8i, 'g', -1, 128, "(-7-8i)"},

	// test that fmt and prec are working
	{3.14159 + 0.00123i, 'e', 3, 128, "(3.142e+00+1.230e-03i)"},
	{3.14159 + 0.00123i, 'f', 3, 128, "(3.142+0.001i)"},
	{3.14159 + 0.00123i, 'g', 3, 128, "(3.14+0.00123i)"},

	// ensure bitSize rounding is working
	{1.2345678901234567 + 9.876543210987654i, 'f', -1, 128, "(1.2345678901234567+9.876543210987654i)"},
	{1.2345678901234567 + 9.876543210987654i, 'f', -1, 64, "(1.2345679+9.876543i)"},

	// other cases are handled by FormatFloat tests
]

#test
fn testFormatCmplx(t: &testing::T) {
	for _, test in testsFormatCmplx {
		out := conv::FormatCmplx(test.c, test.fmt, test.prec, test.bitSize)
		if out != test.out {
			t.Errorf("FormatCmplx({}, {}, {}, {}) = {}; want {}",
				test.c, test.fmt, test.prec, test.bitSize, out, test.out)
		}
	}
}