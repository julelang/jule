// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/strconv/decimal.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Multiprecision decimal numbers.
// For floating-point formatting only; not general purpose.
// Only operations are assign and (binary) left/right shift.
// Can do binary floating point in multiprecision decimal precisely
// because 2 divides 10; cannot do decimal floating point
// in multiprecision binary precisely.

use "std/unsafe"

// Maximum shift that we can do in one pass without overflow.
// A uint has 32 or 64 bits, and we have to be able to accommodate 9<<k.
const (
	uintSize = 32 << (^uint(0) >> 63)
	maxShift = uintSize - 4
)

// Cheat sheet for left shift: table indexed by shift count giving
// number of new digits that will be introduced by that shift.
//
// For example, LEFTCHEATS[4] = {2, "625"}.  That means that
// if we are shifting by 4 (multiplying by 16), it will add 2 digits
// when the string prefix is "625" through "999", and one fewer digit
// if the string prefix is "000" through "624".
//
// Credit for this trick goes to Ken.
struct leftCheat {
	delta:  int // number of new digits
	cutoff: str // minus one digit if original < a.
}

let leftCheats: []leftCheat = [
	// Leading digits of 1/2^i = 5^i.
	// 5^23 is not an exact 64-bit floating point number,
	// so have to use bc for the math.
	// Go up to 60 to be large enough for 32bit and 64bit platforms.
	/*
		seq 60 | sed 's/^/5^/' | bc |
		awk 'BEGIN{ print "\t{ 0, \"\" }," }
		{
			log2 = log(2)/log(10)
			printf("\t{ %d, \"%s\" },\t// * %d\n",
				int(log2*NR+1), $0, 2**NR)
		}'
	*/
	{0, ""},
	{1, "5"},                                           // * 2
	{1, "25"},                                          // * 4
	{1, "125"},                                         // * 8
	{2, "625"},                                         // * 16
	{2, "3125"},                                        // * 32
	{2, "15625"},                                       // * 64
	{3, "78125"},                                       // * 128
	{3, "390625"},                                      // * 256
	{3, "1953125"},                                     // * 512
	{4, "9765625"},                                     // * 1024
	{4, "48828125"},                                    // * 2048
	{4, "244140625"},                                   // * 4096
	{4, "1220703125"},                                  // * 8192
	{5, "6103515625"},                                  // * 16384
	{5, "30517578125"},                                 // * 32768
	{5, "152587890625"},                                // * 65536
	{6, "762939453125"},                                // * 131072
	{6, "3814697265625"},                               // * 262144
	{6, "19073486328125"},                              // * 524288
	{7, "95367431640625"},                              // * 1048576
	{7, "476837158203125"},                             // * 2097152
	{7, "2384185791015625"},                            // * 4194304
	{7, "11920928955078125"},                           // * 8388608
	{8, "59604644775390625"},                           // * 16777216
	{8, "298023223876953125"},                          // * 33554432
	{8, "1490116119384765625"},                         // * 67108864
	{9, "7450580596923828125"},                         // * 134217728
	{9, "37252902984619140625"},                        // * 268435456
	{9, "186264514923095703125"},                       // * 536870912
	{10, "931322574615478515625"},                      // * 1073741824
	{10, "4656612873077392578125"},                     // * 2147483648
	{10, "23283064365386962890625"},                    // * 4294967296
	{10, "116415321826934814453125"},                   // * 8589934592
	{11, "582076609134674072265625"},                   // * 17179869184
	{11, "2910383045673370361328125"},                  // * 34359738368
	{11, "14551915228366851806640625"},                 // * 68719476736
	{12, "72759576141834259033203125"},                 // * 137438953472
	{12, "363797880709171295166015625"},                // * 274877906944
	{12, "1818989403545856475830078125"},               // * 549755813888
	{13, "9094947017729282379150390625"},               // * 1099511627776
	{13, "45474735088646411895751953125"},              // * 2199023255552
	{13, "227373675443232059478759765625"},             // * 4398046511104
	{13, "1136868377216160297393798828125"},            // * 8796093022208
	{14, "5684341886080801486968994140625"},            // * 17592186044416
	{14, "28421709430404007434844970703125"},           // * 35184372088832
	{14, "142108547152020037174224853515625"},          // * 70368744177664
	{15, "710542735760100185871124267578125"},          // * 140737488355328
	{15, "3552713678800500929355621337890625"},         // * 281474976710656
	{15, "17763568394002504646778106689453125"},        // * 562949953421312
	{16, "88817841970012523233890533447265625"},        // * 1125899906842624
	{16, "444089209850062616169452667236328125"},       // * 2251799813685248
	{16, "2220446049250313080847263336181640625"},      // * 4503599627370496
	{16, "11102230246251565404236316680908203125"},     // * 9007199254740992
	{17, "55511151231257827021181583404541015625"},     // * 18014398509481984
	{17, "277555756156289135105907917022705078125"},    // * 36028797018963968
	{17, "1387778780781445675529539585113525390625"},   // * 72057594037927936
	{18, "6938893903907228377647697925567626953125"},   // * 144115188075855872
	{18, "34694469519536141888238489627838134765625"},  // * 288230376151711744
	{18, "173472347597680709441192448139190673828125"}, // * 576460752303423488
	{19, "867361737988403547205962240695953369140625"}, // * 1152921504606846976
]

struct decimal {
	d:     [800]byte // digits, big-endian representation
	nd:    int       // number of digits used
	dp:    int       // decimal point
	neg:   bool      // negative flag
	trunc: bool      // discarded nonzero digits beyond d[:nd]
}

impl decimal {
	// Assign v.
	fn Assign(mut *self, mut v: u64) {
		let mut buf: [24]byte

		// Write reversed decimal in buf.
		mut n := 0
		for v > 0 {
			v1 := v / 10
			v -= 10 * v1
			buf[n] = byte(v + '0')
			n++
			v = v1
		}

		// Reverse again to produce forward decimal in a.d.
		self.nd = 0
		n--
		for n >= 0; n-- {
			self.d[self.nd] = buf[n]
			self.nd++
		}
		self.dp = self.nd
		trim(self)
	}

	// Binary shift left (k > 0) or right (k < 0).
	fn Shift(mut *self, mut k: int) {
		match {
		| self.nd == 0:
			// nothing to do: a == 0
		| k > 0:
			for k > maxShift {
				leftShift(self, maxShift)
				k -= maxShift
			}
			leftShift(self, uint(k))
		| k < 0:
			for k < -maxShift {
				rightShift(self, maxShift)
				k += maxShift
			}
			rightShift(self, uint(-k))
		}
	}

	// Round a down to nd digits (or fewer).
	fn RoundDown(mut *self, nd: int) {
		if nd < 0 || nd >= self.nd {
			ret
		}
		self.nd = nd
		trim(self)
	}

	// Round a up to nd digits (or fewer).
	fn RoundUp(mut *self, nd: int) {
		if nd < 0 || nd >= self.nd {
			ret
		}

		// round up
		mut i := nd - 1
		for i >= 0; i-- {
			c := self.d[i]
			if c < '9' { // can stop after this digit
				self.d[i]++
				self.nd = i + 1
				ret
			}
		}

		// Number is all 9s.
		// Change to single 1 with adjusted decimal point.
		self.d[0] = '1'
		self.nd = 1
		self.dp++
	}

	// Round a to nd digits (or fewer).
	// If nd is zero, it means we're rounding
	// just to the left of the digits, as in
	// 0.09 -> 0.1.
	fn Round(mut *self, nd: int) {
		if nd < 0 || nd >= self.nd {
			ret
		}
		if shouldRoundUp(self, nd) {
			self.RoundUp(nd)
		} else {
			self.RoundDown(nd)
		}
	}

	// Extract integer part, rounded appropriately.
	// No guarantees about overflow.
	fn RoundedInteger(mut *self): u64 {
		if self.dp > 20 {
			ret 0xFFFFFFFFFFFFFFFF
		}
		mut i := 0
		mut n := u64(0)
		for i < self.dp && i < self.nd; i++ {
			n = n*10 + u64(self.d[i]-'0')
		}
		for i < self.dp; i++ {
			n *= 10
		}
		if shouldRoundUp(self, self.dp) {
			n++
		}
		ret n
	}

	fn Str(*self): str {
		mut n := 10 + self.nd
		if self.dp > 0 {
			n += self.dp
		}
		if self.dp < 0 {
			n += -self.dp
		}

		mut buf := make([]byte, n)
		mut w := 0
		match {
		| self.nd == 0:
			ret "0"
		| self.dp <= 0:
			// zeros fill space between decimal point and digits
			buf[w] = '0'
			w++
			buf[w] = '.'
			w++
			w += digitZero(buf[w : w+-self.dp])
			w += copy(buf[w:], self.d[0:self.nd])
		| self.dp < self.nd:
			// decimal point in middle of digits
			w += copy(buf[w:], self.d[0:self.dp])
			buf[w] = '.'
			w++
			w += copy(buf[w:], self.d[self.dp:self.nd])
		|:
			// zeros fill space between digits and decimal point
			w += copy(buf[w:], self.d[0:self.nd])
			w += digitZero(buf[w : w+self.dp-self.nd])
		}
		ret unsafe::StrFromBytes(buf[0:w])
	}
}

fn digitZero(mut dst: []byte): int {
	for i in dst {
		dst[i] = '0'
	}
	ret len(dst)
}

// Trailing zeros from number.
// (They are meaningless; the decimal point is tracked
// independent of the number of digits.)
fn trim(mut &a: *decimal) {
	for a.nd > 0 && a.d[a.nd-1] == '0' {
		a.nd--
	}
	if a.nd == 0 {
		a.dp = 0
	}
}

// Binary shift right (/ 2) by k bits.  k <= maxShift to avoid overflow.
fn rightShift(mut &a: *decimal, k: uint) {
	mut r := 0 // read pointer
	mut w := 0 // write pointer

	// Pick up enough leading digits to cover first shift.
	mut n := uint(0)
	for n>>k == 0; r++ {
		if r >= a.nd {
			if n == 0 {
				// a == 0; shouldn't get here, but handle anyway.
				a.nd = 0
				ret
			}
			for n>>k == 0 {
				n = n * 10
				r++
			}
			break
		}
		c := uint(a.d[r])
		n = n*10 + c - '0'
	}
	a.dp -= r - 1

	mask := uint(1<<k) - 1

	// Pick up a digit, put down a digit.
	for r < a.nd; r++ {
		c := uint(a.d[r])
		dig := n >> k
		n &= mask
		a.d[w] = byte(dig + '0')
		w++
		n = n*10 + c - '0'
	}

	// Put down extra digits.
	for n > 0 {
		dig := n >> k
		n &= mask
		if w < len(a.d) {
			a.d[w] = byte(dig + '0')
			w++
		} else if dig > 0 {
			a.trunc = true
		}
		n = n * 10
	}

	a.nd = w
	trim(a)
}

// Is the leading prefix of b lexicographically less than s?
fn prefixIsLessThan(b: [800]byte, end: int, s: str): bool {
	mut i := 0
	for i < len(s); i++ {
		if i >= end {
			ret true
		}
		if b[i] != s[i] {
			ret b[i] < s[i]
		}
	}
	ret false
}

// Binary shift left (* 2) by k bits.  k <= maxShift to avoid overflow.
fn leftShift(mut &a: *decimal, k: uint) {
	mut delta := leftCheats[k].delta
	if prefixIsLessThan(a.d, a.nd, unsafe { *(&leftCheats[k].cutoff) }) {
		delta--
	}

	mut r := a.nd         // read index
	mut w := a.nd + delta // write index

	// Pick up a digit, put down a digit.
	mut n := uint(0)
	r--
	for r >= 0; r-- {
		n += (uint(a.d[r]) - '0') << k
		quo := n / 10
		rem := n - 10*quo
		w--
		if w < len(a.d) {
			a.d[w] = byte(rem + '0')
		} else if rem != 0 {
			a.trunc = true
		}
		n = quo
	}

	// Put down extra digits.
	for n > 0 {
		quo := n / 10
		rem := n - 10*quo
		w--
		if w < len(a.d) {
			a.d[w] = byte(rem + '0')
		} else if rem != 0 {
			a.trunc = true
		}
		n = quo
	}

	a.nd += delta
	if a.nd >= len(a.d) {
		a.nd = len(a.d)
	}
	a.dp += delta
	trim(a)
}

// If we chop a at nd digits, should we round up?
fn shouldRoundUp(&a: *decimal, nd: int): bool {
	if nd < 0 || nd >= a.nd {
		ret false
	}
	if a.d[nd] == '5' && nd+1 == a.nd { // exactly halfway - round to even
		// if we truncated, a little higher than what's recorded - always round up
		if a.trunc {
			ret true
		}
		ret nd > 0 && (a.d[nd-1]-'0')%2 != 0
	}
	// not halfway - digit tells all
	ret a.d[nd] >= '5'
}