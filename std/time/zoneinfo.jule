// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/sync"

// Maps time instants to the zone in use at that time.
// Typically, the Location represents the collection of time offsets
// in use in a geographical area. For many Locations the time offset varies
// depending on whether daylight savings time is in use at the time instant.
//
// Location is used to provide a time zone in a printed Time value and for
// calculations involving intervals that may cross daylight savings time
// boundaries.
struct Location {
	name: str
	zone: []zone
	tx:   []zoneTrans

	// The tzdata information can be followed by a string that describes
	// how to handle DST transitions not recorded in zoneTrans.
	// The format is the TZ environment variable without a colon; see
	// https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html.
	// Example string, for America/Los_Angeles: PST8PDT,M3.2.0,M11.1.0
	extend: str

	// Most lookups will be for the current time.
	// To avoid the binary search through tx, keep a
	// static one-element cache that gives the correct
	// zone for the time when the Location was created.
	// if cacheStart <= t < cacheEnd,
	// lookup can return cacheZone.
	// The units for cacheStart and cacheEnd are seconds
	// since January 1, 1970 UTC, to match the argument
	// to lookup.
	cacheStart: i64
	cacheEnd:   i64
	cacheZone:  &zone
}

impl Location {
	// Returns a descriptive name for the time zone information.
	fn Str(self): str {
		ret unsafe { (&Location)(&self).get().name }
	}

	fn get(mut &self): &Location {
		static localOnce = sync::Once.New()
		if self == nil {
			ret unsafe { *(&UTC) }
		}
		if uintptr(self) == uintptr(&localLoc) {
			localOnce.Do(initLocal)
		}
		ret self
	}

	// Returns information about the time zone in use at an
	// instant in time expressed as seconds since January 1, 1970 00:00:00 UTC.
	//
	// The returned information gives the name of the zone (such as "CET"),
	// the start and end times bracketing sec when that zone is in effect,
	// the offset in seconds east of UTC (such as -5*60*60), and whether
	// the daylight savings is being observed at that time.
	fn lookup(mut &self, sec: i64): (name: str, offset: int, start: i64, end: i64, isDST: bool) {
		mut l := self.get()

		if len(l.zone) == 0 {
			name = "UTC"
			offset = 0
			start = alpha
			end = omega
			isDST = false
			ret
		}

		mut zone := l.cacheZone
		if zone != nil && l.cacheStart <= sec && sec < l.cacheEnd {
			name = zone.name
			offset = zone.offset
			start = l.cacheStart
			end = l.cacheEnd
			isDST = zone.isDST
			ret
		}

		if len(l.tx) == 0 || sec < l.tx[0].when {
			zone = unsafe { (&zone)(&l.zone[l.lookupFirstZone()]) }
			name = zone.name
			offset = zone.offset
			start = alpha
			if len(l.tx) > 0 {
				end = l.tx[0].when
			} else {
				end = omega
			}
			isDST = zone.isDST
			ret
		}

		// Binary search for entry with largest time <= sec.
		tx := l.tx
		end = omega
		mut lo := 0
		mut hi := len(tx)
		for hi-lo > 1 {
			m := int(uint(lo+hi) >> 1)
			lim := tx[m].when
			if sec < lim {
				end = lim
				hi = m
			} else {
				lo = m
			}
		}
		zone = unsafe { (&zone)(&l.zone[tx[lo].index]) }
		name = zone.name
		offset = zone.offset
		start = tx[lo].when
		// end = maintained during the search
		isDST = zone.isDST

		// If we're at the end of the known zone transitions,
		// try the extend string.
		if lo == len(tx)-1 && l.extend != "" {
			ename, eoffset, estart, eend, eisDST, ok := tzset(l.extend, start, sec)
			if ok {
				ret ename, eoffset, estart, eend, eisDST
			}
		}

		ret
	}

	// Returns information about the time zone with
	// the given name (such as "EST") at the given pseudo-Unix time
	// (what the given time of day would be in UTC).
	fn lookupName(mut &self, name: str, unix: i64): (offset: int, ok: bool) {
		mut l := self.get()

		// First try for a zone with the right name that was actually
		// in effect at the given time. (In Sydney, Australia, both standard
		// and daylight-savings time are abbreviated "EST". Using the
		// offset helps us pick the right one for the given time.
		// It's not perfect: during the backward transition we might pick
		// either one.)
		for i in l.zone {
			zone := unsafe { (&zone)(&l.zone[i]) }
			if zone.name == name {
				mut nam := ""
				nam, offset, _, _, _ = l.lookup(unix - i64(zone.offset))
				if nam == zone.name {
					ret offset, true
				}
			}
		}

		// Otherwise fall back to an ordinary name match.
		for i in self.zone {
			zone := unsafe { (&zone)(&l.zone[i]) }
			if zone.name == name {
				ret zone.offset, true
			}
		}

		// Otherwise, give up.
		ret
	}

	// Returns the index of the time zone to use for times
	// before the first transition time, or when there are no transition
	// times.
	//
	// The reference implementation in localtime.c from
	// https://www.iana.org/time-zones/repository/releases/tzcode2013g.tar.gz
	// implements the following algorithm for these cases:
	//  1. If the first zone is unused by the transitions, use it.
	//  2. Otherwise, if there are transition times, and the first
	//     transition is to a zone in daylight time, find the first
	//     non-daylight-time zone before and closest to the first transition
	//     zone.
	//  3. Otherwise, use the first zone that is not daylight time, if
	//     there is one.
	//  4. Otherwise, use the first zone.
	fn lookupFirstZone(self): int {
		// Case 1.
		if !self.firstZoneUsed() {
			ret 0
		}

		// Case 2.
		if len(self.tx) > 0 && self.zone[self.tx[0].index].isDST {
			mut zi := int(self.tx[0].index) - 1
			for zi >= 0; zi-- {
				if !self.zone[zi].isDST {
					ret zi
				}
			}
		}

		// Case 3.
		for zi in self.zone {
			if !self.zone[zi].isDST {
				ret zi
			}
		}

		// Case 4.
		ret 0
	}

	// Reports whether the first zone is used by some transition.
	fn firstZoneUsed(self): bool {
		for _, tx in self.tx {
			if tx.index == 0 {
				ret true
			}
		}
		ret false
	}
}

// Represents a single time zone such as CET.
struct zone {
	name:   str  // abbreviated name, "CET"
	offset: int  // seconds east of UTC
	isDST:  bool // is this zone Daylight Savings Time?
}

// Represents a single time zone transition.
struct zoneTrans {
	when:  i64 // transition time, in seconds since 1970 GMT
	index: u8  // the index of the zone that goes into effect at that time
	isstd: bool
	isutc: bool // ignored - no idea what these mean
}

// The kinds of rules that can be seen in a tzset string.
enum ruleKind {
	Julian,
	DOY,
	MonthWeekDay,
}

// Rule read from a tzset string.
struct rule {
	kind: ruleKind
	day:  int
	week: int
	mon:  int
	time: int // transition time
}

// Represents Universal Coordinated Time (UTC).
static UTC = unsafe { (&Location)(&utcLoc) }

// Represents the system's local time zone.
// On Unix systems, Local consults the TZ environment
// variable to find the time zone to use. No TZ means
// use the system default /etc/localtime.
// TZ="" means use UTC.
// TZ="foo" means use file foo in the system timezone directory.
static Local = unsafe { (&Location)(&localLoc) }

static mut utcLoc = Location{name: "UTC"}
static mut localLoc = Location{}

// Returns the timezone name at the start of the tzset string s,
// and the remainder of s, and reports whether the parsing is OK.
fn tzsetName(s: str): (str, str, bool) {
	if len(s) == 0 {
		ret "", "", false
	}
	if s[0] != '<' {
		for i, r in s {
			match r {
			| '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ',' | '-' | '+':
				if i < 3 {
					ret "", "", false
				}
				ret s[:i], s[i:], true
			}
		}
		if len(s) < 3 {
			ret "", "", false
		}
		ret s, "", true
	} else {
		for i, r in s {
			if r == '>' {
				ret s[1:i], s[i+1:], true
			}
		}
		ret "", "", false
	}
}

// Returns the timezone offset at the start of the tzset string s,
// and the remainder of s, and reports whether the parsing is OK.
// The timezone offset is returned as a number of seconds.
fn tzsetOffset(mut s: str): (offset: int, rest: str, ok: bool) {
	if len(s) == 0 {
		ret 0, "", false
	}
	mut neg := false
	if s[0] == '+' {
		s = s[1:]
	} else if s[0] == '-' {
		s = s[1:]
		neg = true
	}

	// The tzdata code permits values up to 24 * 7 here,
	// although POSIX does not.
	let mut hours: int
	hours, s, ok = tzsetNum(s, 0, 24*7)
	if !ok {
		ret 0, "", false
	}
	mut off := hours * secPerHour
	if len(s) == 0 || s[0] != ':' {
		if neg {
			off = -off
		}
		ret off, s, true
	}

	let mut mins: int
	mins, s, ok = tzsetNum(s[1:], 0, 59)
	if !ok {
		ret 0, "", false
	}
	off += mins * secPerMinute
	if len(s) == 0 || s[0] != ':' {
		if neg {
			off = -off
		}
		ret off, s, true
	}

	let mut secs: int
	secs, s, ok = tzsetNum(s[1:], 0, 59)
	if !ok {
		ret 0, "", false
	}
	off += secs

	if neg {
		off = -off
	}
	ret off, s, true
}

// Parses a number from a tzset string.
// It returns the number, and the remainder of the string, and reports success.
// The number must be between min and max.
fn tzsetNum(s: str, min: int, max: int): (num: int, rest: str, ok: bool) {
	if len(s) == 0 {
		ret 0, "", false
	}
	num = 0
	for i, r in s {
		if r < '0' || r > '9' {
			if i == 0 || num < min {
				ret 0, "", false
			}
			ret num, s[i:], true
		}
		num *= 10
		num += int(r) - '0'
		if num > max {
			ret 0, "", false
		}
	}
	if num < min {
		ret 0, "", false
	}
	ret num, "", true
}

// Takes a year, a rule, and a timezone offset,
// and returns the number of seconds since the start of the year
// that the rule takes effect.
fn tzruleTime(year: int, r: rule, off: int): int {
	let mut s: int
	match r.kind {
	| ruleKind.Julian:
		s = (r.day - 1) * secPerDay
		if isLeap(year) && r.day >= 60 {
			s += secPerDay
		}
	| ruleKind.DOY:
		s = r.day * secPerDay
	| ruleKind.MonthWeekDay:
		// Zeller's Congruence.
		m1 := (r.mon+9)%12 + 1
		mut yy0 := year
		if r.mon <= 2 {
			yy0--
		}
		yy1 := yy0 / 100
		yy2 := yy0 % 100
		mut dow := ((26*m1-2)/10 + 1 + yy2 + yy2/4 + yy1/4 - 2*yy1) % 7
		if dow < 0 {
			dow += 7
		}
		// Now dow is the day-of-week of the first day of r.mon.
		// Get the day-of-month of the first "dow" day.
		mut d := r.day - dow
		if d < 0 {
			d += 7
		}
		mut i := 1
		for i < r.week; i++ {
			if d+7 >= daysIn(Month(r.mon), year) {
				break
			}
			d += 7
		}
		d += int(daysBefore(Month(r.mon)))
		if isLeap(year) && r.mon > 2 {
			d++
		}
		s = d * secPerDay
	}

	ret s + r.time - off
}

// Parses a rule from a tzset string.
// It returns the rule, and the remainder of the string, and reports success.
fn tzsetRule(mut s: str): (rule, str, bool) {
	let mut r: rule
	if len(s) == 0 {
		ret rule{}, "", false
	}
	mut ok := false
	if s[0] == 'J' {
		let mut jday: int
		jday, s, ok = tzsetNum(s[1:], 1, 365)
		if !ok {
			ret rule{}, "", false
		}
		r.kind = ruleKind.Julian
		r.day = jday
	} else if s[0] == 'M' {
		let mut mon: int
		mon, s, ok = tzsetNum(s[1:], 1, 12)
		if !ok || len(s) == 0 || s[0] != '.' {
			ret rule{}, "", false
		}
		let mut week: int
		week, s, ok = tzsetNum(s[1:], 1, 5)
		if !ok || len(s) == 0 || s[0] != '.' {
			ret rule{}, "", false
		}
		let mut day: int
		day, s, ok = tzsetNum(s[1:], 0, 6)
		if !ok {
			ret rule{}, "", false
		}
		r.kind = ruleKind.MonthWeekDay
		r.day = day
		r.week = week
		r.mon = mon
	} else {
		let mut day: int
		day, s, ok = tzsetNum(s, 0, 365)
		if !ok {
			ret rule{}, "", false
		}
		r.kind = ruleKind.DOY
		r.day = day
	}

	if len(s) == 0 || s[0] != '/' {
		r.time = 2 * secPerHour // 2am is the default
		ret r, s, true
	}

	offset, s, ok := tzsetOffset(s[1:])
	if !ok {
		ret rule{}, "", false
	}
	r.time = offset

	ret r, s, true
}

// alpha and omega are the beginning and end of time for zone transitions.
const (
	alpha = -1 << 63  // Min value of i64
	omega = 1<<63 - 1 // Max value of i64
)

// Takes a timezone string like the one found in the TZ environment
// variable, the time of the last time zone transition expressed as seconds
// since January 1, 1970 00:00:00 UTC, and a time expressed the same way.
// We call this a tzset string since in C the function tzset reads TZ.
// The return values are as for lookup, plus ok which reports whether the
// parse succeeded.
fn tzset(mut s: str, lastTxSec: i64, sec: i64): (name: str, offset: int, start: i64, end: i64, isDST: bool, ok: bool) {
	let mut stdName: str
	let mut dstName: str
	let mut stdOffset: int
	let mut dstOffset: int

	stdName, s, ok = tzsetName(s)
	if ok {
		stdOffset, s, ok = tzsetOffset(s)
	}
	if !ok {
		ret "", 0, 0, 0, false, false
	}

	// The numbers in the tzset string are added to local time to get UTC,
	// but our offsets are added to UTC to get local time,
	// so we negate the number we see here.
	stdOffset = -stdOffset

	if len(s) == 0 || s[0] == ',' {
		// No daylight savings time.
		ret stdName, stdOffset, lastTxSec, omega, false, true
	}

	dstName, s, ok = tzsetName(s)
	if ok {
		if len(s) == 0 || s[0] == ',' {
			dstOffset = stdOffset + secPerHour
		} else {
			dstOffset, s, ok = tzsetOffset(s)
			dstOffset = -dstOffset // as with stdOffset, above
		}
	}
	if !ok {
		ret "", 0, 0, 0, false, false
	}

	if len(s) == 0 {
		// Default DST rules per tzcode.
		s = ",M3.2.0,M11.1.0"
	}
	// The TZ definition does not mention ';' here but tzcode accepts it.
	if s[0] != ',' && s[0] != ';' {
		ret "", 0, 0, 0, false, false
	}
	s = s[1:]

	let mut startRule: rule
	let mut endRule: rule
	startRule, s, ok = tzsetRule(s)
	if !ok || len(s) == 0 || s[0] != ',' {
		ret "", 0, 0, 0, false, false
	}
	s = s[1:]
	endRule, s, ok = tzsetRule(s)
	if !ok || len(s) > 0 {
		ret "", 0, 0, 0, false, false
	}

	// Compute start of year in seconds since Unix epoch,
	// and seconds since then to get to sec.
	year, yday := absSeconds(sec + unixToAbsolute).days().yearYday()
	ysec := i64((yday-1)*secPerDay) + sec%secPerDay
	ystart := sec - ysec

	mut startSec := i64(tzruleTime(year, startRule, stdOffset))
	mut endSec := i64(tzruleTime(year, endRule, dstOffset))
	mut dstIsDST, mut stdIsDST := true, false
	// Note: this is a flipping of "DST" and "STD" while retaining the labels
	// This happens in southern hemispheres. The labelling here thus is a little
	// inconsistent with the goal.
	if endSec < startSec {
		startSec, endSec = endSec, startSec
		stdName, dstName = dstName, stdName
		stdOffset, dstOffset = dstOffset, stdOffset
		stdIsDST, dstIsDST = dstIsDST, stdIsDST
	}

	// The start and end values that we return are accurate
	// close to a daylight savings transition, but are otherwise
	// just the start and end of the year. That suffices for
	// the only caller that cares, which is Date.
	if ysec < startSec {
		ret stdName, stdOffset, ystart, startSec + ystart, stdIsDST, true
	} else if ysec >= endSec {
		ret stdName, stdOffset, endSec + ystart, ystart + 365*secPerDay, stdIsDST, true
	} else {
		ret dstName, dstOffset, startSec + ystart, endSec + ystart, dstIsDST, true
	}
}

static mut unnamedFixedZones = ([]&Location)(nil)
static mut unnamedFixedZonesOnce = sync::Once.New()

// Returns a [Location] that always uses
// the given zone name and offset (seconds east of UTC).
fn FixedZone(name: str, offset: int): &Location {
	// Most calls to FixedZone have an unnamed zone with an offset by the hour.
	// Optimize for that case by returning the same *Location for a given hour.
	const (
		hoursBeforeUTC = 12
		hoursAfterUTC = 14
	)
	hour := offset / 60 / 60
	if name == "" && -hoursBeforeUTC <= hour && hour <= +hoursAfterUTC && hour*60*60 == offset {
		unnamedFixedZonesOnce.Do(fn() {
			unnamedFixedZones = make([]&Location, hoursBeforeUTC+1+hoursAfterUTC)
			mut hr := -hoursBeforeUTC
			for hr <= +hoursAfterUTC; hr++ {
				unnamedFixedZones[hr+hoursBeforeUTC] = fixedZone("", hr*60*60)
			}
		})
		ret unnamedFixedZones[hour+hoursBeforeUTC]
	}
	ret fixedZone(name, offset)
}

fn fixedZone(name: str, offset: int): &Location {
	mut l := &Location{
		name: name,
		zone: [{name, offset, false}],
		tx: [{alpha, 0, false, false}],
		cacheStart: alpha,
		cacheEnd: omega,
	}
	l.cacheZone = unsafe { (&zone)(&l.zone[0]) }
	ret l
}