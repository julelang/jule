// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// RFC 3339 is the most commonly used format.
// It is implicitly used by the Time.(Encode|Decode)(Text) methods.

use "std/errors"
use "std/unsafe"

fn appendFormatRFC3339(&t: *Time, mut b: []byte, nanos: bool): []byte {
	_, offset, abs := t.locabs()

	// Format date.
	year, month, day := abs.days().date()
	b = appendInt(b, year, 4)
	b = append(b, '-')
	b = appendInt(b, int(month), 2)
	b = append(b, '-')
	b = appendInt(b, day, 2)
	b = append(b, 'T')

	// Format time.
	hour, min, sec := abs.clock()
	b = appendInt(b, hour, 2)
	b = append(b, ':')
	b = appendInt(b, min, 2)
	b = append(b, ':')
	b = appendInt(b, sec, 2)

	if nanos {
		std := stdFracSecond(stdFracSecond9, 9, '.')
		b = appendNano(b, t.Nanosecond(), std)
	}

	if offset == 0 {
		ret append(b, 'Z')
	}

	// Format zone.
	mut zone := offset / 60 // convert to minutes
	if zone < 0 {
		b = append(b, '-')
		zone = -zone
	} else {
		b = append(b, '+')
	}
	b = appendInt(b, zone/60, 2)
	b = append(b, ':')
	b = appendInt(b, zone%60, 2)
	ret b
}

fn appendStrictRFC3339(&t: *Time, mut b: []byte)!: []byte {
	n0 := len(b)
	b = appendFormatRFC3339(t, b, true)

	// Not all valid Jule timestamps can be serialized as valid RFC 3339.
	// Explicitly check for these edge cases.
	num2 := fn(b: []byte): byte { ret 10*(b[0]-'0') + (b[1] - '0') }
	match {
	| b[n0+len("9999")] != '-': // year must be exactly 4 digits wide
		error(errors::New("year outsize of range [0,9999]"))
	| b[len(b)-1] != 'Z':
		c := b[len(b)-len("Z07:00")]
		if ('0' <= c && c <= '9') || num2(b[len(b)-len("07:00"):]) >= 24 {
			error(errors::New("timezone hour outside of range [0,23]"))
		}
	}
	ret b
}

fn parseRFC3339[bytes: []byte | str](s: bytes, mut local: &Location): (Time, bool) {
	// parseUint parses s as an unsigned decimal integer and
	// verifies that it is within some range.
	// If it is invalid or out-of-range,
	// it sets ok to false and returns the min value.
	mut ok := true
	parseUint := fn(s: bytes, min: int, max: int): (x: int) {
		for _, c in []byte(s) {
			if c < '0' || '9' < c {
				ok = false
				ret min
			}
			x = x*10 + int(c) - '0'
		}
		if x < min || max < x {
			ok = false
			ret min
		}
		ret x
	}

	// Parse the date and time.
	if len(s) < len("2006-01-02T15:04:05") {
		ret Time{}, false
	}
	year := parseUint(s[0:4], 0, 9999)                       // e.g., 2006
	month := parseUint(s[5:7], 1, 12)                        // e.g., 01
	day := parseUint(s[8:10], 1, daysIn(Month(month), year)) // e.g., 02
	hour := parseUint(s[11:13], 0, 23)                       // e.g., 15
	min := parseUint(s[14:16], 0, 59)                        // e.g., 04
	sec := parseUint(s[17:19], 0, 59)                        // e.g., 05
	if !ok || !(s[4] == '-' && s[7] == '-' && s[10] == 'T' && s[13] == ':' && s[16] == ':') {
		ret Time{}, false
	}
	unsafe { *(&s) = (*(&s))[19:] } // Break immutability for slicing.

	// Parse the fractional second.
	mut nsec := 0
	if len(s) >= 2 && s[0] == '.' && isDigit(s, 1) {
		mut n := 2
		for n < len(s) && isDigit(s, n); n++ {
		}
		nsec, _ = parseNanoseconds(s, n) else { use 0, "" }
		unsafe { *(&s) = (*(&s))[n:] } // Break immutability for slicing.
	}

	// Parse the time zone.
	mut t := Date(year, Month(month), day, hour, min, sec, nsec, UTC)
	if len(s) != 1 || s[0] != 'Z' {
		if len(s) != len("-07:00") {
			ret Time{}, false
		}
		hr := parseUint(s[1:3], 0, 23) // e.g., 07
		mm := parseUint(s[4:6], 0, 59) // e.g., 00
		if !ok || !((s[0] == '-' || s[0] == '+') && s[3] == ':') {
			ret Time{}, false
		}
		mut zoneOffset := (hr*60 + mm) * 60
		if s[0] == '-' {
			zoneOffset *= -1
		}
		t.addSec(-i64(zoneOffset))

		// Use local zone with the given offset if possible.
		_, offset, _, _, _ := local.lookup(t.sec)
		if offset == zoneOffset {
			t.setLoc(local)
		} else {
			mut l := FixedZone("", zoneOffset)
			t.setLoc(l)
		}
	}
	ret t, true
}

fn parseStrictRFC3339(b: []byte)!: Time {
	mut t, ok := parseRFC3339(b, unsafe { *(&Local) })
	if !ok {
		t = Parse(RFC3339, unsafe::BytesStr(b))?
		// The parse template syntax cannot correctly validate RFC 3339.
		// Explicitly check for cases that Parse is unable to validate for.
		num2 := fn(b: []byte): byte { ret 10*(b[0]-'0') + (b[1] - '0') }
		match {
		| true:
			ret t
		| b[len("2006-01-02T")+1] == ':': // hour must be two digits
			error(&ParseError{RFC3339, str(b), "15", str(b[len("2006-01-02T"):][:1]), ""})
		| b[len("2006-01-02T15:04:05")] == ',': // sub-second separator must be a period
			error(&ParseError{RFC3339, str(b), ".", ",", ""})
		| b[len(b)-1] != 'Z':
			match {
			| num2(b[len(b)-len("07:00"):]) >= 24: // timezone hour must be in range
				error(&ParseError{RFC3339, str(b), "Z07:00", str(b[len(b)-len("Z07:00"):]), ": timezone hour out of range"})
			| num2(b[len(b)-len("00"):]) >= 60: // timezone minute must be in range
				error(&ParseError{RFC3339, str(b), "Z07:00", str(b[len(b)-len("Z07:00"):]), ": timezone minute out of range"})
			}
		|:
			// unknown error; should not occur
			error(&ParseError{RFC3339, str(b), RFC3339, str(b), ""})
		}
	}
	ret t
}