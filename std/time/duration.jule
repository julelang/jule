// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/runtime"
use "std/unsafe"

// Stops execution of the caller thread by stated duration.
// This function only affects execution of caller thread, not process.
// If duration is <=0, function will return immediately.
// It guarantees sleeping at least for the stated duration.
fn Sleep(mut dur: Duration) {
	if dur >= 0 {
		runtime::sleep(runtime::sleepDuration(dur))
	}
}

// A Duration represents the elapsed time between two instants
// as an i64 nanosecond count. The representation limits the
// largest representable duration to approximately 290 years.
type Duration: runtime::sleepDuration

const durationMin = Duration(runtime::sleepDuration.Min)
const durationMax = Duration(runtime::sleepDuration.Max)

// A nanosecond.
const Nanosecond = Duration(runtime::_Nanosecond)

// Nanoseconds in microsecond.
// How many nanoseconds are in microsecond.
const Microsecond = Duration(runtime::_Microsecond)

// Nanoseconds in millisecond.
// How many nanoseconds are in millisecond.
const Millisecond = Duration(runtime::_Millisecond)

// Nanoseconds in second.
// How many nanoseconds are in second.
const Second = Duration(runtime::_Second)

// Nanoseconds in minute.
// How many nanoseconds are in minute.
const Minute = Duration(runtime::_Minute)

// Nanoseconds in hour.
// How many nanoseconds are in hour.
const Hour = Duration(runtime::_Hour)

impl Duration {
	// Returns duration as nanoseconds.
	fn Nanoseconds(*self): Duration {
		ret *self
	}

	// Returns duration as microseconds.
	fn Microseconds(*self): Duration {
		ret *self / Microsecond
	}

	// Returns duration as milliseconds.
	fn Milliseconds(*self): Duration {
		ret *self / Millisecond
	}

	// Returns duration as floating-point seconds.
	fn Seconds(*self): f64 {
		sec := *self / Second
		nsec := *self % Second
		ret f64(sec) + f64(nsec)/1e9
	}

	// Returns duration as floating-point minutes.
	fn Minutes(*self): f64 {
		min := *self / Minute
		nsec := *self % Minute
		ret f64(min) + f64(nsec)/(60*1e9)
	}

	// Returns duration as floating-point hours.
	fn Hours(*self): f64 {
		hour := *self / Hour
		nsec := *self % Hour
		ret f64(hour) + f64(nsec)/(60*60*1e9)
	}

	// Returns absolute value of duration.
	fn Abs(*self): Duration {
		match {
		| *self >= 0:
			ret *self
		| *self == durationMin:
			ret durationMax
		|:
			ret -(*self)
		}
	}

	// Returns a string representing the duration in the form "72h3m0.5s".
	// Leading zero units are omitted. As a special case, durations less than one
	// second format use a smaller unit (milli-, micro-, or nanoseconds) to ensure
	// that the leading digit is non-zero. The zero duration formats as 0s.
	fn Str(*self): str {
		mut buf := make([]byte, 1<<5)
		n := formatDuration(*self, buf)
		buf = buf[n:]
		ret unsafe::StrFromBytes(buf)
	}
}

// Formats the representation of d into the end of buf and
// returns the offset of the first character.
fn formatDuration(d: Duration, mut buf: []byte): int {
	// Largest time is 2540400h10m10.000000000s
	mut w := len(buf)

	mut u := u64(d)
	neg := d < 0
	if neg {
		u = -u
	}

	if u < u64(Second) {
		// Special case: if duration is smaller than a second,
		// use smaller units, like 1.2ms
		mut prec := 0
		w--
		buf[w] = 's'
		w--
		match {
		| u == 0:
			buf[w] = '0'
			ret w
		| u < u64(Microsecond):
			// print nanoseconds
			prec = 0
			buf[w] = 'n'
		| u < u64(Millisecond):
			// print microseconds
			prec = 3
			// U+00B5 'Âµ' micro sign == 0xC2 0xB5
			w-- // Need room for two bytes.
			buf[w] = 194
			buf[w+1] = 181
		|:
			// print milliseconds
			prec = 6
			buf[w] = 'm'
		}
		w, u = fmtFrac(buf[:w], u, prec)
		w = formatInt(buf[:w], u)
	} else {
		w--
		buf[w] = 's'

		w, u = fmtFrac(buf[:w], u, 9)

		// u is now integer seconds
		w = formatInt(buf[:w], u%60)
		u /= 60

		// u is now integer minutes
		if u > 0 {
			w--
			buf[w] = 'm'
			w = formatInt(buf[:w], u%60)
			u /= 60

			// u is now integer hours
			// Stop at hours because days can be different lengths.
			if u > 0 {
				w--
				buf[w] = 'h'
				w = formatInt(buf[:w], u)
			}
		}
	}

	if neg {
		w--
		buf[w] = '-'
	}

	ret w
}

// Formats the fraction of v/10**prec (e.g., ".12345") into the
// tail of buf, omitting trailing zeros. It omits the decimal
// point too when the fraction is 0. It returns the index where the
// output bytes begin and the value v/10**prec.
fn fmtFrac(mut buf: []byte, mut v: u64, prec: int): (nw: int, nv: u64) {
	// Omit trailing zeros up to and including decimal point.
	mut w := len(buf)
	mut print := false
	mut i := 0
	for i < prec; i++ {
		digit := v % 10
		print = print || digit != 0
		if print {
			w--
			buf[w] = byte(digit) + '0'
		}
		v /= 10
	}
	if print {
		w--
		buf[w] = '.'
	}
	ret w, v
}

// Formats v into the tail of buf.
// It returns the index where the output begins.
fn formatInt(mut buf: []byte, mut v: u64): int {
	mut w := len(buf)
	if v == 0 {
		w--
		buf[w] = '0'
	} else {
		for v > 0 {
			w--
			buf[w] = byte(v%10) + '0'
			v /= 10
		}
	}
	ret w
}