// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math/bits"
use "std/runtime"

// The unsigned zero year for internal Unix time calculations.
// Must be 1 mod 400, and times before it will not compute correctly,
// but otherwise can be changed at will.
const absoluteZeroYear = -292277022399

// Offsets to convert between internal and absolute or Unix times.
const absoluteToUnix = -9223372028741760000

// Offsets to convert between Unix time and absolute times.
const unixToAbsolute = 9223372028741760000

// Specifies a month of the year (January = 1, ...).
type Month: int

impl Month {
	// Returns the English name of the month ("January", "February", ...).
	fn Str(*self): str {
		if January <= *self && *self <= December {
			ret longMonthNames[*self-1]
		}
		mut buf := make([]byte, 20)
		n := formatInt(buf, u64(*self))
		ret "%!Month(" + str(buf[n:]) + ")"
	}
}

const (
	January: Month = 1 + iota
	February
	March
	April
	May
	June
	July
	August
	September
	October
	November
	December
)

fn daysIn(m: Month, year: int): int {
	if m == February {
		if isLeap(year) {
			ret 29
		}
		ret 28
	}
	// With the special case of February eliminated, the pattern is
	//	31 30 31 30 31 30 31 31 30 31 30 31
	// Adding m&1 produces the basic alternation;
	// adding (m>>3)&1 inverts the alternation starting in August.
	ret 30 + int((m+m>>3)&1)
}

// daysBefore returns the number of days in a non-leap year before month m.
// daysBefore(December+1) returns 365.
fn daysBefore(m: Month): int {
	mut adj := 0
	if m >= March {
		adj = -2
	}

	// With the -2 adjustment after February,
	// we need to compute the running sum of:
	//	0  31  30  31  30  31  30  31  31  30  31  30  31
	// which is:
	//	0  31  61  92 122 153 183 214 245 275 306 336 367
	// This is almost exactly 367/12×(m-1) except for the
	// occasonal off-by-one suggesting there may be an
	// integer approximation of the form (a×m + b)/c.
	// A brute force search over small a, b, c finds that
	// (214×m - 211) / 7 computes the function perfectly.
	ret (214*int(m)-211)/7 + adj
}

// Specifies a day of the week (Sunday = 0, ...).
type Weekday: int

impl Weekday {
	// Returns the English name of the day ("Sunday", "Monday", ...).
	fn Str(*self): str {
		if Sunday <= *self && *self <= Saturday {
			ret longDayNames[*self]
		}
		mut buf := make([]byte, 20)
		mut n := formatInt(buf, u64(*self))
		ret "%!Weekday(" + str(buf[n:]) + ")"
	}
}

const (
	Sunday: Weekday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Saturday
)

// A Time represents an instant in time with nanosecond precision.
//
// Zero-value indicates the beginning of Unix time, i.e. zero seconds.
// This means the date January 1, 1970. Implementation can also handle
// the Unix time in the negative plane. For example, -10 seconds should be
// equivalent to Wed Dec 31 1969 23:59:50 UTC+0000.
//
// Using the == operator when comparing a Time instance is often not what
// is desired. Because this compares not only the time, but also things like
// the memory address of the location data.
struct Time {
	sec:  i64
	nsec: i32 // In the range [0, 999999999].

	mut loc: &Location
}

impl Time {
	// Returns time in Unix time.
	fn Unix(*self): i64 {
		ret self.sec
	}

	fn setLoc(mut *self, loc: &Location) {
		if uintptr(loc) == uintptr(&utcLoc) {
			self.loc = nil
			ret
		}
		self.loc = unsafe { *(&loc) }
	}

	// Returns time with the location set to UTC.
	fn UTC(*self): Time {
		mut t := *self
		t.setLoc(unsafe { (&Location)(&utcLoc) })
		ret t
	}

	// Returns time with the location set to local time.
	fn Local(*self): Time {
		mut t := *self
		t.setLoc(unsafe { (&Location)(&localLoc) })
		ret t
	}

	// Returns the time as an absolute time, adjusted by the zone offset.
	// It is called when computing a presentation property like Month or Hour.
	fn abs(*self): u64 {
		mut l := self.loc
		if l == nil || l == Local {
			l = l.get()
		}
		mut sec := self.Unix()
		if l != UTC {
			if l.cacheZone != nil && l.cacheStart <= sec && sec < l.cacheEnd {
				sec += i64(l.cacheZone.offset)
			} else {
				_, offset, _, _, _ := l.lookup(sec)
				sec += i64(offset)
			}
		}
		ret u64(sec + unixToAbsolute)
	}

	fn absSec(*self): absSeconds {
		ret absSeconds(self.abs())
	}

	// Combination of the Zone and absSec methods,
	// extracting both return values from a single zone lookup.
	fn locabs(*self): (name: str, offset: int, abs: absSeconds) {
		mut l := self.loc
		if l == nil || uintptr(l) == uintptr(&localLoc) {
			l = l.get()
		}
		// Avoid function call if we hit the local time cache.
		mut sec := self.sec
		if uintptr(l) != uintptr(&utcLoc) {
			if l.cacheZone != nil && l.cacheStart <= sec && sec < l.cacheEnd {
				name = l.cacheZone.name
				offset = l.cacheZone.offset
			} else {
				name, offset, _, _, _ = l.lookup(sec)
			}
			sec += i64(offset)
		} else {
			name = "UTC"
		}
		abs = absSeconds(sec + unixToAbsolute)
		ret
	}

	// Adds d seconds to the time.
	fn addSec(mut *self, d: i64) {
		// Check if the sum of self.sec and d overflows and handle it properly.
		sum := self.sec + d
		if (sum > self.sec) == (d > 0) {
			self.sec = sum
		} else if d > 0 {
			self.sec = 1<<63 - 1
		} else {
			self.sec = -(1<<63 - 1)
		}
	}

	// Computes the time zone in effect at time specification, returning the abbreviated
	// name of the zone (such as "CET") and its offset in seconds east of UTC.
	fn Zone(*self): (name: str, offset: int) {
		name, offset, _, _, _ = self.loc.lookup(self.sec)
		ret
	}

	// Returns the year of the time.
	fn Year(*self): int {
		century, cyear, ayday := self.absSec().days().split()
		janFeb := ayday.janFeb()
		ret century.year(cyear, janFeb)
	}

	// Returns the month of the year specified by the time.
	fn Month(*self): Month {
		_, _, ayday := self.absSec().days().split()
		amonth, _ := ayday.split()
		ret amonth.month(ayday.janFeb())
	}

	// Returns the day of the month specified by the time.
	fn Day(*self): int {
		_, _, ayday := self.absSec().days().split()
		_, day := ayday.split()
		ret day
	}

	// Returns the day of the week specified by the time.
	fn Weekday(*self): Weekday {
		ret self.absSec().days().weekday()
	}

	// Returns the hour within the day specified by the time, in the range [0, 23].
	fn Hour(*self): int {
		ret int(self.absSec()%secPerDay) / secPerHour
	}

	// Returns the second offset within the minute specified by the time, in the range [0, 59].
	fn Second(*self): int {
		ret int(self.absSec() % secPerMinute)
	}

	// Returns the minute offset within the hour specified by the time, in the range [0, 59].
	fn Minute(*self): int {
		ret int(self.absSec()%secPerHour) / secPerMinute
	}

	// Returns the nanosecond offset within the second specified by the time,
	// in the range [0, 999999999].
	fn Nanosecond(*self): int {
		ret int(self.nsec)
	}

	// Returns the year, month, and day of the time.
	fn Date(*self): (year: int, month: Month, day: int) {
		ret self.absSec().days().date()
	}

	// Returns the hour, minute, and second of the time.
	fn Clock(*self): (hour: int, minute: int, second: int) {
		ret self.absSec().clock()
	}

	// Returns the ISO 8601 year and week number of the time.
	// Week ranges from 1 to 53. Jan 01 to Jan 03 of year n might belong to
	// week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1
	// of year n+1.
	fn ISO(*self): (year: int, week: int) {
		// According to the rule that the first calendar week of a calendar year is
		// the week including the first Thursday of that year, and that the last one is
		// the week immediately preceding the first calendar week of the next calendar year.
		// See https://www.iso.org/obp/ui#iso:std:iso:8601:-1:ed-1:v1:en:term:3.1.1.23 for details.

		// weeks start with Monday
		// Monday Tuesday Wednesday Thursday Friday Saturday Sunday
		// 1      2       3         4        5      6        7
		// +3     +2      +1        0        -1     -2       -3
		// the offset to Thursday
		days := self.absSec().days()
		thu := days + absDays(Thursday-((days-1).weekday()+1))
		year, yday := thu.yearYday()
		ret year, (yday-1)/7 + 1
	}

	// Returns the time self+d.
	fn Add(*self, d: Duration): Time {
		mut t := *self
		mut dsec := i64(d / 1e9)
		mut nsec := t.nsec + i32(d%1e9)
		if nsec >= 1e9 {
			dsec++
			nsec -= 1e9
		} else if nsec < 0 {
			dsec--
			nsec += 1e9
		}
		t.nsec = nsec
		t.addSec(dsec)
		ret t
	}

	// Returns the duration t(self)-u. If the result exceeds the maximum (or minimum)
	// value that can be stored in a [Duration], the maximum (or minimum) duration
	// will be returned.
	// To compute t-d for a duration d, use t.Add(-d).
	fn Sub(*self, u: Time): Duration {
		d := Duration(self.sec-u.sec)*Second + Duration(self.nsec-u.nsec)
		// Check for overflow or underflow.
		match {
		| u.Add(d).Equal(*self):
			ret d // d is correct
		| self.Before(u):
			ret durationMin // t - u is negative out of range
		|:
			ret durationMax // t - u is positive out of range
		}
	}

	// Reports whether the time instant is after u.
	fn After(*self, u: Time): bool {
		ret self.sec > u.sec || self.sec == u.sec && self.nsec > u.nsec
	}

	// Reports whether the time instant is before u.
	fn Before(*self, u: Time): bool {
		ret self.sec < u.sec || self.sec == u.sec && self.nsec < u.nsec
	}

	// Compares the time instant t(self) with u. If t is before u, it returns -1;
	// if t is after u, it returns +1; if they're the same, it returns 0.
	fn Compare(*self, u: Time): int {
		mut tc, mut uc := self.sec, u.sec
		if tc == uc {
			tc, uc = i64(self.nsec), i64(u.nsec)
		}
		match {
		| tc < uc:
			ret -1
		| tc > uc:
			ret +1
		}
		ret 0
	}

	// Reports whether self and u represent the same time instant.
	// Two times can be equal even if they are in different locations.
	// For example, 6:00 +0200 and 4:00 UTC are Equal.
	// See the documentation on the Time type for the pitfalls of using == with
	// Time values; most code should use Equal instead.
	fn Equal(*self, u: Time): bool {
		ret self.sec == u.sec && self.nsec == u.nsec
	}

	fn appendTo(*self, mut b: []byte)!: []byte {
		ret appendStrictRFC3339(self, b)?
	}

	// Implements the custom text encoder method which is appends to b.
	// The time is formatted in RFC 3339 format with sub-second precision.
	// If the timestamp cannot be represented as valid RFC 3339
	// (e.g., the year is out of range), then throws exception
	// with the ParseError.InvalidRange.
	fn AppendText(*self, mut b: []byte)!: []byte {
		ret self.appendTo(b)?
	}

	// Implements the custom text encoder method.
	// matches that of calling the [Time.AppendText] method.
	//
	// See [Time.AppendText] for more information.
	fn EncodeText(*self)!: []byte {
		ret self.appendTo(make([]byte, 0, len(RFC3339Nano)))?
	}

	// Implements the custom text decoder method.
	// The time must be in the RFC 3339 format.
	fn DecodeText(mut *self, data: []byte)! {
		*self = parseStrictRFC3339(data)?
	}
}

// Returns the current system-time UTC.
fn Now(): Time {
	sec, nsec := runtime::timeNow()
	ret Time{sec: sec, nsec: i32(nsec)}
}

// Returns new time by Unix time with nanoseconds.
// Seconds since January 1, 1970 UTC.
// It is valid to pass nsec outside the range [0, 999999999].
// Not all sec values have a corresponding time value. One such
// value is 1<<63-1 (the largest i64 value).
fn Unix(mut sec: i64, mut nsec: i64): Time {
	if nsec < 0 || nsec >= 1e9 {
		n := nsec / 1e9
		sec += n
		nsec -= n * 1e9
		if nsec < 0 {
			nsec += 1e9
			sec--
		}
	}
	ret Time{sec: sec, nsec: i32(nsec)}
}

// Returns the time elapsed since t.
// It is shorthand for time::Now().Sub(t).
fn Since(t: Time): Duration {
	ret Now().Sub(t)
}

// Returns the duration until t.
// It is shorthand for t.Sub(time::Now()).
fn Until(t: Time): Duration {
	ret t.Sub(Now())
}

// Absolute time.
struct AbsTime {
	Day:     int
	Weekday: Weekday
	YearDay: int
	Month:   Month
	Year:    int
	Second:  int
	Minute:  int
	Hour:    int
}

const (
	secPerMinute = 60
	secPerHour   = 60 * secPerMinute
	secPerDay    = 24 * secPerHour
	secPerWeek   = 7 * secPerDay

	daysPerY    = 365
	daysPer400Y = daysPerY*400 + 97
	daysPer100Y = daysPerY*100 + 24
	daysPer4Y   = daysPerY*4 + 1
)

// Returns new absolute time by Unix time without nanoseconds.
// Seconds since January 1, 1970 UTC.
fn UnixAbs(sec: i64): AbsTime {
	abs := absSeconds(u64(sec) + unixToAbsolute)
	days := abs.days()
	mut t := AbsTime{}
	t.Year, t.YearDay = days.yearYday()
	_, _, ayday := days.split()
	amonth, (t.Day) := ayday.split()
	t.Month = amonth.month(ayday.janFeb())
	t.Weekday = days.weekday()
	t.Hour, t.Minute, t.Second = abs.clock()
	ret t
}

fn isLeap(year: int): bool {
	ret year%4 == 0 && (year%100 != 0 || year%400 == 0)
}

// Takes a standard year/month/day and returns the
// number of days from the absolute epoch to that day.
// The days argument can be out of range and in particular can be negative.
fn dateToAbsDays(year: i64, month: Month, day: int): absDays {
	// See “Computations on Times” comment above.
	mut amonth := u32(month)
	mut janFeb := u32(0)
	if amonth < 3 {
		janFeb = 1
	}
	amonth += 12 * janFeb
	y := u64(year) - u64(janFeb) + absoluteYears

	// For amonth is in the range [3,14], we want:
	//
	//	ayday := (153*amonth - 457) / 5
	//
	// (See the “Computations on Times” comment above
	// as well as Neri and Schneider, section 7.)
	//
	// That is equivalent to:
	//
	//	ayday := (979*amonth - 2919) >> 5
	//
	// and the latter form uses a couple fewer instructions,
	// so use it, saving a few cycles.
	// See Neri and Schneider, section 8.3
	// for more about this optimization.
	//
	// (Note that there is no saved division, because the compiler
	// implements / 5 without division in all cases.)
	ayday := (979*amonth - 2919) >> 5

	century := y / 100
	cyear := u32(y % 100)
	cday := 1461 * cyear / 4
	centurydays := 146097 * century / 4

	ret absDays(centurydays + u64(i64(cday+ayday)+i64(day)-1))
}

fn norm(mut hi: int, mut lo: int, base: int): (nhi: int, nlo: int) {
	if lo < 0 {
		n := (-lo-1)/base + 1
		hi -= n
		lo += n * base
	}
	if lo >= base {
		n := lo / base
		hi += n
		lo -= n * base
	}
	ret hi, lo
}

// Internal implementation of the Date function, but returns Unix time instead of Time.
// It normalizes nsecond and updates its value. So remaining nanoseconds is
// stored in nsecond after normalization.
// See the Date function for public documentation.
fn absUnix(mut year: int, mut month: Month, mut day: int,
	mut hour: int, mut minute: int, mut second: int, mut &nsecond: *int, mut &loc: *&Location): i64 {
	// Normalize month, overflowing into year.
	mut m := int(month - 1)
	year, m = norm(year, m, 12)
	month = Month(m + 1) // Switch to [0, 12) range from (0, 12] range.

	// Normalize nsecond, second, minute, hour, overflowing into day.
	second, *nsecond = norm(second, *nsecond, 1e9)
	minute, second := norm(minute, second, 60)
	hour, minute = norm(hour, minute, 60)
	day, hour = norm(day, hour, 24)

	// Convert to absolute time and then Unix time.
	mut unix := i64(dateToAbsDays(i64(year), month, day))*secPerDay +
		i64(hour*secPerHour+minute*secPerMinute+second) +
		absoluteToUnix

	// Look for zone offset for expected time, so we can adjust to UTC.
	// The lookup function expects UTC, so first we pass unix in the
	// hope that it will not be too close to a zone transition,
	// and then adjust if it is.
	_, mut offset, start, end, _ := (*loc).lookup(unix)
	if offset != 0 {
		utc := unix - i64(offset)
		// If utc is valid for the time zone we found, then we have the right offset.
		// If not, we get the correct offset by looking up utc in the location.
		if utc < start || utc >= end {
			_, offset, _, _, _ = (*loc).lookup(utc)
		}
		unix -= i64(offset)
	}

	ret unix
}

// Returns the Time corresponding to
//
//	yyyy-mm-dd hh:mm:ss + nsec nanoseconds
//
// in the appropriate zone for that time in the given location.
//
// The month, day, hour, minute, second, and nsecond values may be outside
// their usual ranges and will be normalized during the conversion.
// For example, October 32 converts to November 1.
//
// A daylight savings time transition skips or repeats times.
// For example, in the United States, March 13, 2011 2:15am never occurred,
// while November 6, 2011 1:15am occurred twice. In such cases, the
// choice of time zone, and therefore the time, is not well-defined.
// Date returns a time that is correct in one of the two zones involved
// in the transition, but it does not guarantee which.
fn Date(year: int, month: Month, day: int,
	hour: int, minute: int, second: int, nsecond: int, loc: &Location): (t: Time) {
	t.sec = absUnix(year, month, day, hour, minute, second, unsafe { &(*(&nsecond)) }, unsafe { &(*(&loc)) })
	t.nsec = i32(nsecond)
	t.setLoc(loc)
	ret t
}

// Days from March 1 through end of year.
const marchThruDecember = 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31

// The number of years we subtract from internal time to get absolute time.
// This value must be 0 mod 400, and it defines the “absolute zero instant”
// mentioned in the “Computations on Times” comment above: March 1, -absoluteYears.
// Dates before the absolute epoch will not compute correctly,
// but otherwise the value can be changed as needed.
const absoluteYears = 292277022400

// Counts the number of seconds since the absolute zero instant.
type absSeconds: u64

// Counts the number of days since the absolute zero instant.
type absDays: u64

// Counts the number of centuries since the absolute zero instant.
type absCentury: u64

// Counts the number of years since the start of a century.
type absCyear: int

// Counts the number of days since the start of a year.
// Note that absolute years start on March 1.
type absYday: int

// Counts the number of months since the start of a year.
// absMonth=0 denotes March.
type absMonth: int

// Single bit (0 or 1) denoting whether a given year is a leap year.
type absLeap: int

// Single bit (0 or 1) denoting whether a given day falls in January or February.
// That is a special case because the absolute years start in March (unlike normal calendar years).
type absJanFeb: int

impl absSeconds {
	// Converts absolute seconds to absolute days.
	fn days(*self): absDays {
		ret absDays(*self / secPerDay)
	}

	fn clock(*self): (hour: int, minute: int, second: int) {
		second = int(*self % secPerDay)
		hour = second / secPerHour
		second -= hour * secPerHour
		minute = second / secPerMinute
		second -= minute * secPerMinute
		ret
	}
}

impl absDays {
	// Splits days into century, cyear, ayday.
	fn split(*self): (century: absCentury, cyear: absCyear, ayday: absYday) {
		// See “Computations on Times” comment above.
		d := 4*u64(*self) + 3
		century = absCentury(d / 146097)

		// This should be
		//	cday := u32(d % 146097) / 4
		//	cd := 4*cday + 3
		// which is to say
		//	cday := u32(d % 146097) >> 2
		//	cd := cday<<2 + 3
		// but of course (x>>2<<2)+3 == x|3,
		// so do that instead.
		cd := u32(d%146097) | 3

		// For cdays in the range [0,146097] (100 years), we want:
		//
		//	cyear := (4 cdays + 3) / 1461
		//	yday := (4 cdays + 3) % 1461 / 4
		//
		// (See the “Computations on Times” comment above
		// as well as Neri and Schneider, section 7.)
		//
		// That is equivalent to:
		//
		//	cyear := (2939745 cdays) >> 32
		//	yday := (2939745 cdays) & 0xFFFFFFFF / 2939745 / 4
		//
		// so do that instead, saving a few cycles.
		// See Neri and Schneider, section 8.3
		// for more about this optimization.
		hi, lo := bits::Mul32(2939745, u32(cd))
		cyear = absCyear(hi)
		ayday = absYday(lo / 2939745 / 4)
		ret
	}

	// Converts days into the standard year and 1-based yday.
	fn yearYday(*self): (year: int, yday: int) {
		century, cyear, ayday := self.split()
		janFeb := ayday.janFeb()
		year = century.year(cyear, janFeb)
		yday = ayday.yday(janFeb, century.leap(cyear))
		ret
	}

	// Converts days into standard year, month, day.
	fn date(*self): (year: int, month: Month, day: int) {
		century, cyear, ayday := self.split()
		amonth, day := ayday.split()
		janFeb := ayday.janFeb()
		year = century.year(cyear, janFeb)
		month = amonth.month(janFeb)
		ret
	}

	// Returns the day of the week specified by days.
	fn weekday(*self): Weekday {
		// March 1 of the absolute year, like March 1 of 2000, was a Wednesday.
		ret Weekday((u64(*self) + u64(Wednesday)) % 7)
	}
}

impl absMonth {
	// Returns the standard Month for (m, janFeb).
	fn month(*self, janFeb: absJanFeb): Month {
		// See “Computations on Times” comment above.
		ret Month(*self) - Month(janFeb)*12
	}
}

impl absCentury {
	// Returns 1 if (century, cyear) is a leap year, 0 otherwise.
	fn leap(*self, cyear: absCyear): absLeap {
		// See “Computations on Times” comment above.
		mut y4ok := 0
		if cyear%4 == 0 {
			y4ok = 1
		}
		mut y100ok := 0
		if cyear != 0 {
			y100ok = 1
		}
		mut y400ok := 0
		if *self%4 == 0 {
			y400ok = 1
		}
		ret absLeap(y4ok & (y100ok | y400ok))
	}

	// Returns the standard year for (century, cyear, janFeb).
	fn year(*self, cyear: absCyear, janFeb: absJanFeb): int {
		// See “Computations on Times” comment above.
		ret int(u64(*self)*100-absoluteYears) + int(cyear) + int(janFeb)
	}
}

impl absYday {
	// Returns 1 if the March 1-based ayday is in January or February, 0 otherwise.
	fn janFeb(*self): absJanFeb {
		// See “Computations on Times” comment above.
		mut jf := absJanFeb(0)
		if *self >= marchThruDecember {
			jf = 1
		}
		ret jf
	}

	// Returns the standard 1-based yday for (ayday, janFeb, leap).
	fn yday(*self, janFeb: absJanFeb, leap: absLeap): int {
		// See “Computations on Times” comment above.
		ret int(*self) + (1 + 31 + 28) + int(leap)&^int(janFeb) - 365*int(janFeb)
	}

	// Splits ayday into absolute month and standard (1-based) day-in-month.
	fn split(*self): (m: absMonth, mday: int) {
		// See “Computations on Times” comment above.
		//
		// For yday in the range [0,366],
		//
		//	amonth := (5 yday + 461) / 153
		//	mday := (5 yday + 461) % 153 / 5
		//
		// is equivalent to:
		//
		//	amonth = (2141 yday + 197913) >> 16
		//	mday = (2141 yday + 197913) & 0xFFFF / 2141
		//
		// so do that instead, saving a few cycles.
		// See Neri and Schneider, section 8.3.
		d := 2141*u32(*self) + 197913
		ret absMonth(d >> 16), 1 + int((d&0xFFFF)/2141)
	}
}