// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/byteslite"
use "std/runtime"
use "std/unsafe"

// Returns the time zone information of the time zone
// with the given name, from a given source. A source may be a
// timezone database directory, tzdata database file or an uncompressed
// zip file, containing the contents of such a directory.
fn loadTzinfo(name: str, source: str): ([]byte, ok: bool) {
	ret loadTzinfoFromDirOrZip(source, name)
}

// Returns the contents of the file with the given name
// in dir. dir can either be an uncompressed zip file, or a directory.
fn loadTzinfoFromDirOrZip(dir: str, mut name: str): ([]byte, ok: bool) {
	if len(dir) > 4 && dir[len(dir)-4:] == ".zip" {
		ret loadTzinfoFromZip(dir, name)
	}
	if dir != "" {
		name = dir + "/" + name
	}
	ret readFile(name)
}

// Returns the Location with the given name from one of
// the specified sources. See loadTzinfo for a list of supported sources.
// The first timezone data matching the given name that is successfully loaded
// and parsed is returned as a Location.
fn loadLocation(name: str, sources: []str): (z: &Location, ok: bool) {
	for _, source in sources {
		mut zoneData, ok2 := loadTzinfo(name, source)
		if ok2 {
			z, ok = LoadLocationFromTZData(name, zoneData)
			if ok {
				ret
			}
		}
	}
	ret
}

// Simple I/O interface to binary blob of data.
struct dataIO {
	p:    []byte
	fail: bool
}

impl dataIO {
	fn read(mut *self, n: int): []byte {
		if len(self.p) < n {
			self.p = nil
			self.fail = true
			ret nil
		}
		mut p := self.p[0:n]
		self.p = self.p[n:]
		ret p
	}

	fn big4(mut *self): (n: u32, ok: bool) {
		p := self.read(4)
		if len(p) < 4 {
			self.fail = true
			ret 0, false
		}
		ret u32(p[3]) | u32(p[2])<<8 | u32(p[1])<<16 | u32(p[0])<<24, true
	}

	fn big8(mut *self): (n: u64, ok: bool) {
		n1, ok1 := self.big4()
		n2, ok2 := self.big4()
		if !ok1 || !ok2 {
			self.fail = true
			ret 0, false
		}
		ret (u64(n1) << 32) | u64(n2), true
	}

	fn byte(mut *self): (n: byte, ok: bool) {
		p := self.read(1)
		if len(p) < 1 {
			self.fail = true
			ret 0, false
		}
		ret p[0], true
	}

	// rest returns the rest of the data in the buffer.
	fn rest(mut *self): []byte {
		mut r := self.p
		self.p = nil
		ret r
	}
}

// Returns a Location with the given name
// initialized from the IANA Time Zone database-formatted data.
// The data should be in the format of a standard IANA time zone file
// (for example, the content of /etc/localtime on Unix systems).
fn LoadLocationFromTZData(name: str, mut data: []byte): (&Location, ok: bool) {
	mut d := dataIO{data, false}

	// 4-byte magic "TZif"
	{
		magic := d.read(4)
		if str(magic) != "TZif" {
			ret
		}
	}

	// 1-byte version, then 15 bytes of padding
	let mut version: int
	p := d.read(16)
	if len(p) != 16 {
		ret
	} else {
		match p[0] {
		| 0:
			version = 1
		| '2':
			version = 2
		| '3':
			version = 3
		|:
			ret
		}
	}

	// six big-endian 32-bit integers:
	//	number of UTC/local indicators
	//	number of standard/wall indicators
	//	number of leap seconds
	//	number of transition times
	//	number of local time zones
	//	number of characters of time zone abbrev strings
	const (
		NUTCLocal = 0
		NStdWall  = 1
		NLeap     = 2
		NTime     = 3
		NZone     = 4
		NChar     = 5
	)

	let mut n: [6]int
	mut i := 0
	for i < 6; i++ {
		nn, ok2 := d.big4()
		if !ok2 {
			ret
		}
		if u32(int(nn)) != nn {
			ret
		}
		n[i] = int(nn)
	}

	// If we have version 2 or 3, then the data is first written out
	// in a 32-bit format, then written out again in a 64-bit format.
	// Skip the 32-bit format and read the 64-bit one, as it can
	// describe a broader range of dates.

	mut is64 := false
	if version > 1 {
		// Skip the 32-bit data.
		mut skip := n[NTime]*4 +
			n[NTime] +
			n[NZone]*6 +
			n[NChar] +
			n[NLeap]*8 +
			n[NStdWall] +
			n[NUTCLocal]
		// Skip the version 2 header that we just read.
		skip += 4 + 16
		d.read(skip)

		is64 = true

		// Read the counts again, they can differ.
		i = 0
		for i < 6; i++ {
			nn, ok2 := d.big4()
			if !ok2 {
				ret
			}
			if u32(int(nn)) != nn {
				ret
			}
			n[i] = int(nn)
		}
	}

	mut size := 4
	if is64 {
		size = 8
	}

	// Transition times.
	mut txtimes := dataIO{d.read(n[NTime] * size), false}

	// Time zone indices for transition times.
	mut txzones := d.read(n[NTime])

	// Zone info structures
	mut zonedata := dataIO{d.read(n[NZone] * 6), false}

	// Time zone abbreviations.
	mut abbrev := d.read(n[NChar])

	// Leap-second time pairs
	d.read(n[NLeap] * (size + 4))

	// Whether tx times associated with local time types
	// are specified as standard time or wall time.
	isstd := d.read(n[NStdWall])

	// Whether tx times associated with local time types
	// are specified as UTC or local time.
	isutc := d.read(n[NUTCLocal])

	if d.fail { // ran out of data
		ret
	}

	let mut extend: str
	rest := d.rest()
	if len(rest) > 2 && rest[0] == '\n' && rest[len(rest)-1] == '\n' {
		extend = str(rest[1 : len(rest)-1])
	}

	// Now we can build up a useful data structure.
	// First the zone information.
	//	utcoff[4] isdst[1] nameindex[1]
	nzone := n[NZone]
	if nzone == 0 {
		// Reject tzdata files with no zones. There's nothing useful in them.
		// This also avoids a panic later when we add and then use a fake transition.
		ret
	}
	mut zones := make([]zone, nzone)
	i = 0
	for i < len(zones); i++ {
		let mut ok2: bool
		let mut n2: u32
		n2, ok2 = zonedata.big4()
		if !ok2 {
			ret
		}
		if u32(int(n2)) != n2 {
			ret
		}
		zones[i].offset = int(i32(n2))
		let mut b: byte
		b, ok2 = zonedata.byte()
		if !ok2 {
			ret
		}
		zones[i].isDST = b != 0
		b, ok2 = zonedata.byte()
		if !ok2 || int(b) >= len(abbrev) {
			ret
		}
		zones[i].name = byteStr(abbrev[b:])
	}

	// Now the transition time info.
	mut tx := make([]zoneTrans, n[NTime])
	i = 0
	for i < len(tx); i++ {
		let mut n2: i64
		if !is64 {
			n4, ok2 := txtimes.big4()
			if !ok2 {
				ret
			} else {
				n2 = i64(i32(n4))
			}
		} else {
			n8, ok2 := txtimes.big8()
			if !ok2 {
				ret
			} else {
				n2 = i64(n8)
			}
		}
		tx[i].when = n2
		if int(txzones[i]) >= len(zones) {
			ret
		}
		tx[i].index = u8(txzones[i])
		if i < len(isstd) {
			tx[i].isstd = isstd[i] != 0
		}
		if i < len(isutc) {
			tx[i].isutc = isutc[i] != 0
		}
	}

	if len(tx) == 0 {
		// Build fake transition to cover all time.
		// This happens in fixed locations like "Etc/GMT0".
		tx = append(tx, zoneTrans{when: alpha, index: 0})
	}

	// Committed to succeed.
	mut l := &Location{zone: zones, tx: tx, name: name, extend: extend}

	// Fill in the cache with information about right now,
	// since that will be the most common lookup.
	sec, _ := runtime::timeNow()
	i = 0
	for i < len(tx); i++ {
		if tx[i].when <= sec && (i+1 == len(tx) || sec < tx[i+1].when) {
			l.cacheStart = tx[i].when
			l.cacheEnd = omega
			l.cacheZone = unsafe { (&zone)(&l.zone[tx[i].index]) }
			if i+1 < len(tx) {
				l.cacheEnd = tx[i+1].when
			} else if l.extend != "" {
				// If we're at the end of the known zone transitions,
				// try the extend string.
				name2, offset, estart, eend, isDST, ok2 := tzset(l.extend, l.cacheStart, sec)
				if ok2 {
					l.cacheStart = estart
					l.cacheEnd = eend
					// Find the zone that is returned by tzset to avoid allocation if possible.
					zoneIdx := findZone(l.zone, name2, offset, isDST)
					if zoneIdx != -1 {
						l.cacheZone = unsafe { (&zone)(&l.zone[zoneIdx]) }
					} else {
						l.cacheZone = &zone{
							name: name2,
							offset: offset,
							isDST: isDST,
						}
					}
				}
			}
			break
		}
	}

	ret l, true
}

// Returns the contents of the file with the given name in the given uncompressed zip file.
fn loadTzinfoFromZip(zipfile: str, name: str): ([]byte, bool) {
	fd, ok := open(zipfile)
	if !ok {
		ret nil, false
	}

	const (
		zecheader = 0x06054b50
		zcheader  = 0x02014b50
		ztailsize = 22

		zheadersize = 30
		zheader     = 0x04034b50
	)

	mut buf := make([]byte, ztailsize)
	if !preadn(fd, buf, -ztailsize) || get4(buf) != zecheader {
		closefd(fd)
		ret nil, false
	}
	n := get2(buf[10:])
	mut size := get4(buf[12:])
	mut off := get4(buf[16:])

	buf = make([]byte, size)
	if !preadn(fd, buf, off) {
		closefd(fd)
		ret nil, false
	}

	mut i := 0
	for i < n; i++ {
		// zip entry layout:
		//	0	magic[4]
		//	4	madevers[1]
		//	5	madeos[1]
		//	6	extvers[1]
		//	7	extos[1]
		//	8	flags[2]
		//	10	meth[2]
		//	12	modtime[2]
		//	14	moddate[2]
		//	16	crc[4]
		//	20	csize[4]
		//	24	uncsize[4]
		//	28	namelen[2]
		//	30	xlen[2]
		//	32	fclen[2]
		//	34	disknum[2]
		//	36	iattr[2]
		//	38	eattr[4]
		//	42	off[4]
		//	46	name[namelen]
		//	46+namelen+xlen+fclen - next header
		//
		if get4(buf) != zcheader {
			break
		}
		meth := get2(buf[10:])
		size = get4(buf[24:])
		namelen := get2(buf[28:])
		mut xlen := get2(buf[30:])
		fclen := get2(buf[32:])
		off = get4(buf[42:])
		zname := buf[46 : 46+namelen]
		buf = buf[46+namelen+xlen+fclen:]
		if str(zname) != name {
			continue
		}
		if meth != 0 {
			closefd(fd)
			ret nil, false
		}

		// zip per-file header layout:
		//	0	magic[4]
		//	4	extvers[1]
		//	5	extos[1]
		//	6	flags[2]
		//	8	meth[2]
		//	10	modtime[2]
		//	12	moddate[2]
		//	14	crc[4]
		//	18	csize[4]
		//	22	uncsize[4]
		//	26	namelen[2]
		//	28	xlen[2]
		//	30	name[namelen]
		//	30+namelen+xlen - file data
		//
		buf = make([]byte, zheadersize+namelen)
		if !preadn(fd, buf, off) ||
			get4(buf) != zheader ||
			get2(buf[8:]) != meth ||
			get2(buf[26:]) != namelen ||
			str(buf[30:30+namelen]) != name {
			closefd(fd)
			ret nil, false
		}
		xlen = get2(buf[28:])

		buf = make([]byte, size)
		if !preadn(fd, buf, off+30+namelen+xlen) {
			closefd(fd)
			ret nil, false
		}

		closefd(fd)
		ret buf, true
	}

	closefd(fd)
	ret nil, false
}

fn findZone(zones: []zone, name: str, offset: int, isDST: bool): int {
	for i, z in zones {
		if z.name == name && z.offset == offset && z.isDST == isDST {
			ret i
		}
	}
	ret -1
}

// Make a string by stopping at the first NUL
fn byteStr(mut p: []byte): str {
	i := byteslite::IndexByte(p, 0)
	if i != -1 {
		p = p[:i]
	}
	ret str(p)
}

// There are 500+ zoneinfo files. Rather than distribute them all
// individually, we ship them in an uncompressed zip file.
// Used this way, the zip file format serves as a commonly readable
// container for the individual small files. We choose zip over tar
// because zip files have a contiguous table of contents, making
// individual file lookups faster, and because the per-file overhead
// in a zip file is considerably less than tar's 512 bytes.

// Returns the little-endian 32-bit value in b.
fn get4(b: []byte): int {
	if len(b) < 4 {
		ret 0
	}
	ret int(b[0]) | int(b[1])<<8 | int(b[2])<<16 | int(b[3])<<24
}

// Returns the little-endian 16-bit value in b.
fn get2(b: []byte): int {
	if len(b) < 2 {
		ret 0
	}
	ret int(b[0]) | int(b[1])<<8
}

// The max permitted size of files read by readFile.
const maxFileSize = 10 << 20

// Reads and returns the content of the named file.
// It is a trivial implementation of os::File.Read, reimplemented
// here to avoid depending.
// It reports false if name exceeds maxFileSize bytes.
fn readFile(name: str): ([]byte, ok: bool) {
	f, ok := open(name)
	if !ok {
		ret nil, false
	}
	let mut buf: [4096]byte
	mut bufs := unsafe::Slice(&buf[0], len(buf), len(buf))
	let mut r: []byte
	let mut n: int
	for {
		n, ok = read(f, bufs)
		if n > 0 {
			r = append(r, bufs[:n]...)
		}
		if n == 0 || !ok {
			break
		}
		if len(r) > maxFileSize {
			closefd(f)
			ret nil, false
		}
	}
	closefd(f)
	ret r, true
}