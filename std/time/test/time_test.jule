// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"
use "std/time"

struct unixTest {
	sec: i64
	abs: time::AbsTime
}

static unixAbsTests = []unixTest([
	{0, {Year: 1970, Month: 1, Day: 1, Weekday: 4, Hour: 0, Minute: 0, Second: 0}},
	{966702998, {Year: 2000, Month: 8, Day: 19, Weekday: 6, Hour: 16, Minute: 36, Second: 38}},
	{77784758457, {Year: 4434, Month: 11, Day: 25, Weekday: 6, Hour: 13, Minute: 20, Second: 57}},
	{974735338, {Year: 2000, Month: 11, Day: 20, Weekday: 1, Hour: 15, Minute: 48, Second: 58}},
	{327428778204, {Year: 12345, Month: 10, Day: 21, Weekday: 0, Hour: 22, Minute: 23, Second: 24}},
	{-10, {Year: 1969, Month: 12, Day: 31, Weekday: 3, Hour: 23, Minute: 59, Second: 50}},
	{-9999998088000, {Year: -314918, Month: 9, Day: 4, Weekday: 1, Hour: 9, Minute: 20, Second: 0}},
	{-16295527509, {Year: 1453, Month: 8, Day: 13, Weekday: 6, Hour: 8, Minute: 34, Second: 51}},
	{-16314912000, {Year: 1453, Month: 1, Day: 1, Weekday: 6, Hour: 0, Minute: 0, Second: 0}},
	{-31020451200, {Year: 987, Month: 1, Day: 1, Weekday: 1, Hour: 0, Minute: 0, Second: 0}},
	{-62135596800, {Year: 1, Month: 1, Day: 1, Weekday: 1, Hour: 0, Minute: 0, Second: 0}},
	{-62198755200, {Year: -1, Month: 1, Day: 1, Weekday: 5, Hour: 0, Minute: 0, Second: 0}},
	{-62167219200, {Year: 0, Month: 1, Day: 1, Weekday: 6, Hour: 0, Minute: 0, Second: 0}},
	{-126010455062, {Year: -2024, Month: 11, Day: 20, Weekday: 6, Hour: 15, Minute: 48, Second: 58}},
	{-125253072662, {Year: -2000, Month: 11, Day: 20, Weekday: 1, Hour: 15, Minute: 48, Second: 58}},
])

fn absEqual(a1: time::AbsTime, a2: time::AbsTime): bool {
	ret a1.Year == a2.Year &&
		a1.Month == a2.Month &&
		a1.Day == a2.Day &&
		a1.Hour == a2.Hour &&
		a1.Minute == a2.Minute &&
		a1.Second == a2.Second
}

#test
fn testTimeYear(t: &testing::T) {
	for i, test in unixAbsTests {
		time := time::Unix(test.sec, 0)
		year := time.Year()
		if year != test.abs.Year {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testTimeMonth(t: &testing::T) {
	for i, test in unixAbsTests {
		time := time::Unix(test.sec, 0)
		month := time.Month()
		if month != test.abs.Month {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testTimeDay(t: &testing::T) {
	for i, test in unixAbsTests {
		time := time::Unix(test.sec, 0)
		day := time.Day()
		if day != test.abs.Day {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testTimeWeekday(t: &testing::T) {
	for i, test in unixAbsTests {
		time := time::Unix(test.sec, 0)
		weekday := time.Weekday()
		if weekday != test.abs.Weekday {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testTimeHour(t: &testing::T) {
	for i, test in unixAbsTests {
		time := time::Unix(test.sec, 0)
		hour := time.Hour()
		if hour != test.abs.Hour {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testTimeMinute(t: &testing::T) {
	for i, test in unixAbsTests {
		time := time::Unix(test.sec, 0)
		minute := time.Minute()
		if minute != test.abs.Minute {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testTimeSecond(t: &testing::T) {
	for i, test in unixAbsTests {
		time := time::Unix(test.sec, 0)
		second := time.Second()
		if second != test.abs.Second {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testUnix(t: &testing::T) {
	for i, test in unixAbsTests {
		time := time::Unix(test.sec, 0)
		unixtime := time.Unix()
		if unixtime != test.sec || !absEqual(time::UnixAbs(unixtime), test.abs) {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testUnixAbs(t: &testing::T) {
	for i, test in unixAbsTests {
		abs := time::UnixAbs(test.sec)
		if !absEqual(abs, test.abs) {
			t.Errorf("#{} conversion failed", i)
		}
	}
}

#test
fn testDate(t: &testing::T) {
	for i, test in unixAbsTests {
		unixtime := time::Date(
			test.abs.Year, test.abs.Month, test.abs.Day,
			test.abs.Hour, test.abs.Minute, test.abs.Second, 0, time::UTC)
		if unixtime.Unix() != test.sec {
			t.Errorf("#{} conversion failed", i)
		}
	}
}

struct isoTest {
	year:  int // year
	month: int // month
	day:   int // month
	yex:   int // expected year
	wex:   int // expected week
}

static isoTests = []isoTest([
	{1981, 1, 1, 1981, 1}, {1982, 1, 1, 1981, 53}, {1983, 1, 1, 1982, 52},
	{1984, 1, 1, 1983, 52}, {1985, 1, 1, 1985, 1}, {1986, 1, 1, 1986, 1},
	{1987, 1, 1, 1987, 1}, {1988, 1, 1, 1987, 53}, {1989, 1, 1, 1988, 52},
	{1990, 1, 1, 1990, 1}, {1991, 1, 1, 1991, 1}, {1992, 1, 1, 1992, 1},
	{1993, 1, 1, 1992, 53}, {1994, 1, 1, 1993, 52}, {1995, 1, 2, 1995, 1},
	{1996, 1, 1, 1996, 1}, {1996, 1, 7, 1996, 1}, {1996, 1, 8, 1996, 2},
	{1997, 1, 1, 1997, 1}, {1998, 1, 1, 1998, 1}, {1999, 1, 1, 1998, 53},
	{2000, 1, 1, 1999, 52}, {2001, 1, 1, 2001, 1}, {2002, 1, 1, 2002, 1},
	{2003, 1, 1, 2003, 1}, {2004, 1, 1, 2004, 1}, {2005, 1, 1, 2004, 53},
	{2006, 1, 1, 2005, 52}, {2007, 1, 1, 2007, 1}, {2008, 1, 1, 2008, 1},
	{2009, 1, 1, 2009, 1}, {2010, 1, 1, 2009, 53}, {2010, 1, 1, 2009, 53},
	{2011, 1, 1, 2010, 52}, {2011, 1, 2, 2010, 52}, {2011, 1, 3, 2011, 1},
	{2011, 1, 4, 2011, 1}, {2011, 1, 5, 2011, 1}, {2011, 1, 6, 2011, 1},
	{2011, 1, 7, 2011, 1}, {2011, 1, 8, 2011, 1}, {2011, 1, 9, 2011, 1},
	{2011, 1, 10, 2011, 2}, {2011, 1, 11, 2011, 2}, {2011, 6, 12, 2011, 23},
	{2011, 6, 13, 2011, 24}, {2011, 12, 25, 2011, 51}, {2011, 12, 26, 2011, 52},
	{2011, 12, 27, 2011, 52}, {2011, 12, 28, 2011, 52}, {2011, 12, 29, 2011, 52},
	{2011, 12, 30, 2011, 52}, {2011, 12, 31, 2011, 52}, {1995, 1, 1, 1994, 52},
	{2012, 1, 1, 2011, 52}, {2012, 1, 2, 2012, 1}, {2012, 1, 8, 2012, 1},
	{2012, 1, 9, 2012, 2}, {2012, 12, 23, 2012, 51}, {2012, 12, 24, 2012, 52},
	{2012, 12, 30, 2012, 52}, {2012, 12, 31, 2013, 1}, {2013, 1, 1, 2013, 1},
	{2013, 1, 6, 2013, 1}, {2013, 1, 7, 2013, 2}, {2013, 12, 22, 2013, 51},
	{2013, 12, 23, 2013, 52}, {2013, 12, 29, 2013, 52}, {2013, 12, 30, 2014, 1},
	{2014, 1, 1, 2014, 1}, {2014, 1, 5, 2014, 1}, {2014, 1, 6, 2014, 2},
	{2015, 1, 1, 2015, 1}, {2016, 1, 1, 2015, 53}, {2017, 1, 1, 2016, 52},
	{2018, 1, 1, 2018, 1}, {2019, 1, 1, 2019, 1}, {2020, 1, 1, 2020, 1},
	{2021, 1, 1, 2020, 53}, {2022, 1, 1, 2021, 52}, {2023, 1, 1, 2022, 52},
	{2024, 1, 1, 2024, 1}, {2025, 1, 1, 2025, 1}, {2026, 1, 1, 2026, 1},
	{2027, 1, 1, 2026, 53}, {2028, 1, 1, 2027, 52}, {2029, 1, 1, 2029, 1},
	{2030, 1, 1, 2030, 1}, {2031, 1, 1, 2031, 1}, {2032, 1, 1, 2032, 1},
	{2033, 1, 1, 2032, 53}, {2034, 1, 1, 2033, 52}, {2035, 1, 1, 2035, 1},
	{2036, 1, 1, 2036, 1}, {2037, 1, 1, 2037, 1}, {2038, 1, 1, 2037, 53},
	{2039, 1, 1, 2038, 52}, {2040, 1, 1, 2039, 52},
])

#test
fn testTimeISO(t: &testing::T) {
	for i, test in isoTests {
		time := time::Date(test.year, time::Month(test.month), test.day, 0, 0, 0, 0, time::UTC)
		y, w := time.ISO()
		if y != test.yex || w != test.wex {
			t.Errorf("#{} conversion failed", i)
		}
	}
}