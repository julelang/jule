// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/strings"
use "std/unicode/utf8"
use "std/unsafe"

// These replacements permit compatibility with old numeric entities that
// assumed Windows-1252 encoding.
// https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state
let replacementTable: [...]rune = [
	'\u20AC', // First entry is what 0x80 should be replaced with.
	'\u0081',
	'\u201A',
	'\u0192',
	'\u201E',
	'\u2026',
	'\u2020',
	'\u2021',
	'\u02C6',
	'\u2030',
	'\u0160',
	'\u2039',
	'\u0152',
	'\u008D',
	'\u017D',
	'\u008F',
	'\u0090',
	'\u2018',
	'\u2019',
	'\u201C',
	'\u201D',
	'\u2022',
	'\u2013',
	'\u2014',
	'\u02DC',
	'\u2122',
	'\u0161',
	'\u203A',
	'\u0153',
	'\u009D',
	'\u017E',
	'\u0178', // Last entry is 0x9F.
	// 0x00->'\uFFFD' is handled programmatically.
	// 0x0D->'\u000D' is a no-op.
]

// Reads an entity like "&lt;" from b[src:] and writes the
// corresponding "<" to b[dst:], returning the incremented dst and src cursors.
// Precondition: b[src] == '&' && dst <= src.
fn unescapeEntity(mut b: []byte, dst: int, src: int, &entity: map[str]rune, &entity2: map[str][2]rune): (dst1: int, src1: int) {
	const attribute = false

	// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#consume-a-character-reference

	// i starts at 1 because we already know that s[0] == '&'.
	mut i, s := 1, b[src:]

	if len(s) <= 1 {
		b[dst] = b[src]
		ret dst + 1, src + 1
	}

	if s[i] == '#' {
		if len(s) <= 3 { // We need to have at least "&#.".
			b[dst] = b[src]
			ret dst + 1, src + 1
		}
		i++
		mut c := s[i]
		mut hex := false
		if c == 'x' || c == 'X' {
			hex = true
			i++
		}

		mut x := rune('\x00')
		for i < len(s) {
			c = s[i]
			i++
			if hex {
				if '0' <= c && c <= '9' {
					x = 16*x + rune(c) - '0'
					continue
				} else if 'a' <= c && c <= 'f' {
					x = 16*x + rune(c) - 'a' + 10
					continue
				} else if 'A' <= c && c <= 'F' {
					x = 16*x + rune(c) - 'A' + 10
					continue
				}
			} else if '0' <= c && c <= '9' {
				x = 10*x + rune(c) - '0'
				continue
			}
			if c != ';' {
				i--
			}
			break
		}

		if i <= 3 { // No characters matched.
			b[dst] = b[src]
			ret dst + 1, src + 1
		}

		if 0x80 <= x && x <= 0x9F {
			// Replace characters from Windows-1252 with UTF-8 equivalents.
			x = replacementTable[x-0x80]
		} else if x == 0 || (0xD800 <= x && x <= 0xDFFF) || x > 0x10FFFF {
			// Replace invalid characters with the replacement character.
			x = '\uFFFD'
		}

		ret dst + utf8::EncodeRune(b[dst:], x), src + i
	}

	// Consume the maximum number of characters possible, with the
	// consumed characters matching one of the named references.

	for i < len(s) {
		c := s[i]
		i++
		// Lower-cased characters are more common in entities, so we check for them first.
		if 'a' <= c && c <= 'z' || 'A' <= c && c <= 'Z' || '0' <= c && c <= '9' {
			continue
		}
		if c != ';' {
			i--
		}
		break
	}

	entityName := s[1:i]
	if len(entityName) == 0 {
		// No-op.
	} else if attribute && entityName[len(entityName)-1] != ';' && len(s) > i && s[i] == '=' {
		// No-op.
	} else {
		mut x := entity[str(entityName)]
		if x != 0 {
			ret dst + utf8::EncodeRune(b[dst:], x), src + i
		} else {
			y := entity2[str(entityName)]
			if y[0] != 0 {
				dst1 = dst + utf8::EncodeRune(b[dst:], y[0])
				ret dst1 + utf8::EncodeRune(b[dst1:], y[1]), src + i
			} else if !attribute {
				mut maxLen := len(entityName) - 1
				if maxLen > longestEntityWithoutSemicolon {
					maxLen = longestEntityWithoutSemicolon
				}
				mut j := maxLen
				for j > 1; j-- {
					x = entity[str(entityName[:j])]
					if x != 0 {
						ret dst + utf8::EncodeRune(b[dst:], x), src + j + 1
					}
				}
			}
		}
	}

	dst1, src1 = dst+i, src+i
	copy(b[dst:dst1], b[src:src1])
	ret dst1, src1
}

// "&#39;" is shorter than "&apos;" and apos was not in HTML until HTML5.
// "&#34;" is shorter than "&quot;".
let htmlEscaper = strings::Replacer.New(
	`&`, "&amp;",
	`'`, "&#39;",
	`<`, "&lt;",
	`>`, "&gt;",
	`"`, "&#34;")

// Escapes special characters like "<" to become "&lt;". It
// escapes only five such characters: <, >, &, ' and ".
// UnescapeStr(EscapeStr(s)) == s always holds, but the converse isn't always true.
fn EscapeStr(s: str): str {
	ret htmlEscaper.Replace(s)
}

// Unescapes entities like "&lt;" to become "<". It unescapes a
// larger range of entities than EscapeStr escapes. For example, "&aacute;"
// unescapes to "รก", as does "&#225;" and "&#xE1;".
// UnescapeStr(EscapeStr(s)) == s always holds, but the converse isn't always true.
fn UnescapeStr(s: str): str {
	mut i := strings::IndexByte(s, '&')
	if i < 0 {
		ret s
	}
	mut b := []byte(s)
	mut dst, mut src := unescapeEntity(b, i, i, entity, entity2)
	for len(s[src:]) > 0 {
		if s[src] == '&' {
			i = 0
		} else {
			i = strings::IndexByte(s[src:], '&')
		}
		if i < 0 {
			dst += copy(b[dst:], s[src:])
			break
		}

		if i > 0 {
			copy(b[dst:], s[src:src+i])
		}
		dst, src = unescapeEntity(b, dst+i, src+i, entity, entity2)
	}
	ret unsafe::StrFromBytes(b[:dst])
}