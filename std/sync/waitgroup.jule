// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/runtime"
use "std/sync/atomic"

// A WaitGroup waits for a collection of threads to finish.
// The main thread calls [WaitGroup.Add] to set the number of
// threads to wait for. Then each of the threads runs and
// calls [WaitGroup.Done] when finished. At the same time,
// [WaitGroup.Wait] can be used to block until all goroutines have finished.
//
// A WaitGroup must not be copied after first use.
struct WaitGroup {
	state: atomic::U64 // High 32 bits are counter, low 32 bits are waiter count.
	sema:  u32
}

impl WaitGroup {
	// Returns new [WaitGroup] instance.
	fn New(): &WaitGroup {
		ret new(WaitGroup)
	}

	// Adds delta, which may be negative, to the [WaitGroup] counter.
	// If the counter becomes zero, all threads blocked on [WaitGroup.Wait] are released.
	// If the counter goes negative, Add panics.
	//
	// Note that calls with a positive delta that occur when the counter is zero
	// must happen before a Wait. Calls with a negative delta, or calls with a
	// positive delta that start when the counter is greater than zero, may happen
	// at any time.
	// Typically this means the calls to Add should execute before the statement
	// creating the thread or other event to be waited for.
	// If a [WaitGroup] is reused to wait for several independent sets of events,
	// new Add calls must happen after all previous Wait calls have returned.
	fn Add(mut self, delta: int) {
		state := self.state.Add(u64(delta)<<32, atomic::SeqCst)
		v := i32(state >> 32)
		mut w := u32(state)
		if v < 0 {
			panic("std/sync: negative WaitGroup counter")
		}
		if w != 0 && delta > 0 && v == i32(delta) {
			panic("std/sync: WaitGroup misuse: Add called concurrently with Wait")
		}
		if v > 0 || w == 0 {
			ret
		}
		// This thread has set counter to 0 when waiters > 0.
		// Now there can't be concurrent mutations of state:
		// - Adds must not happen concurrently with Wait,
		// - Wait does not increment waiters if it sees counter == 0.
		// Still do a cheap sanity check to detect WaitGroup misuse.
		if self.state.Load(atomic::SeqCst) != state {
			panic("std/sync: WaitGroup misuse: Add called concurrently with Wait")
		}
		// Reset waiters count to 0.
		self.state.Store(0, atomic::SeqCst)
		for w != 0; w-- {
			runtime::semrelease(&self.sema, false)
		}
	}

	// Decrements the [WaitGroup] counter by one.
	fn Done(mut self) { self.Add(-1) }

	// Blocks until the [WaitGroup] counter is zero.
	fn Wait(mut self) {
		for {
			state := self.state.Load(atomic::SeqCst)
			v := i32(state >> 32)
			if v == 0 {
				// Counter is 0, no need to wait.
				ret
			}
			// Increment waiters count.
			if self.state.CompareAndSwap(state, state+1, atomic::SeqCst) {
				runtime::semacquire(&self.sema, false, runtime::semaWaitGroup)
				if self.state.Load(atomic::SeqCst) != 0 {
					panic("std/sync: WaitGroup is reused before previous Wait has returned")
				}
				ret
			}
		}
	}
}