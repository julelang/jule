// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/runtime"
use "std/sync/atomic"

// Represents an object that can be locked and unlocked.
trait Locker {
	fn Lock(*self)
	fn Unlock(*self)
}

// Mutex fairness.
//
// Mutex can be in 2 modes of operations: normal and starvation.
// In normal mode waiters are queued in FIFO order, but a woken up waiter
// does not own the mutex and competes with new arriving threads over
// the ownership. New arriving threads have an advantage -- they are
// already running on CPU and there can be lots of them, so a woken up
// waiter has good chances of losing.  In such case it is queued at front
// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,
// it switches mutex to the starvation mode.
//
// In starvation mode ownership of the mutex is directly handed off from
// the unlocking thread to the waiter at the front of the queue.
// New arriving threads don't try to acquire the mutex even if it appears
// to be unlocked, and don't try to spin. Instead they queue themselves at
// the tail of the wait queue.
//
// If a waiter receives ownership of the mutex and sees that either
// (1) it is the last waiter in the queue, or (2) it waited for less than 1ms,
// it switches mutex back to normal operation mode.
//
// Normal mode has considerably better performance as a thread can acquire
// a mutex several times in a row even if there are blocked waiters.
// Starvation mode is important to prevent pathological cases of tail latency.
const starvationThresholdNs = 1e6

// Mutex state flags.
const (
	mutexLocked = 1 << iota
	mutexWoken
	mutexStarving
	mutexWaiterShift
)

// Muxtex is a primitive used to protect memory in
// multi-threading situations such as concurrent access.
//
// Mutextes are uses internal mutability and internal states.
// Locking, unlocking and etc is not mutable operations.
// But there is no internal mutable memory, so mutexes are not use shared memory.
// Therefore, for correct use, a mutex instance should not be copied after first use.
// Otherwise internal state will be copied and not mutated by other instances.
//
// Mutexes are not implemented using API of operating system. Implemented in pure Jule.
// This mutex implementation will not check ownership of the mutex.
// So, a locked Mutex is not associated with a particular thread.
// It is allowed for one thread to lock a Mutex and then
// arrange for another thread to unlock it.
struct Mutex {
	mut state: i32
	mut sema:  u32
}

impl Locker for Mutex {}

impl Mutex {
	// Locks mutex.
	// If the lock is already in use, the calling thread
	// blocks until the mutex is available.
	fn Lock(*self) {
		// Fast path: grab unlocked mutex.
		if atomic::CompareAndSwap(&self.state, 0, mutexLocked, atomic::Acquire, atomic::Relaxed) {
			ret
		}
		// Slow path (outlined so that the fast path may be inlined).
		self.lockSlow()
	}

	fn lockSlow(*self) {
		let mut waitStartTime: i64
		mut starving := false
		mut awoke := false
		mut iter := 1
		mut old := self.state
		for {
			// Don't spin in starvation mode, ownership is handed off to waiters
			// so we won't be able to acquire the mutex anyway.
			if old&(mutexLocked|mutexStarving) == mutexLocked && iter < 1<<9 {
				// Active spinning makes sense.
				// Try to set mutexWoken flag to inform Unlock
				// to not wake other blocked threads.
				if !awoke && old&mutexWoken == 0 && old>>mutexWaiterShift != 0 {
					awoke = atomic::CompareAndSwap(&self.state, old, old|mutexWoken, atomic::AcqRel, atomic::Relaxed)
				}
				iter <<= 1
				old = self.state
				continue
			}
			mut new := old
			// Don't try to acquire starving mutex, new arriving threads must queue.
			if old&mutexStarving == 0 {
				new |= mutexLocked
			}
			if old&(mutexLocked|mutexStarving) != 0 {
				new += 1 << mutexWaiterShift
			}
			// The current thread switches mutex to starvation mode.
			// But if the mutex is currently unlocked, don't do the switch.
			// Unlock expects that starving mutex has waiters, which will not
			// be true in this case.
			if starving && old&mutexLocked != 0 {
				new |= mutexStarving
			}
			if awoke {
				// The thread has been woken from sleep,
				// so we need to reset the flag in either case.
				if new&mutexWoken == 0 {
					panic("runtime: inconsistent mutex state")
				}
				new &= ^mutexWoken
			}
			if atomic::CompareAndSwap(&self.state, old, new, atomic::AcqRel, atomic::Relaxed) {
				if old&(mutexLocked|mutexStarving) == 0 {
					break // locked the mutex with CAS
				}
				// If we were already waiting before, queue at the front of the queue.
				queueLifo := waitStartTime != 0
				if waitStartTime == 0 {
					waitStartTime = runtime::nanotime()
				}
				runtime::semacquire(&self.sema, queueLifo, runtime::reasonMutex)
				starving = starving || runtime::nanotime()-waitStartTime > starvationThresholdNs
				old = self.state
				if old&mutexStarving != 0 {
					// If this thread was woken and mutex is in starvation mode,
					// ownership was handed off to us but mutex is in somewhat
					// inconsistent state: mutexLocked is not set and we are still
					// accounted as waiter. Fix that.
					if old&(mutexLocked|mutexWoken) != 0 || old>>mutexWaiterShift == 0 {
						panic("runtime: inconsistent mutex state")
					}
					mut delta := i32(mutexLocked - 1<<mutexWaiterShift)
					if !starving || old>>mutexWaiterShift == 1 {
						// Exit starvation mode.
						// Critical to do it here and consider wait time.
						// Starvation mode is so inefficient, that two threads
						// can go lock-step infinitely once they switch mutex
						// to starvation mode.
						delta -= mutexStarving
					}
					atomic::Add(&self.state, delta, atomic::AcqRel)
					break
				}
				awoke = true
				iter = 1
			} else {
				old = self.state
			}
		}
	}

	// Tries to lock mutwx and reports whether it succeeded.
	//
	// Note that while correct uses of TryLock do exist, they are rare,
	// and use of TryLock is often a sign of a deeper problem
	// in a particular use of mutexes.
	fn TryLock(*self): bool {
		old := self.state
		if old&(mutexLocked|mutexStarving) != 0 {
			ret false
		}

		// There may be a thread waiting for the mutex, but we are
		// running now and can try to grab the mutex before that
		// thread wakes up.
		ret atomic::CompareAndSwap(&self.state, old, old|mutexLocked, atomic::Acquire, atomic::Relaxed)
	}

	// Unlocks mutex.
	// It is a runtime error if mutex is not locked on entry to Unlock.
	fn Unlock(*self) {
		// Fast path: drop lock bit.
		new := atomic::Add(&self.state, -mutexLocked, atomic::Release)
		if new != 0 {
			// Outlined slow path to may allow inlining the fast path.
			self.unlockSlow(new)
		}
	}

	fn unlockSlow(*self, mut new: i32) {
		if (new+mutexLocked)&mutexLocked == 0 {
			panic("runtime: unlock of unlocked mutex")
		}
		if new&mutexStarving == 0 {
			mut old := new
			for {
				// If there are no waiters or a thread has already
				// been woken or grabbed the lock, no need to wake anyone.
				// In starvation mode ownership is directly handed off from unlocking
				// thread to the next waiter. We are not part of this chain,
				// since we did not observe mutexStarving when we unlocked the mutex above.
				// So get off the way.
				if old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {
					ret
				}
				// Grab the right to wake someone.
				new = (old - 1<<mutexWaiterShift) | mutexWoken
				{
					if atomic::CompareAndSwap(&self.state, old, new, atomic::AcqRel, atomic::Relaxed) {
						runtime::semrelease(&self.sema, false)
						ret
					}
				}
				old = self.state
			}
		} else {
			// Starving mode: handoff mutex ownership to the next waiter,
			// so that the next waiter can start to run without wasting time.
			// Note: mutexLocked is not set, the waiter will set it after wakeup.
			// But mutex is still considered locked if mutexStarving is set,
			// so new coming thread will not acquire it.
			runtime::semrelease(&self.sema, true)
		}
	}
}