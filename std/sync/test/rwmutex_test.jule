// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/sync"
use "std/sync/atomic"
use "std/testing"

fn reader(mut rwm: &sync::RWMutex, numIterations: int, mut activity: &i32, cdone: chan bool) {
	mut i := 0
	for i < numIterations; i++ {
		rwm.RLock()
		n := atomic::Add(&(*activity), 1, atomic::SeqCst)
		if n < 1 || n >= 10000 {
			rwm.RUnlock()
			panic("wlock()")
		}
		mut j := 0
		for j < 100; j++ {
		}
		atomic::Add(&(*activity), -1, atomic::SeqCst)
		rwm.RUnlock()
	}
	cdone <- true
}

fn writer(mut rwm: &sync::RWMutex, numIterations: int, mut activity: &i32, cdone: chan bool) {
	mut i := 0
	for i < numIterations; i++ {
		rwm.Lock()
		n := atomic::Add(&(*activity), 10000, atomic::SeqCst)
		if n != 10000 {
			rwm.Unlock()
			panic("wlock()")
		}
		mut j := 0
		for j < 100; j++ {
		}
		atomic::Add(&(*activity), -10000, atomic::SeqCst)
		rwm.Unlock()
	}
	cdone <- true
}

fn hammerRWMutex(numReaders: int, numIterations: int) {
	// Number of active readers + 10000 * number of active writers.
	mut activity := new(i32)
	mut rwm := new(sync::RWMutex)
	cdone := make(chan bool)
	co writer(rwm, numIterations, activity, cdone)
	mut i := 0
	for i < numReaders/2; i++ {
		co reader(rwm, numIterations, activity, cdone)
	}
	co writer(rwm, numIterations, activity, cdone)
	for i < numReaders; i++ {
		co reader(rwm, numIterations, activity, cdone)
	}
	// Wait for the 2 writers and all readers to finish.
	i = 0
	for i < 2+numReaders; i++ {
		<-cdone
	}
}

#test
fn testRWMutex(t: &testing::T) {
	m := sync::RWMutex{}
	m.Lock()
	if m.TryLock() {
		t.Errorf("TryLock succeeded with mutex locked")
		ret
	}
	if m.TryRLock() {
		t.Errorf("TryRLock succeeded with mutex locked")
		ret
	}
	m.Unlock()

	if !m.TryLock() {
		t.Errorf("TryLock failed with mutex unlocked")
		ret
	}
	m.Unlock()

	if !m.TryRLock() {
		t.Errorf("TryRLock failed with mutex unlocked")
	}
	if !m.TryRLock() {
		t.Errorf("TryRLock failed with mutex rlocked")
		ret
	}
	if m.TryLock() {
		t.Errorf("TryLock succeeded with mutex rlocked")
		ret
	}
	m.RUnlock()
	m.RUnlock()

	n := 1000
	//hammerRWMutex(1, n)
	//hammerRWMutex(3, n)
	//hammerRWMutex(10, n)
	//hammerRWMutex(1, n)
	//hammerRWMutex(3, n)
	hammerRWMutex(10, n)
	hammerRWMutex(1, n)
	hammerRWMutex(3, n)
	hammerRWMutex(10, n)
	hammerRWMutex(5, n)
}

#test
fn testRLocker(t: &testing::T) {
	mut wl := new(sync::RWMutex)
	wlocked := make(chan bool, 1)
	rlocked := make(chan bool, 1)
	rl := wl.RLocker()
	n := 10
	co fn() {
		mut i := 0
		for i < n; i++ {
			rl.Lock()
			rl.Lock()
			rlocked <- true
			wl.Lock()
			wlocked <- true
		}
	}()
	mut i := 0
	for i < n; i++ {
		<-rlocked
		rl.Unlock()
		select {
		| <-wlocked:
			println("RLocker() didn't read-lock it")
		|:
		}
		rl.Unlock()
		<-wlocked
		select {
		| <-rlocked:
			println("RLocker() didn't respect the write lock")
		|:
		}
		wl.Unlock()
	}
}