// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/runtime"
use "std/sync/atomic"

// Implements a condition variable, a rendezvous point
// for threads waiting for or announcing the occurrence
// of an event.
//
// Each Cond has an associated Locker L (often a [&Mutex]),
// which must be held when changing the condition and
// when calling the [Cond.Wait] method.
//
// A Cond must not be copied after first use.
struct Cond {
	// Held while observing or changing the condition
	l: Locker

	mut notify: runtime::notifyList
}

impl Cond {
	// Returns a new Cond with locker l.
	fn New(l: Locker): &Cond {
		ret &Cond{l: unsafe { *(&l) }}
	}

	// Locks the locker.
	fn Lock(self) {
		self.l.Lock()
	}

	// Unlocks the locker.
	fn Unlock(self) {
		self.l.Unlock()
	}

	// Atomically unlocks the locker and suspends execution
	// of the calling thread. After later resuming execution,
	// Wait locks the locker before returning. Unlike in other systems,
	// Wait cannot return unless awoken by [Cond.Broadcast] or [Cond.Signal].
	//
	// Because the locker is not locked while Wait is waiting, the caller
	// typically cannot assume that the condition is true when
	// Wait returns. Instead, the caller should Wait in a loop:
	//
	//	self.Lock()
	//	for !condition() {
	//		self.Wait()
	//	}
	//	... make use of condition ...
	//	self.Unlock()
	fn Wait(self) {
		t := runtime::notifyListAdd(&self.notify)
		self.l.Unlock()
		runtime::notifyListWait(&self.notify, t)
		self.l.Lock()
	}

	// Wakes one thread waiting on the condition, if there is any.
	//
	// It is allowed but not required for the caller to hold the locker
	// during the call.
	//
	// Signal() does not affect thread scheduling priority; if other threads
	// are attempting to lock the locker, they may be awoken before a "waiting" thread.
	fn Signal(self) {
		runtime::notifyListNotifyOne(&self.notify)
	}

	// Broadcast wakes all threads waiting on the condition.
	//
	// It is allowed but not required for the caller to hold the locker
	// during the call.
	fn Broadcast(self) {
		runtime::notifyListNotifyAll(&self.notify)
	}
}