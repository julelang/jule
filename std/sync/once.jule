// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.21.2/src/sync/once.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use "std/sync/atomic"

// Once is an object that will perform exactly one action.
// A Once must not be copied after first use.
struct Once {
	// done indicates whether the action has been performed.
	// It is first in the struct because it is used in the hot path.
	// The hot path is inlined at every call site.
	// Placing done first allows more compact instructions on some architectures (amd64/i386),
	// and fewer instructions (to calculate offset) on other architectures.
	mut done: atomic::U8
	mut m:    Mutex
}

impl Once {
	// Returns new instance for Once.
	fn New(): Once {
		ret Once{}
	}

	// Calls the function f if and only if Do is being called for the
	// first time for this instance of Once. In other words, given
	//
	//	once := Once{}
	//
	// if once.Do(f) is called multiple times, only the first call will invoke f,
	// even if f has a different value in each invocation. A new instance of
	// Once is required for each function to execute.
	//
	// Do is intended for initialization that must be run exactly once. Since f
	// is niladic, it may be necessary to use a function literal to capture the
	// arguments to a function to be invoked by Do:
	//
	//	config.once.Do(func() { config.init(filename) })
	//
	// Because no call to Do returns until the one call to f returns, if f causes
	// Do to be called, it will deadlock.
	//
	// If f panics, Do considers it to have returned; future calls of Do return
	// without calling f.
	fn Do(*self, f: fn()) {
		// Note: Here is an incorrect implementation of Do:
		//
		//	if self.done.CompareAndSwap(0, 1, atomic::SeqCst, atomic::SeqCst) {
		//		f()
		//	}
		//
		// Do guarantees that when it returns, f has finished.
		// This implementation would not implement that guarantee:
		// given two simultaneous calls, the winner of the cas would
		// call f, and the second would return immediately, without
		// waiting for the first's call to f to complete.
		// This is why the slow path falls back to a mutex, and why
		// the self.done.store must be delayed until after f returns.

		if self.done.Load(atomic::Acquire) == 0 {
			// Outlined slow-path to allow inlining of the fast-path.
			self.doSlow(f)
		}
	}

	fn doSlow(*self, f: fn()) {
		self.m.Lock()
		if self.done.Load(atomic::Acquire) == 0 {
			f()
			self.done.Store(1, atomic::Release)
		}
		self.m.Unlock()
	}
}