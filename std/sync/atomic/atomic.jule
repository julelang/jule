// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/runtime/atomic"

type memoryOrder = atomic::MemoryOrder

// Atomic memory orders.
const (
	// The weakest memory order.
	// There no synchronization or ordering on read/write access.
	// Only the operation is guaranteed to be atomic.
	// Usually performs fastest atomicity performance.
	Relaxed = memoryOrder(atomic::Relaxed)

	// Combined with a load, if the loaded value was written
	// by a store operation with a Release or stronger order,
	// all subsequent operations are ordered after that store.
	// Especially all subsequent uploads will see the data
	// written before the repository.
	Acquire = memoryOrder(atomic::Acquire)

	// When combined with a store, all previous operations are
	// ordered with the Acquire or stronger order before any load
	// of that value. In particular, all previous writes become
	// visible to all threads that perform an Acquire or stronger
	// load of this value.
	Release = memoryOrder(atomic::Release)

	// Acquire and Release combined.
	// Aka acquire/release.
	// For loads it uses Acquire, for stores it uses Release ordering.
	AcqRel = memoryOrder(atomic::AcqRel)

	// Default memory order for most things.
	// Aka sequentially consistent.
	// Operations are sequenced consistently.
	SeqCst = memoryOrder(atomic::SeqCst)
)

// The atomic box for i8 type.
type I8: i8

impl I8 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: i8, order: memoryOrder): (old: i8) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: i8, new: i8, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: i8, order: memoryOrder): (new: i8) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): i8 {
		ret atomic::LoadZ[I8, i8](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: i8, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for i16 type.
type I16: i16

impl I16 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: i16, order: memoryOrder): (old: i16) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: i16, new: i16, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: i16, order: memoryOrder): (new: i16) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): i16 {
		ret atomic::LoadZ[I16, i16](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: i16, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for i32 type.
type I32: i32

impl I32 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: i32, order: memoryOrder): (old: i32) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: i32, new: i32, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: i32, order: memoryOrder): (new: i32) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): i32 {
		ret atomic::LoadZ[I32, i32](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: i32, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for i64 type.
type I64: i64

impl I64 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: i64, order: memoryOrder): (old: i64) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: i64, new: i64, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: i64, order: memoryOrder): (new: i64) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): i64 {
		ret atomic::LoadZ[I64, i64](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: i64, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for int type.
type Int: int

impl Int {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: int, order: memoryOrder): (old: int) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: int, new: int, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: int, order: memoryOrder): (new: int) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): int {
		ret atomic::LoadZ[Int, int](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: int, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for u8 type.
type U8: u8

impl U8 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: u8, order: memoryOrder): (old: u8) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: u8, new: u8, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: u8, order: memoryOrder): (new: u8) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): u8 {
		ret atomic::LoadZ[U8, u8](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: u8, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for u16 type.
type U16: u16

impl U16 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: u16, order: memoryOrder): (old: u16) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: u16, new: u16, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: u16, order: memoryOrder): (new: u16) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): u16 {
		ret atomic::LoadZ[U16, u16](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: u16, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for u32 type.
type U32: u32

impl U32 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: u32, order: memoryOrder): (old: u32) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: u32, new: u32, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: u32, order: memoryOrder): (new: u32) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): u32 {
		ret atomic::LoadZ[U32, u32](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: u32, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for u64 type.
type U64: u64

impl U64 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: u64, order: memoryOrder): (old: u64) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: u64, new: u64, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: u64, order: memoryOrder): (new: u64) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): u64 {
		ret atomic::LoadZ[U64, u64](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: u64, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for uint type.
type Uint: uint

impl Uint {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: uint, order: memoryOrder): (old: uint) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: uint, new: uint, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: uint, order: memoryOrder): (new: uint) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): uint {
		ret atomic::LoadZ[Uint, uint](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: uint, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// The atomic box for uintptr type.
type Uintptr: uintptr

impl Uintptr {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut *self, new: uintptr, order: memoryOrder): (old: uintptr) {
		ret atomic::SwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut *self, old: uintptr, new: uintptr, order: memoryOrder): (swapped: bool) {
		ret atomic::CompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut *self, delta: uintptr, order: memoryOrder): (new: uintptr) {
		ret atomic::AddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(*self, order: memoryOrder): uintptr {
		ret atomic::LoadZ[Uintptr, uintptr](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut *self, val: uintptr, order: memoryOrder) {
		atomic::StoreZ(self, val, order)
	}
}

// Atomically stores new into addr and returns the previous addr value.
// Only integer types are supported.
fn Swap[T: ~int | ~uint | ~i8 | ~i16 | ~i32 | ~i64 | ~u8 | ~u16 | ~u32 | ~u64 | ~uintptr](mut &addr: *T, new: T, order: memoryOrder): (old: T) {
	ret atomic::Swap(addr, new, order)
}

// Executes the compare-and-swap operation for value.
// Only integer types are supported.
fn CompareAndSwap[T: ~int | ~uint | ~i8 | ~i16 | ~i32 | ~i64 | ~u8 | ~u16 | ~u32 | ~u64 | ~uintptr](mut &addr: *T, old: T, new: T, order: memoryOrder): (swapped: bool) {
	ret atomic::CompareAndSwap(addr, old, new, order)
}

// Atomically adds delta to addr and returns the new addr value.
// Only integer types are supported.
fn Add[T: ~int | ~uint | ~i8 | ~i16 | ~i32 | ~i64 | ~u8 | ~u16 | ~u32 | ~u64 | ~uintptr](mut &addr: *T, delta: T, order: memoryOrder): (new: T) {
	ret atomic::Add(addr, delta, order)
}

// Atomically loads addr.
// Only integer types are supported.
fn Load[T: ~int | ~uint | ~i8 | ~i16 | ~i32 | ~i64 | ~u8 | ~u16 | ~u32 | ~u64 | ~uintptr](&addr: *T, order: memoryOrder): T {
	ret atomic::Load(addr, order)
}

// Atomically stores val into addr.
// Only integer types are supported.
fn Store[T: ~int | ~uint | ~i8 | ~i16 | ~i32 | ~i64 | ~u8 | ~u16 | ~u32 | ~u64 | ~uintptr](mut &addr: *T, val: T, order: memoryOrder) {
	atomic::Store(addr, val, order)
}