// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/runtime"

type memoryOrder = runtime::atomicMemoryOrder

// The weakest memory order.
// There no synchronization or ordering on read/write access.
// Only the operation is guaranteed to be atomic.
// Usually performs fastest atomicity performance.
const Relaxed = memoryOrder(runtime::atomicRelaxed)

// Combined with a load, if the loaded value was written
// by a store operation with a Release or stronger order,
// all subsequent operations are ordered after that store.
// Especially all subsequent uploads will see the data
// written before the repository.
const Acquire = memoryOrder(runtime::atomicAcquire)

// When combined with a store, all previous operations are
// ordered with the Acquire or stronger order before any load
// of that value. In particular, all previous writes become
// visible to all threads that perform an Acquire or stronger
// load of this value.
const Release = memoryOrder(runtime::atomicRelease)

// Acquire and Release combined.
// Aka acquire/release.
// For loads it uses Acquire, for stores it uses Release ordering.
const AcqRel = memoryOrder(runtime::atomicAcqRel)

// Default memory order for most things.
// Aka sequentially consistent.
// Operations are sequenced consistently.
const SeqCst = memoryOrder(runtime::atomicSeqCst)

// The atomic box for i8 type.
type I8: i8

impl I8 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: i8, order: memoryOrder): (old: i8) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: i8, new: i8, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: i8, order: memoryOrder): (new: i8) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): i8 {
		ret runtime::atomicLoadZ[I8, i8](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: i8, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for i16 type.
type I16: i16

impl I16 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: i16, order: memoryOrder): (old: i16) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: i16, new: i16, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: i16, order: memoryOrder): (new: i16) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): i16 {
		ret runtime::atomicLoadZ[I16, i16](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: i16, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for i32 type.
type I32: i32

impl I32 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: i32, order: memoryOrder): (old: i32) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: i32, new: i32, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: i32, order: memoryOrder): (new: i32) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): i32 {
		ret runtime::atomicLoadZ[I32, i32](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: i32, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for i64 type.
type I64: i64

impl I64 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: i64, order: memoryOrder): (old: i64) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: i64, new: i64, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: i64, order: memoryOrder): (new: i64) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): i64 {
		ret runtime::atomicLoadZ[I64, i64](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: i64, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for int type.
type Int: int

impl Int {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: int, order: memoryOrder): (old: int) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: int, new: int, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: int, order: memoryOrder): (new: int) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): int {
		ret runtime::atomicLoadZ[Int, int](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: int, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for u8 type.
type U8: u8

impl U8 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: u8, order: memoryOrder): (old: u8) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: u8, new: u8, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: u8, order: memoryOrder): (new: u8) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): u8 {
		ret runtime::atomicLoadZ[U8, u8](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: u8, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for u16 type.
type U16: u16

impl U16 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: u16, order: memoryOrder): (old: u16) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: u16, new: u16, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: u16, order: memoryOrder): (new: u16) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): u16 {
		ret runtime::atomicLoadZ[U16, u16](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: u16, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for u32 type.
type U32: u32

impl U32 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: u32, order: memoryOrder): (old: u32) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: u32, new: u32, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: u32, order: memoryOrder): (new: u32) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): u32 {
		ret runtime::atomicLoadZ[U32, u32](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: u32, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for u64 type.
type U64: u64

impl U64 {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: u64, order: memoryOrder): (old: u64) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: u64, new: u64, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: u64, order: memoryOrder): (new: u64) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): u64 {
		ret runtime::atomicLoadZ[U64, u64](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: u64, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for uint type.
type Uint: uint

impl Uint {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: uint, order: memoryOrder): (old: uint) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: uint, new: uint, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: uint, order: memoryOrder): (new: uint) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): uint {
		ret runtime::atomicLoadZ[Uint, uint](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: uint, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// The atomic box for uintptr type.
type Uintptr: uintptr

impl Uintptr {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: uintptr, order: memoryOrder): (old: uintptr) {
		ret runtime::atomicSwapZ(self, new, order)
	}

	// Executes the compare-and-swap operation.
	fn CompareAndSwap(mut self, old: uintptr, new: uintptr, order: memoryOrder): (swapped: bool) {
		ret runtime::atomicCompareAndSwapZ(self, old, new, order)
	}

	// Atomically adds delta to value and returns the new value.
	fn Add(mut self, delta: uintptr, order: memoryOrder): (new: uintptr) {
		ret runtime::atomicAddZ(self, delta, order)
	}

	// Atomically reads and returns value.
	fn Load(self, order: memoryOrder): uintptr {
		ret runtime::atomicLoadZ[Uintptr, uintptr](self, order)
	}

	// Atomically assigns to value.
	fn Store(mut self, val: uintptr, order: memoryOrder) {
		runtime::atomicStoreZ(self, val, order)
	}
}

// Atomically stores new into addr and returns the previous addr value.
// Only integer types are supported.
fn Swap[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](mut &addr: T, new: T, order: memoryOrder): (old: T) {
	ret runtime::atomicSwap(addr, new, order)
}

// Executes the compare-and-swap operation for value.
// Only integer types are supported.
fn CompareAndSwap[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](mut &addr: T, old: T, new: T, order: memoryOrder): (swapped: bool) {
	ret runtime::atomicCompareAndSwap(addr, old, new, order)
}

// Atomically adds delta to addr and returns the new addr value.
// Only integer types are supported.
fn Add[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](mut &addr: T, delta: T, order: memoryOrder): (new: T) {
	ret runtime::atomicAdd(addr, delta, order)
}

// Atomically loads addr.
// Only integer types are supported.
fn Load[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](&addr: T, order: memoryOrder): T {
	ret runtime::atomicLoad(addr, order)
}

// Atomically stores val into addr.
// Only integer types are supported.
fn Store[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](mut &addr: T, val: T, order: memoryOrder) {
	runtime::atomicStore(addr, val, order)
}