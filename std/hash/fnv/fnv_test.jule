// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/hash"
use "std/testing"
use "std/unsafe"

struct case {
	out:   []byte
	input: str
}

let case32: []case = [
	{[0x81, 0x1c, 0x9d, 0xc5], ""},
	{[0x05, 0x0c, 0x5d, 0x7e], "a"},
	{[0x70, 0x77, 0x2d, 0x38], "ab"},
	{[0x43, 0x9c, 0x2f, 0x4b], "abc"},
]

let case32a: []case = [
	{[0x81, 0x1c, 0x9d, 0xc5], ""},
	{[0xe4, 0x0c, 0x29, 0x2c], "a"},
	{[0x4d, 0x25, 0x05, 0xca], "ab"},
	{[0x1a, 0x47, 0xe9, 0x0b], "abc"},
]

let case64: []case = [
	{[0xcb, 0xf2, 0x9c, 0xe4, 0x84, 0x22, 0x23, 0x25], ""},
	{[0xaf, 0x63, 0xbd, 0x4c, 0x86, 0x01, 0xb7, 0xbe], "a"},
	{[0x08, 0x32, 0x67, 0x07, 0xb4, 0xeb, 0x37, 0xb8], "ab"},
	{[0xd8, 0xdc, 0xca, 0x18, 0x6b, 0xaf, 0xad, 0xcb], "abc"},
]

let case64a: []case = [
	{[0xcb, 0xf2, 0x9c, 0xe4, 0x84, 0x22, 0x23, 0x25], ""},
	{[0xaf, 0x63, 0xdc, 0x4c, 0x86, 0x01, 0xec, 0x8c], "a"},
	{[0x08, 0x9c, 0x44, 0x07, 0xb5, 0x45, 0x98, 0x6a], "ab"},
	{[0xe7, 0x1f, 0xa2, 0x19, 0x05, 0x41, 0x57, 0x4b], "abc"},
]

let case128: []case = [
	{[0x6c, 0x62, 0x27, 0x2e, 0x07, 0xbb, 0x01, 0x42, 0x62, 0xb8, 0x21, 0x75, 0x62, 0x95, 0xc5, 0x8d], ""},
	{[0xd2, 0x28, 0xcb, 0x69, 0x10, 0x1a, 0x8c, 0xaf, 0x78, 0x91, 0x2b, 0x70, 0x4e, 0x4a, 0x14, 0x1e], "a"},
	{[0x8, 0x80, 0x94, 0x5a, 0xee, 0xab, 0x1b, 0xe9, 0x5a, 0xa0, 0x73, 0x30, 0x55, 0x26, 0xc0, 0x88], "ab"},
	{[0xa6, 0x8b, 0xb2, 0xa4, 0x34, 0x8b, 0x58, 0x22, 0x83, 0x6d, 0xbc, 0x78, 0xc6, 0xae, 0xe7, 0x3b], "abc"},
]

let case128a: []case = [
	{[0x6c, 0x62, 0x27, 0x2e, 0x07, 0xbb, 0x01, 0x42, 0x62, 0xb8, 0x21, 0x75, 0x62, 0x95, 0xc5, 0x8d], ""},
	{[0xd2, 0x28, 0xcb, 0x69, 0x6f, 0x1a, 0x8c, 0xaf, 0x78, 0x91, 0x2b, 0x70, 0x4e, 0x4a, 0x89, 0x64], "a"},
	{[0x08, 0x80, 0x95, 0x44, 0xbb, 0xab, 0x1b, 0xe9, 0x5a, 0xa0, 0x73, 0x30, 0x55, 0xb6, 0x9a, 0x62], "ab"},
	{[0xa6, 0x8d, 0x62, 0x2c, 0xec, 0x8b, 0x58, 0x22, 0x83, 0x6d, 0xbc, 0x79, 0x77, 0xaf, 0x7f, 0x3b], "abc"},
]

fn testCase(t: &testing::T, mut h: hash::Hash, cases: []case) {
	for _, c in cases {
		h.Reset()
		n := h.Write(unsafe::StrBytes(c.input)) else {
			t.Errorf("write error: {}", error)
			continue
		}
		if n != len(c.input) {
			t.Errorf("wrote only {} out of {} bytes", n, len(c.input))
			continue
		}
		actual := h.Sum(nil)
		if str(c.out) != str(actual) {
			t.Errorf("hash({}) = {} want {}", c.input, actual, c.out)
		}
	}
}

#test
fn testCase32(t: &testing::T) {
	testCase(t, New32(), case32)
}

#test
fn testCase32a(t: &testing::T) {
	testCase(t, New32a(), case32a)
}

#test
fn testCase64(t: &testing::T) {
	testCase(t, New64(), case64)
}

#test
fn testCase64a(t: &testing::T) {
	testCase(t, New64a(), case64a)
}

#test
fn testCase128(t: &testing::T) {
	testCase(t, New128(), case128)
}

#test
fn testCase128a(t: &testing::T) {
	testCase(t, New128a(), case128a)
}