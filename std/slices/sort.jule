// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/0df681248862a34ff1233cdc4cf0b036e4761652/src/slices/sort.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use "std/internal/cmp"
use "std/math/bits"

// Sorts a slice of any ordered type in ascending order.
// When sorting floating-point numbers, NaNs are ordered before other values.
fn Sort[S: ~[]E, E: ordered](mut s: S) {
	n := len(s)
	pdqsort(s, 0, n, bits::Len(uint(n)))
}

// Sorts the slice x in ascending order as determined by the cmp
// function. This sort is not guaranteed to be stable.
// cmp(a, b) should return a negative number when a < b, a positive number when
// a > b and zero when a == b or a and b are incomparable in the sense of
// a strict weak ordering.
//
// Ir requires that cmp is a strict weak ordering.
// See https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings.
// The function should return 0 for incomparable items.
fn SortFunc[S: ~[]E, E](mut x: S, cmp: fn(a: E, b: E): int) {
	n := len(x)
	pdqsortFunc(x, 0, n, bits::Len(uint(n)), cmp)
}

// Sorts the slice x while keeping the original order of equal
// elements, using cmp to compare elements in the same way as [SortFunc].
fn SortStableFunc[S: ~[]E, E](mut x: S, cmp: fn(a: E, b: E): int) {
	stableFunc(x, len(x), cmp)
}

// Reports whether x is sorted in ascending order.
fn IsSorted[S: ~[]E, E: ordered](mut s: S): bool {
	mut i := len(s) - 1
	for i > 0; i-- {
		if cmp::Less(s[i], s[i-1]) {
			ret false
		}
	}
	ret true
}

fn nextPowerOfTwo(length: int): uint {
	shift := uint(bits::Len(uint(length)))
	ret uint(1 << shift)
}

// xorshift paper: https://www.jstatsoft.org/article/view/v008i14/xorshift.pdf
type xorshift: u64

fn xorshiftNext(mut &r: *xorshift): u64 {
	*r ^= *r << 13
	*r ^= *r >> 17
	*r ^= *r << 5
	ret u64(*r)
}