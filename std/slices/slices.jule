// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Reports whether slices are the same length and contains same elements.
// The nil slices considered as zero-length slices.
// The floating-point NaNs are not considered equal.
fn Equal[S: ~[]E, E: comparable](s1: S, s2: S): bool {
	if len(s1) != len(s2) {
		ret false
	}
	for i, e in s1 {
		if e != s2[i] {
			ret false
		}
	}
	ret true
}

// Returns index of first matched element with specified element,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
fn Index[S: ~[]E, E: comparable](s: S, e: E): int {
	for i, e2 in s {
		if e == e2 {
			ret i
		}
	}
	ret -1
}

// Returns index of first matched element with specified element,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
fn IndexLast[S: ~[]E, E: comparable](s: S, e: E): int {
	mut i := len(s) - 1
	for i >= 0; i-- {
		if s[i] == e {
			ret i
		}
	}
	ret -1
}

// Reports whether slice includes e.
fn Contains[S: ~[]E, E: comparable](s: S, e: E): bool {
	ret Index[S, E](s, e) >= 0
}

// Counts the number of matched elements with e in s.
fn Count[S: ~[]E, E: comparable](s: S, e: E): (n: int) {
	for _, e2 in s {
		if e2 == e {
			n++
		}
	}
	ret
}

// Replaces matched slice elements with old to new.
// Returns count of replacements.
fn Replace[S: ~[]E, E: comparable](mut s: S, old: E, mut new: E): (n: int) {
	for i, e in s {
		if e == old {
			s[i] = new
			n++
		}
	}
	ret
}

// Reverses elements of the slice.
fn Reverse[S: ~[]E, E](mut s: S) {
	mut i, mut j := 0, len(s)-1
	for i < j; i, j = i+1, j-1 {
		s[i], s[j] = s[j], s[i]
	}
}