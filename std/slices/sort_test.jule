// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"
use "std/testing"

let caseInts = [74, 59, 238, -784, 9845, 959, 905, 0, 0, 42, 7586, -5467984, 7586]
let caseF64s = [74.3, 59.0, math::Inf(1), 238.2, -784.0, 2.3, math::Inf(-1), 9845.768, -959.7485, 905, 7.8, 7.8, 74.3, 59.0, math::Inf(1), 238.2, -784.0, 2.3]
let caseF64sWithNaNs = [74.3, 59.0, math::Inf(1), 238.2, -784.0, 2.3, math::NaN(), math::NaN(), math::Inf(-1), 9845.768, -959.7485, 905, 7.8, 7.8]
let caseStrs = ["", "Hello", "foo", "bar", "foo", "f00", "%*&^*&^&", "***"]

fn cloneSlice[T](s: T): T {
	ret append(make(T, 0, len(s)), s...)
}

#test
fn testInts(t: &testing::T) {
	mut case := cloneSlice(caseInts)
	Sort(case)
	if !IsSorted(case) {
		t.Errorf("sorted: {}", caseInts)
		t.Errorf("   got: {}", case)
	}
}

#test
fn testF64s(t: &testing::T) {
	mut case := cloneSlice(caseF64s)
	Sort(case)
	if !IsSorted(case) {
		t.Errorf("sorted: {}", caseF64s)
		t.Errorf("   got: {}", case)
	}
}

#test
fn testF64sWithNaNs(t: &testing::T) {
	mut case := cloneSlice(caseF64sWithNaNs)
	Sort(case)
	if !IsSorted(case) {
		t.Errorf("sorted: {}", caseF64sWithNaNs)
		t.Errorf("   got: {}", case)
	}
}

#test
fn testStrs(t: &testing::T) {
	mut case := cloneSlice(caseStrs)
	Sort(case)
	if !IsSorted(case) {
		t.Errorf("sorted: {}", caseStrs)
		t.Errorf("   got: {}", case)
	}
}

#test
fn testIntsFunc(t: &testing::T) {
	mut case := cloneSlice(caseInts)
	SortFunc(case, fn(a: int, b: int): int { ret compare(a, b) })
	if !IsSorted(case) {
		t.Errorf("sorted: {}", caseInts)
		t.Errorf("   got: {}", case)
	}
}

#test
fn testF64sFunc(t: &testing::T) {
	mut case := cloneSlice(caseF64s)
	SortFunc(case, fn(a: f64, b: f64): int { ret compare(a, b) })
	if !IsSorted(case) {
		t.Errorf("sorted: {}", caseF64s)
		t.Errorf("   got: {}", case)
	}
}

#test
fn testStrsFunc(t: &testing::T) {
	mut case := cloneSlice(caseStrs)
	SortFunc(case, fn(a: str, b: str): int { ret compare(a, b) })
	if !IsSorted(case) {
		t.Errorf("sorted: {}", caseStrs)
		t.Errorf("   got: {}", case)
	}
}

fn compare[T](a: T, b: T): int {
	match {
	| a < b:
		ret -1
	| a > b:
		ret +1
	|:
		ret 0
	}
}