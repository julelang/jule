// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"
use "std/internal/runtime"
use "std/sys"

const (
	c0 = uintptr((8-runtime::PtrSize)/4*2860486313 + (runtime::PtrSize-4)/4*33054211828000289)
	c1 = uintptr((8-runtime::PtrSize)/4*3267000013 + (runtime::PtrSize-4)/4*23344194077549503)
)

// NOTE: Because NaN != NaN, a map can contain any
// number of (mostly useless) entries keyed with NaNs.
// To avoid long hash chains, we assign a random number
// as the hash value for a NaN.

fn f32hash(f: f32, seed: uintptr): uintptr {
	match {
	| f == 0:
		ret c1 * (c0 ^ seed) // +0, -0
	| f != f:
		ret c1 * (c0 ^ seed ^ uintptr(rand())) // any kind of NaN
	|:
		ret unsafe { memhash(&f, seed, 4) }
	}
}

fn f64hash(f: f64, seed: uintptr): uintptr {
	match {
	| f == 0:
		ret c1 * (c0 ^ seed) // +0, -0
	| f != f:
		ret c1 * (c0 ^ seed ^ uintptr(rand())) // any kind of NaN
	|:
		ret unsafe { memhash(&f, seed, 8) }
	}
}

fn cmplx64hash(c: cmplx64, seed: uintptr): uintptr {
	ret f32hash(imag(c), f32hash(real(c), seed))
}

fn cmplx128hash(c: cmplx128, seed: uintptr): uintptr {
	ret f64hash(imag(c), f64hash(real(c), seed))
}

fn boolhash(b: bool, seed: uintptr): uintptr {
	if b {
		ret seed + 1
	}
	ret seed
}

#disable nilptr
fn structhash[S](&s: *S, mut seed: uintptr): uintptr {
	const v = comptime::ValueOf(*s)
	const for i, field in v.Type().Decl().Fields() {
		const match {
		| field.Name() != "_":
			seed = maphash(&v.FieldByIndex(i).Unwrap(), seed)
		}
	}
	ret seed
}

#disable boundary nilptr
fn arrayhash[A](&a: *A, mut seed: uintptr): uintptr {
	for i in *a {
		seed = maphash(&(*a)[i], seed)
	}
	ret seed
}

#disable nilptr
fn strhash(&s: *str, seed: uintptr): uintptr {
	unsafe {
		sp := (*runtime::Str)(s)
		ret memhash(sp.Slice, seed, uintptr(sp.Len))
	}
}

fn i32hash(i: u32, seed: uintptr): uintptr {
	ret unsafe { memhash32(&i, seed) }
}

fn i64hash(i: u64, seed: uintptr): uintptr {
	ret unsafe { memhash64(&i, seed) }
}

// Common hash function for dynamic types with underlying smart pointer type.
// It should be same as pointer hashing.
//
// Exported as private non-usual API to escape from deadcode optimizations.
#export "__jule_priv_dynhash"
fn dynhash(ptr: *&uintptr, seed: uintptr): uintptr {
	ret unsafe { memhash((*unsafe)(uintptr(*ptr)), seed, runtime::PtrSize) }
}

#disable nilptr
fn maphash[K](&k: *K, seed: uintptr): uintptr {
	const t = comptime::TypeOf(K)
	const match {
	| t.CanNil():
		if *k == nil {
			ret seed
		}
	}
	const match t.Kind() {
	| comptime::Int | comptime::I8 | comptime::I16 | comptime::I32 | comptime::I64
	| comptime::Uint | comptime::U8 | comptime::U16 | comptime::U32 | comptime::U64:
		const match t.Bits() {
		| 64:
			ret i64hash(u64(*k), seed)
		|:
			ret i32hash(u32(*k), seed)
		}
	| comptime::Enum:
		comptime::TypeAlias(valueTyp, t.Value())
		ret unsafe { maphash(&(*(*valueTyp)(k)), seed) }
	| comptime::F32:
		ret f32hash(f32(*k), seed)
	| comptime::F64:
		ret f64hash(f64(*k), seed)
	| comptime::Cmplx64:
		ret cmplx64hash(cmplx64(*k), seed)
	| comptime::Cmplx128:
		ret cmplx128hash(cmplx128(*k), seed)
	| comptime::Trait | comptime::Any | comptime::TypeEnum:
		// If hash function pointer equals to nil, underlying type is not hashable.
		unsafe {
			dt := (*runtime::DynamicType)(k)
			if dt.Type.Hash == nil {
				panic("runtime: dynamic type used as map key with not-hashable/not-comparable underlying type")
			}
			ret sys::Addrcall[uintptr](uintptr(dt.Type.Hash), &dt.Data, seed)
		}
	| comptime::Str:
		ret unsafe { strhash(&(*(*str)(k)), seed) }
	| comptime::Uintptr:
		ret unsafe { memhash(k, seed, runtime::PtrSize) }
	| comptime::Ptr | comptime::Smartptr:
		z := uintptr(*k)
		ret unsafe { memhash(&z, seed, runtime::PtrSize) }
	| comptime::Bool:
		ret boolhash(bool(*k), seed)
	| comptime::Array:
		ret arrayhash(k, seed)
	| comptime::Struct:
		ret structhash(k, seed)
	| comptime::Chan:
		z := unsafe { uintptr(*(*&uintptr)(k)) }
		ret unsafe { memhash(&z, seed, runtime::PtrSize) }
	}
	panic("unreachable")
}

// Used to seed the hash function.
let mut hashkey: [4]uintptr = []

#disable boundary
fn hashinit() {
	for i in hashkey {
		hashkey[i] = uintptr(rand())
	}
}