// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use "std/sys"
use "std/unsafe"

// File descriptors for the standard input/output.
static mut stdin = poll::FD.New(u64(sys::STDIN), poll::Console)
static mut stdout = poll::FD.New(u64(sys::STDOUT), poll::Console)
static mut stderr = poll::FD.New(u64(sys::STDERR), poll::Console)

// Writes to stdout.
// Returns written byte count if success, -1 otherwise.
#export "__jule_writeStdout"
fn writeStdout(buf: []byte): int {
	mut n, ok := stdout.Write(buf)
	if !ok {
		n = -1
	}
	ret n
}

// Writes to stderr.
// Returns written byte count if success, -1 otherwise.
#export "__jule_writeStderr"
fn writeStderr(buf: []byte): int {
	mut n, ok := stderr.Write(buf)
	if !ok {
		n = -1
	}
	ret n
}

// Reads from stdin.
// Returns read byte count if success, -1 otherwise.
#export "__jule_readStdin"
fn readStdin(mut buf: []byte): int {
	mut n, ok := stdin.Read(buf)
	if !ok {
		n = -1
	}
	ret n
}

// The runtime implementation of the built-in print function.
#export "__jule_print"
fn zprint(s: str) {
	writeStdout(unsafe::StrBytes(s))
}

// The runtime implementation of the built-in println function.
#export "__jule_println"
fn zprintln(s: str) {
	writeStdout(unsafe::StrBytes(s))
	writeStdout(unsafe::StrBytes("\n"))
}