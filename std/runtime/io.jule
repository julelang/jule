// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/sys"
use "std/unsafe"

// File descriptors for the standard input/output.
let mut stdin = newStdioPoll(u64(sys::STDIN))
let mut stdout = newStdioPoll(u64(sys::STDOUT))
let mut stderr = newStdioPoll(u64(sys::STDERR))

// Writes to stdout.
// Returns written byte count if success, -1 otherwise.
#export "__jule_writeStdout"
fn writeStdout(buf: []byte): int {
	ret stdout.Write(buf) else { use -1 }
}

// Writes to stderr.
// Returns written byte count if success, -1 otherwise.
#export "__jule_writeStderr"
fn writeStderr(buf: []byte): int {
	ret stderr.Write(buf) else { use -1 }
}

// Reads from stdin.
// Returns read byte count if success, -1 otherwise.
#export "__jule_readStdin"
fn readStdin(mut buf: []byte): int {
	ret stdin.Read(buf) else { use -1 }
}

// The runtime implementation of the built-in print function.
#export "__jule_print"
fn zprint(s: str) {
	writeStdout(unsafe::StrBytes(s))
}

// The runtime implementation of the built-in println function.
#export "__jule_println"
fn zprintln(s: str) {
	writeStdout(unsafe::StrBytes(s))
	writeStdout(unsafe::StrBytes("\n"))
}