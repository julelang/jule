// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"
use "std/internal/runtime"
use "std/sys"
use "std/unsafe"

// Returns pointer in string form.
#export "__jule_ptrToStr"
fn ptrToStr(p: *unsafe): str {
	if p == nil {
		ret "<nil>"
	}
	const numbers = "0123456789abcdef"
	mut buf := make([]byte, 100)
	mut i := len(buf) - 1
	mut n := u64(uintptr(p))
	for i > 0; i-- {
		buf[i] = numbers[n%16]
		if n < 16 {
			break
		}
		n /= 16
	}
	i--
	buf[i] = 'x'
	i--
	buf[i] = '0'
	ret unsafe::StrFromBytes(buf[i:])
}

// Returns boolean in string form.
#export "__jule_boolToStr"
fn boolToStr(b: bool): str {
	if b {
		ret "true"
	}
	ret "false"
}

// Returns x in decimal string format.
#export "__jule_i64ToStr"
fn i64ToStr(x: i64): str {
	if x < 0 {
		ret "-" + u64ToStr(u64(-x))
	}
	ret u64ToStr(u64(x))
}

// Returns x in decimal string format.
#export "__jule_u64ToStr"
fn u64ToStr(mut x: u64): str {
	mut buf := make([]byte, 20) // big enough for 64bit value base 10
	n := u64ToBuf(buf, x)
	buf = buf[:n]
	ret unsafe::StrFromBytes(buf)
}

// Writes x in decimal string format into buf.
// Returns number of written bytes.
fn u64ToBuf(mut buf: []byte, mut x: u64): int {
	if x == 0 {
		buf[0] = '0'
		ret 1
	}
	mut i := 0
	for x >= 10 {
		q := x / 10
		buf[i] = byte('0' + x - q*10)
		i++
		x = q
	}
	// x < 10
	n := i + 1
	buf[i] = byte('0' + x)

	// reverse
	i = 0
	mut j := n - 1
	for i < j; i, j = i+1, j-1 {
		buf[i], buf[j] = buf[j], buf[i]
	}

	ret n
}

// Returns x in decimal string format.
#export "__jule_f64ToStr"
fn f64ToStr(mut v: f64): str {
	match {
	| v != v:
		ret "NaN"
	| v+v == v && v > 0:
		ret "+Inf"
	| v+v == v && v < 0:
		ret "-Inf"
	}

	const n = 7 // digits printed
	let mut buf: [n + 7]byte
	buf[0] = '+'
	mut e := 0 // exp
	if v == 0 {
		if 1/v < 0 {
			buf[0] = '-'
		}
	} else {
		if v < 0 {
			v = -v
			buf[0] = '-'
		}

		// normalize
		for v >= 10 {
			e++
			v /= 10
		}
		for v < 1 {
			e--
			v *= 10
		}

		// round
		mut h := 5.0
		mut i := 0
		for i < n; i++ {
			h /= 10
		}
		v += h
		if v >= 10 {
			e++
			v /= 10
		}
	}

	// format +d.dddd+edd
	mut i := 0
	for i < n; i++ {
		s := int(v)
		buf[i+2] = byte(s + '0')
		v -= f64(s)
		v *= 10
	}
	buf[1] = buf[2]
	buf[2] = '.'

	buf[n+2] = 'e'
	buf[n+3] = '+'
	if e < 0 {
		e = -e
		buf[n+3] = '-'
	}

	buf[n+4] = byte(e/100) + '0'
	buf[n+5] = byte(e/10)%10 + '0'
	buf[n+6] = byte(e%10) + '0'
	ret unsafe::StrFromBytes(buf[:])
}

// Returns x in string form with default format.
// Compatible with slices.
fn arrToStr[T](x: T): str {
	mut buf := make([]byte, 0, 20)
	buf = append(buf, '[')
	for i, z in x {
		if i > 0 {
			buf = append(buf, ", "...)
		}
		buf = append(buf, toStr(z)...)
	}
	buf = append(buf, ']')
	ret unsafe::StrFromBytes(buf)
}

// Returns x in string form with default format.
fn mapToStr[T](x: T): str {
	mut buf := make([]byte, 0, 20)
	buf = append(buf, '{')
	mut written := false
	for key, val in x {
		if written {
			buf = append(buf, ", "...)
		} else {
			written = true
		}
		buf = append(buf, toStr(key)...)
		buf = append(buf, ':')
		buf = append(buf, toStr(val)...)
	}
	buf = append(buf, '}')
	ret unsafe::StrFromBytes(buf)
}

// Tries to call reserved Str method for type.
fn tryToCallStr[T](x: T): (str, ok: bool) {
	const t = comptime::TypeOf(T)
	const for _, method in t.Decl().Methods() {
		const match method.Name() {
		| "Str":
			const v = comptime::ValueOf(x)
			const methodv = v.Method(method.Name())
			const match {
			| !methodv.Type().Decl().Exceptional() &&
				methodv.Type().Result().Kind() == comptime::Str:
				const params = method.Params()
				const match {
				| len(params) == 1 && !params[0].Mutable():
					ret methodv.Unwrap()(), true
				}
			}
		}
	}
	ret "", false
}

// Returns x in string form with default format.
fn structToStr[T](x: T): str {
	r, ok := tryToCallStr(x)
	if ok {
		ret r
	}
	const t = comptime::TypeOf(T)
	const v = comptime::ValueOf(x)
	mut buf := make([]byte, 0, 20)
	buf = append(buf, '{')
	const for i, field in t.Fields() {
		const match {
		| i > 0:
			buf = append(buf, ", "...)
		}
		const match {
		| field.Type().Bind():
			buf = append(buf, field.Type().Str()...)
		|:
			buf = append(buf, toStr(v.FieldByIndex(i).Unwrap())...)
		}
	}
	buf = append(buf, '}')
	ret unsafe::StrFromBytes(buf)
}

// Returns x in string form with default format.
// It designed for general-purpose string conversion for built-in behavior.
fn toStr[T](x: T): str {
	const t = comptime::TypeOf(T)
	const match {
	| t.Bind():
		ret t.Str()
	| t.CanNil():
		if x == nil {
			ret "<nil>"
		}
	}
	// Check strict case separately.
	// Because the type T may be CanNil and Strict at a time.
	const match {
	| t.Strict():
		// Lookup for the reserved Str method for the strict type like structures.
		r, ok := tryToCallStr(x)
		if ok {
			ret r
		}
		// If strict type have not the reserved Str method, handle by the source type.
		// Following analysis will do that.
	}

	const match t.Kind() {
	| comptime::Str:
		ret str(x)
	| comptime::Int | comptime::I8 | comptime::I16 | comptime::I32 | comptime::I64:
		ret i64ToStr(i64(x))
	| comptime::Uint | comptime::Uintptr | comptime::U8 | comptime::U16 | comptime::U32 | comptime::U64:
		ret u64ToStr(u64(x))
	| comptime::F32 | comptime::F64:
		ret f64ToStr(f64(x))
	| comptime::Bool:
		ret boolToStr(bool(x))
	| comptime::Any | comptime::TypeEnum | comptime::Trait:
		unsafe {
			dt := (*runtime::DynamicType)(&x)
			ret sys::Addrcall[str](uintptr(dt.Type.ToStr), dt.Data.Data)
		}
	| comptime::Func:
		ret unsafe { ptrToStr((*runtime::Func)(&x).Addr) }
	| comptime::Slice | comptime::Array:
		ret arrToStr(x)
	| comptime::Map:
		ret mapToStr(x)
	| comptime::Struct:
		ret structToStr(x)
	| comptime::SmartPtr:
		// Handle element type of smart pointer.
		const value = t.Value()
		const match {
		| value.Strict() | value.Kind() == comptime::Struct:
			r, ok := tryToCallStr(*x)
			if ok {
				ret r
			}
		}
		ret unsafe { ptrToStr((*unsafe)(uintptr(x))) }
	| comptime::Ptr | comptime::UnsafePtr:
		ret ptrToStr(unsafe { (*unsafe)(uintptr(x)) })
	| comptime::Enum:
		comptime::TypeAlias(valueTyp, t.Value())
		ret toStr(valueTyp(x))
	| comptime::Chan:
		// Channels are smart pointers behind the scene.
		// Take raw pointer, handle as &uintptr to read memory address of
		// smart pointer, and pass to ptrToStr as unsafe raw pointer to
		// print allocation address of the smart pointer.
		ret unsafe { ptrToStr((*unsafe)(uintptr(*(*&uintptr)(&x)))) }
	}
	panic("runtime: unsupported type for toStr")
}