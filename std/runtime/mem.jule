// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"
use "std/internal/runtime"
use "std/unsafe"

// Reports whether pointer allocations are points to same address.
#export "__jule_ptrEqual"
fn ptrEqual(a: *unsafe, b: *unsafe): bool {
	ret a == b
}

// Returns string based on b, the parameter b means first byte of string.
// The returned string uses n as length.
// Will not perform garbage collection.
#export "__jule_strBytePtr"
unsafe fn strBytePtr(b: *byte, n: int): str {
	mut s := ""
	mut sb := (*runtime::Str)(&s)
	sb.Buffer.Data = *(&b)
	sb.Buffer.Ref = nil
	sb.Slice = sb.Buffer.Data
	sb.Len = n
	ret s
}

// Equals to sliceBytePtr(&s[0], len(s), len(s)) call.
// Returns nil slice for empty string.
#export "__jule_strAsSlice"
fn strAsSlice(s: str): []byte {
	if len(s) == 0 {
		ret nil
	}
	ret unsafe::Slice(&s[0], len(s), len(s))
}

// Returns slice based on b, the parameter b means first element of slice.
// Will not perform garbage collection.
#export "__jule_sliceBytePtr"
fn sliceBytePtr(mut b: *byte, len: int, cap: int): []byte {
	ret unsafe::Slice(b, len, cap)
}

// Returns byte slice as str.
// Equals to strBytePtr(&b[0], len(b)) call.
// Returns empty string if len(b) == 0.
#export "__jule_sliceAsStr"
fn sliceAsStr(b: []byte): str {
	if len(b) == 0 {
		ret ""
	}
	ret unsafe { strBytePtr(&b[0], len(b)) }
}

// Fills the first n bytes of the pointer p with the constant byte b.
unsafe fn memset(mut p: *unsafe, b: byte, mut n: uint) {
	if p == nil {
		ret
	}
	mut bp := (*byte)(p)
	for n > 0; n-- {
		*bp = b
		bp++
	}
}

// Adds n offset to p in bytes.
fn add(p: *unsafe, n: uintptr): *unsafe {
	ret unsafe { (*unsafe)(uintptr(p) + n) }
}

// Note: Perform the read with a native endianness.
unsafe fn readUnaligned32(p: *unsafe): u32 {
	q := *(*[4]byte)(p)
	if BigEndian {
		ret u32(q[3]) | u32(q[2])<<8 | u32(q[1])<<16 | u32(q[0])<<24
	}
	ret u32(q[0]) | u32(q[1])<<8 | u32(q[2])<<16 | u32(q[3])<<24
}

// Note: Perform the read with a native endianness.
unsafe fn readUnaligned64(p: *unsafe): u64 {
	q := *(*[8]byte)(p)
	if BigEndian {
		ret u64(q[7]) | u64(q[6])<<8 | u64(q[5])<<16 | u64(q[4])<<24 |
			u64(q[3])<<32 | u64(q[2])<<40 | u64(q[1])<<48 | u64(q[0])<<56
	}
	ret u64(q[0]) | u64(q[1])<<8 | u64(q[2])<<16 | u64(q[3])<<24 | u64(q[4])<<32 | u64(q[5])<<40 | u64(q[6])<<48 | u64(q[7])<<56
}

// The runtime implementation of the built-in copy function.
fn memcopy[Dest, Src](mut dest: Dest, mut src: Src): (n: int) {
	n = len(src)
	if n > len(dest) {
		n = len(dest)
	}
	if n == 0 {
		ret
	}
	// Use pointers to skip boundary checking cost and fast access.
	unsafe {
		// memcopy may have string type for Src but it is safe to
		// handle them as slice. According to Jule memory model,
		// slice memory model can represent a string memory model.
		// And this implementation does not need to slice-specific data.
		comptime::TypeAlias(E, comptime::TypeOf(Dest).Value())
		mut d := (*runtime::Slice[E])(&dest).Slice
		mut s := (*runtime::Slice[E])(&src).Slice
		if d > s && u64(d-s) < u64(n) {
			// to overlaps with from
			// <from...>
			//        <to...>
			// copy in reverse, to avoid overwriting from
			f := s
			i := n - 1
			d += i
			s += i
			for f <= s {
				*d = *s
				d--
				s--
			}
		} else {
			// to overlaps with from
			//      <from...>
			// <to...>
			// copy in reverse, to avoid overwriting from
			end := s + n
			for s < end {
				*d = *s
				d++
				s++
			}
		}
	}
	ret
}

fn nextslicecap(newLen: int, oldCap: int): int {
	if oldCap == 0 {
		ret newLen
	}
	newcap := (oldCap<<1 + oldCap) >> 1 // oldCap * 1.5
	// We need to check `newcap >= newLen` and whether `newcap` overflowed.
	// newLen is guaranteed to be larger than zero, hence
	// when newcap overflows then `uint(newcap) > uint(newLen)`.
	// This allows to check for both with the same comparison.
	if uint(newcap) >= uint(newLen) {
		ret newcap
	}
	ret newLen
}

// Prepreation phase of memory append.
// If the slice s have not enough capacity for newItems, allocates a new slice for s.
fn prememappend[Slice](mut &s: Slice, newItems: int) {
	if cap(s)-len(s) >= newItems {
		ret
	}
	mut ns := make(Slice, len(s), nextslicecap(len(s)+newItems, cap(s)))
	memcopy(ns, s)
	s = ns
}

// The runtime implementation of the built-in append function.
fn memappend[Dest, Src](mut dest: Dest, mut src: Src): Dest {
	if len(src) == 0 {
		ret dest
	}
	prememappend(dest, len(src))
	n := len(dest)
	dest = dest[:len(dest)+len(src)]
	memcopy(dest[n:], src)
	ret dest
}

// Checks whether the reference pointer is nil, panics if so.
// Returns the pointer p.
// Intented to allow inline safety checks.
// For example: *(*int)(checkNilRef(myRef)) = 20
fn checkNilRef(mut p: *unsafe): *unsafe {
	if p == nil {
		panic("runtime: invalid memory address or nil pointer deference")
	}
	ret p
}