// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

const sptrSize = ptrSize << 1

struct sptrBase[T] {
	data: *T
	ref:  *uint
}

// Reports whether pointer allocations are points to same address.
#export "__jule_ptrEqual"
fn ptrEqual(a: *unsafe, b: *unsafe): bool {
	ret a == b
}

struct strBase {
	buffer: &byte
	slice:  *byte
	len:    int
}

// Returns string based on b, the parameter b means first byte of string.
// The returned string uses n as length.
// Will not perform garbage collection.
#export "__jule_strBytePtr"
unsafe fn strBytePtr(b: *byte, n: int): str {
	mut s := ""
	mut sb := (*strBase)(&s)
	sb.buffer = (&byte)(*(&b))
	sb.slice = (*byte)(sb.buffer)
	sb.len = n
	ret s
}

// Equals to sliceBytePtr(&s[0], len(s), len(s)) call.
// Returns nil slice for empty string.
#export "__jule_strAsSlice"
fn strAsSlice(s: str): []byte {
	if len(s) == 0 {
		ret nil
	}
	ret unsafe { slice(&s[0], len(s), len(s)) }
}

struct sliceBase[Elem] {
	data:  &Elem
	slice: *Elem
	len:   int
	cap:   int
}

// Returns slice based on e, the parameter e means first element of slice.
// Will not perform garbage collection.
unsafe fn slice[Elem](mut e: *Elem, len: int, cap: int): []Elem {
	mut buf := []Elem(nil)
	mut sb := (*sliceBase[Elem])(&buf)
	sb.data = (&Elem)(e)
	sb.slice = (*Elem)(sb.data)
	sb.len = len
	sb.cap = cap
	ret buf
}

// Returns slice based on b, the parameter b means first element of slice.
// Will not perform garbage collection.
#export "__jule_sliceBytePtr"
unsafe fn sliceBytePtr(mut b: *byte, len: int, cap: int): []byte {
	ret slice(b, len, cap)
}

// Returns byte slice as str.
// Equals to strBytePtr(&b[0], len(b)) call.
// Returns empty string if len(b) == 0.
#export "__jule_sliceAsStr"
fn sliceAsStr(b: []byte): str {
	if len(b) == 0 {
		ret ""
	}
	ret unsafe { strBytePtr(&b[0], len(b)) }
}

// Fills the first n bytes of the pointer p with the constant byte b.
unsafe fn memset(mut p: *unsafe, b: byte, mut n: uint) {
	if p == nil {
		ret
	}
	mut bp := (*byte)(p)
	for n > 0; n-- {
		*bp = b
		bp++
	}
}

// Adds n offset to p in bytes.
fn add(p: *unsafe, n: uintptr): *unsafe {
	ret unsafe { (*unsafe)(uintptr(p) + (n << 3)) }
}

// Note: Perform the read with a native endianness.
unsafe fn readUnaligned32(p: *unsafe): u32 {
	q := *(*[4]byte)(p)
	if BigEndian {
		ret u32(q[3]) | u32(q[2])<<8 | u32(q[1])<<16 | u32(q[0])<<24
	}
	ret u32(q[0]) | u32(q[1])<<8 | u32(q[2])<<16 | u32(q[3])<<24
}

// Note: Perform the read with a native endianness.
unsafe fn readUnaligned64(p: *unsafe): u64 {
	q := *(*[8]byte)(p)
	if BigEndian {
		ret u64(q[7]) | u64(q[6])<<8 | u64(q[5])<<16 | u64(q[4])<<24 |
			u64(q[3])<<32 | u64(q[2])<<40 | u64(q[1])<<48 | u64(q[0])<<56
	}
	ret u64(q[0]) | u64(q[1])<<8 | u64(q[2])<<16 | u64(q[3])<<24 | u64(q[4])<<32 | u64(q[5])<<40 | u64(q[6])<<48 | u64(q[7])<<56
}