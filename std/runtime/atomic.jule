// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

type atomicMemoryOrder: int

const atomicRelaxed = atomicMemoryOrder(0)
const atomicConsume = atomicMemoryOrder(1)
const atomicAcquire = atomicMemoryOrder(2)
const atomicRelease = atomicMemoryOrder(3)
const atomicAcqRel = atomicMemoryOrder(4)
const atomicSeqCst = atomicMemoryOrder(5)

#cdef
cpp unsafe fn __atomic_store(*unsafe, *unsafe, atomicMemoryOrder)

#cdef
cpp unsafe fn __atomic_load(*unsafe, *unsafe, atomicMemoryOrder)

#cdef
cpp unsafe fn __atomic_exchange[T](*unsafe, *unsafe, *unsafe, atomicMemoryOrder): T

#cdef
cpp unsafe fn __atomic_compare_exchange(*unsafe, *unsafe, *unsafe, int, atomicMemoryOrder, atomicMemoryOrder): bool

#cdef
cpp unsafe fn __atomic_fetch_add[T](*unsafe, T, atomicMemoryOrder): T

// Atomically stores new value to p with memory order mo, and returns the old value.
fn atomicSwap[T](mut &p: T, new: T, mo: atomicMemoryOrder): (old: T) {
	ret atomicSwapZ(p, new, mo)
}

// Atomically reads value of the p with memory order mo and returns.
fn atomicLoad[T](&p: T, mo: atomicMemoryOrder): T {
	ret atomicLoadZ[T, T](p, mo)
}

// Atomically reads value of the p and compares it with old.
// If comparison results with true, it atomically stores new value into p.
// In every case, it will use memory order mo.
// Reports whether swap succeeded.
fn atomicCompareAndSwap[T](mut &p: T, old: T, new: T, mo: atomicMemoryOrder): (swapped: bool) {
	ret atomicCompareAndSwapZ(p, old, new, mo)
}

// Atomically adds delta to p with memory order mo and returns the new value.
fn atomicAdd[T](mut &p: T, delta: T, mo: atomicMemoryOrder): (new: T) {
	ret atomicAddZ(p, delta, mo)
}

// Atomically stores new value to p with memory order mo.
fn atomicStore[T](mut &p: T, val: T, mo: atomicMemoryOrder) {
	atomicStoreZ(p, val, mo)
}

// Atomically stores new value to p with memory order mo, and returns the old value.
// T1 is a base pointer type, T2 is the output type.
fn atomicSwapZ[T1, T2](mut &p: T1, new: T2, mo: atomicMemoryOrder): (old: T2) {
	let mut tmp: T2
	unsafe { cpp.__atomic_exchange[T2](&p, &new, &tmp, mo) }
	ret tmp
}

// Atomically reads value of the p with memory order mo and returns.
// T1 is a base pointer type, T2 is the output type.
fn atomicLoadZ[T1, T2](&p: T1, mo: atomicMemoryOrder): T2 {
	let mut tmp: T2
	unsafe { cpp.__atomic_load(&p, &tmp, mo) }
	ret tmp
}

// Atomically reads value of the p and compares it with old.
// If comparison results with true, it atomically stores new value into p.
// In every case, it will use memory order mo.
// Reports whether swap succeeded.
// T1 is a base pointer type, T2 is the output type.
fn atomicCompareAndSwapZ[T1, T2](mut &p: T1, old: T2, new: T2, mo: atomicMemoryOrder): (swapped: bool) {
	const Strong = 0 // strong atomicity
	ret unsafe { cpp.__atomic_compare_exchange(&p, &old, &new, Strong, mo, mo) }
}

// Atomically adds delta to p with memory order mo and returns the new value.
// T1 is a base pointer type, T2 is the output type.
fn atomicAddZ[T1, T2](mut &p: T1, delta: T2, mo: atomicMemoryOrder): (new: T2) {
	ret unsafe { cpp.__atomic_fetch_add[T2](&p, delta, mo) } + delta
}

// Atomically stores new value to p with memory order mo.
// T1 is a base pointer type, T2 is the output type.
fn atomicStoreZ[T1, T2](mut &p: T1, val: T2, mo: atomicMemoryOrder) {
	unsafe { cpp.__atomic_store(&p, &val, mo) }
}