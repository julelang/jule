// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/sys"

cpp unsafe fn GetSystemTimeAsFileTime(mut ft: *cpp.FILETIME)
cpp unsafe fn QueryPerformanceCounter(mut counter: *cpp.LARGE_INTEGER): bool

#typedef
cpp struct FILETIME{}

#typedef
cpp struct LARGE_INTEGER{}

// Returns system-wide realtime clock in seconds and nanoseconds.
// The nanoseconds is not a second yet, always in range (0, 999999999).
fn timeNow(): (sec: i64, nsec: i64) {
	mut ft := sys::Filetime{}
	unsafe { cpp.GetSystemTimeAsFileTime((*cpp.FILETIME)(&ft)) } // Returns ticks in UTC
	// Get the number of seconds since January 1, 1970 12:00am UTC
	// FILETIME is in 100-nanosecond intervals since 1601-01-01
	mut t := i64(ft.HighDateTime)<<32 | i64(ft.LowDateTime)
	t -= 116444736000000000 // Convert from 1601 to 1970
	t /= 10                 // Convert from 100-ns intervals to nanoseconds
	sec = t / 1000000
	nsec = t % 1000000
	ret
}

fn nanotime(): i64 {
	mut counter := i64(0)
	if unsafe { !cpp.QueryPerformanceCounter((*cpp.LARGE_INTEGER)(&counter)) } {
		panic("runtime: nanotime failed")
	}
	ret counter
}