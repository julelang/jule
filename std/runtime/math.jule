// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

const (
	uvNaN = 0x7FF8000000000001
	uvinf = 0x7FF0000000000000
	uvneginf = 0xFFF0000000000000
)

// Equals to the math::NaN function.
#export "__jule_NaN"
fn nan(): f64 {
	ret f64frombits(uvNaN)
}

// Equals to the math::Inf function.
#export "__jule_Inf"
fn inf(sign: int): f64 {
	if sign >= 0 {
		ret f64frombits(uvinf)
	}
	ret f64frombits(uvneginf)
}

// Equals to the math::F64bits function.
fn f64bits(f: f64): u64 { ret unsafe { *((*u64)(&f)) } }

// Equals to the math::F64frombits function.
fn f64frombits(b: u64): f64 { ret unsafe { *((*f64)(&b)) } }

// Returns the 128-bit product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
// Equals to the bits::Mul64 function.
fn mul64(x: u64, y: u64): (hi: u64, lo: u64) {
	const mask32 = 1<<32 - 1
	x0 := x & mask32
	x1 := x >> 32
	y0 := y & mask32
	y1 := y >> 32
	w0 := x0 * y0
	t := x1*y0 + w0>>32
	mut w1 := t & mask32
	w2 := t >> 32
	w1 += x0 * y1
	hi = x1*y1 + w2 + w1>>32
	lo = x * y
	ret
}

// Returns the sum with carry of x, y and carry: sum = x + y + carry.
// The carry input must be 0 or 1; otherwise the behavior is undefined.
// The carryOut output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
// Equals to the bits::Add64 function.
fn add64(x: u64, y: u64, carry: u64): (sum: u64, carryOut: u64) {
	sum = x + y + carry
	// The sum will overflow if both top bits are set (x & y) or if one of them
	// is (x | y), and a carry from the lower place happened. If such a carry
	// happens, the top bit will be 1 + 0 + 1 = 0 (& ^sum).
	carryOut = ((x & y) | ((x | y) & ^sum)) >> 63
	ret
}

// lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/
fn fastModN(x: u32, n: u32): u32 {
	ret u32((u64(x) * u64(n)) >> 32)
}