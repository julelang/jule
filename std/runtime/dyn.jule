// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Runtime implementation of assertion casting for dynamic types.
// Type Dyn is the dynamic type. It may be any or trait.
// Type T is the casting T.
fn dynAssertAssign[Dyn, T](mut val: Dyn, mut &t: T, mut &ok: bool) {
	// References are safe, but this method may used by the compiler unsafely.
	// And we have to support nil references for such a low-level use.
	// So, If the |val| and |ok| references not implemented as is nil raw pointer
	// by the compiler, set it. Otherwise, do not touch it. Be safe.
	//
	// To determine whether |val| and |ok| is nil raw pointer behind the scene,
	// take raw pointer and compare it with nil. Since taking raw pointer of
	// the references will result as actual pointer of them, we can determine
	// whether the reference's raw pointer is nil.
	match type val {
	| T:
		if &ok != nil {
			ok = true
		}
		if &t != nil {
			t = (T)(val)
		}
		ret
	}
	if &ok != nil {
		ok = false
	}
	if &t != nil {
		let mut def: T
		t = def
	}
}