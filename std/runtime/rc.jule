// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"

// Type of reference counting data.
type _RCType = uint

// Pointer type for rereference counting data.
type _RCPtr = *_RCType

// The reference counting data delta value that must occur
// per each reference counting operation.
const RCDelta = 1

// Returns new initialized ready-to-use reference counting data allocation pointer.
#export "__jule_RCNew"
fn _RCNew(): _RCPtr {
	const Bits = comptime::TypeOf(_RCType).Bits()
	const BitsPerByte = 8
	mut p := unsafe { _RCPtr(cpp.malloc(Bits / BitsPerByte)) }
	if p == nil {
		panic("runtime: memory allocation failed for reference counting data")
	}
	unsafe { *p = RCDelta } // Initialize with one reference.
	ret p
}

// Reads reference counting data.
// Passing nil pointer is not safe.
//
// Implemented with no thread-safety by default.
// If thread-safety necessary, compiler will update implementation implicitly.
// See memory model of concurrency.
#export "__jule_RCLoad"
unsafe fn _RCLoad(p: _RCPtr): _RCType {
	ret *p
}

// Same as _RCLoad but have thread-safe implementation.
#export "__jule_RCLoadAtomic"
unsafe fn _RCLoadAtomic(p: _RCPtr): _RCType {
	ret atomicLoad[_RCType](*p, atomicAcquire)
}

// Adds strong reference to reference pointer.
// Passing nil pointer is not safe.
//
// Implemented with no thread-safety by default.
// If thread-safety necessary, compiler will update implementation implicitly.
// See memory model of concurrency.
#export "__jule_RCAdd"
unsafe fn _RCAdd(mut p: _RCPtr) {
	*p += RCDelta
}

// Same as _RCAdd but have thread-safe implementation.
#export "__jule_RCAddAtomic"
unsafe fn _RCAddAtomic(mut p: _RCPtr) {
	atomicAdd[_RCType](*p, RCDelta, atomicRelaxed)
}

// Drops strong reference from reference pointer.
// Passing nil pointer is not safe.
// Reports whether allocation still alive.
//
// Implemented with no thread-safety by default.
// If thread-safety necessary, compiler will update implementation implicitly.
// See memory model of concurrency.
#export "__jule_RCDrop"
unsafe fn _RCDrop(mut p: _RCPtr): bool {
	// If new data equals to zero, means references zeroed.
	*p -= RCDelta
	ret *p >= RCDelta
}

// Same as _RCDrop but have thread-safe implementation.
#export "__jule_RCDropAtomic"
unsafe fn _RCDropAtomic(mut p: _RCPtr): bool {
	// The atomicAdd function returns new data of pointer.
	// So if new data equals to zero, means references zeroed.
	ret atomicAdd[_RCType](*p, ^_RCType(RCDelta-1), atomicAcqRel) >= RCDelta
}

// Deallocates reference counting data allocation.
#export "__jule_RCFree"
unsafe fn _RCFree(p: _RCPtr) {
	cpp.free(p)
}