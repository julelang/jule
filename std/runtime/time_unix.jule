// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/sys"

cpp use "<time.h>"

cpp type clockid_t: int

cpp unsafe fn clock_gettime(id: cpp.clockid_t, mut tp: *cpp.timespec): int

cpp struct timespec{}

// Returns system-wide realtime clock in seconds and nanoseconds.
// The nanoseconds is not a second yet, always in range (0, 999999999).
fn timeNow(): (sec: i64, nsec: i64) {
	mut ts := sys::Timespec{}
	if unsafe { cpp.clock_gettime(cpp.clockid_t(_CLOCK_REALTIME), (*cpp.timespec)(&ts)) } == -1 {
		panic("runtime: timeNow failed")
	}
	sec, nsec = ts.Sec, ts.Nsec
	ret
}

fn nanotime(): i64 {
	mut ts := sys::Timespec{}
	if unsafe { cpp.clock_gettime(cpp.clockid_t(_CLOCK_MONOTONIC), (*cpp.timespec)(&ts)) } == -1 {
		panic("runtime: nanotime failed")
	}
	ret i64(ts.Sec)*1000000000 + i64(ts.Nsec)
}