// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

const fmutexSize = 32 // i32

// Simpler mutex implementation for elementary purposes.
struct fmutex {
	mut state: i32
}

impl fmutex {
	fn lock(self) {
		mut iter := 1
		for !self.tryLock() {
			iter <<= 1
			if iter < 1<<9 {
				sleep(1e6)
				iter = 0
			}
		}
	}

	fn unlock(self) {
		new := atomicAdd(self.state, -1, atomicSeqCst)
		if new != 0 {
			panic("runtime: mutex: unlock of unlocked mutex")
		}
	}

	fn tryLock(self): bool {
		ret atomicCompareAndSwap(self.state, 0, 1, atomicSeqCst)
	}
}