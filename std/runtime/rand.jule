// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Implements pseudo-random number generator (PRNG) based on PCG.
// See https://www.pcg-random.org
// See O’neill, M. E. (2014). “PCG: A family of simple fast space-efficient
//     statistically good algorithms for random number generation.
//     ACM Transactions on Mathematical Software.”
struct randmach {
	mu: fmutex

	mut lo: u64
	mut hi: u64
}

impl randmach {
	// This function initializes the internal state array with seed.
	fn init(self, seed1: u64, seed2: u64) {
		self.lo = seed1
		self.hi = seed2
	}

	fn next(self): u64 {
		// The Jule code is a modified version of the original Go code from
		// https://github.com/golang/go/blob/a947912d8ad5398a78f14ceaa80369f60a3f85f8/src/math/rand/v2/pcg.go

		// https://github.com/imneme/pcg-cpp/blob/428802d1a5/include/pcg_random.hpp#L161
		//
		// Numpy's PCG multiplies by the 64-bit value cheapMul
		// instead of the 128-bit value used here and in the official PCG code.
		// This does not seem worthwhile, at least for Go: not having any high
		// bits in the multiplier reduces the effect of low bits on the highest bits,
		// and it only saves 1 multiply out of 3.
		// (On 32-bit systems, it saves 1 out of 6, since Mul64 is doing 4.)
		const mulHi = 2549297995355413924
		const mulLo = 4865540595714422341
		const incHi = 6364136223846793005
		const incLo = 1442695040888963407

		// state = state * mul + inc
		mut hi, mut lo := mul64(self.lo, mulLo)
		hi = hi + self.hi*mulLo + self.lo*mulHi
		lo, c := add64(lo, incLo, 0)
		hi, _ = add64(hi, incHi, c)

		self.lo = lo
		self.hi = hi

		// XSL-RR would be
		//	ret bits::RotateLeft64(lo^hi, -int(hi>>58))
		// but Numpy uses DXSM and O'Neill suggests doing the same.
		// See https://github.com/golang/go/issues/21835#issuecomment-739065688
		// and following comments.

		// DXSM "double xorshift multiply"
		// https://github.com/imneme/pcg-cpp/blob/428802d1a5/include/pcg_random.hpp#L1015

		// https://github.com/imneme/pcg-cpp/blob/428802d1a5/include/pcg_random.hpp#L176
		const cheapMul = 0xda942042e4dd58b5
		hi ^= hi >> 32
		hi *= cheapMul
		hi ^= hi >> 48
		hi *= (lo | 1)
		ret hi
	}
}

// Runtime PRNG instance.
static __rand = randmach{}

// NOTE:
// Before initialization of runtime randmach instance, do not use it.
// If any initializer function uses random function directly or undirectly,
// be aware of that risk. Runtime randmach instance should be initialized before use.
fn randinit() {
	__rand.init(nanotime(), u64(uintptr(threads)))
}

// Returns pseudo-random number.
// It is safe for concurrent use by multiple threads.
fn rand(): u64 {
	__rand.mu.lock()
	r := __rand.next()
	__rand.mu.unlock()
	ret r
}

// Like rand() % n but faster.
fn randn(n: u32): u32 {
	// See https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction
	ret u32((u64(u32(rand())) * u64(n)) >> 32)
}