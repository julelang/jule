// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/sys"

cpp use "<pthread.h>"

cpp let pthread_create: *unsafe
cpp let pthread_equal: *unsafe
cpp let pthread_detach: *unsafe
cpp let pthread_self: *unsafe

#typedef
cpp struct pthread_t{}

// Wrapper for operating system thread.
struct osthread {
	handle: cpp.pthread_t
}

impl osthread {
	// Reports whether the threads are equal.
	fn equal(*self, other: cpp.pthread_t): bool {
		ret sys::Addrcall[i32](uintptr(cpp.pthread_equal), self.handle, other) != 0
	}
}

// Common head fields for a thread data.
struct threadData {
	handle: *cpp.pthread_t
}

// A low level API function for threads.
// It doesn't provide much abstraction.
// It just creates and detaches a thread using API.
// Reports whether the thread created successfully.
// The created thread is a native-thread.
// The |func| parameter should point to the valid function for operating system thread API.
// The |args| parameter may be nil and should point to the thread data.
// The thread data, should be fit into the threadData struct.
// So, the head fields of the thread data should be matched fields of the threadData.
#export "__jule_coSpawn"
unsafe fn coSpawn(func: *unsafe, mut args: *unsafe): bool {
	mut t := pushNewThread()
	(*threadData)(args).handle = &t.os.handle
	if sys::Addrcall[i32](uintptr(cpp.pthread_create), &t.os.handle, (*unsafe)(nil), func, args) != 0 {
		ret false
	}
	threadMutex.unlock()
	sys::Addrcall(uintptr(cpp.pthread_detach), t.os.handle)
	ret true
}

fn currentThreadID(): cpp.pthread_t {
	ret sys::Addrcall[cpp.pthread_t](uintptr(cpp.pthread_self))
}

fn osyield() {
	sys::SchedYield() else {}
}

fn threadinit() {
	setnumcpu()
	// Push the main thread to threads.
	// See the documentation of the pushNewThread function.
	// The |threads| should be initialized here, because compiler will not do it.
	// We do not have to lock the mutex for threads, no risk for concurrency.
	mut t := newThread()
	t.os.handle = currentThreadID()
	threads = t
}