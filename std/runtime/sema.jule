// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/cpu"
use "std/internal/runtime"
use "std/internal/runtime/atomic"

struct semaLeaf {
	ticket: u32  // acquired, boolean
	deq:    bool // dequeued from list
	next:   &semaLeaf
}

// Stores sema space for unique sema.
struct semaNode {
	sema: *u32
	tree: &semaLeaf // Root of tree of the waiters.
	next: &semaNode
}

const semaRootSize = fmutexSize + runtime::SmartptrSize + 32 // +32 for u32

// Stores all space collections of sema.
struct semaRoot {
	lock:  fmutex
	tree:  &semaNode // Root of tree of unique sema spaces.
	nwait: u32       // Number of waiters. Read w/o the lock, should be atomic.
}

impl semaRoot {
	fn queue(mut *self, mut &sema: *u32, mut sl: &semaLeaf, lifo: bool) {
		// The leaf may already used and some fields may be modified.
		// For example, a dequeued leaf may cannot acquaire sema and
		// enqueued again. So, data of old record may cause errors.
		// Reset them to default to avoid data misunderstanding.
		sl.next = nil
		sl.ticket = 0
		sl.deq = false

		mut t := self.tree
		mut otru := (&semaNode)(nil)
		if t != nil {
			for {
				// Already have sema in list.
				if uintptr(t.sema) == uintptr(sema) {
					if lifo {
						// Add sl to head of the wait list.
						sl.next = t.tree
						t.tree = sl
					} else {
						// Add sl to end of the wait list.
						mut tsl := t.tree
						for tsl.next != nil; tsl = tsl.next {
						}
						tsl.next = sl
					}
					ret
				}
				if otru == nil && t.sema == nil {
					otru = t
				}
				if t.next == nil {
					// Break iteration here.
					// If needed the last non-nil node will be used.
					break
				}
				t = t.next
			}
		}
		// Add new semaNode for sema since it is not exist in the list.
		if otru != nil {
			// Found a node in open to reuse state, so use it.
			otru.sema = sema
			otru.tree = sl
			ret
		}
		mut sn := new(semaNode)
		sn.sema = sema
		sn.tree = sl
		if self.tree == nil {
			// Head is nil, so sl will be.
			self.tree = sn
		} else {
			// Head is not nil and there is no reusable node.
			// So append sn to nodes.
			t.next = sn
		}
	}

	fn dequeue(mut *self, &sema: *u32): &semaLeaf {
		mut t := self.tree
		for t != nil; t = t.next {
			// Already have sema in list.
			if uintptr(t.sema) == uintptr(sema) {
				if t.tree == nil {
					break
				}
				mut sl := t.tree
				t.tree = sl.next
				// Remove sema if tree reached to nil.
				// So, open to reuse this allocation for other semas.
				if t.tree == nil {
					t.sema = nil
				}
				sl.deq = true
				ret sl
			}
		}
		ret nil
	}
}

// Prime to not correlate with any user patterns.
const semTabSize = 251

struct semTable {
	root: semaRoot
	pad:  [cpu::CacheLinePadSize + semaRootSize]byte
}

let mut semtable: [semTabSize]semTable = []

// Returns sema space collection for the sema from semtable.
fn semtable_rootFor(&sema: *u32): &semaRoot {
	ret unsafe { (&semaRoot)(&semtable[(uintptr(sema)>>3)%semTabSize].root) }
}

fn cansemacquire(mut &sema: *u32): bool {
	for {
		v := atomic::Load(sema, atomic::SeqCst)
		if v == 0 {
			ret false
		}
		if atomic::CompareAndSwap(sema, v, v-1, atomic::SeqCst) {
			ret true
		}
	}
}

// Puts the current thread into a waiting state and unlocks the lock.
fn semapark(&lock: *fmutex, &sema: *u32, &deq: *bool, opt: u32) {
	mut reason := u32(reasonNA | reasonStrict)
	if opt&semaWaitGroup == semaWaitGroup {
		reason |= reasonWaitGroup
	}
	if opt&semaMutex == semaMutex {
		reason |= reasonMutex
	}
	lock.unlock()
	for !*deq {
		yield(uintptr(sema), reason)
		reason &= ^reasonStrict
	}
}

// Semacquaire option flags.
const (
	semaWaitGroup = 1 << iota
	semaMutex
)

// Waits until sema > 0 and then atomically decrements it.
// It is intended as a simple sleep primitive for use by the synchronization
// library and should not be used directly.
// If lifo is true, queue waiter at the head of wait queue.
// wg reports whether the semacqure called by a waitgroup.
fn semacquire(mut &sema: *u32, lifo: bool, opt: u32) {
	// Easy case.
	if cansemacquire(sema) {
		ret
	}

	// Harder case:
	//	increment waiter count
	//	try cansemacquire one more time, return if succeeded
	//	enqueue itself as a waiter
	//	sleep
	//	(waiter descriptor is dequeued by signaler)
	mut root := semtable_rootFor(sema)
	mut sl := new(semaLeaf)
	for {
		root.lock.lock()
		// Add ourselves to nwait to disable "easy case" in semrelease.
		atomic::Add(&root.nwait, 1, atomic::SeqCst)
		// Check cansemacquire to avoid missed wakeup.
		if cansemacquire(sema) {
			atomic::Add(&root.nwait, ^u32(0), atomic::SeqCst)
			root.lock.unlock()
			break
		}
		// Any semrelease after the cansemacquire knows we're waiting
		// (we set nwait above), so go to sleep.
		root.queue(sema, sl, lifo)
		semapark(&root.lock, sema, &sl.deq, opt)
		// Try to acquire semaphore before enqueue again.
		if cansemacquire(sema) {
			break
		}
	}
}

// Atomically increments sema and notifies a waiting thread
// if one is blocked in semacquire.
// It is intended as a simple wakeup primitive for use by the synchronization
// library and should not be used directly.
// If handoff is true, tries to pass count directly to the first waiter.
fn semrelease(mut &sema: *u32, handoff: bool) {
	mut root := semtable_rootFor(sema)
	atomic::Add(sema, 1, atomic::SeqCst)

	// Easy case: no waiters?
	// This check must happen after the atomicAdd, to avoid a missed wakeup
	// (see loop in semacquire).
	if atomic::Load(&root.nwait, atomic::SeqCst) == 0 {
		ret
	}

	// Harder case: search for a waiter and wake it.
	root.lock.lock()
	if atomic::Load(&root.nwait, atomic::SeqCst) == 0 {
		// The count is already consumed by another thread,
		// so no need to wake up another thread.
		root.lock.unlock()
		ret
	}

	mut sl := root.dequeue(sema)
	if sl != nil {
		atomic::Add(&root.nwait, ^u32(0), atomic::SeqCst)
	}
	root.lock.unlock()
	// If handoff is true, immediately yield the CPU with no analysis.
	// This thread is not the expected owner of the next semacquire.
	// So this thread doesn't matter for now, yield the CPU to increase
	// the chances of semacquire of the dequeued thread.
	if handoff {
		osyield()
	}
}

// Checks if a < b, considering a & b running counts that may overflow the
// 32-bit range, and that their "unwrapped" difference is always less than 2^31.
fn less(a: u32, b: u32): bool {
	ret i32(a-b) < 0
}

// Ticket-based notification list used to implement condition variable primitives.
// It can be used raw (without any wrapper), but designed for wrapped use cases.
struct notifyList {
	// Ticket number of the next waiter.
	// It is atomically incremented outside the lock.
	wait: u32

	// Ticket number of the next waiter to be notified. It can
	// be read outside the lock, but is only written to with lock held.
	//
	// Both wait & notify can wrap around, and such cases will be correctly
	// handled as long as their "unwrapped" difference is bounded by 2^31.
	// For this not to be the case, we'd need to have 2^31+ threads
	// blocked on the same condvar, which is currently not possible.
	notify: u32

	lock: fmutex
}

// Adds new notify ticked to list l and returns the ticket number.
fn notifyListAdd(mut &l: *notifyList): u32 {
	ret atomic::Add(&l.wait, 1, atomic::SeqCst) - 1
}

// Waits for a notification. If one has been sent since
// notifyListAdd was called, it returns immediately. Otherwise, it blocks.
fn notifyListWait(mut &l: *notifyList, t: u32) {
	mut reason := u32(reasonCond | reasonStrict)
	for {
		l.lock.lock()
		if less(t, l.notify) {
			l.lock.unlock()
			ret
		}
		l.lock.unlock()
		yield(0, reason)
		reason &= ^reasonStrict
	}
}

// Notifies one entry in the list.
fn notifyListNotifyOne(mut &l: *notifyList) {
	// Fast-path: if there are no new waiters since the last notification
	// we don't need to acquire the lock at all.
	if atomic::Load(&l.wait, atomic::SeqCst) == atomic::Load(&l.notify, atomic::SeqCst) {
		ret
	}

	l.lock.lock()
	// Re-check under the lock if we need to do anything.
	t := l.notify
	if t == atomic::Load(&l.wait, atomic::SeqCst) {
		l.lock.unlock()
		ret
	}

	// Update the next notify ticket number.
	atomic::Add(&l.notify, t+1, atomic::SeqCst)

	l.lock.unlock()
}

// Notifies all entries in the list.
fn notifyListNotifyAll(mut &l: *notifyList) {
	l.lock.lock()

	// Update the next ticket to be notified. We can set it to the current
	// value of wait because any previous waiters are already in the list
	// or will notice that they have already been notified when trying to
	// add themselves to the list.
	wait := atomic::Load(&l.wait, atomic::SeqCst)
	atomic::Store(&l.notify, wait, atomic::SeqCst)

	l.lock.unlock()
}