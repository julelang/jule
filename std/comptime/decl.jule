// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

/* >>> Hint comptimeDecls implementation.

// Private compile-time information wrapper for comptimeDecl.
// Supports iterable and indexing implementations.
// Using with built-in len function returns count of files as constant expression.
struct comptimeDecls {}

*/

/* >>> Hint comptimeDecl implementation.

// Private compile-time declaration information wrapper.
// Designed for general declarations, not for instantiated/analyzed types.
//
// List of supported types:
//	- variables
//	- functions (with parameters)
//	- traits (with methods)
//	- enums (with fields)
//	- type enums
//	- structs (with fields and methods)
//	- type aliases
struct comptimeDecl {}

impl comptimeDecl {
	// Returns name of declaration.
	// Returns as constant expression.
	fn Name(self): str

	// Reports whether type is public as constant expression.
	fn Public(self): bool

	// Reports whether type is binded as constant expression.
	fn Binded(self): bool

	// Reports whether function type is exceptional as constant expression.
	// Only supports function types.
	fn Exceptional(self): bool
	
	// Reports whether declaration is mutable as constant expression.
	// Supports variables, fields, and parameters.
	fn Mutable(self): bool

	// Reports whether declaration is variadic as constant expression.
	// Supports parameters.
	fn Variadic(self): bool

	// Reports whether declaration is reference as constant expression.
	// Supports variables, and parameters.
	fn Reference(self): bool

	// Returns declaration information wrappers for function's parameters.
	// Supports only function types.
	fn Params(self): comptimeDecls

	// Returns declaration information wrappers for fields.
	// Supports only structure and enum types.
	fn Fields(self): comptimeDecls

	// Returns declaration information wrappers for methods.
	// Supports only structures and traits.
	fn Methods(self): comptimeDecls

	// Returns count of tags as constant expression.
	// Supports only structure fields.
	fn Tags(self): int

	// Returns the value of the tag corresponding to the key as a constant expression.
	// Supports only structure fields.
	// Parameter key should be constant.
	// Returns empty string if key is not exist in the tags.
	fn Tag(self, key: str): str
}

*/