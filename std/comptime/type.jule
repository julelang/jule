// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Type kinds.
const (
	Void      = iota // Void
	Int              // int
	Uint             // uint
	Uintptr          // uinptr
	I8               // i8
	I16              // i16
	I32              // i32
	I64              // i64
	U8               // u8
	U16              // u16
	U32              // u32
	U64              // u64
	F32              // f32
	F64              // f64
	Str              // str
	Bool             // bool
	Any              // any
	Array            // Array
	Slice            // Slice
	Map              // Map
	Struct           // Structure
	Trait            // Trait
	Enum             // Enum
	TypeEnum         // Type Enum
	Ptr              // Raw pointer
	UnsafePtr        // Unsafe raw pointer
	SmartPtr         // Smart pointer
	Func             // Function
	Tuple            // Tuple
	Chan             // Channel
)

// Returns compile-time type information.
// Cannot assign to memory, just available in compile-time.
// The expression is evaluated to determine type in compile-time and
// will not executed at runtime.
//
// All type information functionalities uses actual type
// (may there are exception cases). To examine and match actual types,
// comptime type information handling is useful.
// For example:
//
//	type ByteSlice: []byte
//	const t = comptime::TypeOf(ByteSlice)
//	const match type t.Kind() {
//	| comptime::Slice:
//		const match type t.Elem().Kind() {
//		| comptime::Byte:
//			...
//		}
//	}
//
//	In the example code above, the ByteSlice type is a strict type alias.
//	But we can examine the actual type with comptime type information api.
// fn TypeOf(t: T): comptimeTypeInfo

/* >>> Hint comptimeTypeInfos implementation.

// Private compile-time information wrapper for type infos.
// Supports iterable and indexing implementations.
// Using with built-in len function returns count of fields as constant expression.
struct comptimeTypeInfos {}

*/

/* >>> Hint comptimeTypeInfo implementation.

// Private compile-time type information wrapper.
// Supports the == and != operators to compare types.
struct comptimeTypeInfo {}

impl comptimeTypeInfo {
	// Reports whether type is constructed by a strict type alias as constant expression.
	fn Strict(self): bool

	// Returns kind of type.
	// Returns as constant expression.
	fn Kind(self): int

	// Returns string value of type (not actual type).
	// Returns as constant expression.
	fn Str(self): str

	// Returns declaration information for type.
	// Supports only structs, traits, enums, type enums, and functions.
	// For structures that constructed by the strict type alias,
	// it returns declaration information for the relevant implicit struct declaration.
	fn Decl(self): comptimeDecl

	// Returns bitsize of type.
	// Supports only primitive integer and floating-point types.
	// Returns as constant expression.
	fn Bits(self): int

	// Returns comptimeTypeInfo for element type.
	// Supports only raw pointers (except unsafe pointer), smart pointers, arrays, slices, channels, and enums.
	fn Elem(self): comptimeTypeInfo

	// Returns size of array.
	// Returns as constant expression.
	// Returns zero if array type is auto-sized declaration.
	fn Size(self): int

	// Returns type information for key type.
	// Supports only map types.
	fn Key(self): comptimeTypeInfo

	// Returns type information for value type.
	// Supports only map types.
	fn Value(self): comptimeTypeInfo

	// Returns field information for type.
	// Supports only structure and enum types.
	fn Fields(self): comptimeStructFields | comptimeEnumFields

	// Returns parameter information for function's parameters.
	// Supports only function types.
	fn Params(self): comptimeParams

	// Returns comptime-type information for tuple types.
	// Supports only tuple types.
	fn Types(self): comptimeTypeInfos

	// Returns compile-time information data for result type of function.
	// Only supports function types.
	fn Result(self): comptimeTypeInfo

	// Reports whether type is binded as constant expression.
	fn Binded(self): bool

	// Reports whether kind supports ordered constraint as constant expression.
	fn Ordered(self): bool

	// Reports whether kind supports comparable constraint as constant expression.
	fn Comparable(self): bool

	// Reports whether kind is mutable as constant expression.
	fn Mutable(self): bool

	// Reports whether kind is nil-compatible as constant expression.
	fn CanNil(self): bool

	// Reports whether kind performs garbage collection as constant expression.
	fn GC(self): bool
}

*/

/* >>> Hint comptimeStructFields implementation.

// Private compile-time information wrapper for struct fields.
// Supports iterable and indexing implementations.
// Using with built-in len function returns count of fields as constant expression.
struct comptimeStructFields {}

*/

/* >>> Hint comptimeStructField implementation.

// Private compile-time struct field information wrapper.
struct comptimeStructField {}

impl comptimeStructField {
	// Returns declaration information for field.
	fn Decl(self): comptimeDecl

	// Returns type information for field.
	fn Type(self): comptimeTypeInfo
}

*/

/* >>> Hint comptimeEnumFields implementation.

// Private compile-time information wrapper for enum fields.
// Supports iterable and indexing implementations.
// Using with built-in len function returns count of fields as constant expression.
struct comptimeEnumFields {}

*/

/* >>> Hint comptimeEnumField implementation.

// Private compile-time enum field information wrapper.
struct comptimeEnumField {}

impl comptimeEnumField {
	// Returns declaration information for field.
	fn Decl(self): comptimeDecl
}

*/

/* >>> Hint comptimeParams implementation.

// Private compile-time information wrapper for function parameters.
// Supports iterable and indexing implementations.
// Using with built-in len function returns count of fields as constant expression.
struct comptimeParams {}

*/

/* >>> Hint comptimeParam implementation.

// Private compile-time function parameter information wrapper.
struct comptimeParam {}

impl comptimeParam {
	// Returns declaration information for parameter.
	fn Decl(self): comptimeDecl

	// Reports whether parameter is receiver as constant expression.
	fn Recv(self): bool

	// Returns type information for parameter.
	fn Type(self): comptimeTypeInfo
}

*/