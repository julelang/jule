// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/0c7e5d3b8db6668d6bdb16410d59c0ae4133400a/src/path/path.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use "std/internal/byteslite"
use "std/unsafe"

// A lazybuf is a lazily constructed path buffer.
// It supports append, reading previously appended bytes,
// and retrieving the final string. It does not allocate a buffer
// to hold the output until that output diverges from s.
struct lazybuf {
	s:   str
	buf: []byte
	w:   int
}

impl lazybuf {
	fn index(*self, i: int): byte {
		if self.buf != nil {
			ret self.buf[i]
		}
		ret self.s[i]
	}

	fn append(mut *self, c: byte) {
		if self.buf == nil {
			if self.w < len(self.s) && self.s[self.w] == c {
				self.w++
				ret
			}
			self.buf = make([]byte, len(self.s))
			copy(self.buf, self.s[:self.w])
		}
		self.buf[self.w] = c
		self.w++
	}

	fn string(*self): str {
		if self.buf == nil {
			ret self.s[:self.w]
		}
		ret unsafe::StrFromBytes(self.buf[:self.w])
	}
}

// Returns the shortest path name equivalent to path
// by purely lexical processing. It applies the following rules
// iteratively until no further processing can be done:
//
//  1. Replace multiple slashes with a single slash.
//  2. Eliminate each . path name element (the current directory).
//  3. Eliminate each inner .. path name element (the parent directory)
//     along with the non-.. element that precedes it.
//  4. Eliminate .. elements that begin a rooted path:
//     that is, replace "/.." by "/" at the beginning of a path.
//
// The returned path ends in a slash only if it is the root "/".
//
// If the result of this process is an empty string, returns the string ".".
//
// See also Rob Pike, “Lexical File Names in Plan 9 or
// Getting Dot-Dot Right,”
// https://9p.io/sys/doc/lexnames.html
fn Clean(path: str): str {
	if path == "" {
		ret "."
	}

	let rooted = path[0] == '/'
	let n = len(path)

	// Invariants:
	//  reading from path; r is index of next byte to process.
	//  writing to buf; w is index of next byte to write.
	//  dotdot is index in buf where .. must stop, either because
	//      it is the leading slash or it is a leading ../../.. prefix.
	let mut out = lazybuf{s: path}
	let (mut r, mut dotdot) = 0, 0
	if rooted {
		out.append('/')
		r, dotdot = 1, 1
	}

	for r < n {
		match {
		| path[r] == '/':
			// empty path element
			r++
		| path[r] == '.' && (r+1 == n || path[r+1] == '/'):
			// . element
			r++
		| path[r] == '.' && path[r+1] == '.' && (r+2 == n || path[r+2] == '/'):
			// .. element: remove to last /
			r += 2
			match {
			| out.w > dotdot:
				// can backtrack
				out.w--
				for out.w > dotdot && out.index(out.w) != '/' {
					out.w--
				}
			| !rooted:
				// cannot backtrack, but not rooted, so append .. element.
				if out.w > 0 {
					out.append('/')
				}
				out.append('.')
				out.append('.')
				dotdot = out.w
			}
		|:
			// real path element.
			// add slash if needed
			if rooted && out.w != 1 || !rooted && out.w != 0 {
				out.append('/')
			}
			// copy element
			for r < n && path[r] != '/'; r++ {
				out.append(path[r])
			}
		}
	}

	// Turn empty string into "."
	if out.w == 0 {
		ret "."
	}

	ret out.string()
}

// Splits path immediately following the final slash,
// separating it into a directory and file name component.
// If there is no slash in path, returns an empty dir and
// file set to path.
// The returned values have the property that path = dir+file.
fn Split(path: str): (dir: str, file: str) {
	let i = byteslite::LastIndexByteStr(path, '/')
	ret path[:i+1], path[i+1:]
}

// Joins any number of path elements into a single path,
// separating them with slashes. Empty elements are ignored.
// The result is Cleaned. However, if the argument list is
// empty or all its elements are empty, returns an empty string.
fn Join(elem: ...str): str {
	let mut size = 0
	for _, e in elem {
		size += len(e)
	}
	if size == 0 {
		ret ""
	}
	let mut buf = make([]byte, 0, size+len(elem)-1)
	for _, e in elem {
		if len(buf) > 0 || e != "" {
			if len(buf) > 0 {
				buf = append(buf, '/')
			}
			buf = append(buf, e...)
		}
	}
	ret Clean(unsafe::StrFromBytes(buf))
}

// Returns the file name extension used by path.
// The extension is the suffix beginning at the final dot
// in the final slash-separated element of path;
// it is empty if there is no dot.
fn Ext(path: str): str {
	let mut i = len(path) - 1
	for i >= 0 && path[i] != '/'; i-- {
		if path[i] == '.' {
			ret path[i:]
		}
	}
	ret ""
}

// Returns the last element of path.
// Trailing slashes are removed before extracting the last element.
// If the path is empty, returns ".".
// If the path consists entirely of slashes, returns "/".
fn Base(mut path: str): str {
	if path == "" {
		ret "."
	}
	// Strip trailing slashes.
	for len(path) > 0 && path[len(path)-1] == '/' {
		path = path[0:len(path)-1]
	}
	// Find the last element
	let i = byteslite::LastIndexByteStr(path, '/')
	if i >= 0 {
		path = path[i+1:]
	}
	// If empty now, it had only slashes.
	if path == "" {
		ret "/"
	}
	ret path
}

// Reports whether the path is absolute.
fn IsAbs(path: str): bool {
	ret len(path) > 0 && path[0] == '/'
}

// Returns all but the last element of path, typically the path's directory.
// After dropping the final element using [Split], the path is Cleaned and trailing
// slashes are removed.
// If the path is empty, returns ".".
// If the path consists entirely of slashes followed by non-slash bytes,
// returns a single slash. In any other case, the returned path does not end in a
// slash.
fn Dir(path: str): str {
	let (dir, _) = Split(path)
	ret Clean(dir)
}