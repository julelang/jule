// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/fmt"
use "std/unsafe"

const statSkip = 1 << 0
const statFail = 1 << 1

// A test utility also used by the Jule runtime.
// It provides functionalities that facilitate the
// management and development of tests.
struct T {
	mut s: int
}

impl T {
	// Used by runtime.
	// Reset all data.
	fn reset(self) {
		self.s = 0
	}

	// Wrapper for internal logs.
	fn println(self, msg: str) {
		print("    ")
		println(msg)
	}

	// Fails test.
	// Does not breaks scope execution.
	fn Fail(self) {
		if self.s == statSkip {
			panic("testing: T.fail: failed test that already skipped")
		}
		self.s = statFail
	}

	// Reports whether test is failed.
	fn Failed(self): bool {
		ret self.s == statFail
	}

	// Skip test.
	// Does not breaks scope execution.
	fn Skip(self) {
		if self.s == statSkip {
			panic("testing: T.skip: skipped test that already failed")
		}
		self.s = statSkip
	}

	// Reports whether test is skipped.
	fn Skipped(self): bool {
		ret self.s == statSkip
	}

	// Set status of test as failure if expression is evaluated false at runtime.
	fn Assert(self, expr: bool, message: str): bool {
		if !expr {
			self.println(message)
			self.Fail()
		}
		ret expr
	}

	// Set status of test as failure and print message by formatting.
	// Prints new-line after formatted text.
	// Uses "std/fmt" internally.
	fn Errorf(self, fmt: str, args: ...any) {
		self.println(fmt::Format(fmt, args...))
		self.Fail()
	}

	// Logs message with no error, test status will not be affected.
	fn Logf(self, fmt: str, args: ...any) {
		self.println(fmt::Format(fmt, args...))
	}
}