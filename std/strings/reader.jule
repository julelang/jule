// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/errors"
use "std/io"
use "std/unicode/utf8"

// Implements the io::Reader, io::ReaderAt, io::ByteReader, io::RuneReader,
// io::Seeker, and io::WriterTo traits by reading from a string.
// The zero value for Reader operates like a Reader of an empty string.
struct Reader {
	s:            str
	mut i:        i64 // current reading index
	mut prevRune: int // index of previous rune; or < 0
}

impl io::Reader for Reader {}
impl io::ReaderAt for Reader {}
impl io::ByteReader for Reader {}
impl io::RuneReader for Reader {}
impl io::Seeker for Reader {}
impl io::WriterTo for Reader {}

impl Reader {
	// Returns a new Reader reading from s.
	fn New(s: str): &Reader { ret &Reader{s, 0, -1} }

	// Returns the number of bytes of the unread portion of the string.
	fn Len(*self): int {
		if self.i >= i64(len(self.s)) {
			ret 0
		}
		ret int(i64(len(self.s)) - self.i)
	}

	// Returns the original length of the underlying string.
	// Size is the number of bytes available for reading via ReadAt.
	// The returned value is always the same and is not affected by calls
	// to any other method.
	fn Size(*self): i64 { ret i64(len(self.s)) }

	// Implements the io::Reader trait.
	fn Read(*self, mut b: []byte)!: (n: int) {
		if self.i >= i64(len(self.s)) {
			ret io::EOF
		}
		self.prevRune = -1
		n = copy(b, self.s[self.i:])
		self.i += i64(n)
		ret
	}

	// Implements the io::ReaderAt trait.
	fn ReadAt(*self, mut b: []byte, off: i64)!: (n: int) {
		// cannot modify state - see io::ReaderAt
		if off < 0 {
			error(errors::New("strings::Reader.ReadAt: negative offset"))
		}
		if off >= i64(len(self.s)) {
			ret io::EOF
		}
		n = copy(b, self.s[off:])
		ret
	}

	// Implements the io::ByteReader trait.
	fn ReadByte(mut *self)!: (byte, int) {
		self.prevRune = -1
		if self.i >= i64(len(self.s)) {
			ret 0, io::EOF
		}
		b := self.s[self.i]
		self.i++
		ret b, 1
	}

	// Implements the io::ByteScanner trait.
	fn UnreadByte(*self)! {
		if self.i <= 0 {
			error(errors::New("strings::Reader.UnreadByte: at beginning of string"))
		}
		self.prevRune = -1
		self.i--
	}

	// Implements the io::RuneReader trait.
	fn ReadRune(*self)!: (ch: rune, size: int) {
		if self.i >= i64(len(self.s)) {
			self.prevRune = -1
			ret 0, io::EOF
		}
		self.prevRune = int(self.i)
		c := self.s[self.i]
		if c < utf8::RuneSelf {
			self.i++
			ret rune(c), 1
		}
		ch, size = utf8::DecodeRuneStr(self.s[self.i:])
		self.i += i64(size)
		ret
	}

	// Implements the io::RuneScanner trait.
	fn UnreadRune(*self)! {
		if self.i <= 0 {
			error(errors::New("strings::Reader.UnreadRune: at beginning of string"))
		}
		if self.prevRune < 0 {
			error(errors::New("strings::Reader.UnreadRune: previous operation was not ReadRune"))
		}
		self.i = i64(self.prevRune)
		self.prevRune = -1
	}

	// Implements the io::Seeker trait.
	fn Seek(*self, offset: i64, whence: int)!: i64 {
		self.prevRune = -1
		let mut abs: i64
		match whence {
		| io::SeekStart:
			abs = offset
		| io::SeekCurrent:
			abs = self.i + offset
		| io::SeekEnd:
			abs = i64(len(self.s)) + offset
		|:
			error(errors::New("strings::Reader.Seek: invalid whence"))
		}
		if abs < 0 {
			error(errors::New("strings::Reader.Seek: negative position"))
		}
		self.i = abs
		ret abs
	}

	// Implements the io:.WriterTo trait.
	fn WriteTo(*self, mut w: io::Writer)!: (n: i64) {
		self.prevRune = -1
		if self.i >= i64(len(self.s)) {
			ret io::EOF
		}
		s := self.s[self.i:]
		m := io::WriteStr(w, s) else { error(error) }
		if m > len(s) {
			panic("strings::Reader.WriteTo: invalid WriteStr count")
		}
		self.i += i64(m)
		n = i64(m)
		if m != len(s) {
			error(io::ErrShortWrite)
		}
		ret
	}

	// Resets the Reader to be reading from s.
	fn Reset(mut *self, s: str) {
		self.s = s
		self.i = 0
		self.prevRune = -1
	}
}