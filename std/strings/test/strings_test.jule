// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/fmt"
use "std/slices"
use "std/strings"
use "std/testing"
use "std/unicode"
use "std/unicode/utf8"

let abcd = "abcd"
let faces = "☺☻☹"
let commas = "1,2,3,4"
let dots = "1....2....3....4"

let space = str([]rune(['\t', '\v', '\r', '\f', '\n', '\u0085', '\u00a0', '\u2000', '\u3000']))

let longString = "a" + str(make([]byte, 1<<16)) + "z"

struct binOpTest {
	a: str
	b: str
	i: int
}

let indexTests: []binOpTest = [
	{"", "", 0},
	{"", "a", -1},
	{"", "foo", -1},
	{"fo", "foo", -1},
	{"foo", "baz", -1},
	{"foo", "foo", 0},
	{"oofofoofooo", "f", 2},
	{"oofofoofooo", "foo", 4},
	{"barfoobarfoo", "foo", 3},
	{"foo", "", 0},
	{"foo", "o", 1},
	{"abcABCabc", "A", 3},
	// cases with one byte strings - test IndexByte and special case in Index()
	{"", "a", -1},
	{"x", "a", -1},
	{"x", "x", 0},
	{"abc", "a", 0},
	{"abc", "b", 1},
	{"abc", "c", 2},
	{"abc", "x", -1},
	{"barfoobarfooyyyzzzyyyzzzyyyzzzyyyxxxzzzyyy", "x", 33},
	{"fofofofooofoboo", "oo", 7},
	{"fofofofofofoboo", "ob", 11},
	{"fofofofofofoboo", "boo", 12},
	{"fofofofofofoboo", "oboo", 11},
	{"fofofofofoooboo", "fooo", 8},
	{"fofofofofofoboo", "foboo", 10},
	{"fofofofofofoboo", "fofob", 8},
	{"fofofofofofofoffofoobarfoo", "foffof", 12},
	{"fofofofofoofofoffofoobarfoo", "foffof", 13},
	{"fofofofofofofoffofoobarfoo", "foffofo", 12},
	{"fofofofofoofofoffofoobarfoo", "foffofo", 13},
	{"fofofofofoofofoffofoobarfoo", "foffofoo", 13},
	{"fofofofofofofoffofoobarfoo", "foffofoo", 12},
	{"fofofofofoofofoffofoobarfoo", "foffofoob", 13},
	{"fofofofofofofoffofoobarfoo", "foffofoob", 12},
	{"fofofofofoofofoffofoobarfoo", "foffofooba", 13},
	{"fofofofofofofoffofoobarfoo", "foffofooba", 12},
	{"fofofofofoofofoffofoobarfoo", "foffofoobar", 13},
	{"fofofofofofofoffofoobarfoo", "foffofoobar", 12},
	{"fofofofofoofofoffofoobarfoo", "foffofoobarf", 13},
	{"fofofofofofofoffofoobarfoo", "foffofoobarf", 12},
	{"fofofofofoofofoffofoobarfoo", "foffofoobarfo", 13},
	{"fofofofofofofoffofoobarfoo", "foffofoobarfo", 12},
	{"fofofofofoofofoffofoobarfoo", "foffofoobarfoo", 13},
	{"fofofofofofofoffofoobarfoo", "foffofoobarfoo", 12},
	{"fofofofofoofofoffofoobarfoo", "ofoffofoobarfoo", 12},
	{"fofofofofofofoffofoobarfoo", "ofoffofoobarfoo", 11},
	{"fofofofofoofofoffofoobarfoo", "fofoffofoobarfoo", 11},
	{"fofofofofofofoffofoobarfoo", "fofoffofoobarfoo", 10},
	{"fofofofofoofofoffofoobarfoo", "foobars", -1},
	{"foofyfoobarfoobar", "y", 4},
	{"oooooooooooooooooooooo", "r", -1},
	{"oxoxoxoxoxoxoxoxoxoxoxoy", "oy", 22},
	{"oxoxoxoxoxoxoxoxoxoxoxox", "oy", -1},
	// test fallback to Rabin-Karp.
	{"000000000000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000000001", 5},
	// test fallback to IndexRune
	{"oxoxoxoxoxoxoxoxoxoxox☺", "☺", 22},
	// invalid UTF-8 byte sequence (must be longer than bytealg.MaxBruteForce to
	// test that we don't use IndexRune)
	{"xx0123456789012345678901234567890123456789012345678901234567890120123456789012345678901234567890123456xxx\xed\x9f\xc0", "\xed\x9f\xc0", 105},
]

let lastIndexTests: []binOpTest = [
	{"", "", 0},
	{"", "a", -1},
	{"", "foo", -1},
	{"fo", "foo", -1},
	{"foo", "foo", 0},
	{"foo", "f", 0},
	{"oofofoofooo", "f", 7},
	{"oofofoofooo", "foo", 7},
	{"barfoobarfoo", "foo", 9},
	{"foo", "", 3},
	{"foo", "o", 2},
	{"abcABCabc", "A", 3},
	{"abcABCabc", "a", 6},
]

let indexAnyTests: []binOpTest = [
	{"", "", -1},
	{"", "a", -1},
	{"", "abc", -1},
	{"a", "", -1},
	{"a", "a", 0},
	{"\x80", "\xffb", 0},
	{"aaa", "a", 0},
	{"abc", "xyz", -1},
	{"abc", "xcz", 2},
	{"ab☺c", "x☺yz", 2},
	{"a☺b☻c☹d", "cx", len("a☺b☻")},
	{"a☺b☻c☹d", "uvw☻xyz", len("a☺b")},
	{"aRegExp*", ".(|)*+?^$[]", 7},
	{dots + dots + dots, " ", -1},
	{"012abcba210", "\xffb", 4},
	{"012\x80bcb\x80210", "\xffb", 3},
	{"0123456\xcf\x80abc", "\xcfb\x80", 10},
]

let lastIndexAnyTests: []binOpTest = [
	{"", "", -1},
	{"", "a", -1},
	{"", "abc", -1},
	{"a", "", -1},
	{"a", "a", 0},
	{"\x80", "\xffb", 0},
	{"aaa", "a", 2},
	{"abc", "xyz", -1},
	{"abc", "ab", 1},
	{"ab☺c", "x☺yz", 2},
	{"a☺b☻c☹d", "cx", len("a☺b☻")},
	{"a☺b☻c☹d", "uvw☻xyz", len("a☺b")},
	{"a.RegExp*", ".(|)*+?^$[]", 8},
	{dots + dots + dots, " ", -1},
	{"012abcba210", "\xffb", 6},
	{"012\x80bcb\x80210", "\xffb", 7},
	{"0123456\xcf\x80abc", "\xcfb\x80", 10},
]

#test
fn testIndexAny(t: &testing::T) {
	for _, tt in indexAnyTests {
		if len(tt.b) != 1 {
			continue
		}
		a := tt.a
		b := tt.b
		pos := strings::IndexAny(a, b)
		if pos != tt.i {
			t.Errorf(`IndexAny({}, '{}') = {}`, tt.a, b, pos)
		}
	}
}

#test
fn testLastIndexAny(t: &testing::T) {
	for _, tt in lastIndexAnyTests {
		if len(tt.b) != 1 {
			continue
		}
		a := tt.a
		b := tt.b
		pos := strings::LastIndexAny(a, b)
		if pos != tt.i {
			t.Errorf(`LastIndexAny({}, '{}') = {}`, tt.a, b, pos)
		}
	}
}

#test
fn testIndex(t: &testing::T) {
	for _, tt in indexTests {
		if len(tt.b) != 1 {
			continue
		}
		a := tt.a
		b := tt.b
		pos := strings::Index(a, b)
		if pos != tt.i {
			t.Errorf(`Index({}, '{}') = {}`, tt.a, b, pos)
		}
	}
}

#test
fn testLastIndex(t: &testing::T) {
	for _, tt in lastIndexTests {
		if len(tt.b) != 1 {
			continue
		}
		a := tt.a
		b := tt.b
		pos := strings::LastIndex(a, b)
		if pos != tt.i {
			t.Errorf(`LastIndex({}, '{}') = {}`, tt.a, b, pos)
		}
	}
}

#test
fn testLastIndexByte(t: &testing::T) {
	for _, tt in lastIndexTests {
		if len(tt.b) != 1 {
			continue
		}
		a := tt.a
		b := tt.b[0]
		pos := strings::LastIndexByte(a, b)
		if pos != tt.i {
			t.Errorf(`LastIndexByte({}, '{}') = {}`, tt.a, b, pos)
		}
	}
}

#test
fn testIndexByte(t: &testing::T) {
	for _, tt in indexTests {
		if len(tt.b) != 1 {
			continue
		}
		a := tt.a
		b := tt.b[0]
		pos := strings::IndexByte(a, b)
		if pos != tt.i {
			t.Errorf(`IndexByte({}, '{}') = {}`, tt.a, b, pos)
		}
	}
}

struct indexRuneTest {
	input: str
	rune:  rune
	want:  int
}

let tests: []indexRuneTest = [
	{"", 'a', -1},
	{"", '☺', -1},
	{"foo", '☹', -1},
	{"foo", 'o', 1},
	{"foo☺bar", '☺', 3},
	{"foo☺☻☹bar", '☹', 9},
	{"a A x", 'A', 2},
	{"some_text=some_value", '=', 9},
	{"☺a", 'a', 3},
	{"a☻☺b", '☺', 4},
	{"𠀳𠀗𠀾𠁄𠀧𠁆𠁂𠀫𠀖𠀪𠀲𠀴𠁀𠀨𠀿", '𠀿', 56},

	// 2 bytes
	{"ӆ", 'ӆ', 0},
	{"a", 'ӆ', -1},
	{"  ӆ", 'ӆ', 2},
	{"  a", 'ӆ', -1},
	{strings::Repeat("ц", 64) + "ӆ", 'ӆ', 128},                   // test cutover
	{strings::Repeat("ц", 64), 'ӆ', -1},

	// 3 bytes
	{"Ꚁ", 'Ꚁ', 0},
	{"a", 'Ꚁ', -1},
	{"  Ꚁ", 'Ꚁ', 2},
	{"  a", 'Ꚁ', -1},
	{strings::Repeat("Ꙁ", 64) + "Ꚁ", 'Ꚁ', 192},                   // test cutover
	{strings::Repeat("Ꙁ", 64) + "Ꚁ", '䚀', -1},                    // 'Ꚁ' and '䚀' share the same last two bytes

	// 4 bytes
	{"𡌀", '𡌀', 0},
	{"a", '𡌀', -1},
	{"  𡌀", '𡌀', 2},
	{"  a", '𡌀', -1},
	{strings::Repeat("𡋀", 64) + "𡌀", '𡌀', 256},                   // test cutover
	{strings::Repeat("𡋀", 64) + "𡌀", '𣌀', -1},                    // '𡌀' and '𣌀' share the same last two bytes

	// RuneError should match any invalid UTF-8 byte sequence.
	{"�", '�', 0},
	{"\xff", '�', 0},
	{"☻x�", '�', len("☻x")},
	{"☻x\xe2\x98", '�', len("☻x")},
	{"☻x\xe2\x98�", '�', len("☻x")},
	{"☻x\xe2\x98x", '�', len("☻x")},

	// Invalid rune values should never match.
	{"a☺b☻c☹d\xe2\x98�\xff�\xed\xa0\x80", -1, -1},
	{"a☺b☻c☹d\xe2\x98�\xff�\xed\xa0\x80", 0xD800, -1},            // Surrogate pair
	{"a☺b☻c☹d\xe2\x98�\xff�\xed\xa0\x80", utf8::MaxRune + 1, -1},

	// Test the cutover to bytealg.Index when it is triggered in
	// the middle of rune that contains consecutive runs of equal bytes.
	{"aaaaaKKKK\U000bc104", '\U000bc104', 17},                    // cutover: (n + 16) / 8
	{"aaaaaKKKK鄄", '鄄', 17},
	{"aaKKKKKa\U000bc104", '\U000bc104', 18},                     // cutover: 4 + n>>4
	{"aaKKKKKa鄄", '鄄', 18},
]

#test
fn testIndexRune(t: &testing::T) {
	for _, tt in tests {
		got := strings::IndexRune(tt.input, tt.rune)
		if got != tt.want {
			t.Errorf("IndexRune({}, {}) = {}; want {}", tt.input, tt.rune, got, tt.want)
		}
	}
}

// Test case for any function which accepts and returns a byte slice.
// For ease of creation, we write the input byte slice as a string.
struct strTest {
	input: str
	out:   str
}

let trimSpaceTests: []strTest = [
	{"", ""},
	{"  a", "a"},
	{"b  ", "b"},
	{"abc", "abc"},
	{space + "abc" + space, "abc"},
	{" ", ""},
	{"\u3000 ", ""},
	{" \u3000", ""},
	{" \t\r\n \t\t\r\r\n\n ", ""},
	{" \t\r\n x\t\t\r\r\n\n ", "x"},
	{" \u2000\t\r\n x\t\t\r\r\ny\n \u3000", "x\t\t\r\r\ny"},
	{"1 \t\r\n2", "1 \t\r\n2"},
	{" x\x80", "x\x80"},
	{" x\xc0", "x\xc0"},
	{"x \xc0\xc0 ", "x \xc0\xc0"},
	{"x \xc0", "x \xc0"},
	{"x \xc0 ", "x \xc0"},
	{"x \xc0\xc0 ", "x \xc0\xc0"},
	{"x ☺\xc0\xc0 ", "x ☺\xc0\xc0"},
	{"x ☺ ", "x ☺"},
]

let upperTests: []strTest = [
	{"", ""},
	{"ONLYUPPER", "ONLYUPPER"},
	{"abc", "ABC"},
	{"AbC123", "ABC123"},
	{"azAZ09_", "AZAZ09_"},
	{"longStrinGwitHmixofsmaLLandcAps", "LONGSTRINGWITHMIXOFSMALLANDCAPS"},
	{"long\u0250string\u0250with\u0250nonascii\u2C6Fchars", "LONG\u2C6FSTRING\u2C6FWITH\u2C6FNONASCII\u2C6FCHARS"},
	{"\u0250\u0250\u0250\u0250\u0250", "\u2C6F\u2C6F\u2C6F\u2C6F\u2C6F"},                                           // grows one byte per char
]

let lowerTests: []strTest = [
	{"", ""},
	{"abc", "abc"},
	{"AbC123", "abc123"},
	{"azAZ09_", "azaz09_"},
	{"longStrinGwitHmixofsmaLLandcAps", "longstringwithmixofsmallandcaps"},
	{"LONG\u2C6FSTRING\u2C6FWITH\u2C6FNONASCII\u2C6FCHARS", "long\u0250string\u0250with\u0250nonascii\u0250chars"},
	{"\u2C6D\u2C6D\u2C6D\u2C6D\u2C6D", "\u0251\u0251\u0251\u0251\u0251"},                                           // shrinks one byte per char
]

// Execute f on each test case.  funcName should be the name of f; it's used
// in failure reports.
fn runStrTests[F](t: &testing::T, f: F, funcName: str, testCases: []strTest) {
	for _, tc in testCases {
		actual := f(tc.input)
		if actual == "" && tc.out != "" {
			t.Errorf("{}({}) = nil; want {}", funcName, tc.input, tc.out)
		}
		if actual != "" && tc.out == "" {
			t.Errorf("{}({}) = {}; want nil", funcName, tc.input, actual)
		}
		if actual != tc.out {
			t.Errorf("{}({}) = {}; want {}", funcName, tc.input, actual, tc.out)
		}
	}
}

#test
fn testTrimSpace(t: &testing::T) { runStrTests(t, strings::TrimSpace, "TrimSpace", trimSpaceTests) }

#test
fn testToUpper(t: &testing::T) { runStrTests(t, strings::ToUpper, "ToUpper", upperTests) }

#test
fn testToLower(t: &testing::T) { runStrTests(t, strings::ToLower, "ToLower", lowerTests) }

struct repeatTest {
	input: str
	out:   str
	count: int
}

let repeatTests: []repeatTest = [
	{"", "", 0},
	{"", "", 1},
	{"", "", 2},
	{"-", "", 0},
	{"-", "-", 1},
	{"-", "----------", 10},
	{"abc ", "abc abc abc ", 3},
	// Tests for results over the chunkLimit
	{str(rune(0)), str(make([]byte, 1<<16)), 1 << 16},
	{longString, longString + longString, 2},
]

#test
fn testRepeat(t: &testing::T) {
	for _, tt in repeatTests {
		tin := tt.input
		tout := tt.out
		a := strings::Repeat(tin, tt.count)
		if a != tout {
			t.Errorf("Repeat({}, {}) = {}; want {}", tin, tt.count, a, tout)
			continue
		}
	}
}

struct trimTest {
	f:     str
	input: str
	arg:   str
	out:   str
}

let trimTests: []trimTest = [
	{"Trim", "abba", "a", "bb"},
	{"Trim", "abba", "ab", ""},
	{"TrimLeft", "abba", "ab", ""},
	{"TrimRight", "abba", "ab", ""},
	{"TrimLeft", "abba", "a", "bba"},
	{"TrimLeft", "abba", "b", "abba"},
	{"TrimRight", "abba", "a", "abb"},
	{"TrimRight", "abba", "b", "abba"},
	{"Trim", "<tag>", "<>", "tag"},
	{"Trim", "* listitem", " *", "listitem"},
	{"Trim", `"quote"`, `"`, "quote"},
	{"Trim", "\u2C6F\u2C6F\u0250\u0250\u2C6F\u2C6F", "\u2C6F", "\u0250\u0250"},
	{"Trim", "\x80test\xff", "\xff", "test"},
	{"Trim", " Ġ ", " ", "Ġ"},
	{"Trim", " Ġİ0", "0 ", "Ġİ"},
	//empty string tests
	{"Trim", "abba", "", "abba"},
	{"Trim", "", "123", ""},
	{"Trim", "", "", ""},
	{"TrimLeft", "abba", "", "abba"},
	{"TrimLeft", "", "123", ""},
	{"TrimLeft", "", "", ""},
	{"TrimRight", "abba", "", "abba"},
	{"TrimRight", "", "123", ""},
	{"TrimRight", "", "", ""},
	{"TrimRight", "☺\xc0", "☺", "☺\xc0"},
	{"TrimPrefix", "aabb", "a", "abb"},
	{"TrimPrefix", "aabb", "b", "aabb"},
	{"TrimSuffix", "aabb", "a", "aabb"},
	{"TrimSuffix", "aabb", "b", "aab"},
]

#test
fn testTrim(t: &testing::T) {
	toFn := fn(name: str): (fn(str, str): str, fn(str, str): str) {
		match name {
		| "Trim":
			ret strings::Trim, nil
		| "TrimLeft":
			ret strings::TrimLeft, nil
		| "TrimRight":
			ret strings::TrimRight, nil
		| "TrimPrefix":
			ret nil, strings::TrimPrefix
		| "TrimSuffix":
			ret nil, strings::TrimSuffix
		|:
			t.Errorf("Undefined trim function {}", name)
			ret nil, nil
		}
	}

	for _, tc in trimTests {
		name := tc.f
		f, fb := toFn(name)
		if f == nil && fb == nil {
			continue
		}
		mut actual := ""
		if f != nil {
			actual = str(f(tc.input, tc.arg))
		} else {
			actual = str(fb(tc.input, tc.arg))
		}
		if actual != tc.out {
			t.Errorf("{}({}, {}) = {}; want {}", name, tc.input, tc.arg, actual, tc.out)
		}
	}
}

struct trimFuncTest {
	f:        predicate
	input:    str
	trimOut:  str
	leftOut:  str
	rightOut: str
}

let trimFuncTests: []trimFuncTest = [
	{isSpace, space + " hello " + space,
		"hello",
		"hello " + space,
		space + " hello",
	},
	{isDigit, "\u0e50\u0e5212hello34\u0e50\u0e51",
		"hello",
		"hello34\u0e50\u0e51",
		"\u0e50\u0e5212hello",
	},
	{isUpper, "\u2C6F\u2C6F\u2C6F\u2C6FABCDhelloEF\u2C6F\u2C6FGH\u2C6F\u2C6F",
		"hello",
		"helloEF\u2C6F\u2C6FGH\u2C6F\u2C6F",
		"\u2C6F\u2C6F\u2C6F\u2C6FABCDhello",
	},
	{not(isSpace), "hello" + space + "hello",
		space,
		space + "hello",
		"hello" + space,
	},
	{not(isDigit), "hello\u0e50\u0e521234\u0e50\u0e51helo",
		"\u0e50\u0e521234\u0e50\u0e51",
		"\u0e50\u0e521234\u0e50\u0e51helo",
		"hello\u0e50\u0e521234\u0e50\u0e51",
	},
	{isValidRune, "ab\xc0a\xc0cd",
		"\xc0a\xc0",
		"\xc0a\xc0cd",
		"ab\xc0a\xc0",
	},
	{not(isValidRune), "\xc0a\xc0",
		"a",
		"a\xc0",
		"\xc0a",
	},
	// The nils returned by TrimLeftFunc are odd behavior, but we need
	// to preserve backwards compatibility.
	{isSpace, "",
		"",
		"",
		"",
	},
	{isSpace, " ",
		"",
		"",
		"",
	},
]

struct trimmer {
	name: str
	trim: fn(str, f: fn(rune): bool): str
	out:  str
}

#test
fn testTrimFunc(t: &testing::T) {
	for _, tc in trimFuncTests {
		let trimmers: []trimmer = [
			{"TrimFunc", strings::TrimFunc, tc.trimOut},
			{"TrimLeftFunc", strings::TrimLeftFunc, tc.leftOut},
			{"TrimRightFunc", strings::TrimRightFunc, tc.rightOut},
		]
		for _, trimmer in trimmers {
			actual := trimmer.trim(tc.input, tc.f.f)
			if actual == "" && trimmer.out != "" {
				t.Errorf("{}({}, {}) = nil; want {}", trimmer.name, tc.input, tc.f.name, trimmer.out)
			}
			if actual != "" && trimmer.out == "" {
				t.Errorf("{}({}, {}) = {}; want nil", trimmer.name, tc.input, tc.f.name, actual)
			}
			if actual != trimmer.out {
				t.Errorf("{}({}, {}) = {}; want {}", trimmer.name, tc.input, tc.f.name, actual, trimmer.out)
			}
		}
	}
}

struct predicate {
	f:    fn(rune): bool
	name: str
}

let isSpace = predicate{unicode::IsSpace, "IsSpace"}
let isDigit = predicate{unicode::IsDigit, "IsDigit"}
let isUpper = predicate{unicode::IsUpper, "IsUpper"}
let isValidRune = predicate{
	fn(r: rune): bool {
		ret r != utf8::RuneError
	},
	"IsValidRune",
}

fn not(p: predicate): predicate {
	ret predicate{
		fn(r: rune): bool {
			ret !p.f(r)
		},
		"not " + p.name,
	}
}

struct indexFuncTest {
	input: str
	f:     predicate
	first: int
	last:  int
}

let indexFuncTests: []indexFuncTest = [
	{"", isValidRune, -1, -1},
	{"abc", isDigit, -1, -1},
	{"0123", isDigit, 0, 3},
	{"a1b", isDigit, 1, 1},
	{space, isSpace, 0, len(space) - 3},                                               // last rune in space is 3 bytes
	{"\u0e50\u0e5212hello34\u0e50\u0e51", isDigit, 0, 18},
	{"\u2C6F\u2C6F\u2C6F\u2C6FABCDhelloEF\u2C6F\u2C6FGH\u2C6F\u2C6F", isUpper, 0, 34},
	{"12\u0e50\u0e52hello34\u0e50\u0e51", not(isDigit), 8, 12},

	// tests of invalid UTF-8
	{"\x801", isDigit, 1, 1},
	{"\x80abc", isDigit, -1, -1},
	{"\xc0a\xc0", isValidRune, 1, 1},
	{"\xc0a\xc0", not(isValidRune), 0, 2},
	{"\xc0☺\xc0", not(isValidRune), 0, 4},
	{"\xc0☺\xc0\xc0", not(isValidRune), 0, 5},
	{"ab\xc0a\xc0cd", not(isValidRune), 2, 4},
	{"a\xe0\x80cd", not(isValidRune), 1, 2},
]

#test
fn testIndexFunc(t: &testing::T) {
	for _, tc in indexFuncTests {
		first := strings::IndexFunc(tc.input, tc.f.f)
		if first != tc.first {
			t.Errorf("IndexFunc({}, {}) = {}; want {}", tc.input, tc.f.name, first, tc.first)
		}
		last := strings::LastIndexFunc(tc.input, tc.f.f)
		if last != tc.last {
			t.Errorf("LastIndexFunc({}, {} = {}; want {}", tc.input, tc.f.name, last, tc.last)
		}
	}
}

struct replaceTest {
	input: str
	old:   str
	new:   str
	n:     int
	out:   str
}

let replaceTests: []replaceTest = [
	{"hello", "l", "L", 0, "hello"},
	{"hello", "l", "L", -1, "heLLo"},
	{"hello", "x", "X", -1, "hello"},
	{"", "x", "X", -1, ""},
	{"radar", "r", "<r>", -1, "<r>ada<r>"},
	{"", "", "<>", -1, "<>"},
	{"banana", "a", "<>", -1, "b<>n<>n<>"},
	{"banana", "a", "<>", 1, "b<>nana"},
	{"banana", "a", "<>", 1000, "b<>n<>n<>"},
	{"banana", "an", "<>", -1, "b<><>a"},
	{"banana", "ana", "<>", -1, "b<>na"},
	{"banana", "", "<>", -1, "<>b<>a<>n<>a<>n<>a<>"},
	{"banana", "", "<>", 10, "<>b<>a<>n<>a<>n<>a<>"},
	{"banana", "", "<>", 6, "<>b<>a<>n<>a<>n<>a"},
	{"banana", "", "<>", 5, "<>b<>a<>n<>a<>na"},
	{"banana", "", "<>", 1, "<>banana"},
	{"banana", "a", "a", -1, "banana"},
	{"banana", "a", "a", 1, "banana"},
	{"☺☻☹", "", "<>", -1, "<>☺<>☻<>☹<>"},
]

#test
fn testReplace(t: &testing::T) {
	for _, tt in replaceTests {
		mut input := tt.input + "<spare>"
		input = input[:len(tt.input)]
		mut out := strings::Replace(input, tt.old, tt.new, tt.n)
		mut s := str(out)
		if s != tt.out {
			t.Errorf("Replace({}, {}, {}, {}) = {}, want {}", tt.input, tt.old, tt.new, tt.n, s, tt.out)
		}
		if tt.n == -1 {
			out = strings::ReplaceAll(input, tt.old, tt.new)
			s = str(out)
			if s != tt.out {
				t.Errorf("ReplaceAll({}, {}, {}) = {}, want {}", tt.input, tt.old, tt.new, s, tt.out)
			}
		}
	}
}

struct equalFoldTest {
	s:   str
	t:   str
	out: bool
}

let EqualFoldTests: []equalFoldTest = [
	{"abc", "abc", true},
	{"ABcd", "ABcd", true},
	{"123abc", "123ABC", true},
	{"αβδ", "ΑΒΔ", true},
	{"abc", "xyz", false},
	{"abc", "XYZ", false},
	{"abcdefghijk", "abcdefghijX", false},
	{"abcdefghijk", "abcdefghij\u212A", true},
	{"abcdefghijK", "abcdefghij\u212A", true},
	{"abcdefghijkz", "abcdefghij\u212Ay", false},
	{"abcdefghijKz", "abcdefghij\u212Ay", false},
]

#test
fn testEqualFold(t: &testing::T) {
	for _, tt in EqualFoldTests {
		mut out := strings::EqualFold(tt.s, tt.t)
		if out != tt.out {
			t.Errorf("EqualFold({}, {}) = {}, want {}", tt.s, tt.t, out, tt.out)
		}
		out = strings::EqualFold(tt.t, tt.s)
		if out != tt.out {
			t.Errorf("EqualFold({}, {}) = {}, want {}", tt.t, tt.s, out, tt.out)
		}
	}
}

struct cutTest {
	s:      str
	sep:    str
	before: str
	after:  str
	found:  bool
}

let cutTests: []cutTest = [
	{"abc", "b", "a", "c", true},
	{"abc", "a", "", "bc", true},
	{"abc", "c", "ab", "", true},
	{"abc", "abc", "", "", true},
	{"abc", "", "", "abc", true},
	{"abc", "d", "abc", "", false},
	{"", "d", "", "", false},
	{"", "", "", "", true},
]

#test
fn testCut(t: &testing::T) {
	for _, tt in cutTests {
		before, after, found := strings::Cut(tt.s, tt.sep)
		if before != tt.before || after != tt.after || found != tt.found {
			t.Errorf("Cut({}, {}) = {}, {}, {}, want {}, {}, {}", tt.s, tt.sep, before, after, found, tt.before, tt.after, tt.found)
		}
	}
}

let cutPrefixTests: []cutTest = [
	{"abc", "a", "", "bc", true},
	{"abc", "abc", "", "", true},
	{"abc", "", "", "abc", true},
	{"abc", "d", "", "abc", false},
	{"", "d", "", "", false},
	{"", "", "", "", true},
]

#test
fn testCutPrefix(t: &testing::T) {
	for _, tt in cutPrefixTests {
		after, found := strings::CutPrefix(tt.s, tt.sep)
		if after != tt.after || found != tt.found {
			t.Errorf("CutPrefix({}, {}) = {}, {}, want {}, {}", tt.s, tt.sep, after, found, tt.after, tt.found)
		}
	}
}

let cutSuffixTests: []cutTest = [
	{"abc", "bc", "a", "", true},
	{"abc", "abc", "", "", true},
	{"abc", "", "abc", "", true},
	{"abc", "d", "abc", "", false},
	{"", "d", "", "", false},
	{"", "", "", "", true},
]

#test
fn testCutSuffix(t: &testing::T) {
	for _, tt in cutSuffixTests {
		before, found := strings::CutSuffix(tt.s, tt.sep)
		if before != tt.before || found != tt.found {
			t.Errorf("CutSuffix({}, {}) = {}, {}, want {}, {}", tt.s, tt.sep, before, found, tt.before, tt.found)
		}
	}
}

struct containsTest {
	b:      str
	substr: str
	want:   bool
}

let containsTests: []containsTest = [
	{"hello", "hel", true},
	{"日本語", "日本", true},
	{"hello", "Hello, world", false},
	{"東京", "京東", false},
]

#test
fn testContains(t: &testing::T) {
	for _, tt in containsTests {
		got := strings::Contains(tt.b, tt.substr)
		if got != tt.want {
			t.Errorf("Contains({}, {}) = {}, want {}", tt.b, tt.substr, got, tt.want)
		}
	}
}

struct containsAnyTest {
	b:        str
	substr:   str
	expected: bool
}

let containsAnyTests: []containsAnyTest = [
	{"", "", false},
	{"", "a", false},
	{"", "abc", false},
	{"a", "", false},
	{"a", "a", true},
	{"aaa", "a", true},
	{"abc", "xyz", false},
	{"abc", "xcz", true},
	{"a☺b☻c☹d", "uvw☻xyz", true},
	{"aRegExp*", ".(|)*+?^$[]", true},
	{dots + dots + dots, " ", false},
]

#test
fn testContainsAny(t: &testing::T) {
	for _, ct in containsAnyTests {
		if strings::ContainsAny(ct.b, ct.substr) != ct.expected {
			t.Errorf("ContainsAny({}, {}) = {}, want {}",
				ct.b, ct.substr, !ct.expected, ct.expected)
		}
	}
}

struct containsRuneTest {
	b:        str
	r:        rune
	expected: bool
}

let containsRuneTests: []containsRuneTest = [
	{"", 'a', false},
	{"a", 'a', true},
	{"aaa", 'a', true},
	{"abc", 'y', false},
	{"abc", 'c', true},
	{"a☺b☻c☹d", 'x', false},
	{"a☺b☻c☹d", '☻', true},
	{"aRegExp*", '*', true},
]

#test
fn testContainsRune(t: &testing::T) {
	for _, ct in containsRuneTests {
		if strings::ContainsRune(ct.b, ct.r) != ct.expected {
			t.Errorf("ContainsRune({}, {}) = {}, want {}",
				ct.b, ct.r, !ct.expected, ct.expected)
		}
	}
}

#test
fn testContainsFunc(t: &testing::T) {
	for _, ct in containsRuneTests {
		if strings::ContainsFunc(ct.b, fn|r| ct.r == r) != ct.expected {
			t.Errorf("ContainsFunc({}, fn({})) = {}, want {}",
				ct.b, ct.r, !ct.expected, ct.expected)
		}
	}
}