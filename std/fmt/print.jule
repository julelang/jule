// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/io"
use "std/os"
use "std/strings"
use "std/unsafe"

// Prints arguments to w with default formatting.
// See documentation of the [Sprint] function for formatting.
// Forwards exceptions, if any.
fn Fprint(mut w: io::Writer, args: ...any)! {
	mut sb := strings::Builder{}
	sprint(&sb, args...)
	w.Write(unsafe { sb.Buf() }) else { error(error) }
}

// Prints arguments to w with default formatting.
// Prints new-line after arguments.
// See documentation of the [Sprint] function for formatting.
// Forwards exceptions, if any.
fn Fprintln(mut w: io::Writer, args: ...any)! {
	mut sb := strings::Builder{}
	sprint(&sb, args...)
	sb.WriteByte('\n')!
	w.Write(unsafe { sb.Buf() }) else { error(error) }
}

// Prints result of formatting to w.
// See documentation of the [Sprint] function for formatting.
// Forwards exceptions, if any.
fn Fprintf(mut w: io::Writer, fmt: str, args: ...any)! {
	format := bprintf(fmt, args...)
	w.Write(format) else { error(error) }
}

// Prints result of formatting to stdout.
// See documentation of the [Sprint] function for formatting.
// Panics if any exception appears.
fn Printf(fmt: str, args: ...any) {
	Fprintf(os::Stdout(), fmt, args...)!
}

// Prints arguments with default formatting to stdout.
// Panics if any exception appears.
fn Print(args: ...any) {
	Fprint(os::Stdout(), args...)!
}

// Prints arguments with default formatting to stdout.
// Prints new-line after arguments.
// Panics if any exception appears.
fn Println(args: ...any) {
	Fprintln(os::Stdout(), args...)!
}

// Implements [Sprint], writes result to sb.
fn sprint(mut &sb: *strings::Builder, args: ...any) {
	for _, arg in args {
		formatByDefault(sb, arg)
	}
}

// Returns string result of arguments with default formatting.
// Arguments will be concatenated without any spaces.
fn Sprint(args: ...any): str {
	mut sb := strings::Builder{}
	sprint(&sb, args...)
	ret sb.Str()
}

// Returns string result of argument with default formatting.
// It uses comptime to analysis type T. If type T is a dynamic or unsupported type,
// it jumps back to the [Sprint] algorithm.
fn Sprintg[T](t: T): str {
	ret unsafe::StrFromBytes(bprintg(t))
}

// It places the passes arguments in the string relative to the corresponding
// format string. Returns format string if len(args) == 0. If the arguments
// have ended, the remaining part of format string is not processed and
// is returned as is. For supported types it uses custom functions for conversion,
// but for unusupported types it uses default runtime string conversion function of type.
//
// Formatting:
//	Arguments are processed sequentially. That is, when an argument
//	encounters a format string parameter, it will be processed according
//	to how many parameters it is. The 5th parameter uses the 5th argument
//	as the value.
//
//	Each format parameter is represented as "{}" in the format string.
//	These parameters will then be deleted according to the processing
//	algorithm and replaced with arguments.
//
//	The parameter "{{}}" is formatted as "{}" actually,
//	And does not increase argument list offset.
//
// Examples:
//	Sprintf("{} {}!", "Hello", "World") = "Hello World!"
//	Sprintf("{} {}") = "{} {}"
//	Sprintf("{} is the {}", "Pi Number") = "Pi Number is the {}"
fn Sprintf(fmt: str, args: ...any): str {
	ret unsafe::StrFromBytes(bprintf(fmt, args...))
}