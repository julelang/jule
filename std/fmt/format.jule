// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/conv"
use "std/runtime"
use "std/strings"
use "std/unicode/utf8"
use "std/unsafe"

fn findFormatPrefix(&bytes: []byte, mut i: int): int {
	for i < len(bytes) {
		r, size := utf8::DecodeRune(bytes[i:])
		if r == '{' {
			ret i
		}
		i += size
	}
	ret -1
}

// Returns range of {...}, included braces.
// Parameter i is the start point to selected and should
// points to start brace at beginning.
// i is points to position of last brace and +1 offset in the end.
// Returns nil slice if there is no match.
fn getFormatRange(mut &i: int, mut &bytes: []byte): []byte {
	start := i
	mut braces := 0
	for i < len(bytes) {
		r, size := utf8::DecodeRune(bytes[i:])
		i += size
		match r {
		| '{':
			braces++
		| '}':
			braces--
			if braces == 0 {
				ret bytes[start:i]
			}
		}
	}
	ret nil
}

// Formats arg by default format and appends to buf.
fn formatByDefault(mut &buf: strings::Builder, &arg: any) {
	if arg == nil {
		buf.WriteStr("<nil>")!
		ret
	}
	match type arg {
	| f32:
		buf.WriteStr(conv::FormatFloat(f64(arg.(f32)), 'g', -1, 32))!
	| f64:
		buf.WriteStr(conv::FormatFloat(arg.(f64), 'g', -1, 64))!
	| i8:
		buf.WriteStr(conv::FormatInt(i64(arg.(i8)), 10))!
	| i16:
		buf.WriteStr(conv::FormatInt(i64(arg.(i16)), 10))!
	| i32:
		buf.WriteStr(conv::FormatInt(i64(arg.(i32)), 10))!
	| i64:
		buf.WriteStr(conv::FormatInt(arg.(i64), 10))!
	| u8:
		buf.WriteStr(conv::FormatUint(u64(arg.(u8)), 10))!
	| u16:
		buf.WriteStr(conv::FormatUint(u64(arg.(u16)), 10))!
	| u32:
		buf.WriteStr(conv::FormatUint(u64(arg.(u32)), 10))!
	| u64:
		buf.WriteStr(conv::FormatUint(arg.(u64), 10))!
	| str:
		buf.WriteStr(arg.(str))!
	| bool:
		if arg.(bool) {
			buf.WriteStr("true")!
		} else {
			buf.WriteStr("false")!
		}
	|:
		buf.WriteStr(runtime::toStr(arg))!
	}
}

fn applyFormatByDefault(mut &buf: strings::Builder, mut &j: int, args: ...any) {
	arg := args[j]
	j++
	formatByDefault(buf, arg)
}

// Returns result of formatting.
// Parameter j is the position of argument list.
fn applyFormat(mut &fmt: []byte, mut &buf: strings::Builder, mut &j: int, args: ...any) {
	// {}
	if len(fmt) == 2 {
		applyFormatByDefault(buf, j, args...)
		ret
	}
	// {{}} = {}
	if len(fmt) == 4 &&
		fmt[0] == '{' &&
		fmt[1] == '{' &&
		fmt[2] == '}' &&
		fmt[3] == '}' {
		buf.WriteStr("{}")!
		ret
	}
	buf.Write(fmt)!
}

// See the [Format] function for main documentation. This is a low level internal API.
// For this function, returned []byte is might be string literal actually.
// Be careful about mutating it.
fn format(fmt: str, args: ...any): []byte {
	mut fmtBytes := unsafe::StrBytes(fmt)
	if len(args) == 0 {
		ret fmtBytes
	}
	mut i := findFormatPrefix(fmtBytes, 0)
	if i == -1 {
		ret fmtBytes
	}
	mut j := 0
	mut last := 0
	mut buf := strings::Builder{}
	buf.Grow(len(fmt))
	for i != -1; i = findFormatPrefix(fmtBytes, i) {
		buf.Write(fmtBytes[last:i])!
		mut format := getFormatRange(i, fmtBytes)
		if format == nil {
			continue
		}
		applyFormat(format, buf, j, args...)
		if j >= len(args) {
			buf.Write(fmtBytes[i:])!
			last = len(fmtBytes)
			break
		}
		// Set last positioning to latest value of i.
		last = i
	}
	if last < len(fmtBytes) {
		buf.Write(fmtBytes[last:])!
	}
	ret unsafe { buf.Buf() }
}

// It places the passes arguments in the string relative to the corresponding
// format string. Returns format string if len(args) == 0. If the arguments
// have ended, the remaining part of format string is not processed and
// is returned as is. For supported types it uses custom functions for conversion,
// but for unusupported types it uses default runtime string conversion function of type.
//
// Formatting:
//	Arguments are processed sequentially. That is, when an argument
//	encounters a format string parameter, it will be processed according
//	to how many parameters it is. The 5th parameter uses the 5th argument
//	as the value.
//
//	Each format parameter is represented as "{}" in the format string.
//	These parameters will then be deleted according to the processing
//	algorithm and replaced with arguments.
//
//	The parameter "{{}}" is formatted as "{}" actually,
//	And does not increase argument list offset.
//
// Examples:
//	Format("{} {}!", "Hello", "World") = "Hello World!"
//	Format("{} {}") = "{} {}"
//	Format("{} is the {}", "Pi Number") = "Pi Number is the {}"
fn Format(fmt: str, args: ...any): str {
	ret unsafe::StrFromBytes(format(fmt, args...))
}