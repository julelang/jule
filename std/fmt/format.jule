// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"
use "std/conv"
use "std/runtime"
use "std/strings"
use "std/unicode/utf8"
use "std/unsafe"

fn findFormatPrefix(&bytes: *[]byte, mut i: int): int {
	for i < len(*bytes) {
		r, size := utf8::DecodeRune((*bytes)[i:])
		if r == '{' {
			ret i
		}
		i += size
	}
	ret -1
}

// Returns range of {...}, included braces.
// Parameter i is the start point to selected and should
// points to start brace at beginning.
// i is points to position of last brace and +1 offset in the end.
// Returns nil slice if there is no match.
fn getFormatRange(mut &i: *int, mut &bytes: *[]byte): []byte {
	start := *i
	mut braces := 0
	for *i < len(*bytes) {
		r, size := utf8::DecodeRune((*bytes)[*i:])
		*i += size
		match r {
		| '{':
			braces++
		| '}':
			braces--
			if braces == 0 {
				ret (*bytes)[start:*i]
			}
		}
	}
	ret nil
}

// Formats arg by default format and appends to buf.
fn formatByDefault(mut &buf: *strings::Builder, arg: any) {
	if arg == nil {
		buf.WriteStr("<nil>")!
		ret
	}
	match type arg {
	| f32:
		buf.WriteStr(conv::FormatFloat(f64(arg.(f32)), 'g', -1, 32))!
	| f64:
		buf.WriteStr(conv::FormatFloat(arg.(f64), 'g', -1, 64))!
	| cmplx64:
		buf.WriteStr(conv::FormatCmplx(cmplx128(arg.(cmplx64)), 'g', -1, 64))!
	| cmplx128:
		buf.WriteStr(conv::FormatCmplx(arg.(cmplx128), 'g', -1, 128))!
	| int:
		buf.WriteStr(conv::FormatInt(i64(arg.(int)), 10))!
	| i8:
		buf.WriteStr(conv::FormatInt(i64(arg.(i8)), 10))!
	| i16:
		buf.WriteStr(conv::FormatInt(i64(arg.(i16)), 10))!
	| i32:
		buf.WriteStr(conv::FormatInt(i64(arg.(i32)), 10))!
	| i64:
		buf.WriteStr(conv::FormatInt(arg.(i64), 10))!
	| uint:
		buf.WriteStr(conv::FormatUint(u64(arg.(uint)), 10))!
	| u8:
		buf.WriteStr(conv::FormatUint(u64(arg.(u8)), 10))!
	| u16:
		buf.WriteStr(conv::FormatUint(u64(arg.(u16)), 10))!
	| u32:
		buf.WriteStr(conv::FormatUint(u64(arg.(u32)), 10))!
	| u64:
		buf.WriteStr(conv::FormatUint(arg.(u64), 10))!
	| uintptr:
		buf.WriteStr("0x")!
		buf.WriteStr(conv::FormatUint(u64(arg.(uintptr)), 16))!
	| str:
		buf.WriteStr(arg.(str))!
	| bool:
		if arg.(bool) {
			buf.WriteStr("true")!
		} else {
			buf.WriteStr("false")!
		}
	|:
		buf.WriteStr(runtime::toStr(arg))!
	}
}

fn applyFormatByDefault(mut &buf: *strings::Builder, mut &j: *int, args: ...any) {
	arg := args[*j]
	*j++
	formatByDefault(buf, arg)
}

// Returns result of formatting.
// Parameter j is the position of argument list.
fn applyFormat(mut &fmt: *[]byte, mut &buf: *strings::Builder, mut &j: *int, args: ...any) {
	// {}
	if len(*fmt) == 2 {
		applyFormatByDefault(buf, j, args...)
		ret
	}
	// {{}} = {}
	if len(*fmt) == 4 &&
		(*fmt)[0] == '{' &&
		(*fmt)[1] == '{' &&
		(*fmt)[2] == '}' &&
		(*fmt)[3] == '}' {
		buf.WriteStr("{}")!
		ret
	}
	buf.Write(*fmt)!
}

// See the [Sprintf] function for main documentation. This is a low level internal API.
// For this function, returned []byte is might be string literal actually.
// Be careful about mutating it.
fn bprintf(fmt: str, args: ...any): []byte {
	mut fmtBytes := unsafe::StrBytes(fmt)
	if len(args) == 0 {
		ret fmtBytes
	}
	mut i := findFormatPrefix(&fmtBytes, 0)
	if i == -1 {
		ret fmtBytes
	}
	mut j := 0
	mut last := 0
	mut buf := strings::Builder{}
	buf.Grow(len(fmt))
	for i != -1; i = findFormatPrefix(&fmtBytes, i) {
		buf.Write(fmtBytes[last:i])!
		mut format := getFormatRange(&i, &fmtBytes)
		if format == nil {
			continue
		}
		applyFormat(&format, &buf, &j, args...)
		if j >= len(args) {
			buf.Write(fmtBytes[i:])!
			last = len(fmtBytes)
			break
		}
		// Set last positioning to latest value of i.
		last = i
	}
	if last < len(fmtBytes) {
		buf.Write(fmtBytes[last:])!
	}
	ret unsafe { buf.Buf() }
}

// Tries to call reserved Str method for type.
fn tryToCallStr[T](mut &sb: *strings::Builder, t: T): (ok: bool) {
	const tt = comptime::TypeOf(T)
	const for _, method in tt.Decl().Methods() {
		const match method.Name() {
		| "Str":
			const v = comptime::ValueOf(t)
			const methodv = v.Method(method.Name())
			const match {
			| !methodv.Type().Decl().Exceptional() &&
				methodv.Type().Result().Kind() == comptime::Str:
				const params = method.Params()
				const match {
				| len(params) == 1 && !params[0].Mutable():
					sb.WriteStr(methodv.Unwrap()())!
					ret true
				}
			}
		}
	}
	ret false
}

fn bprintgw[T](mut &sb: *strings::Builder, t: T) {
	const tt = comptime::TypeOf(T)
	const match {
	| tt.Bind():
		sb.WriteStr(tt.Str())!
	|:
		const match {
		| tt.CanNil():
			if t == nil {
				sb.WriteStr("<nil>")!
				ret
			}
		| tt.Strict():
			ok := tryToCallStr(sb, t)
			if ok {
				ret
			}
		}
		const match tt.Kind() {
		| comptime::F32:
			sb.WriteStr(conv::FormatFloat(f64(t), 'g', -1, 32))!
		| comptime::F64:
			sb.WriteStr(conv::FormatFloat(f64(t), 'g', -1, 64))!
		| comptime::Cmplx64:
			sb.WriteStr(conv::FormatCmplx(cmplx128(t), 'g', -1, 64))!
		| comptime::Cmplx128:
			sb.WriteStr(conv::FormatCmplx(cmplx128(t), 'g', -1, 128))!
		| comptime::Int | comptime::I8 | comptime::I16 | comptime::I32 | comptime::I64:
			sb.WriteStr(conv::FormatInt(i64(t), 10))!
		| comptime::Uint | comptime::U8 | comptime::U16 | comptime::U32 | comptime::U64:
			sb.WriteStr(conv::FormatUint(u64(t), 10))!
		| comptime::Str:
			sb.WriteStr(t)!
		| comptime::Bool:
			if t {
				sb.WriteStr("true")!
			} else {
				sb.WriteStr("false")!
			}
		| comptime::Slice | comptime::Array:
			sb.WriteByte('[')!
			for i, z in t {
				if i > 0 {
					sb.WriteStr(", ")!
				}
				bprintgw(sb, z)
			}
			sb.WriteByte(']')!
		| comptime::Map:
			sb.WriteByte('{')!
			mut written := false
			for key, val in x {
				if written {
					sb.WriteStr(", ")!
				} else {
					written = true
				}
				bprintgw(sb, key)
				sb.WriteByte(':')!
				bprintgw(sb, val)
			}
			sb.WriteByte('}')!
		| comptime::Struct:
			ok := tryToCallStr(sb, t)
			if ok {
				ret
			}
			const v = comptime::ValueOf(t)
			sb.WriteByte('{')!
			const for i, field in tt.Fields() {
				const match {
				| i > 0:
					sb.WriteStr(", ")!
				}
				const match {
				| field.Type().Bind():
					sb.WriteStr(field.Type().Str())!
				|:
					bprintgw(sb, v.FieldByIndex(i).Unwrap())
				}
			}
			sb.WriteByte('}')!
		| comptime::Smartptr:
			// Handle element type of smart pointer.
			const elem = tt.Elem()
			const match {
			| elem.Strict() | elem.Kind() == comptime::Struct:
				ok := tryToCallStr(sb, *t)
				if ok {
					ret
				}
			}
			sb.WriteStr(conv::FormatUint(u64(uintptr(t)), 16))!
		| comptime::Uintptr | comptime::Ptr | comptime::Unsafeptr:
			p := uintptr(t)
			if p == 0 { // Check for nil, because uintptr will not be checked above.
				sb.WriteStr("<nil>")!
			} else {
				sb.WriteStr("0x")!
				sb.WriteStr(conv::FormatUint(u64(p), 16))!
			}
		| comptime::Enum:
			comptime::TypeAlias(elemType, tt.Value())
			bprintgw(sb, elemType(t))
		|:
			// Channel, dynamic type, function.
			sb.WriteStr(runtime::toStr(t))!
		}
	}
}

fn bprintg[T](t: T): []byte {
	mut sb := strings::Builder{}
	bprintgw(&sb, t)
	ret unsafe { sb.Buf() }
}