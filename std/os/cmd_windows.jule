// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/os/filepathlite"
use integ "std/jule/integrated"
use "std/mem"
use "std/strings"
use "std/sys"
use "std/unicode/utf16"

cpp let INFINITE: int

#typedef
cpp struct STARTUPINFOW{}

#typedef
cpp struct PROCESS_INFORMATION{}

cpp unsafe fn CreateProcessW(*integ::Wchar, *integ::Wchar, *unsafe, *unsafe, integ::Int, integ: cpp.DWORD, *unsafe, *integ::Wchar, *cpp.STARTUPINFOW, *cpp.PROCESS_INFORMATION): int
cpp unsafe fn ZeroMemory(*unsafe, uint)
cpp unsafe fn TerminateProcess(pid: cpp.HANDLE, code: int): bool
cpp unsafe fn GetExitCodeProcess(cpp.HANDLE, mut *integ::LongLong): bool
cpp unsafe fn WaitForSingleObject(cpp.HANDLE, int)

struct startupInfo {
	cb:              u32
	lpReserved:      *u16
	lpDesktop:       *u16
	lpTitle:         *u16
	dwX:             u32
	dwY:             u32
	dwXSize:         u32
	dwYSize:         u32
	dwXCountChars:   u32
	dwYCountChars:   u32
	dwFillAttribute: u32
	dwFlags:         u32
	wShowWindow:     u16
	cbReserved2:     u16
	lpReserved2:     *byte
	hStdInput:       sys::Handle
	hStdOutput:      sys::Handle
	hStdError:       sys::Handle
}

struct processInformation {
	hProcess:    sys::Handle
	hThread:     sys::Handle
	dwProcessId: u32
	dwThreadId:  u32
}

const (
	_CREATE_UNICODE_ENVIRONMENT = 0x00000400
	_HANDLE_FLAG_INHERIT        = 0x00000001
	_STARTF_USESTDHANDLES       = 0x00000100
	_DUPLICATE_CLOSE_SOURCE     = 0x00000001
	_DUPLICATE_SAME_ACCESS      = 0x00000002
)

struct cmdAttrs {
	hProcess: sys::Handle
}

impl Cmd {
	fn spawn(self, path: str, stdin: &File, stdout: &File, stderr: &File)! {
		utf16path := integ::UTF16FromStr(path)
		argv := integ::UTF16FromStr(makeCmdLine(self.args()))

		mut env := self.env() else { error(error) }
		envblock := createEnvBlock(env) else { error(error) }
		mut envp := &envblock[0]

		mut utf16dir := []u16(nil)
		mut dirp := (*u16)(nil)
		if self.Dir != "" {
			utf16dir = integ::UTF16FromStr(self.Dir)
			dirp = &utf16dir[0]
		}

		proc := sys::GetCurrentProcess()

		mut hStdin := sys::InvalidHandle
		mut hStdout := sys::InvalidHandle
		mut hStderr := sys::InvalidHandle
		if unsafe { !sys::DuplicateHandle(proc, sys::Handle(stdin.fd.File), proc, &hStdin, 0, true, _DUPLICATE_SAME_ACCESS) } {
			error(sys::GetLastErrno())
		}
		unsafe defer { sys::DuplicateHandle(proc, hStdin, 0, nil, 0, false, _DUPLICATE_CLOSE_SOURCE) }
		if unsafe { !sys::DuplicateHandle(proc, sys::Handle(stdout.fd.File), proc, &hStdout, 0, true, _DUPLICATE_SAME_ACCESS) } {
			error(sys::GetLastErrno())
		}
		unsafe defer { sys::DuplicateHandle(proc, hStdout, 0, nil, 0, false, _DUPLICATE_CLOSE_SOURCE) }
		if unsafe { !sys::DuplicateHandle(proc, sys::Handle(stderr.fd.File), proc, &hStderr, 0, true, _DUPLICATE_SAME_ACCESS) } {
			error(sys::GetLastErrno())
		}
		unsafe defer { sys::DuplicateHandle(proc, hStderr, 0, nil, 0, false, _DUPLICATE_CLOSE_SOURCE) }

		mut si := startupInfo{}
		unsafe { cpp.ZeroMemory(&si, mem::SizeOf(si)) }
		si.cb = u32(mem::SizeOf(si))
		si.dwFlags |= _STARTF_USESTDHANDLES
		si.hStdInput = hStdin
		si.hStdOutput = hStdout
		si.hStdError = hStderr

		mut pi := processInformation{}
		unsafe { cpp.ZeroMemory(&pi, mem::SizeOf(pi)) }

		flags := u32(_CREATE_UNICODE_ENVIRONMENT)
		willInheritHandles := unsafe { integ::Int(1) } // True
		unsafe {
			if cpp.CreateProcessW((*integ::Wchar)(&utf16path[0]),
				(*integ::Wchar)(&argv[0]), nil, nil, willInheritHandles,
				cpp.DWORD(flags), envp, (*integ::Wchar)(dirp),
				(*cpp.STARTUPINFOW)(&si),
				(*cpp.PROCESS_INFORMATION)(&pi)) == 0 {
				error(sys::GetLastErrno())
			}
		}
		self.attrs.hProcess = pi.hProcess
		sys::CloseHandle(pi.hThread) else { error(error) }
	}

	fn kill(self)! {
		if unsafe { cpp.TerminateProcess(cpp.HANDLE(self.attrs.hProcess), 0) } {
			sys::CloseHandle(sys::Handle(self.attrs.hProcess)) else { error(error) }
			self.attrs.hProcess = 0
			ret
		}
		error(sys::GetLastErrno())
	}

	fn wait(self)!: int {
		unsafe { cpp.WaitForSingleObject(cpp.HANDLE(self.attrs.hProcess), cpp.INFINITE) }
		mut exitCode := unsafe { integ::LongLong(0) }
		unsafe {
			cpp.GetExitCodeProcess(cpp.HANDLE(self.attrs.hProcess), &exitCode)
			sys::CloseHandle(sys::Handle(self.attrs.hProcess)) else { error(error) }
		}
		self.attrs.hProcess = 0
		ret unsafe { int(exitCode) }
	}
}

// Escapes the string s, as per escapeArg, appends the result to s.
fn appendEscapeArg(mut &s: *strings::Builder, arg: str) {
	if len(arg) == 0 {
		s.WriteStr(`""`)!
		ret
	}

	mut needsBackslash := false
	mut hasSpace := false
	mut i := 0
	for i < len(arg); i++ {
		match arg[i] {
		| '"' | '\\':
			needsBackslash = true
		| ' ' | '\t':
			hasSpace = true
		}
	}

	if !needsBackslash && !hasSpace {
		// No special handling required; normal case.
		s.WriteStr(arg)!
		ret
	}
	if !needsBackslash {
		// hasSpace is true, so we need to quote the string.
		s.WriteByte('"')!
		s.WriteStr(arg)!
		s.WriteByte('"')!
		ret
	}

	if hasSpace {
		s.WriteByte('"')!
	}
	mut slashes := 0
	i = 0
	for i < len(arg); i++ {
		c := arg[i]
		match c {
		| '\\':
			slashes++
		| '"':
			for slashes > 0; slashes-- {
				s.WriteByte('\\')!
			}
			s.WriteByte('\\')!
		|:
			slashes = 0
		}
		s.WriteByte(c)!
	}
	if hasSpace {
		for slashes > 0; slashes-- {
			s.WriteByte('\\')!
		}
		s.WriteByte('"')!
	}
}

// Builds a command line out of args by escaping "special"
// characters and joining the arguments with spaces.
fn makeCmdLine(args: []str): str {
	mut s := strings::Builder{}
	s.Grow(1 << 4)
	for _, arg in args {
		if s.Len() > 0 {
			s.WriteByte(' ')!
		}
		appendEscapeArg(&s, arg)
	}
	ret s.Str()
}

// Converts an array of environment strings into
// the representation required by CreateProcess: a sequence of NULL
// terminated strings followed by a nil.
// Last bytes are two UCS-2 NULLs, or four NULL bytes.
// If any string contains a NULL, it returns (nil, EINVAL).
fn createEnvBlock(env: []str)!: []u16 {
	if len(env) == 0 {
		ret utf16::Encode([]rune("\x00\x00"))
	}
	mut n := 0
	for _, s in env {
		if strings::IndexByte(s, 0) != -1 {
			error(sys::EINVAL)
		}
		n += len(s) + 1
	}
	n++
	mut b := make([]u16, 0, n)
	for _, s in env {
		for _, c in s {
			b = utf16::AppendRune(b, c)
		}
		b = utf16::AppendRune(b, 0)
	}
	b = utf16::AppendRune(b, 0)
	ret b
}

fn chkStat(file: str)! {
	d := Stat(file) else { error(error) }
	if d.IsDir() {
		error(sys::Errno(sys::ERROR_ACCESS_DENIED))
	}
}

fn hasExt(file: str): bool {
	i := strings::LastIndex(file, ".")
	if i < 0 {
		ret false
	}
	ret strings::LastIndexAny(file, `:\/`) < i
}

fn findExecutable(file: str, exts: []str)!: str {
	if len(exts) == 0 {
		chkStat(file) else { error(error) }
		ret file
	}
	if hasExt(file) {
		chkStat(file) else { goto Keep }
		ret file
	Keep:
		// Keep checking exts below, so that programs with weird names
		// like "foo.bat.exe" will resolve instead of failing.
	}
	for _, e in exts {
		f := file + e
		chkStat(f) else { continue }
		ret f
	}
	if hasExt(file) {
		error(sys::Errno(sys::ERROR_FILE_NOT_FOUND))
	}
	error(errNotFound)
}

fn pathExt(): (exts: []str) {
	x := Getenv(`PATHEXT`)
	if x != "" {
		for (_, mut e) in strings::Split(strings::ToLower(x), `;`) {
			if e == "" {
				continue
			}
			if e[0] != '.' {
				e = "." + e
			}
			exts = append(exts, e)
		}
	} else {
		exts = [".com", ".exe", ".bat", ".cmd"]
	}
	ret exts
}

// Finds windows executable by its dir and path.
// It uses lookPath to try appropriate extensions.
// It does not search PATH, instead it converts `prog` into `.\prog`.
//
// If the path already has an extension found in PATHEXT,
// it returns it directly without searching
// for additional extensions. For example,
// "C:\foo\example.com" would be returned as-is even if the
// program is actually "C:\foo\example.com.exe".
fn lookExtensions(mut path: str, dir: str)!: str {
	if filepathlite::Base(path) == path {
		path = "." + str(PathSeparator) + path
	}
	exts := pathExt()
	mut ext := filepathlite::Ext(path)
	if ext != "" {
		for _, e in exts {
			if strings::EqualFold(ext, e) {
				// Assume that path has already been resolved.
				ret path
			}
		}
	}
	if dir == "" {
		ret _lookPath(path, exts) else { error(error) }
	}
	if filepathlite::VolumeName(path) != "" {
		ret _lookPath(path, exts) else { error(error) }
	}
	if len(path) > 1 && filepathlite::IsPathSeparator(path[0]) {
		ret _lookPath(path, exts) else { error(error) }
	}
	dirandpath := filepathlite::Join(dir, path)
	// We assume that LookPath will only add file extension.
	lp := _lookPath(dirandpath, exts) else { error(error) }
	ext = strings::TrimPrefix(lp, dirandpath)
	ret path + ext
}

fn lookPath(file: str)!: str {
	ret _lookPath(file, pathExt()) else { error(error) }
}

// Implements lookPath for the given PATHEXT list.
fn _lookPath(file: str, exts: []str)!: str {
	if strings::ContainsAny(file, `:\/`) {
		ret findExecutable(file, exts) else { error(&lookpathError{file, error}) }
	}

	// On Windows, creating the NoDefaultCurrentDirectoryInExePath
	// environment variable (with any value or no value!) signals that
	// path lookups should skip the current directory.
	// In theory we are supposed to call NeedCurrentDirectoryForExePathW
	// "as the registry location of this environment variable can change"
	// but that seems exceedingly unlikely: it would break all users who
	// have configured their environment this way!
	// https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-needcurrentdirectoryforexepathw
	// See also go.dev/issue/43947.
	_, found := LookupEnv("NoDefaultCurrentDirectoryInExePath")
	if !found {
		f := findExecutable(filepathlite::Join(".", file), exts) else { use "><" }
		if f != "><" {
			ret f
		}
	}

	mut dotf := ""
	mut dotErr := any(nil)
	path := Getenv("path")
	for _, dir in filepathlite::SplitList(path) {
		if dir == "" {
			// Skip empty entries, consistent with what PowerShell does.
			// (See https://go.dev/issue/61493#issuecomment-1649724826.)
			continue
		}

		f := findExecutable(filepathlite::Join(dir, file), exts) else { continue }
		if dotErr != nil {
			// https://go.dev/issue/53536: if we resolved a relative path implicitly,
			// and it is the same executable that would be resolved from the explicit %PATH%,
			// prefer the explicit name for the executable (and, likely, no error) instead
			// of the equivalent implicit name with errDot.
			//
			// Otherwise, return the errDot for the implicit path as soon as we find
			// out that the explicit one doesn't match.
			dotfi := Lstat(dotf) else {
				if dotErr != nil {
					error(dotErr)
				}
				ret dotf
			}
			fi := Lstat(f) else {
				if dotErr != nil {
					error(dotErr)
				}
				ret dotf
			}
			if !dotfi.SameFile(fi) {
				if dotErr != nil {
					error(dotErr)
				}
				ret dotf
			}
		}

		if !filepathlite::IsAbs(f) {
			// If this is the same relative path that we already found,
			// dotErr is non-nil and we already checked it above.
			// Otherwise, record this path as the one to which we must resolve,
			// with or without a dotErr.
			if dotErr == nil {
				dotf, dotErr = f, &lookpathError{file, errDot}
			}
			continue
		}
		ret f
	}

	if dotErr != nil {
		error(dotErr)
	}
	error(&lookpathError{file, errNotFound})
}