// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/byteslite"
use integ "std/jule/integrated"
use "std/mem"
use "std/strings"
use "std/sys"
use "std/unicode/utf16"

cpp let INFINITE: int

#typedef
cpp struct STARTUPINFOW {
	cb: uint
}

#typedef
cpp struct PROCESS_INFORMATION {
	hProcess: cpp.HANDLE
	hThread:  cpp.HANDLE
}

cpp unsafe fn CreateProcessW(*integ::Wchar, *integ::Wchar, *unsafe, *unsafe, int, integ: integ::LongLong, *unsafe, *integ::Wchar, *cpp.STARTUPINFOW, *cpp.PROCESS_INFORMATION): int
cpp unsafe fn ZeroMemory(*unsafe, uint)
cpp unsafe fn TerminateProcess(pid: cpp.HANDLE, code: int): bool
cpp unsafe fn GetExitCodeProcess(cpp.HANDLE, mut *integ::LongLong): bool
cpp unsafe fn WaitForSingleObject(cpp.HANDLE, int)

const _CREATE_UNICODE_ENVIRONMENT = 0x00000400

struct cmdAttrs {
	hProcess: cpp.HANDLE
	hThread:  cpp.HANDLE
}

impl Cmd {
	fn spawn(self)! {
		if self.attrs.hProcess != nil {
			panic("process: command is already spawned")
		}
		mut startupInfo := cpp.STARTUPINFOW{}
		mut processInfo := cpp.PROCESS_INFORMATION{}
		unsafe {
			cpp.ZeroMemory(&startupInfo, mem::SizeOf(startupInfo))
			cpp.ZeroMemory(&processInfo, mem::SizeOf(processInfo))
		}
		startupInfo.cb = mem::SizeOf(startupInfo)
		mut args := make([]str, 1, 1+len(self.Args))
		args[0] = self.path
		args = append(args, self.Args...)
		argv := integ::UTF16FromStr(makeCmdLine(args))
		env := createEnvBlock(self.Env) else { error(error) }
		mut envp := &env[0]
		if len(self.Env) == 0 {
			envp = nil
		}
		const flags = _CREATE_UNICODE_ENVIRONMENT
		unsafe {
			if cpp.CreateProcessW(nil, (*integ::Wchar)(&argv[0]), nil, nil, 0,
				flags, envp, nil, &startupInfo, &processInfo) == 0 {
				error(getLastCmdError())
			}
		}
		self.attrs.hProcess = processInfo.hProcess
		self.attrs.hThread = processInfo.hThread
	}

	fn kill(self)! {
		if self.attrs.hProcess == nil {
			panic("process: command is not spawned")
		}
		if unsafe { cpp.TerminateProcess(self.attrs.hProcess, 0) } {
			self.attrs.hProcess = nil
			self.attrs.hThread = nil
			ret
		}
		error(-1)
	}

	fn wait(self)!: int {
		if self.attrs.hProcess == nil {
			panic("process: command is not spawned")
		}
		unsafe { cpp.WaitForSingleObject(self.attrs.hProcess, cpp.INFINITE) }
		mut exitCode := unsafe { integ::LongLong(-1) }
		unsafe {
			cpp.GetExitCodeProcess(self.attrs.hProcess, &exitCode)
			sys::CloseHandle(sys::Handle(self.attrs.hProcess))
			sys::CloseHandle(sys::Handle(self.attrs.hThread))
		}
		self.attrs.hProcess = nil
		self.attrs.hThread = nil
		ret unsafe { int(exitCode) }
	}
}

// Escapes the string s, as per escapeArg, appends the result to s.
fn appendEscapeArg(mut &s: strings::Builder, arg: str) {
	if len(arg) == 0 {
		s.WriteStr(`""`)!
		ret
	}

	mut needsBackslash := false
	mut hasSpace := false
	mut i := 0
	for i < len(arg); i++ {
		match arg[i] {
		| '"' | '\\':
			needsBackslash = true
		| ' ' | '\t':
			hasSpace = true
		}
	}

	if !needsBackslash && !hasSpace {
		// No special handling required; normal case.
		s.WriteStr(arg)!
		ret
	}
	if !needsBackslash {
		// hasSpace is true, so we need to quote the string.
		s.WriteByte('"')!
		s.WriteStr(arg)!
		s.WriteByte('"')!
		ret
	}

	if hasSpace {
		s.WriteByte('"')!
	}
	mut slashes := 0
	i = 0
	for i < len(arg); i++ {
		c := arg[i]
		match c {
		| '\\':
			slashes++
		| '"':
			for slashes > 0; slashes-- {
				s.WriteByte('\\')!
			}
			s.WriteByte('\\')!
		|:
			slashes = 0
		}
		s.WriteByte(c)!
	}
	if hasSpace {
		for slashes > 0; slashes-- {
			s.WriteByte('\\')!
		}
		s.WriteByte('"')!
	}
}

// Builds a command line out of args by escaping "special"
// characters and joining the arguments with spaces.
fn makeCmdLine(args: []str): str {
	mut s := strings::Builder{}
	s.Grow(1 << 4)
	for _, arg in args {
		if s.Len() > 0 {
			s.WriteByte(' ')!
		}
		appendEscapeArg(s, arg)
	}
	ret s.Str()
}

// Converts an array of environment strings into
// the representation required by CreateProcess: a sequence of NULL
// terminated strings followed by a nil.
// Last bytes are two UCS-2 NULLs, or four NULL bytes.
// If any string contains a NULL, it returns (nil, EINVAL).
fn createEnvBlock(env: []str)!: []u16 {
	if len(env) == 0 {
		ret utf16::Encode([]rune("\x00\x00"))
	}
	mut n := 0
	for _, s in env {
		if byteslite::IndexByteStr(s, 0) != -1 {
			error(CmdError.Env)
		}
		n += len(s) + 1
	}
	n++
	mut b := make([]u16, 0, n)
	for _, s in env {
		for _, c in []rune(s) {
			b = utf16::AppendRune(b, c)
		}
		b = utf16::AppendRune(b, 0)
	}
	b = utf16::AppendRune(b, 0)
	ret b
}

fn cmdErrorFromCode(code: int): CmdError {
	match code {
	| sys::ERROR_ACCESS_DENIED:
		ret CmdError.Denied
	| sys::ERROR_FILE_NOT_FOUND
	| sys::ERROR_PATH_NOT_FOUND:
		ret CmdError.NotExist
	|:
		ret CmdError.Other
	}
}

// Returns last Cmd error by error.
fn getLastCmdError(): CmdError {
	ret cmdErrorFromCode(int(sys::GetLastError()))
}