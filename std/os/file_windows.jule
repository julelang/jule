// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use integ "std/jule/integrated"
use "std/mem"
use "std/sys"

const devNull = "NUL"

fn openFile(mut path: str, flag: int, mut perm: FileMode)!: &File {
	path = fixLongPath(path)
	h := sys::Open(path, flag|sys::O_CLOEXEC, u32(perm)) else { error(error) }
	ret newFile(u64(h), poll::File) else { error(error) }
}

fn newFile(h: u64, mut flags: int)!: &File {
	if flags&poll::File == poll::File {
		t, err := unsafe { sys::GetFileType(sys::Handle(h)) }
		if err || t == sys::FILE_TYPE_CHAR {
			mut m := u32(0)
			if unsafe { sys::GetConsoleMode(sys::Handle(h), &m) } {
				flags &= ^poll::File
				flags |= poll::Console
			}
		} else if t == sys::FILE_TYPE_PIPE {
			flags &= ^poll::File
			flags |= poll::Pipe
		}
	}
	mut fd := &poll::FD{
		File: h,
		Flags: flags,
		IsStream: true,
		ZeroReadIsEOF: true,
	}
	fd.Init() else { error(error) }
	ret &File{fd: fd}
}

fn remove(path: str)! {
	utf16Path := integ::UTF16FromStr(fixLongPath(path))
	if unsafe { !sys::DeleteFile(&utf16Path[0]) } {
		error(sys::GetLastErrno())
	}
}