// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use integ "std/jule/integrated"
use "std/mem"
use "std/sys"

const devNull = "NUL"

fn makeInheritSa(mut &sa: sys::SecurityAttributes) {
	sa.Length = u32(mem::SizeOf(sa))
	sa.InheritHandle = 1
}

fn openFile(path: str, mut flag: int, mut perm: FileMode)!: &File {
	if path == "" {
		error(sys::Errno(sys::ERROR_FILE_NOT_FOUND))
	}
	perm = FileMode(syscallMode(perm))
	flag |= sys::O_CLOEXEC
	utf16Path := integ::UTF16FromStr(fixLongPath(path))
	let mut access: u32
	match flag & (sys::O_RDONLY | sys::O_WRONLY | sys::O_RDWR) {
	| sys::O_RDONLY:
		access = sys::GENERIC_READ
	| sys::O_WRONLY:
		access = sys::GENERIC_WRITE
	| sys::O_RDWR:
		access = sys::GENERIC_READ | sys::GENERIC_WRITE
	}
	if flag&sys::O_CREAT != 0 {
		access |= sys::GENERIC_WRITE
	}
	if flag&sys::O_APPEND != 0 {
		// Remove GENERIC_WRITE unless O_TRUNC is set, in which case we need it to truncate the file.
		// We can't just remove FILE_WRITE_DATA because GENERIC_WRITE without FILE_WRITE_DATA
		// starts appending at the beginning of the file rather than at the end.
		if flag&sys::O_TRUNC == 0 {
			access &= ^sys::GENERIC_WRITE
		}
		// Set all access rights granted by GENERIC_WRITE except for FILE_WRITE_DATA.
		access |= sys::FILE_APPEND_DATA | sys::FILE_WRITE_ATTRIBUTES | sys::FILE_WRITE_EA | sys::STANDARD_RIGHTS_WRITE | sys::SYNCHRONIZE
	}
	sharemode := u32(sys::FILE_SHARE_READ | sys::FILE_SHARE_WRITE)
	let mut sa: sys::SecurityAttributes
	if flag&sys::O_CLOEXEC == 0 {
		makeInheritSa(sa)
	}
	// We don't use CREATE_ALWAYS, because when opening a file with
	// FILE_ATTRIBUTE_READONLY these will replace an existing file
	// with a new, read-only one. See https://go.dev/issue/38225.
	//
	// Instead, we ftruncate the file after opening when O_TRUNC is set.
	let mut createmode: u32
	match {
	| flag&(sys::O_CREAT|sys::O_EXCL) == (sys::O_CREAT|sys::O_EXCL):
		createmode = sys::CREATE_NEW
	| flag&sys::O_CREAT == sys::O_CREAT:
		createmode = sys::OPEN_ALWAYS
	|:
		createmode = sys::OPEN_EXISTING
	}
	let mut attrs: u32 = sys::FILE_ATTRIBUTE_NORMAL
	if perm&sys::S_IWRITE == 0 {
		attrs = sys::FILE_ATTRIBUTE_READONLY
	}
	if flag&sys::O_WRONLY == 0 && flag&sys::O_RDWR == 0 {
		// We might be opening or creating a directory.
		// CreateFile requires FILE_FLAG_BACKUP_SEMANTICS
		// to work with directories.
		attrs |= sys::FILE_FLAG_BACKUP_SEMANTICS
	}
	if flag&sys::O_SYNC != 0 {
		const _FILE_FLAG_WRITE_THROUGH = 0x80000000
		attrs |= _FILE_FLAG_WRITE_THROUGH
	}
	h := unsafe { sys::CreateFile(&utf16Path[0], access, sharemode, &sa, createmode, attrs, 0) }
	if h == sys::InvalidHandle {
		mut e := sys::GetLastErrno()
		if e == sys::ERROR_ACCESS_DENIED && (flag&sys::O_WRONLY != 0 || flag&sys::O_RDWR != 0) {
			// We should return EISDIR when we are trying to open a directory with write access.
			fa := unsafe { sys::GetFileAttributesW(&utf16Path[0]) }
			if fa != sys::INVALID_FILE_ATTRIBUTES && fa&sys::FILE_ATTRIBUTE_DIRECTORY != 0 {
				e = sys::EISDIR
			}
		}
		error(sys::GetLastErrno())
	}
	// Ignore O_TRUNC if the file has just been created.
	if flag&sys::O_TRUNC == sys::O_TRUNC &&
		(createmode == sys::OPEN_EXISTING || (createmode == sys::OPEN_ALWAYS && sys::GetLastErrno() == sys::ERROR_ALREADY_EXISTS)) {
		w := unsafe { sys::Ftruncate(h, 0) }
		if w == -1 {
			e := sys::GetLastErrno()
			unsafe { sys::CloseHandle(h) }
			error(e)
		}
	}
	ret newFile(u64(h), poll::File) else { error(error) }
}

fn newFile(h: u64, mut flags: int)!: &File {
	if flags&poll::File == poll::File {
		t, err := unsafe { sys::GetFileType(sys::Handle(h)) }
		if err || t == sys::FILE_TYPE_CHAR {
			mut m := u32(0)
			if unsafe { sys::GetConsoleMode(sys::Handle(h), &m) } {
				flags &= ^poll::File
				flags |= poll::Console
			}
		} else if t == sys::FILE_TYPE_PIPE {
			flags &= ^poll::File
			flags |= poll::Pipe
		}
	}
	mut fd := poll::FD.New(u64(h), flags) else { error(error) }
	ret &File{fd: fd}
}

fn remove(path: str)! {
	utf16Path := integ::UTF16FromStr(fixLongPath(path))
	if unsafe { !sys::DeleteFile(&utf16Path[0]) } {
		error(sys::GetLastErrno())
	}
}