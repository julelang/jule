// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use integ "std/jule/integrated"
use "std/runtime"
use "std/sys"
use "std/unicode/utf16"
use "std/unicode/utf8"

fn openFile(path: str, flag: oFlag, mode: int)!: &File {
	utf16Path := integ::UTF16FromStr(path)
	handle := unsafe { sys::Wopen(&utf16Path[0], int(flag), mode) }
	if handle == -1 {
		error(getLastFsError())
	}
	ret &File{fd: poll::FD.New(u64(handle), poll::FDKind.File)}
}

fn remove(path: str)! {
	utf16Path := integ::UTF16FromStr(path)
	if unsafe { !sys::DeleteFile(&utf16Path[0]) } {
		error(getLastFsErrorWindows())
	}
}

impl File {
	fn write(mut self, buf: []byte)!: (n: int) {
		n, ok := self.fd.Write(buf)
		if !ok {
			if self.fd.Kind == poll::FDKind.File {
				error(getLastFsError())
			}
			error(getLastFsErrorWindows())
		}
		ret
	}

	fn read(mut self, mut buf: []byte)!: (n: int) {
		n, ok := self.fd.Read(buf)
		if !ok {
			if self.fd.Kind == poll::FDKind.File {
				error(getLastFsError())
			}
			error(getLastFsErrorWindows())
		}
		ret
	}
}