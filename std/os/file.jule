// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use "std/io"
use "std/sys"

// The name of the operating system's “null device.”
// On Unix-like systems, it is "/dev/null"; on Windows, "NUL".
const DevNull = devNull

// Flags to OpenFile wrapping those of the underlying system. Not all
// flags may be implemented on a given system.
const O_RDONLY = sys::O_RDONLY // Open the file read-only
const O_WRONLY = sys::O_WRONLY // Open the file write-only
const O_RDWR = sys::O_RDWR     // Open the file read-write
const O_APPEND = sys::O_APPEND // Append data to the file when writing
const O_CREATE = sys::O_CREAT  // Create a new file if none exists
const O_EXCL = sys::O_EXCL     // Used with O_CREATE, file must not exist
const O_SYNC = sys::O_SYNC     // Open for synchronous I/O
const O_TRUNC = sys::O_TRUNC   // Truncate regular writable file when opened

// The file stream handle.
//
// It works like a wrapper when it comes to console handle like
// stdin, stdout or stderr. Read and write functions are supported
// for console handlers. The rest of the functions are not supported
// and not checked, it is undefined behavior.
//
// There may be system call differences and performance differences
// for console handlers depending on the operating system.
// For example, Windows has an overhead for UTF-16 processing.
struct File {
	fd: &poll::FD
}

// Impl relevant traits for File.
impl io::Reader for File {}

impl io::ReadCloser for File {}
impl io::Writer for File {}
impl io::WriteCloser for File {}
impl io::ReadWriter for File {}
impl io::Stream for File {}

// Opens the named file for reading. If successful, methods on
// the returned file can be used for reading; the associated file
// descriptor has mode O_RDONLY.
fn Open(path: str)!: &File {
	ret OpenFile(path, O_RDONLY, 0) else { error(error) }
}

// Opens file stream with named file, specified flag
// (O_RDRW, O_TRUNC etc.) and perm. If named file does
// not exist and O_CREATE flag is passed, will created with
// mode (before umask). If successful, returns File reference with handle
// to file stream and the reference can used for I/O operations.
fn OpenFile(path: str, mode: int, perm: FileMode)!: &File {
	ret openFile(path, mode, perm) else { error(error) }
}

// Removes named file.
fn Remove(path: str)! {
	remove(path) else { error(error) }
}

// Creates or truncates the named file. If the file already exists,
// it is truncated. If the file does not exist, it is created with mode 0666
// (before umask). If successful, methods on the returned File can
// be used for I/O; the associated file descriptor has mode O_RDWR.
// Calls internally `File.Open` and forwards any exceptional.
fn Create(path: str)!: &File {
	ret OpenFile(path, O_RDWR|O_CREATE|O_TRUNC, 0666) else { error(error) }
}

// Reads bytes of file.
// First, learns byte-size of file.
// Then reads bytes and returns buffer.
fn ReadFile(path: str)!: []byte {
	mut f := Open(path) else { error(error) }
	s := Stat(path) else { error(error) }

	mut sz := int(s.Size())
	if sz != int(s.Size()) {
		sz = 0
	}
	// Following information adopted from Go:
	//
	// If a file claims a small size, read at least 512 bytes.
	// In particular, files in Linux's /proc claim size 0 but
	// then do not work right if read in small pieces,
	// so an initial read of 1 byte would not work correctly.
	if sz < 1<<9 {
		sz = 1 << 9
	}

	mut buf := make([]byte, sz)
	mut n := 0
	for n < sz {
		rn := f.Read(buf[n:]) else { error(error) }
		if rn == 0 {
			break
		}
		n += rn
	}
	f.Close() else { error(error) }
	ret buf[:n]
}

// Writes data to the named file, creating it if necessary.
// If the file does not exist, creates it with permissions perm (before umask);
// otherwise truncates it before writing, without changing permissions.
// Since requires multiple system calls to complete, a failure mid-operation
// can leave the file in a partially written state.
// Calls internally `File.Open`, `File.Write`, `File.Close` and forwards any exceptional.
fn WriteFile(path: str, data: []byte, perm: FileMode)! {
	mut f := OpenFile(path, O_WRONLY|O_CREATE|O_TRUNC, perm) else { error(error) }
	f.Write(data) else { error(error) }
	f.Close() else { error(error) }
}

impl File {
	// Writes bytes to handle and returns written byte count.
	// The number of bytes written can never exceed the length of the buf.
	//
	// Implements the io::Writer trait.
	fn Write(mut self, buf: []byte)!: (n: int) {
		n, ok := self.fd.Write(buf)
		if !ok {
			error(sys::GetLastErrno())
		}
		ret
	}

	// Read bytes to buffer from handle and returns read byte count.
	// The number of bytes read can never exceed the length of the buf.
	// If the buf is larger than the number of bytes that can be read,
	// the buffer will not cause an overflow. Offset will be shifted
	// by the number of bytes read.
	//
	// Implements the io::Reader trait.
	fn Read(mut self, mut buf: []byte)!: (n: int) {
		n, ok := self.fd.Read(buf)
		if !ok {
			error(sys::GetLastErrno())
		}
		ret
	}

	// Sets offset to next Read/Write operation and returns the new offset.
	// whence: 0 (io::SeekStart) means, relative to the whence of the file, 1 (io::SeekCurrent)
	// means relative to the current offset, and 2 (io::SeekEnd) means relative to end.
	fn Seek(mut self, offset: i64, whence: int)!: i64 {
		pos, ok := self.fd.Seek(offset, whence)
		if !ok {
			error(sys::GetLastErrno())
		}
		ret pos
	}

	// Commits the current contents of the file to stable storage.
	// Typically, this means flushing the file system's in-memory copy
	// of recently written data to disk.
	fn Sync(mut self)! {
		ok := self.fd.Fsync()
		if !ok {
			error(sys::GetLastErrno())
		}
	}

	// Changes the size of the file.
	// It does not change the I/O offset.
	fn Truncate(mut self, size: i64)! {
		ok := self.fd.Ftruncate(size)
		if !ok {
			error(sys::GetLastErrno())
		}
	}

	// Closes file handle.
	//
	// Implements the io::Closer trait.
	fn Close(mut self)! {
		ok := self.fd.Close()
		if !ok {
			error(sys::GetLastErrno())
		}
	}
}