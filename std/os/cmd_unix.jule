// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/byteslite"
use "std/internal/conv"
use "std/internal/os"
use "std/internal/os/unix"
use "std/os/filepath"
use "std/sys"
use "std/unsafe"

// Deprecated: Handle this macro in pure Jule.
cpp fn WEXITSTATUS(status: i32): int

const invalidPid = -1

struct cmdAttrs {
	pid: int
}

fn cmdsetenv(mut &envv: []str)! {
	for j, env in envv {
		i := byteslite::IndexByteStr(env, '=')
		if i == -1 {
			error(sys::Errno(sys::EINVAL))
		}
		if len(env)-i == 1 {
			envv[j] = env[:i] + "=\x00"
		}
	}
}

impl Cmd {
	fn spawn(self, path: str, stdin: &File, stdout: &File, stderr: &File)! {
		// Setup all environment data.
		args := self.args()
		mut env := self.env() else { error(error) }

		// Create communication pipe for error handling.
		// Error codes will be sent using this pipe from child to parent.
		// So any complex error handling must be done before this phase.
		// Only system error should occur, with errno, after fork.
		pipe0, pipe1 := ipipe()!

		// Get fork and dive into parent and child process.
		self.attrs.pid = sys::Fork() else { error(error) }
		if self.attrs.pid == 0 {
			// We are in the child process.
			sys::Close(pipe0)!

			writeErrAndExit := fn(errno: sys::Errno) {
				code := conv::Itoa(int(errno))
				sys::Write(pipe1, unsafe::StrBytes(code))!
				sys::Close(pipe1)!
				Exit(1)
			}

			if self.Dir != "" {
				os::Chdir(self.Dir) else {
					writeErrAndExit(error.(sys::Errno))
				}
			}

			cmdsetenv(env) else {
				writeErrAndExit(error.(sys::Errno))
			}

			// Call dup for standard input/output if they are different.
			if stdin.fd.File != u64(sys::STDIN) {
				sys::Dup2(int(stdin.fd.File), int(sys::STDIN)) else { writeErrAndExit(error.(sys::Errno)) }
			}
			if stdout.fd.File != u64(sys::STDOUT) {
				sys::Dup2(int(stdout.fd.File), int(sys::STDOUT)) else { writeErrAndExit(error.(sys::Errno)) }
			}
			if stderr.fd.File != u64(sys::STDERR) {
				sys::Dup2(int(stderr.fd.File), int(sys::STDERR)) else { writeErrAndExit(error.(sys::Errno)) }
			}

			// Time to run.
			sys::Exec(path, args, env) else {
				writeErrAndExit(error.(sys::Errno))
			}
			// If execvp was successful, this statement would not be reached.
		} else {
			// We are in the parent process.
			sys::Close(pipe1)!
			// Read from pipe0, if any.
			let mut buf: [16]byte
			n := sys::Read(pipe0, unsafe::Slice(&buf[0], len(buf), len(buf)))!
			sys::Close(pipe0)!
			// We received data from child process, this is an error code.
			// Return error as sys::Errno.
			if n != 0 {
				self.attrs.pid = invalidPid
				code, _ := unsafe { conv::AtoiBp(&buf[0], n) }
				error(sys::Errno(code))
			}
		}
	}

	fn kill(self)! {
		sys::Kill(self.attrs.pid, 1) else {
			self.attrs.pid = invalidPid
			error(error)
		}
		self.attrs.pid = invalidPid
	}

	fn wait(self)!: int {
		mut stat := i32(0)
		sys::Waitpid(self.attrs.pid, stat, 0) else { error(error) }
		self.attrs.pid = invalidPid
		ret cpp.WEXITSTATUS(stat)
	}
}

fn findExecutable(file: str)! {
	d := Stat(file) else { error(error) }
	m := d.Mode()
	if m.IsDir() {
		error(sys::Errno(sys::EISDIR))
	}
	unix::Eaccess(file, unix::X_OK) else {
		// ENOSYS means Eaccess is not available or not implemented.
		// EPERM can be returned by Linux containers employing seccomp.
		// In both cases, fall back to checking the permission bits.
		if error != sys::ENOSYS && error != sys::EPERM {
			error(error)
		}
		if m&0111 != 0 {
			ret
		}
		error(sys::Errno(sys::EACCES))
	}
}

// Searches for an executable named file in the
// directories named by the PATH environment variable.
// If file contains a slash, it is tried directly and the PATH is not consulted.
// Otherwise, on success, the result is an absolute path.
fn lookPath(file: str)!: str {
	if byteslite::IndexByteStr(file, '/') != -1 {
		findExecutable(file) else {
			error(&lookpathError{file, error})
		}
		ret file
	}
	mut path := Getenv("PATH")
	for (_, mut dir) in filepath::SplitList(path) {
		if dir == "" {
			// Unix shell semantics: path element "" means "."
			dir = "."
		}
		path = filepath::Join(dir, file)
		findExecutable(path) else { continue }
		if !filepath::IsAbs(path) {
			error(&lookpathError{file, errDot})
		}
		ret path
	}
	error(&lookpathError{file, errNotFound})
}

// This is a no-op on non-Windows platforms, since
// they do not restrict executables to specific extensions.
fn lookExtensions(path: str, dir: str)!: str { ret path }