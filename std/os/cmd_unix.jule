// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/conv"
use integ "std/jule/integrated"
use "std/os/filepath"
use "std/os/internal"
use "std/os/internal/unix"
use "std/strings"
use "std/sys"

cpp use "<signal.h>"
cpp use "<sys/wait.h>"
cpp use "<unistd.h>"

cpp fn fork(): int
cpp unsafe fn waitpid(pid: int, mut status: *integ::Int, options: int): int
cpp fn WEXITSTATUS(status: int): int
cpp fn kill(pid: int, sig: int): int
cpp unsafe fn setenv(*integ::Char, *integ::Char, int): int
cpp fn dup2(old: integ::Int, new: integ::Int): int

// Type of a process id.
type pid = int

const invalidPid = -1

struct cmdAttrs {
	pid: pid
}

fn strSliceToCstrSlice(&s: []str, mut &bargs: [][]byte): []*integ::Char {
	mut cs := make([]*integ::Char, len(s)+1)
	bargs = make([][]byte, len(s))
	for i, arg in s {
		mut barg := integ::StrToBytes(arg)
		bargs[i] = barg
		cs[i] = unsafe { (*integ::Char)(&barg[0]) }
	}
	cs[len(cs)-1] = nil
	ret cs
}

fn execvp(&file: str, &argv: []str): int {
	mut bargs := [][]byte(nil) // Avoid deallocation of converted args for safety.
	cargv := strSliceToCstrSlice(argv, bargs)
	s := integ::StrToBytes(file)
	unsafe {
		ret integ::Emit[int]("execvp({}, (char*const*){})", (*integ::Char)(&s[0]), &cargv[0])
	}
}

fn cmdsetenv(&envv: []str)! {
	const Overwrite = 1
	for _, env in envv {
		i := strings::IndexByte(env, '=')
		if i == -1 {
			error(sys::Errno(sys::EINVAL))
		}
		unsafe {
			key := integ::StrToBytes(env[:i])
			if len(env)-i == 1 {
				val := "\x00"
				if cpp.setenv((*integ::Char)(&key[0]), (*integ::Char)(&val[0]), Overwrite) == -1 {
					error(sys::GetLastErrno())
				}
			} else {
				val := integ::StrToBytes(env[i+1:])
				if cpp.setenv((*integ::Char)(&key[0]), (*integ::Char)(&val[0]), Overwrite) == -1 {
					error(sys::GetLastErrno())
				}
			}
		}
	}
}

impl Cmd {
	fn spawn(self, path: str, stdin: &File, stdout: &File, stderr: &File)! {
		// Setup all environment data.
		args := self.args()
		env := self.env() else { error(error) }
		// Create communication pipe for error handling.
		// Error codes will be sent using this pipe from child to parent.
		// So any complex error handling must be done before this phase.
		// Only system error should occur, with errno, after fork.
		let pipe: [2]integ::Int
		if unsafe { cpp.pipe(&pipe[0]) } == -1 {
			error(sys::GetLastErrno())
		}
		pipe0 := unsafe { int(pipe[0]) }
		pipe1 := unsafe { int(pipe[1]) }
		if sys::Fcntl(pipe1, sys::F_SETFD, sys::Fcntl(pipe1, sys::F_GETFD, 0)|sys::FD_CLOEXEC) == -1 {
			e := sys::GetLastErrno()
			sys::Close(pipe0)
			sys::Close(pipe1)
			error(e)
		}
		self.attrs.pid = cpp.fork()
		match self.attrs.pid {
		| -1:
			// Failed. We can return with error.
			// Already in parent process.
			error(sys::GetLastErrno())
		| 0:
			// We are in the child process.
			sys::Close(pipe0)

			writeErrAndExit := fn(errno: sys::Errno) {
				code := conv::Itoa(int(errno))
				unsafe { sys::Write(pipe1, &code[0], uint(len(code))) }
				sys::Close(pipe1)
				Exit(1)
			}

			if self.Dir != "" {
				internal::Chdir(self.Dir) else {
					writeErrAndExit(error.(sys::Errno))
				}
			}

			cmdsetenv(env) else {
				writeErrAndExit(error.(sys::Errno))
			}

			if cpp.dup2(unsafe { integ::Int(stdin.fd.File) }, unsafe { integ::Int(sys::STDIN) }) == -1 {
				writeErrAndExit(sys::GetLastErrno())
			}
			if cpp.dup2(unsafe { integ::Int(stdout.fd.File) }, unsafe { integ::Int(sys::STDOUT) }) == -1 {
				writeErrAndExit(sys::GetLastErrno())
			}
			if cpp.dup2(unsafe { integ::Int(stderr.fd.File) }, unsafe { integ::Int(sys::STDERR) }) == -1 {
				writeErrAndExit(sys::GetLastErrno())
			}

			execvp(path, args)
			// If execvp was successful, this statement would not be reached.
			writeErrAndExit(sys::GetLastErrno())
		|:
			// We are in the parent process.
			sys::Close(pipe1)
			// Read from pipe0, if any.
			let mut buf: [16]byte
			n := unsafe { sys::Read(pipe0, &buf[0], uint(len(buf))) }
			sys::Close(pipe0)
			// We received data from child process, this is an error code.
			// Return error as sys::Errno.
			if n != 0 {
				self.attrs.pid = invalidPid
				code, _ := unsafe { conv::AtoiBp(&buf[0], n) }
				error(sys::Errno(code))
			}
		}
	}

	fn kill(self)! {
		if cpp.kill(self.attrs.pid, 1) != 0 {
			error(sys::GetLastErrno())
		}
		self.attrs.pid = invalidPid
	}

	fn wait(self)!: int {
		mut stat := 0
		unsafe {
			if cpp.waitpid(self.attrs.pid, (*integ::Int)(&stat), 0) == -1 {
				error(sys::GetLastErrno())
			}
		}
		self.attrs.pid = invalidPid
		ret cpp.WEXITSTATUS(stat)
	}
}

fn findExecutable(file: str)! {
	d := Stat(file) else { error(error) }
	m := d.Mode()
	if m.IsDir() {
		error(sys::Errno(sys::EISDIR))
	}
	unix::Eaccess(file, unix::X_OK) else {
		// ENOSYS means Eaccess is not available or not implemented.
		// EPERM can be returned by Linux containers employing seccomp.
		// In both cases, fall back to checking the permission bits.
		if error != sys::ENOSYS && error != sys::EPERM {
			error(error)
		}
		if m&0111 != 0 {
			ret
		}
		error(sys::Errno(sys::EACCES))
	}
}

// Searches for an executable named file in the
// directories named by the PATH environment variable.
// If file contains a slash, it is tried directly and the PATH is not consulted.
// Otherwise, on success, the result is an absolute path.
fn lookPath(file: str)!: str {
	if strings::Contains(file, "/") {
		findExecutable(file) else {
			error(&lookpathError{file, error})
		}
		ret file
	}
	mut path := Getenv("PATH")
	for (_, mut dir) in filepath::SplitList(path) {
		if dir == "" {
			// Unix shell semantics: path element "" means "."
			dir = "."
		}
		path = filepath::Join(dir, file)
		findExecutable(path) else { continue }
		if !filepath::IsAbs(path) {
			error(&lookpathError{file, errDot})
		}
		ret path
	}
	error(&lookpathError{file, errNotFound})
}

// This is a no-op on non-Windows platforms, since
// they do not restrict executables to specific extensions.
fn lookExtensions(path: str, dir: str)!: str { ret path }