// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/byteslite"
use "std/internal/conv"
use integ "std/jule/integrated"
use "std/sys"

cpp use "<signal.h>"
cpp use "<sys/wait.h>"
cpp use "<unistd.h>"

cpp fn fork(): int
cpp unsafe fn waitpid(pid: int, mut status: *integ::Int, options: int): int
cpp fn WEXITSTATUS(status: int): int
cpp fn kill(pid: int, sig: int): int
cpp unsafe fn setenv(*integ::Char, *integ::Char, int): int

// Type of a process id.
type pid = int

const invalidPid = -1

struct cmdAttrs {
	pid: pid = invalidPid
}

fn strSliceToCstrSlice(&s: []str, mut &bargs: [][]byte): []*integ::Char {
	mut cs := make([]*integ::Char, len(s)+1)
	bargs = make([][]byte, len(s))
	for i, arg in s {
		mut barg := integ::StrToBytes(arg)
		bargs[i] = barg
		cs[i] = unsafe { (*integ::Char)(&barg[0]) }
	}
	cs[len(cs)-1] = nil
	ret cs
}

fn execvp(&file: str, &argv: []str): int {
	mut bargs := [][]byte(nil) // Avoid deallocation of converted args for safety.
	cargv := strSliceToCstrSlice(argv, bargs)
	s := integ::StrToBytes(file)
	unsafe {
		ret integ::Emit[int]("execvp({}, (char*const*){})", (*integ::Char)(&s[0]), &cargv[0])
	}
}

fn cmdsetenv(&envv: []str)! {
	const Overwrite = 1
	for _, env in envv {
		i := byteslite::IndexByteStr(env, '=')
		if i == -1 {
			error(sys::EINVAL)
		}
		unsafe {
			key := integ::StrToBytes(env[:i])
			if len(env)-i == 1 {
				val := "\x00"
				if cpp.setenv((*integ::Char)(&key[0]), (*integ::Char)(&val[0]), Overwrite) == -1 {
					error(sys::GetLastErrno())
				}
			} else {
				val := integ::StrToBytes(env[i+1:])
				if cpp.setenv((*integ::Char)(&key[0]), (*integ::Char)(&val[0]), Overwrite) == -1 {
					error(sys::GetLastErrno())
				}
			}
		}
	}
}

impl Cmd {
	fn spawn(self)! {
		if self.attrs.pid != invalidPid {
			panic("process: command is already spawned")
		}
		path := self.path
		let pipe: [2]integ::Int
		if unsafe { cpp.pipe(&pipe[0]) } == -1 {
			error(sys::GetLastErrno())
		}
		pipe0 := unsafe { int(pipe[0]) }
		pipe1 := unsafe { int(pipe[1]) }
		if sys::Fcntl(pipe1, sys::F_SETFD, sys::Fcntl(pipe1, sys::F_GETFD, 0)|sys::FD_CLOEXEC) == -1 {
			e := sys::GetLastErrno()
			sys::Close(pipe0)
			sys::Close(pipe1)
			error(e)
		}
		self.attrs.pid = cpp.fork()
		match self.attrs.pid {
		| -1:
			error(sys::GetLastErrno())
		| 0:
			sys::Close(pipe0)
			mut args := make([]str, 1, 1+len(self.Args))
			args[0] = path
			args = append(args, self.Args...)
			cmdsetenv(self.Env) else { error(error) }
			execvp(path, args)
			code := conv::Itoa(int(sys::GetLastErrno()))
			unsafe { sys::Write(pipe1, &code[0], uint(len(code))) }
			sys::Close(pipe1)
			Exit(1)
		|:
			sys::Close(pipe1)
			let mut buf: [16]byte
			n := unsafe { sys::Read(pipe0, &buf[0], uint(len(buf))) }
			sys::Close(pipe0)
			if n != 0 {
				self.attrs.pid = invalidPid
				code, _ := unsafe { conv::AtoiBp(&buf[0], n) }
				error(sys::Errno(code))
			}
		}
	}

	fn kill(self)! {
		if self.attrs.pid == invalidPid {
			panic("process: command is not spawned")
		}
		if cpp.kill(self.attrs.pid, 1) != 0 {
			error(sys::GetLastErrno())
		}
		self.attrs.pid = invalidPid
	}

	fn wait(self)!: int {
		if self.attrs.pid == invalidPid {
			panic("process: command is not spawned")
		}
		mut stat := 0
		unsafe {
			if cpp.waitpid(self.attrs.pid, (*integ::Int)(&stat), 0) == -1 {
				error(sys::GetLastErrno())
			}
		}
		self.attrs.pid = invalidPid
		ret cpp.WEXITSTATUS(stat)
	}
}