// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"
use "std/runtime"
use "std/sys"

fn lookupenv(key: str): (val: str, found: bool) {
	keyPtr := integ::UTF16FromStr(key)
	mut n := u32(100)
	for {
		mut b := make([]u16, n)
		n = unsafe { sys::GetEnvironmentVariable(&keyPtr[0], &b[0], u32(len(b))) }
		if n == 0 && sys::GetLastErrno() == sys::ERROR_ENVVAR_NOT_FOUND {
			ret "", false
		}
		if n <= u32(len(b)) {
			ret integ::UTF16ToStr(b[:n]), true
		}
	}
}

fn setenv(key: str, val: str)! {
	keyPtr := integ::UTF16FromStr(key)
	valPtr := integ::UTF16FromStr(val)
	ok := unsafe { sys::SetEnvironmentVariable(&keyPtr[0], &valPtr[0]) }
	if !ok {
		error(sys::GetLastErrno())
	}
}

fn environ(): []str {
	ret runtime::env()
}