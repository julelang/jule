// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/os"
use integ "std/jule/integrated"
use "std/os/filepath"
use "std/runtime"
use "std/sys"

// Causes the current program to exit with the given status code.
// Conventionally, code zero indicates success, non-zero an error.
fn Exit(code: int) { sys::Exit(code) }

// Returns executable path.
// Returns empty string if any error occurs.
fn Executable(): str {
	ret runtime::executable()
}

// Returns command-line arguments.
// Starts with the program name.
fn Args(): []str {
	ret runtime::args()
}

// Returns an absolute path name of the current working
// directory of the calling process.
fn Getwd()!: str {
	ret os::Getwd() else { error(error) }
}

// Changes the current working directory to the given directory.
fn Chdir(path: str)! {
	os::Chdir(path) else { error(error) }
	// Update the working directory cache.
	const match runtime::OS {
	| "windows":
		abs := filepath::IsAbs(path)
		wdmu.lock()
		if abs {
			wd = path
		} else {
			wd = ""
		}
		wdmu.unlock()
	}
}

// Returns environment variables.
fn Environ(): []str { ret os::Environ() }

// Retrieves the value of the environment variable named by the key.
// It returns the value, which will be empty if the variable is not present.
// To distinguish between an empty value and an found value, use [LookupEnv].
fn Getenv(key: str): str { ret os::Getenv(key) }

// Retrieves the value of the environment variable named by the key.
// If the variable is present in the environment the value (which may be empty)
// is returned and the boolean is true. Otherwise the returned value will be
// empty and the boolean will be false.
fn LookupEnv(key: str): (value: str, found: bool) { ret os::LookupEnv(key) }

// Sets the value of the environment variable named by the key.
fn Setenv(key: str, value: str)! { os::Setenv(key, value) else { error(error) } }