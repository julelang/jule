// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"
use "std/os/filepath"
use "std/sys"

fn readDir(path: str)!: (dirents: []DirEntry) {
	utf16Path := integ::UTF16FromStr(filepath::Join(path, "*"))
	mut data := sys::Win32FindData{}
	handle := unsafe { sys::FindFirstFile(&utf16Path[0], &data) }
	if handle == sys::InvalidHandle {
		error(sys::GetLastErrno())
	}
	for {
		mut entry := DirEntry{
			Name: unsafe { integ::U16PtrToStr(&data.FileName[0]) },
		}
		entry.Stat = Stat(filepath::Join(path, entry.Name)) else { error(error) }
		dirents = append(dirents, entry)
		if unsafe { sys::FindNextFile(handle, &data) } == 0 {
			break
		}
	}
	sys::FindClose(handle)
	ret
}

fn mkdir(path: str)! {
	// NOTICE
	// Also can has EMLINK error-code.
	// Make sure this situation should documented or not.
	utf16Path := integ::UTF16FromStr(path)
	if unsafe { !sys::CreateDirectory(&utf16Path[0]) } {
		error(sys::GetLastErrno())
	}
}

fn rmdir(path: str)! {
	utf16Path := integ::UTF16FromStr(path)
	if unsafe { !sys::RemoveDirectory(&utf16Path[0]) } {
		error(sys::GetLastErrno())
	}
}