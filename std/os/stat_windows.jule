// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"
use "std/os/filepath"
use "std/sys"

fn winstat(path: str, followSurrogates: bool)!: FileInfo {
	if path == "" {
		error(sys::Errno(sys::ERROR_PATH_NOT_FOUND))
	}
	utf16Path := integ::UTF16FromStr(fixLongPath(path))

	// Try GetFileAttributesEx first, because it is faster than CreateFile.
	// See https://golang.org/issues/19922#issuecomment-300031421 for details.
	let mut fa: sys::Win32FileAttributeData
	ok := unsafe { sys::GetFileAttributesEx(&utf16Path[0], sys::GetFileExInfoStandard, &fa) }
	if ok && fa.FileAttributes&sys::FILE_ATTRIBUTE_REPARSE_POINT == 0 {
		// Not a surrogate for another named entity, because it isn't any kind of reparse point.
		// The information we got from GetFileAttributesEx is good enough for now.
		info := winstatInfo{}
		fs := newFileStatFromWin32FileAttributeData(fa, info)
		ret fs
	}

	// GetFileAttributesEx fails with ERROR_SHARING_VIOLATION error for
	// files like c:\pagefile.sys. Use FindFirstFile for such files.
	if ok && sys::GetLastErrno() == sys::ERROR_SHARING_VIOLATION {
		let mut fd: sys::Win32FindData
		handle := unsafe { sys::FindFirstFile(&utf16Path[0], &fd) }
		if handle == sys::InvalidHandle {
			error(sys::GetLastErrno())
		}
		sys::FindClose(handle)
		if fd.FileAttributes&sys::FILE_ATTRIBUTE_REPARSE_POINT == 0 {
			// Not a surrogate for another named entity. FindFirstFile is good enough.
			fs := newFileStatFromWin32FindData(fd)
			ret fs
		}
	}

	// Use CreateFile to determine whether the file is a name surrogate and, if so,
	// save information about the link target.
	// Set FILE_FLAG_BACKUP_SEMANTICS so that CreateFile will create the handle
	// even if name refers to a directory.
	let flags: u32 = sys::FILE_FLAG_BACKUP_SEMANTICS | sys::FILE_FLAG_OPEN_REPARSE_POINT
	mut h := unsafe { sys::CreateFile(&utf16Path[0], 0, 0, nil, sys::OPEN_EXISTING, flags, 0) }
	if h == sys::InvalidHandle && sys::GetLastErrno() == sys::ERROR_INVALID_PARAMETER {
		// Console handles, like "\\.\con", require generic read access. See
		// https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew#consoles.
		// We haven't set it previously because it is normally not required
		// to read attributes and some files may not allow it.
		h = unsafe { sys::CreateFile(&utf16Path[0], sys::GENERIC_READ, 0, nil, sys::OPEN_EXISTING, flags, 0) }
	}
	if h == sys::InvalidHandle {
		// Since CreateFile failed, we can't determine whether name refers to a
		// name surrogate, or some other kind of reparse point. Since we can't return a
		// FileInfo with a known-accurate Mode, we must return an error.
		error(sys::GetLastErrno())
	}
	mut fs, mut d, mut info := statHandle(h) else { error(error) }
	sys::CloseHandle(h) else { error(error) }
	if followSurrogates && win32FileAttributeDataIsReparseTagNameSurrogate(d, info) {
		// To obtain information about the link target, we reopen the file without
		// FILE_FLAG_OPEN_REPARSE_POINT and examine the resulting handle.
		// (See https://devblogs.microsoft.com/oldnewthing/20100212-00/?p=14963.)
		h = unsafe { sys::CreateFile(&utf16Path[0], 0, 0, nil, sys::OPEN_EXISTING, sys::FILE_FLAG_BACKUP_SEMANTICS, 0) }
		if h == sys::InvalidHandle {
			error(sys::GetLastErrno())
		}
		fs, _, _ = statHandle(h) else { error(error) }
		sys::CloseHandle(h) else { error(error) }
	}
	ret fs
}

fn statHandle(h: sys::Handle)!: (fs: FileInfo, fi: sys::Win32FileAttributeData, info: winstatInfo) {
	ft, err := unsafe { sys::GetFileType(h) }
	if err {
		error(sys::GetLastErrno())
	}
	if ft == sys::FILE_TYPE_PIPE || ft == sys::FILE_TYPE_CHAR {
		info.filetype = ft
		ret
	}
	fs, fi, info = newFileInfoFromGetFileInformationByHandle(h) else { error(error) }
	info.filetype = ft
	ret
}

fn stat(path: str)!: FileInfo {
	mut fi := winstat(path, true) else { error(error) }
	// Assign path if it is not resolved.
	if fi.sys.vol == 0 {
		fi.sys.path = path
	}
	ret fi
}

fn lstat(path: str)!: FileInfo {
	mut followSurrogates := false
	if path != "" && filepath::IsPathSep(path[len(path)-1]) {
		// We try to implement POSIX semantics for Lstat path resolution
		// (per https://pubs.opengroup.org/onlinepubs/9699919799.2013edition/basedefs/V1_chap04.html#tag_04_12):
		// symlinks before the last separator in the path must be resolved. Since
		// the last separator in this case follows the last path element, we should
		// follow symlinks in the last path element.
		followSurrogates = true
	}
	mut fi := winstat(path, followSurrogates) else { error(error) }
	// Assign path if it is not resolved.
	if fi.sys.vol == 0 {
		fi.sys.path = path
	}
	ret fi
}