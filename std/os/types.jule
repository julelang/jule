// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Represents a file's mode and permission bits.
// The bits have the same definition on all systems, so that
// information about files can be moved from one system
// to another portably. Not all bits apply to all systems.
// The only required bit is [ModeDir] for directories.
type FileMode: u32

// The defined file mode bits are the most significant bits of the [FileMode].
// The nine least-significant bits are the standard Unix rwxrwxrwx permissions.
// The values of these bits should be considered part of the public API and
// may be used in wire protocols or disk representations: they must not be
// changed, although new bits might be added.
const ModeDir = 1 << 31        // d: is a directory
const ModeAppend = 1 << 30     // a: append-only
const ModeExclusive = 1 << 29  // l: exclusive use
const ModeTemporary = 1 << 28  // T: temporary file; Plan 9 only
const ModeSymlink = 1 << 27    // L: symbolic link
const ModeDevice = 1 << 26     // D: device file
const ModeNamedPipe = 1 << 25  // p: named pipe (FIFO)
const ModeSocket = 1 << 24     // S: Unix domain socket
const ModeSetuid = 1 << 23     // u: setuid
const ModeSetgid = 1 << 22     // g: setgid
const ModeCharDevice = 1 << 21 // c: Unix character device, when ModeDevice is set
const ModeSticky = 1 << 20     // t: sticky
const ModeIrregular = 1 << 19  // ?: non-regular file; nothing else is known about this file

// Mask for the type bits. For regular files, none will be set.
const ModeType = ModeDir | ModeSymlink | ModeNamedPipe | ModeSocket | ModeDevice | ModeCharDevice | ModeIrregular

// Unix permission bits.
const ModePerm = 0777

impl FileMode {
	fn Str(self): str {
		const s = "dalTLDpSugct?"
		let mut buf: [32]byte // Mode is u32.
		mut w := 0
		for i, c in s {
			if self&(1<<uint(32-1-i)) != 0 {
				buf[w] = byte(c)
				w++
			}
		}
		if w == 0 {
			buf[w] = '-'
			w++
		}
		const rwx = "rwxrwxrwx"
		for i, c in rwx {
			if self&(1<<uint(9-1-i)) != 0 {
				buf[w] = byte(c)
			} else {
				buf[w] = '-'
			}
			w++
		}
		ret str(buf[:w])
	}

	// Reports whether self describes a directory.
	// That is, it tests for the [ModeDir] bit being set in self.
	fn IsDir(self): bool {
		ret self&ModeDir != 0
	}

	// Reports whether self describes a regular file.
	// That is, it tests that no mode type bits are set.
	fn IsRegular(self): bool {
		ret self&ModeType == 0
	}

	// Returns the Unix permission bits in self (self & [ModePerm]).
	fn Perm(self): FileMode {
		ret self & ModePerm
	}

	// Returns type bits in self (self & [ModeType]).
	fn Type(self): FileMode {
		ret self & ModeType
	}
}