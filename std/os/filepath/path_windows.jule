// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20.1/src/path/filepath/path_windows.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use integ "std/jule/integrated"
use "std/strings"
use "std/sys"

// Operating system specific path separator.
const Separator = '\\'

// Operating system specific path list separator.
const ListSeparator = ';'

// Reports whether c is path separator.
fn IsPathSep(c: byte): bool {
	ret c == Separator || c == '/'
}

fn isSlash(c: byte): bool { ret c == '\\' || c == '/' }

fn toUpper(c: byte): byte {
	if 'a' <= c && c <= 'z' {
		ret c - ('a' - 'A')
	}
	ret c
}

// Reports whether the path is absolute.
fn IsAbs(mut path: str): bool {
	l := volumeNameLen(path)
	if l == 0 {
		ret false
	}
	// If the volume name starts with a double slash, this is an absolute path.
	if isSlash(path[0]) && isSlash(path[1]) {
		ret true
	}
	path = path[l:]
	if path == "" {
		ret false
	}
	ret isSlash(path[0])
}

// Returns length of the leading volume name on Windows.
// It returns 0 elsewhere.
//
// See: https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats
fn volumeNameLen(path: str): int {
	if len(path) < 2 {
		ret 0
	}
	// with drive letter
	c := path[0]
	if path[1] == ':' && ('a' <= c && c <= 'z' || 'A' <= c && c <= 'Z') {
		ret 2
	}
	// UNC and DOS device paths start with two slashes.
	if !isSlash(path[0]) || !isSlash(path[1]) {
		ret 0
	}
	p1, mut rest, _ := cutPath(path[2:])
	mut p2 := ""
	mut ok := false
	p2, rest, ok = cutPath(rest)
	if !ok {
		ret len(path)
	}
	if p1 != "." && p1 != "?" {
		// This is a UNC path: \\${HOST}\${SHARE}\
		ret len(path) - len(rest) - 1
	}
	// This is a DOS device path.
	if len(p2) == 3 && toUpper(p2[0]) == 'U' && toUpper(p2[1]) == 'N' && toUpper(p2[2]) == 'C' {
		// This is a DOS device path that links to a UNC: \\.\UNC\${HOST}\${SHARE}\
		_, rest, _ = cutPath(rest)  // host
		_, rest, ok = cutPath(rest) // share
		if !ok {
			ret len(path)
		}
	}
	ret len(path) - len(rest) - 1
}

// Slices path around the first path separator.
fn cutPath(path: str): (before: str, after: str, found: bool) {
	for i in path {
		if isSlash(path[i]) {
			ret path[:i], path[i+1:], true
		}
	}
	ret path, "", false
}

fn fullPath(name: str): (path: str, ok: bool) {
	utf16Name := integ::UTF16FromStr(name)
	p := &utf16Name[0]
	mut n := u32(100)
	for {
		mut buf := make([]u16, n)
		n = unsafe { sys::GetFullPathName(p, u32(len(buf)), &buf[0], nil) }
		if n == 0 {
			ret "", false
		}
		if n <= u32(len(buf)) {
			ret integ::UTF16ToStr(buf[:n]), true
		}
	}
	ret "", false
}

fn abs(mut path: str): (str, ok: bool) {
	if path == "" {
		// full_path returns an error on empty path, because it's not a valid path.
		// To implement Abs behavior of returning working directory on empty string input,
		// special-case empty path by changing it to "." path. See golang.org/issue/24441.
		path = "."
	}
	path, ok = fullPath(path)
	if !ok {
		ret "", false
	}
	ret Clean(path), true
}

fn join(elem: ...str): str {
	mut s := strings::Builder{}
	s.Grow(1 << 4)
	mut lastChar := byte(0)
	for (_, mut e) in elem {
		match {
		| s.Len() == 0:
			// Add the first non-empty path element unchanged.
		| isSlash(lastChar):
			// If the path ends in a slash, strip any leading slashes from the next
			// path element to avoid creating a UNC path (any path starting with "\\")
			// from non-UNC elements.
			//
			// The correct behavior for join when the first element is an incomplete UNC
			// path (for example, "\\") is underspecified. We currently join subsequent
			// elements so join("\\", "host", "share") produces "\\host\share".
			for len(e) > 0 && isSlash(e[0]) {
				e = e[1:]
			}
		| lastChar == ':':
			// If the path ends in a colon, keep the path relative to the current directory
			// on a drive and don't add a separator. Preserve leading slashes in the next
			// path element, which may make the path absolute.
			//
			//  join(`C:`, `f`) = `C:f`
			//  join(`C:`, `\f`) = `C:\f`
		|:
			// In all other cases, add a separator between elements.
			s.WriteByte('\\')!
			lastChar = '\\'
		}
		if len(e) > 0 {
			s.WriteStr(e)!
			lastChar = e[len(e)-1]
		}
	}
	if s.Len() == 0 {
		ret ""
	}
	ret Clean(s.Str())
}