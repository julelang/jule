// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build unix || windows

use "std/sys"

// Returns the syscall-specific mode bits from Jule's portable mode bits.
fn syscallMode(i: FileMode): (o: u32) {
	o |= u32(i.Perm())
	if i&ModeSetuid != 0 {
		o |= sys::S_ISUID
	}
	if i&ModeSetgid != 0 {
		o |= sys::S_ISGID
	}
	if i&ModeSticky != 0 {
		o |= sys::S_ISVTX
	}
	ret
}

// Implementation adopted from the Go programming language.
//
// It makes a function call and repeats it if it returns an
// EINTR error. This appears to be required even though we install all
// signal handlers with SA_RESTART: see Go's #22838, #38033, #38836, #40846.
// Also #20400 and #36644 are issues in which a signal handler is
// installed without setting SA_RESTART. None of these are the common case,
// but there are enough of them that it seems that we can't avoid
// an EINTR loop.
fn ignoringEINTR(f: fn()!)! {
	for {
		f() else {
			if error == sys::EINTR {
				continue
			}
			error(error)
		}
		break
	}
}

// Implementation adopted from the Go programming language.
//
// This is ignoringEINTR, but returning an additional value.
fn ignoringEINTR2[T](f: fn()!: T)!: T {
	for {
		mut v := f() else {
			if error == sys::EINTR {
				continue
			}
			error(error)
		}
		ret v
	}
}