// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julec/obj"
use "std/jule/constant"
use "std/jule/sema"
use "std/jule/token"

const invalidBoundary = uintptr(0x0)

struct boundaryVar {
	var:     uintptr
	maxSize: []sema::Expr
}

// Information wrapper for boundary analysis.
struct boundary {
	vars: []boundaryVar
}

impl boundary {
	// Appends variable with initial maximum size expression.
	// If variable is already exist, updates maximum size information.
	fn pushVar(mut *self, var: uintptr, mut maxSize: sema::Expr) {
		if !Access || var == invalidBoundary {
			// Ignore it, because this optimizations within scope of the --opt-access flag.
			ret
		}
		if !isValidBoundaryInfo(maxSize) {
			ret
		}
		mut i := 0
		for i < len(self.vars); i++ {
			mut &v := unsafe { &(*(&self.vars[i])) }
			if v.var == var {
				for (j, mut max) in v.maxSize {
					if fitsSize(maxSize, max) {
						// Maximum size is fits, so new size is larger than current size.
						v.maxSize[j] = maxSize
						ret
					}
				}
				v.maxSize = append(v.maxSize, maxSize)
				ret
			}
		}
		// Not exist, append new one.
		self.updateVarNotExist(var, fn|mut data| {
			data.maxSize = append(data.maxSize, maxSize)
		})
	}

	fn removeVar(mut *self, var: uintptr): bool {
		if var != invalidBoundary {
			mut i := 0
			for i < len(self.vars); i++ {
				mut &v := unsafe { &(*(&self.vars[i])) }
				if v.var == var {
					v.var = invalidBoundary
					v.maxSize = v.maxSize[:0]
					ret true
				}
			}
		}
		ret false
	}

	fn findVar(mut *self, var: uintptr): (i: int) {
		for i < len(self.vars); i++ {
			if self.vars[i].var == var {
				ret
			}
		}
		ret -1
	}

	// Reports whether maximum size of variable is fits with given expression.
	fn fitsMaxSize(mut *self, var: uintptr, mut expr: sema::Expr): bool {
		if var != invalidBoundary {
			for (_, mut v) in self.vars {
				if v.var == var {
					ret fitsMaxSize(v.maxSize, expr) != -1
				}
			}
		}
		ret false
	}

	// Appends variable then calls handler.
	fn updateVarNotExist(mut *self, var: uintptr, handler: fn(mut &data: *boundaryVar)) {
		mut i := 0
		for i < len(self.vars); i++ {
			mut &v := unsafe { &(*(&self.vars[i])) }
			// Empty place, use here instead of append.
			if v.var == invalidBoundary {
				v.var = var
				handler(v)
				ret
			}
		}
		mut data := boundaryVar{var: var}
		handler(&data)
		self.vars = append(self.vars, data)
	}

	// Appends variable is not exist, or updates the existing one by address.
	fn updateVar(mut *self, var: uintptr, handler: fn(mut &data: *boundaryVar)) {
		i := self.findVar(var)
		if i == -1 {
			self.updateVarNotExist(var, handler)
			ret
		}
		mut &v := unsafe { &(*(&self.vars[i])) }
		handler(v)
	}

	fn handleVarByExpr(mut *self, var: uintptr, mut value: sema::Expr) {
		if var == invalidBoundary {
			ret
		}
		match type value {
		| &sema::Var:
			v := value.(&sema::Var)
			// Self assignment, nothing to do.
			if uintptr(v) == var {
				ret
			}
			i := self.findVar(uintptr(v))
			if i != -1 {
				mut data := self.vars[i]
				self.updateVar(var, fn|mut vdata| {
					vdata.maxSize = growSlice(vdata.maxSize, len(data.maxSize))
					copy(vdata.maxSize, data.maxSize)
				})
				ret
			}
		| &sema::BuiltinMakeCallExpr:
			// Must be slice, but do not check it.
			mut mk := value.(&sema::BuiltinMakeCallExpr)
			c := getConstantSize(mk.Len)
			if c != nil {
				// c should be equal to c - 1
				// Because it is count of elements, not max index.
				// Allocate new constant to avoid mutating the actual constant.
				// By physical limits, 64-bit unsigned inger should be enough.
				mut size := constant::Const.NewU64(c.AsU64() - 1)

				self.pushVar(var, size)
				ret
			}
		|:
			// Unsupported.
			break
		}

		self.removeVar(var)
	}
}

// Reports whether model is valid maximum size information for boundary analysis.
fn isValidBoundaryInfo(mut m: sema::Expr): bool { ret fitsSize(m, m) }

// Reports whether maximum size is fits with given expression.
// In other words, reports whether: max >= expr
// Returns index number of max size which is fit, otherwise -1.
fn fitsMaxSize(mut max: []sema::Expr, mut expr: sema::Expr): int {
	for (i, mut m) in max {
		if fitsSize(m, expr) {
			ret i
		}
	}
	ret -1
}

fn fitsSize(mut e1: sema::Expr, mut e2: sema::Expr): bool {
	if obj::TypeData(e1) != obj::TypeData(e2) {
		ret false
	}
	match type e1 {
	| &constant::Const:
		exprConst := e2.(&constant::Const)
		ret exprConst.AsF64() >= 0 && e1.(&constant::Const).GtEq(*exprConst)
	| &sema::Var:
		ret e1 == e2
	| &sema::StructSubIdentExpr:
		mut ssi1 := e1.(&sema::StructSubIdentExpr)
		mut ssi2 := e2.(&sema::StructSubIdentExpr)
		ret obj::EqualModels(ssi1.Expr.Model, ssi2.Expr.Model) && ssi1.Field == ssi2.Field
	| &sema::UnaryExpr:
		mut uem1 := e1.(&sema::UnaryExpr)
		mut uem2 := e2.(&sema::UnaryExpr)
		if uem1.Op.ID != token::MUL || uem1.Op.ID != uem2.Op.ID {
			ret false
		}
		ret fitsSize(uem1.Expr.Model, uem2.Expr.Model)
	|:
		ret false
	}
}

// Removes model from boundary b. If model exist in boundary b as a boundary
// exihibit variable, removed variable directly. Otherwise removes size variable
// by model if exist.
fn possibleBoundaryRemove(mut b: &boundary, mut model: sema::Expr) {
	// Remove variable from boundary b if exist.
	// Because it changed and we don not know anything now.
	var, _ := model.(&sema::Var)
	if var != nil && b.removeVar(uintptr(var)) {
		ret
	}
	// Variable is not in boundary b,
	// so seek in size variables to remove if exist.
	mut i := 0
	for i < len(b.vars); i++ {
		mut &v := unsafe { &(*(&b.vars[i])) }
		for (j, mut max) in v.maxSize {
			if obj::EqualModels(max, model) {
				v.maxSize = append(v.maxSize[:j], v.maxSize[j+1:]...)
				break
			}
		}
	}
}

fn isBoundaryRiskyType(mut t: &sema::Type): bool {
	// Reports true for not-arrays because array's size cannot be changed.
	ret t.Array() == nil
}

fn isBoundaryValidType(mut t: &sema::Type): bool { ret t.Slice() != nil || t.Array() != nil }

fn getBoundaryVar(mut m: sema::Expr): uintptr {
	if !Access {
		ret invalidBoundary
	}

	// Special case: if expression is reference pointer, return invalid address directly.
	// Otherwise it might be dereferenced, investigate deeper.
	mut v, _ := m.(&sema::Var)
	if v != nil && v.Reference {
		ret invalidBoundary
	}

	for {
		match type m {
		| &sema::Var:
			v = m.(&sema::Var)
			if !v.Reference || v.ValueSym == nil || v.ValueSym.Value == nil {
				// Variable is not reference (or points to unknown such as parameters), return address of it.
				ret uintptr(m.(&sema::Var))
			}
			// Variable is reference, it should be initialized at source code.
			// Investigate the initial expression for variable address.
			m = v.ValueSym.Value.Model
			continue
		| &sema::StructSubIdentExpr:
			ret uintptr(m.(&sema::StructSubIdentExpr).Field)
		| &sema::UnaryExpr:
			mut uem := m.(&sema::UnaryExpr)
			if uem.Op.ID == token::MUL { // Dereferencing.
				m = uem.Expr.Model
				continue
			}
			ret invalidBoundary
		|:
			ret invalidBoundary
		}
	}
}

// Grows b by n, preserving the original content of b.
fn growSlice[S: []E, E](mut s: S, n: int): S {
	if n <= cap(s) {
		ret s[:n]
	}
	ret make(S, n)
}

fn getConstantSize(mut v: sema::Expr): &constant::Const {
	mut c, _ := v.(&constant::Const)
	ret c
}