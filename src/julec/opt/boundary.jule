// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "obj"
use "std/jule/constant"
use "std/jule/sema"
use "std/jule/token"

const invalidBoundary = uintptr(0x0)

struct boundaryVar {
	var:     uintptr
	maxSize: []sema::Expr
}

// Information wrapper for boundary analysis.
struct boundary {
	vars: []boundaryVar
}

impl boundary {
	// Appends variable with initial maximum size expression.
	// If variable is already exist, updates maximum size information.
	fn pushVar(mut self, var: uintptr, mut maxSize: sema::Expr) {
		if !Access || var == invalidBoundary {
			// Ignore it, because this optimizations within scope of the --opt-access flag.
			ret
		}
		if !isValidBoundaryInfo(maxSize) {
			ret
		}
		mut i := 0
		for i < len(self.vars); i++ {
			mut &v := unsafe { *(&self.vars[i]) }
			if v.var == var {
				for (j, mut max) in v.maxSize {
					if fitsSize(maxSize, max) {
						// Maximum size is fits, so new size is larger than current size.
						v.maxSize[j] = maxSize
						ret
					}
				}
				v.maxSize = append(v.maxSize, maxSize)
				ret
			}
		}
		// Not exist, append new one.
		i = 0
		for i < len(self.vars); i++ {
			mut &v := unsafe { *(&self.vars[i]) }
			if v.var == invalidBoundary {
				// Empty place, use here instead of append.
				v.var = var
				v.maxSize = append(v.maxSize, maxSize)
				ret
			}
		}
		self.vars = append(self.vars, boundaryVar{var: var, maxSize: [maxSize]})
	}

	fn removeVar(mut self, var: uintptr): bool {
		if var != invalidBoundary {
			mut i := 0
			for i < len(self.vars); i++ {
				mut &v := unsafe { *(&self.vars[i]) }
				if v.var == var {
					v.var = invalidBoundary
					v.maxSize = v.maxSize[:0]
					ret true
				}
			}
		}
		ret false
	}

	// Reports whether maximum size of variable is fits with given expression.
	fn fitsMaxSize(mut self, var: uintptr, mut expr: sema::Expr): bool {
		if var != invalidBoundary {
			for (_, mut v) in self.vars {
				if v.var == var {
					ret fitsMaxSize(v.maxSize, expr) != -1
				}
			}
		}
		ret false
	}
}

// Reports whether model is valid maximum size information for boundary analysis.
fn isValidBoundaryInfo(mut m: sema::Expr): bool { ret fitsSize(m, m) }

// Reports whether maximum size is fits with given expression.
// In other words, reports whether: max >= expr
// Returns index number of max size which is fit, otherwise -1.
fn fitsMaxSize(mut max: []sema::Expr, mut expr: sema::Expr): int {
	for (i, mut m) in max {
		if fitsSize(m, expr) {
			ret i
		}
	}
	ret -1
}

fn fitsSize(mut e1: sema::Expr, mut e2: sema::Expr): bool {
	if obj::TypeData(e1) != obj::TypeData(e2) {
		ret false
	}
	match type e1 {
	| &constant::Const:
		exprConst := (&constant::Const)(e2)
		ret exprConst.AsF64() >= 0 && (&constant::Const)(e1).GtEq(*exprConst)
	| &sema::Var:
		ret e1 == e2
	| &sema::StructSubIdentExpr:
		mut ssi1 := (&sema::StructSubIdentExpr)(e1)
		mut ssi2 := (&sema::StructSubIdentExpr)(e2)
		ret obj::EqualModels(ssi1.Expr.Model, ssi2.Expr.Model) && ssi1.Field == ssi2.Field
	| &sema::UnaryExpr:
		mut uem1 := (&sema::UnaryExpr)(e1)
		mut uem2 := (&sema::UnaryExpr)(e2)
		if uem1.Op.Id != token::Id.Star || uem1.Op.Id != uem2.Op.Id {
			ret false
		}
		ret fitsSize(uem1.Expr.Model, uem2.Expr.Model)
	|:
		ret false
	}
}

// Removes model from boundary b. If model exist in boundary b as a boundary
// exihibit variable, removed variable directly. Otherwise removes size variable
// by model if exist.
fn possibleBoundaryRemove(mut &b: &boundary, mut model: sema::Expr) {
	// Remove variable from boundary b if exist.
	// Because it changed and we don not know anything now.
	match type model {
	| &sema::Var:
		if b.removeVar(uintptr((&sema::Var)(model))) {
			ret
		}
	}
	// Variable is not in boundary b,
	// so seek in size variables to remove if exist.
	mut i := 0
	for i < len(b.vars); i++ {
		mut &v := unsafe { *(&b.vars[i]) }
		for (j, mut max) in v.maxSize {
			if obj::EqualModels(max, model) {
				v.maxSize = append(v.maxSize[:j], v.maxSize[j+1:]...)
				break
			}
		}
	}
}

fn isBoundaryRiskyType(mut t: &sema::Type): bool {
	// Reports true for not-arrays because array's size cannot be changed.
	ret t.Array() == nil
}

fn isBoundaryValidType(mut t: &sema::Type): bool { ret t.Slice() != nil || t.Array() != nil }

fn getBoundaryVar(m: sema::Expr): uintptr {
	if !Access {
		ret invalidBoundary
	}
	match type m {
	| &sema::Var:
		v := (&sema::Var)(m)
		if !v.Reference || v.ValueSym == nil || v.ValueSym.Value == nil {
			// Variable is not reference (or points to unknown such as parameters), return address of it.
			ret uintptr((&sema::Var)(m))
		}
		// Variable is reference, it should be initialized at source code.
		// Investigate the initial expression for variable address.
		ret getBoundaryVar(v.ValueSym.Value.Model)
	| &sema::StructSubIdentExpr:
		ret uintptr((&sema::StructSubIdentExpr)(m).Field)
	| &sema::UnaryExpr:
		uem := (&sema::UnaryExpr)(m)
		if uem.Op.Id == token::Id.Star { // Dereferencing.
			ret getBoundaryVar(uem.Expr.Model)
		}
	}
	ret invalidBoundary
}