// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/sema"

let mut emptyData = new(data)

// Immutable copy for data.
struct dataCheckpoint {
	boundary: &boundary
	nils:     &nils
	dynamic:  &dynamic
}

// All-in-one all analysis information structures.
struct data {
	boundary: &boundary
	nils:     &nils
	dynamic:  &dynamic
}

fn _removeDeads[CommonCollection](mut &alive: CommonCollection, &other: CommonCollection, invalid: uintptr) {
lookup:
	for _, v in alive.vars {
		if v.var == invalid {
			continue
		}
		for _, ov in other.vars {
			if v.var == ov.var {
				continue lookup
			}
		}
		// variable |v| is not dead but other data is not have this variable
		// so it should be dead, remove it
		alive.removeVar(v.var)
	}
}

impl data {
	// Remove the alive variables which is not alive in other data.
	fn removeDeads(mut self, &other: &data) {
		if self.boundary != nil && other.boundary != nil {
			_removeDeads(self.boundary, other.boundary, invalidBoundary)
		}
		if self.nils != nil && other.nils != nil {
			_removeDeads(self.nils, other.nils, invalidNil)
		}
		if self.dynamic != nil && other.dynamic != nil {
			_removeDeads(self.dynamic, other.dynamic, invalidDynamic)
		}
	}

	// Returns checkpoint copy of the data.
	// The copy is a immutable hard-copy.
	fn getCheckpoint(mut self): dataCheckpoint {
		mut c := dataCheckpoint{}
		if self.boundary != nil {
			c.boundary = new(boundary)
			c.boundary.vars = append(make([]boundaryVar, 0), self.boundary.vars...)
			for i in c.boundary.vars {
				c.boundary.vars[i].maxSize = append(make([]sema::Expr, 0), c.boundary.vars[i].maxSize...)
			}
		}
		if self.nils != nil {
			c.nils = new(nils)
			c.nils.vars = append(make([]nilVar, 0), self.nils.vars...)
		}
		if self.dynamic != nil {
			c.dynamic = new(dynamic)
			c.dynamic.vars = append(make([]dynamicVar, 0), self.dynamic.vars...)
		}
		ret c
	}

	// Like the getCheckpoint(), but uses immutable copy of the internal data.
	fn getMutCheckpoint(mut self): dataCheckpoint {
		ret dataCheckpoint{
			boundary: self.boundary,
			nils: self.nils,
			dynamic: self.dynamic,
		}
	}

	fn loadCheckpoint(mut self, mut c: dataCheckpoint) {
		self.boundary = c.boundary
		self.nils = c.nils
		self.dynamic = c.dynamic
	}
}