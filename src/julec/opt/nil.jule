// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/sema"
use "std/jule/token"

const invalidNil = uintptr(0x0)

struct nilVar {
	var:  uintptr
	safe: bool
}

// Information wrapper for nil analysis.
struct nils {
	vars: []nilVar
}

impl nils {
	// Appends variable with initial safety state.
	// If variable is already exist, updates safety information.
	fn pushVar(mut self, var: uintptr, safe: bool) {
		if !Access || var == invalidNil {
			// Ignore it, because this optimizations within scope of the --opt-access flag.
			ret
		}
		for i in self.vars {
			mut &v := unsafe { *(&self.vars[i]) }
			if v.var == var {
				v.safe = safe
				ret
			}
		}
		// Not exist, append new one.
		for i in self.vars {
			mut &v := unsafe { *(&self.vars[i]) }
			if v.var == invalidNil {
				// Empty place, use here instead of append.
				v.var = var
				v.safe = safe
				ret
			}
		}
		self.vars = append(self.vars, nilVar{var: var, safe: safe})
	}

	fn removeVar(mut self, var: uintptr): bool {
		if var != invalidNil {
			for i in self.vars {
				mut &v := unsafe { *(&self.vars[i]) }
				if v.var == var {
					v.var = invalidNil
					v.safe = false
					ret true
				}
			}
		}
		ret false
	}

	// Reports whether variable is safe.
	fn isSafe(mut self, var: uintptr): bool {
		if var != invalidNil {
			for _, v in self.vars {
				if v.var == var {
					ret v.safe
				}
			}
		}
		ret false
	}
}

fn possibleNilRemove(mut &n: &nils, m: sema::Expr) {
	if n != nil {
		_ = n.removeVar(getNilVar(m))
	}
}

fn isGuaranteedNonNilExpr(mut &n: &nils, m: sema::Expr): bool {
	_, ok := m.(&sema::BuiltinNewCallExpr)
	ret ok || n != nil && n.isSafe(getNilVar(m))
}

fn isNilValidType(mut t: &sema::Type): bool { ret t.Sptr() != nil }

fn getNilVar(m: sema::Expr): uintptr {
	if !Access {
		ret invalidBoundary
	}
	// Assume: x := new(&int)
	// It will optimize the "*x" expressions, but not "*(*x)" expressions.
	// Otherwise optimization mistakes may occur because optimizer is not have deep analysis for this.
	match type m {
	| &sema::Var:
		v := m.(&sema::Var)
		if !v.Reference || v.ValueSym == nil || v.ValueSym.Value == nil {
			// Variable is not reference (or points to unknown such as parameters), return address of it.
			ret uintptr(m.(&sema::Var))
		}
		// Variable is reference, it should be initialized at source code.
		// Investigate the initial expression for variable address.
		ret getNilVar(v.ValueSym.Value.Model)
	| &sema::StructSubIdentExpr:
		ret uintptr(m.(&sema::StructSubIdentExpr).Field)
	| &sema::UnaryExpr:
		uem := m.(&sema::UnaryExpr)
		if uem.Op.ID == token::MUL { // Dereferencing.
			ret getNilVar(uem.Expr.Model)
		}
		ret invalidBoundary
	|:
		ret invalidBoundary
	}
}