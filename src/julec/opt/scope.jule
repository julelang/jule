// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julec/env"
use "julec/obj"
use "julec/obj/meta"
use "std/jule/build"
use "std/jule/constant"
use "std/jule/sema"
use "std/jule/token"
use "std/os/filepath"
use "std/slices"
use "std/strings"

// Scope optimizer that applies target-independent optimizations.
struct scopeOptimizer {
	parent: &scopeOptimizer
	i:      int
	scope:  &sema::Scope
	data:   &data // Should be non-nil guaranteed.
}

impl scopeOptimizer {
	fn new(mut scope: &sema::Scope): &scopeOptimizer {
		mut sc := &scopeOptimizer{
			scope: scope,
			data: &data{
				boundary: new(boundary),
				nils: new(nils),
				dynamic: new(dynamic),
			},
		}
		ret sc
	}

	fn setCurrentStmt(mut &self, mut stmt: any) {
		self.scope.Stmts[self.i] = unsafe { *(*sema::Stmt)(&stmt) }
	}

	// Removes current statement.
	fn removeCurrent(mut &self) {
		self.scope.Stmts = append(self.scope.Stmts[:self.i], self.scope.Stmts[self.i+1:]...)
	}

	fn isLastStmt(mut &self): bool {
		mut r := self
		for r != nil; r = r.parent {
			if len(r.scope.Stmts)-r.i != 1 {
				ret false
			}
		}
		ret true
	}

	fn optimizeValue(mut &self, mut val: &sema::Value) {
		exprOptimizer.optimizeValue(&val.Model, self.data, self)
	}

	fn optimizeVar(mut &self, mut v: &sema::Var) {
		if v.ValueSym != nil {
			if self.data.nils != nil &&
				isNilValidType(v.TypeSym.Type) &&
				isGuaranteedNonNilExpr(self.data.nils, v.ValueSym.Value.Model) {
				const safe = true
				self.data.nils.pushVar(getNilVar(v), safe)
			}
			if self.data.dynamic != nil {
				mut kind := isTypeGuaranteedDynamicValue(
					self.data.dynamic, v.TypeSym.Type, v.ValueSym.Value.Model)
				if kind != nil {
					if isDynamicValidType(v.TypeSym.Type) {
						self.data.dynamic.pushVar(getDynamicVar(v), kind)
					}
				}
			}
			exprOptimizer.optimizeValue(&v.ValueSym.Value.Model, self.data, self)
		}
	}

	fn optimizeConditional(mut &self, mut c: &sema::Conditional) {
		// Handle like optimizeChildHard(), but avoid calling this method for each scope.
		// So wrap same functionality and apply optimizations by calling the optimizeChild().
		// See documentation of the optimizeChildHard() for more information about difference.
		mut alive := data{}
		alive.loadCheckpoint(self.data.getCheckpoint())

		// Use checkpoint for the self.data to use same data for each child scope.
		mut checkpoint := self.data.getCheckpoint()

		for (_, mut elif) in c.Elifs {
			exprOptimizer.optimizeConditionalValue(&elif.Expr, self.data, self)
			self.optimizeChild(elif.Scope)
			alive.removeDeads(self.data)
			self.data.loadCheckpoint(checkpoint)
		}
		if c.Default != nil {
			self.optimizeChild(c.Default.Scope)
			alive.removeDeads(self.data)
		}

		self.data.loadCheckpoint(alive.getMutCheckpoint())

		if !Cond {
			ret
		}

		mut constCase := false // Has constant true case.

		// Remove unnecessary trailing cases that comes after constant true case.
		for (i, mut elif) in c.Elifs {
			if !isConstantValidConditionalCase(elif) {
				continue
			}
			constCase = true
			c.Elifs = c.Elifs[:i]
			c.Default = &sema::Else{
				Scope: elif.Scope,
			}
			break
		}

		if len(c.Elifs) == 0 {
			ret
		}

		// Remove unreachable cases.
		mut i := &c.Elifs[0]
		end := &c.Elifs[len(c.Elifs)-1]
		for i <= end; i++ {
			unsafe {
				if isUnreachableConditionalCase(*i) {
					*i = nil
				}
			}
		}

		if len(c.Elifs) == 0 {
			ret
		}

		// Skip one-case checking if const-case is not exist.
		if !constCase {
			ret
		}

		mut only := -1
		for j, elif in c.Elifs {
			if elif != nil {
				if only != -1 {
					// Break checking, there is more than one case.
					ret
				}
				only = j
			}
		}

		// Here is one case.
		if only != -1 {
			self.setCurrentStmt(c.Elifs[only].Scope)
		}
	}

	fn buildDefaultConstantTrueCase(mut &self, mut case: &sema::Case, mut &i: *int, mut m: &sema::Match) {
		case.Exprs = nil // Remove expressions to remove eval overhead.
		start := *i
	loop:
		for {
			if len(case.Scope.Stmts) == 0 {
				break
			}
			mut &stmt := unsafe { &(*(&case.Scope.Stmts[len(case.Scope.Stmts)-1])) }
			match type *stmt {
			| &sema::Fall:
				*i++
				if *i >= len(m.Cases) {
					*stmt = m.Default.Scope
					break loop
				}
				case = m.Cases[*i]
				*stmt = case.Scope
			|:
				break loop
			}
		}
		m.Default = m.Cases[start]
		m.Cases = m.Cases[:start]
	}

	fn optimizeMatch(mut &self, mut m: &sema::Match) {
		mut var := invalidDynamic
		if Dynamic && m.TypeMatch {
			var = getDynamicVar(m.Expr.Model)
		}

		// Handle like optimizeChildHard(), but avoid calling this method for each scope.
		// So wrap same functionality and apply optimizations by calling the optimizeChild().
		// See documentation of the optimizeChildHard() for more information about difference.
		mut alive := data{}
		alive.loadCheckpoint(self.data.getCheckpoint())

		// Use checkpoint for the self.data to use same data for each child scope.
		mut checkpoint := self.data.getCheckpoint()

		for (i, mut case) in m.Cases {
			for (_, mut expr) in case.Exprs {
				exprOptimizer.optimizeConditionalValue(&expr.Model, self.data, self)
			}
			// We can know the exact kind of dynamic type if expression is single.
			// So we can optimize any casting for this type.
			//
			// Special cases:
			// - If previous case is exist and used the fall statement,
			//   Then optimization is not possible because we do not know the actual type.
			isFell := fn(case: &sema::Case): bool {
				if len(case.Scope.Stmts) == 0 {
					ret false
				}
				last := case.Scope.Stmts[len(case.Scope.Stmts)-1]
				_, ok := last.(&sema::Fall)
				ret ok
			}
			if len(case.Exprs) == 1 && self.data.dynamic != nil &&
				(i == 0 || !isFell(m.Cases[i-1])) {
				mut kind := isTypeGuaranteedDynamicValue(self.data.dynamic, case.Exprs[0].Type, nil)
				if kind != nil {
					self.data.dynamic.pushVar(var, kind)
				} else {
					self.data.dynamic.removeVar(var)
				}
			}
			self.optimizeChild(case.Scope)
			alive.removeDeads(self.data)
			// Get hard copy of checkpoint after loading.
			// If there is more than one case, it will be mutated due to loading uses mutable memory.
			self.data.loadCheckpoint(checkpoint)
			self.data.loadCheckpoint(self.data.getCheckpoint())
		}
		if m.Default != nil {
			self.optimizeChild(m.Default.Scope)
			alive.removeDeads(self.data)
		}

		self.data.loadCheckpoint(alive.getMutCheckpoint())

		if !Cond {
			ret
		}

		mut constCase := false // Has constant true case.

		// Remove unnecessary trailing cases that comes after constant true case.
		for (mut i, mut case) in m.Cases {
			if !isConstantValidMatchCase(case) {
				continue
			}
			constCase = true
			self.buildDefaultConstantTrueCase(case, &i, m)
			break
		}

		if len(m.Cases) == 0 {
			ret
		}

		// Remove unreachable cases.
		mut i := &m.Cases[0]
		end := &m.Cases[len(m.Cases)-1]
		for i <= end; i++ {
			unsafe {
				if isUnreachableMatchCase(*i) {
					*i = nil
				}
			}
		}

		// Skip one-case checking if const-case is not exist.
		if !constCase {
			ret
		}

		mut only := -1
		for j, case in m.Cases {
			if case != nil {
				if only != -1 {
					// Break checking, there is more than one case.
					ret
				}
				only = j
			}
		}

		// Here is one case.
		if only != -1 {
			self.setCurrentStmt(m.Cases[only].Scope)
		}
	}

	fn optimizeSelect(mut &self, mut slct: &sema::Select) {
		mut var := invalidDynamic

		// Handle like optimizeChildHard(), but avoid calling this method for each scope.
		// So wrap same functionality and apply optimizations by calling the optimizeChild().
		// See documentation of the optimizeChildHard() for more information about difference.
		mut alive := data{}
		alive.loadCheckpoint(self.data.getCheckpoint())

		// Use checkpoint for the self.data to use same data for each child scope.
		mut checkpoint := self.data.getCheckpoint()

		for (_, mut case) in slct.Cases {
			for (_, mut expr) in case.Exprs {
				exprOptimizer.optimizeValue(&expr.Model, self.data, self)
			}
			if len(case.Exprs) == 1 && self.data.dynamic != nil {
				// We can know the exact kind of dynamic type if expression is single.
				mut kind := isTypeGuaranteedDynamicValue(self.data.dynamic, case.Exprs[0].Type, nil)
				if kind != nil {
					self.data.dynamic.pushVar(var, kind)
				} else {
					self.data.dynamic.removeVar(var)
				}
			}
			self.optimizeChild(case.Scope)
			alive.removeDeads(self.data)
			// Get hard copy of checkpoint after loading.
			// If there is more than one case, it will be mutated due to loading uses mutable memory.
			self.data.loadCheckpoint(checkpoint)
			self.data.loadCheckpoint(self.data.getCheckpoint())
		}
		if slct.Default != nil {
			self.optimizeChild(slct.Default.Scope)
			alive.removeDeads(self.data)
		}

		self.data.loadCheckpoint(alive.getMutCheckpoint())
	}

	fn optimizeRangeIter(mut &self, mut it: &sema::RangeIter) {
		// Optimize scope first, following alrgorithms related with expression.
		// It might be skip this, so scope optimizater should be guaranteed to run.
		if self.data.boundary != nil && it.KeyA != nil {
			// Add index variable to boundary analysis.
			self.data.boundary.pushVar(getBoundaryVar(it.Expr.Model), it.KeyA)
		}
		self.optimizeChildHard(it.Scope)

		if Iter {
			match type it.Expr.Model {
			| &sema::CastingExpr:
				mut cem := it.Expr.Model.(&sema::CastingExpr)
				eprim := cem.Expr.Type.Prim()
				if eprim == nil || !eprim.IsStr() {
					break
				}
				mut s := cem.Type.Slice()
				if s == nil {
					break
				}
				prim := s.Value.Prim()
				if prim == nil {
					break
				}
				match {
				| prim.IsU8():
					// Expression is: []byte(str)
					// Use string's bytes directly, byte casting is unnecessary.
					mut model := any(&BytesFromStr{Expr: cem.Expr.Model})
					it.Expr.Model = unsafe { *(*sema::Expr)(&model) }
				| prim.IsI32():
					// Expression is: []rune(str)
					// Avoid making allocation, iterate runes of string.
					exprOptimizer.optimizeValue(&cem.Expr.Model, self.data, self) // Optimize string expression.
					self.setCurrentStmt(&StrRuneIter{
						Expr: cem.Expr,
						Base: it,
					})
					ret
				}
			| &sema::SliceExpr:
				// make slice expression model iteration as array iteration
				mut slc := it.Expr.Model.(&sema::SliceExpr)
				mut arr := &sema::Array{
					N: len(slc.Elems),
					Value: slc.ElemType,
				}
				it.Expr.Type.Kind = arr
				it.Expr.Model = &sema::ArrayExpr{
					Kind: arr,
					Elems: slc.Elems,
				}
			|:
				// no-op
			}
		}
		exprOptimizer.optimizeValue(&it.Expr.Model, self.data, self)
	}

	fn optimizeWhileIter(mut &self, mut it: &sema::WhileIter) {
		exprOptimizer.optimizeValue(&it.Expr, self.data, self)
		self.optimizeStmt(it.Next)
		self.optimizeChildHard(it.Scope)
	}

	fn substr(mut &self, mut a: &sema::Assign): bool {
		if a.Op.ID != token::ASSIGN {
			ret false
		}
		mut sem, ok := a.Right.Model.(&sema::SlicingExpr)
		if ok && obj::EqualModels(a.Left.Model, sem.Expr.Model) {
			self.setCurrentStmt(&MutSlicingExpr{
				Token: sem.Token,
				Expr: sem.Expr.Model,
				Left: sem.Left,
				Right: sem.Right,
				Cap: sem.Cap,
			})
			ret true
		}
		ret false
	}

	fn strAssign(mut &self, mut a: &sema::Assign): bool {
		if !Str {
			ret false
		}
		lp := a.Left.Type.Prim()
		if lp == nil || !lp.IsStr() {
			ret false
		}
		ret self.substr(a)
	}

	fn sliceAssign(mut &self, mut a: &sema::Assign): bool {
		if !Slice || a.Left.Type.Slice() == nil {
			ret false
		}
		// [self.substr] applies this optimization without type dependence.
		ret self.substr(a)
	}

	fn optimizePostfix(mut &self, mut postfix: &sema::Postfix) {
		if self.data.boundary != nil {
			possibleBoundaryRemove(self.data.boundary, postfix.Expr)
		}
		exprOptimizer.optimizeValue(&postfix.Expr, self.data, self)
	}

	fn optimizeAssign(mut &self, mut assign: &sema::Assign) {
		if assign.Op.ID == token::ASSIGN &&
			obj::EqualModels(assign.Left.Model, assign.Right.Model) {
			self.removeCurrent()
			self.i-- // In next iteration, point to correct statement.
			ret
		}

		if self.data.boundary != nil {
			if isBoundaryRiskyType(assign.Left.Type) {
				possibleBoundaryRemove(self.data.boundary, assign.Left.Model)
			}
		}
		if self.data.nils != nil {
			if isGuaranteedNonNilExpr(self.data.nils, assign.Right.Model) {
				if isNilValidType(assign.Left.Type) {
					const safe = true
					self.data.nils.pushVar(getNilVar(assign.Left.Model), safe)
				}
			} else {
				possibleNilRemove(self.data.nils, assign.Left.Model)
			}
		}
		if self.data.dynamic != nil {
			mut kind := isTypeGuaranteedDynamicValue(
				self.data.dynamic, assign.Right.Type, assign.Right.Model)
			if kind != nil {
				if isDynamicValidType(assign.Left.Type) {
					self.data.dynamic.pushVar(getDynamicVar(assign.Left.Model), kind)
				}
			} else {
				possibleDynamicRemove(self.data.dynamic, assign.Left.Model)
			}
		}

		match {
		| self.strAssign(assign)
		| self.sliceAssign(assign):
			ret
		}

		exprOptimizer.optimizeValue(&assign.Left.Model, self.data, self)
		exprOptimizer.optimizeValue(&assign.Right.Model, self.data, self)

		match assign.Op.ID {
		| token::XOR_ASSIGN | token::QUO_ASSIGN | token::REM_ASSIGN
		| token::SHL_ASSIGN | token::SHR_ASSIGN | token::ADD_ASSIGN | token::SUB_ASSIGN:
			// Do not check structures.
			if !Math && !Str || assign.Left.Type.Struct() != nil {
				break
			}
			oldId, oldKind := assign.Op.ID, assign.Op.Kind
			match assign.Op.ID {
			| token::ADD_ASSIGN:
				assign.Op.ID = token::ADD
				assign.Op.Kind = "+"
			| token::SUB_ASSIGN:
				assign.Op.ID = token::SUB
				assign.Op.Kind = "-"
			| token::QUO_ASSIGN:
				assign.Op.ID = token::QUO
				assign.Op.Kind = "/"
			| token::REM_ASSIGN:
				assign.Op.ID = token::REM
				assign.Op.Kind = "%"
			| token::SHL_ASSIGN:
				assign.Op.ID = token::SHL
				assign.Op.Kind = "<<"
			| token::SHR_ASSIGN:
				assign.Op.ID = token::SHR
				assign.Op.Kind = ">>"
			| token::XOR_ASSIGN:
				assign.Op.ID = token::XOR
				assign.Op.Kind = "^"
			|:
				panic("opt: implementation mistake, this panic call should be unreachable")
			}
			mut b := &sema::BinaryExpr{
				Op: assign.Op,
				Left: assign.Left,
				Right: assign.Right,
			}
			mut model := sema::Expr(b)
			exprOptimizer.optimizeValue(&model, self.data, self)
			if model != b || b.Op != assign.Op {
				// Binary model optimized.
				// Use optimized model directly.
				if assign.Op.ID == token::XOR {
					// If caret operator optimized, it is equal to self assignment.
					// Remove this unnecessary statement.
					self.removeCurrent()
					ret
				}
				assign.Right = new(sema::OperandExpr, *assign.Right)
				b.Op = new(token::Token, *b.Op) // Unsafe model wraps original model. Save token.
				assign.Op.ID = token::ASSIGN
				assign.Op.Kind = "="
				assign.Right.Model = model
				ret
			}
			assign.Op.ID = oldId
			assign.Op.Kind = oldKind
			ret
		}

		if Append {
			mut m, append := assign.Right.Model.(&sema::BuiltinAppendCallExpr)
			if append {
				if !areSameLvalueExpr(assign.Left.Model, m.Dest.Model) {
					ret
				}
				_, slice := m.Elements.Model.(&sema::SliceExpr)
				if slice {
					// Push items one-by-one for self-appended memory.
					self.setCurrentStmt(&PushToSliceExpr{
						Base: m,
					})
				}
			}
		}
	}

	// Normalizes multi-assign expression.
	// Simplifies possible operands and removes them.
	// Designed for tuple expressions, so the right expression should be tuple.
	fn normalizeAssign(mut &self, mut assign: &sema::MultiAssign, mut tup: &sema::TupleExpr) {
		mut i := 0
		for i < len(assign.Left) {
			mut l := assign.Left[i]
			mut r := tup.Values[i]
			if l == nil && r != nil {
				// expression is assigned to blank identifier
				// so we can handle as expression statement

				// insert + 1 offset because this statement should not be shifted
				// also following statement optimizations may apply
				// some optimizations on the new inserted assign statements
				offset := self.i + 1
				self.scope.Stmts = slices::Insert(self.scope.Stmts, offset, r)
				goto remove
			}
			if l != nil && r != nil {
				match {
				| r.IsConst():
					// expression is constant, can simplify as single assignment

					// insert + 1 offset because this statement should not be shifted
					// also following statement optimizations may apply
					// some optimizations on the new inserted assign statements
					offset := self.i + 1
					self.scope.Stmts = slices::Insert(self.scope.Stmts, offset, &sema::Assign{
						Left: &sema::OperandExpr{Type: l.Type, Model: l.Model},
						Right: &sema::OperandExpr{Type: r.Type, Model: r.Model},
						Op: assign.Op,
					})
					goto remove
				| obj::EqualModels(l.Model, r.Model):
					// self assignment detected, remove it
					goto remove
				}

				// Constant expressions are lost their constant attribute when
				// they assigned to non-constant memory such as variables.
				// So, we need to separate attention for variable declarations.
				// Also variable declarations are may suitable for normalization.
				mut v, var := l.Model.(&sema::Var)
				if var {
					if obj::FindVar(v, assign.Decls) == -1 {
						// expression is variable but it is not declaring now
						break
					}
					_, constant := r.Model.(&constant::Const)
					if constant {
						// Expression model is constant. So, expression is constant.
						// We can simplify it.

						// insert + 1 offset because this statement should not be shifted
						// also following statement optimizations may apply
						// some optimizations on the new inserted assign statements
						offset := self.i + 1
						self.scope.Stmts = slices::Insert(self.scope.Stmts, offset, v)
						goto remove
					}
				}
			}
			// not any case matched or jumped to remove
			// so continue without removing
			i++
			continue
		remove:
			assign.Left = append(assign.Left[:i], assign.Left[i+1:]...)
			tup.Values = append(tup.Values[:i], tup.Values[i+1:]...)
		}
	}

	// Tries to optimize swap assignments, such as "x, y = y, x", and reports whether optimization applied.
	// Designed for tuple expressions, so the right expression should be tuple.
	fn tryOptimizeSwap(mut &self, mut assign: &sema::MultiAssign, mut tup: &sema::TupleExpr): (applied: bool) {
		if len(tup.Values) != 2 || len(assign.Left) != 2 ||
			assign.Left[0] == nil || assign.Left[1] == nil {
			ret false
		}
		// Catch swaps.
		if !obj::EqualModels(assign.Left[0].Model, tup.Values[1].Model) ||
			!obj::EqualModels(assign.Left[1].Model, tup.Values[0].Model) {
			ret false
		}
		mut model := &SwapExpr{
			Left: assign.Left[0],
			Right: assign.Left[1],
		}
		self.setCurrentStmt(model)
		// Do not optimize the operands.
		// The additional analysis will do it.
		ret true
	}

	// Tries to split multi-assign into single assign statements.
	// Designed for tuple expressions, so the right expression should be tuple.
	fn splitAssign(mut &self, mut assign: &sema::MultiAssign, mut tup: &sema::TupleExpr) {
		// Optimize only variables, because we cannot know other possibilities.
		// For example, "*x" and "*y" or "x[y]" and "z[z]" may point to same memory.
		// Therefore, we can just able to split variable assignments.

		// Make guaranteed that both operands just use variables.
		for i in tup.Values {
			r := tup.Values[i]
			l := assign.Left[i]
			if l != nil {
				match type l.Model {
				| &sema::Var:
					break
				|:
					ret
				}
			}
			if r != nil {
				match type r.Model {
				| &sema::Var:
					break
				|:
					ret
				}
			}
		}

		// resports whether m used in different operand in left or right
		// if checkTup equals to false, tuple expression will not be checked
		existInOperands := fn(i: int, mut m: sema::Expr, checkTup: bool): bool {
			// check whether variable used in different operand in left or right
			for (j, mut jl) in unsafe { assign.Left } {
				for j != i && jl != nil && obj::EqualModels(jl.Model, m) {
					ret true
				}
			}
			if checkTup {
				for (j, mut jl) in unsafe { tup.Values } {
					for j != i && jl != nil && obj::EqualModels(jl.Model, m) {
						ret true
					}
				}
			}
			ret false
		}

		z := self.i
		mut i := 0
	lookup:
		for i < len(assign.Left) {
			mut l := assign.Left[i]
			if l == nil {
				i++
				continue
			}

			mut r := tup.Values[i]

			// check l.Model in left operand and right operand. Because l.Model
			// will be mutated, so if it exist in right operand, cannot split.
			// But for r.Model, checking only left operand is safe. So,
			// check for mutatation risk.
			if existInOperands(i, l.Model, true) || existInOperands(i, r.Model, false) {
				// exist in left operands, skip this variable
				i++
				continue lookup
			}
			// can handle as single assignment statement

			// insert + 1 offset because this statement should not be shifted
			// also following statement optimizations may apply
			// some optimizations on the new inserted assign statements
			offset := self.i + 1
			// Insert assignment model for this one separately.
			// Special case: if memory is a variable, it may be declared here.
			// So handle them as variable declarations.
			mut lv, ok := l.Model.(&sema::Var)
			mut j := -1
			if ok {
				j = slices::Index(assign.Decls, lv)
			}
			if j != -1 {
				if lv.ValueSym == nil {
					lv.ValueSym = new(sema::ValueSym)
				}
				lv.ValueSym.Value = r
				self.scope.Stmts = slices::Insert(self.scope.Stmts, offset, lv)
				assign.Decls = append(assign.Decls[:j], assign.Decls[j:]...)
			} else {
				self.scope.Stmts = slices::Insert(self.scope.Stmts, offset, &sema::Assign{
					Left: &sema::OperandExpr{Type: l.Type, Model: l.Model},
					Right: &sema::OperandExpr{Type: r.Type, Model: r.Model},
					Op: assign.Op,
				})
			}

			// remove operands
			assign.Left = append(assign.Left[:i], assign.Left[i+1:]...)
			tup.Values = append(tup.Values[:i], tup.Values[i+1:]...)
		}
		self.i = z
	}

	fn optimizeMultiAssign(mut &self, mut assign: &sema::MultiAssign) {
		// Get tuple expression if exist.
		// If there is a tuple expression, it means this multi-assign statement is:
		//	like: x, y, z = a, b, c
		//	not:  x, y, z = myFunc()
		mut tup, _ := assign.Right.(&sema::TupleExpr)

		// Do optimizations first, because statements may be simplified.
		// So, assignment analysis will be done in this form. Avoid making twice or more.
		// Also optimized expressions may effect the analysis of the optimizations.
		// Use pure expression models for optimization analysis.
		if Assign && tup != nil {
			// Normalize assignment first, following optimization attempts will be more easy.
			// Expressions will be more simple, so analysis may have optimization chance.
			self.normalizeAssign(assign, tup)

			// Split assignments as a single assignment if possible.
			// Because multi-assign expressions use temporary values.
			// So, remove temporary variables using single assignments if possible.
			self.splitAssign(assign, tup)

			// Try to optimize swap assignment if possible.
			// Do it now, because assignment may be split,
			// so optimization may be possible compared to non-split form.
			self.tryOptimizeSwap(assign, tup)

			// after all of these optimizations,
			// remove this statement if all operands are removed
			if len(assign.Left) == 0 {
				self.removeCurrent()
				ret // Assignment removed, following analysis is not necessary.
			}
			// There is single operand.
			// We can simplify to single assignment statement.
			if len(assign.Left) == 1 {
				mut l := assign.Left[0]
				mut v, var := l.Model.(&sema::Var)
				if var && obj::FindVar(v, assign.Decls) >= 0 {
					// variable declared now, do not handle it like a assignment
					self.setCurrentStmt(v)
				} else {
					mut r := tup.Values[0]
					self.setCurrentStmt(&sema::Assign{
						Left: &sema::OperandExpr{Type: l.Type, Model: l.Model},
						Right: &sema::OperandExpr{Type: r.Type, Model: r.Model},
						Op: assign.Op,
					})
				}
				self.i-- // to handle simplified form of this assignment in analysis
				ret
			}
		}

		// Use self.data to determine whether optimization opportunities.
		// But use this checkpoint for optimizations. Because,
		// any swap expression may cause conflicts.
		// For example, --opt-dynamic optimizations:
		//
		//		mut x := any(nil)
		//		mut y := any(20)
		//		x, y = y, x
		//		_ = int(y)
		//
		//	In the example program above, the "int(y)" expression will be optimized to unsafe,
		//	which is removes the type checking. But the variable |y| will be nil.
		//	This bug appears because of using common optimization data.
		//	First, the variable |x| takes the value of the variable |y|,
		//	which is non-nil and type-is-nil guaranteed. Then the variable |y|
		//	takes the value of the variable |x|. It should be nil, but it's not.
		//	Because the variable |x| will be marked like |y|, since common data used.
		//	So use the self.data to determine optimization opportunities,
		//	but apply optimization data update on the checkpoint copy to avoid conflicts.
		//
		// Do not forget load checkpoint to self.data to keep updated data.
		//
		// This also prevents following example:
		//
		//		x := any(...)
		//		c, ok := int(x)
		//		a = int(x)
		//		b = int(x)
		//
		//	In the example code above, variable |a| should use safe casting.
		//	The variable |b| can use unsafe casting. But variable |a| must
		//	not evaluate assertion casting expression as a type information.
		//	Using checkpoint prevents this. Because checkpoint stores the old
		//	type information data of the variable |x|, so we can have safe casting.
		mut checkpoint := self.data.getCheckpoint()

		for (i, mut l) in assign.Left {
			if l != nil {
				if self.data.boundary != nil {
					if isBoundaryRiskyType(l.Type) {
						possibleBoundaryRemove(checkpoint.boundary, l.Model)
					}
				}
				if self.data.nils != nil {
					if tup != nil && isGuaranteedNonNilExpr(self.data.nils, tup.Values[i].Model) {
						if isNilValidType(l.Type) {
							const safe = true
							checkpoint.nils.pushVar(getNilVar(l.Model), safe)
						}
					} else {
						possibleNilRemove(checkpoint.nils, l.Model)
					}
				}
				if self.data.dynamic != nil && tup != nil {
					mut kind := isTypeGuaranteedDynamicValue(
						self.data.dynamic, tup.Values[i].Type, tup.Values[i].Model)
					if kind != nil {
						if isDynamicValidType(l.Type) {
							checkpoint.dynamic.pushVar(getDynamicVar(l.Model), kind)
						}
					} else {
						possibleDynamicRemove(checkpoint.dynamic, l.Model)
					}
				}
				exprOptimizer.optimizeValue(&l.Model, self.data, self)
			}
		}
		exprOptimizer.optimizeValue(&assign.Right, self.data, self)

		// Load data to optimized checkpoint.
		self.data.loadCheckpoint(checkpoint)
	}

	fn optimizeRet(mut &self, mut r: &sema::Ret) {
		exprOptimizer.optimizeValue(&r.Expr, self.data, self)

		// Break algorithm is exceptional-specific optimizations are not enabled.
		// The following algorithms tries to apply specific optimizations for exceptionals.
		if !Exceptional {
			ret
		}
		match type r.Expr {
		| &sema::FuncCallExpr:
			break
		|:
			ret
		}
		mut fc := r.Expr.(&sema::FuncCallExpr)
		if !fc.Func.Decl.Exceptional ||
			fc.Except == nil ||
			len(fc.Except.Stmts) != 1 ||
			!obj::IsForwarded(fc.Except) {
			ret
		}
		self.setCurrentStmt(&ExceptionalForwardingExpr{Expr: fc})
	}

	fn optimizeStmt(mut &self, mut stmt: sema::Stmt) {
		match type stmt {
		| &sema::Scope:
			self.optimizeChildHard(stmt.(&sema::Scope))
		| &sema::Value:
			self.optimizeValue(stmt.(&sema::Value))
		| &sema::Use:
			self.optimizeValue(stmt.(&sema::Use).Value)
		| &sema::Var:
			self.optimizeVar(stmt.(&sema::Var))
		| &sema::Conditional:
			self.optimizeConditional(stmt.(&sema::Conditional))
		| &sema::RangeIter:
			self.optimizeRangeIter(stmt.(&sema::RangeIter))
		| &sema::WhileIter:
			self.optimizeWhileIter(stmt.(&sema::WhileIter))
		| &sema::InfIter:
			self.optimizeChildHard(stmt.(&sema::InfIter).Scope)
		| &sema::Assign:
			self.optimizeAssign(stmt.(&sema::Assign))
		| &sema::MultiAssign:
			self.optimizeMultiAssign(stmt.(&sema::MultiAssign))
		| &sema::Match:
			self.optimizeMatch(stmt.(&sema::Match))
		| &sema::Select:
			self.optimizeSelect(stmt.(&sema::Select))
		| &sema::Ret:
			self.optimizeRet(stmt.(&sema::Ret))
		| &sema::Postfix:
			self.optimizePostfix(stmt.(&sema::Postfix))
		|:
			// no-op
		}
	}

	// Optimizes child scope using mutable data.
	fn optimizeChild(mut &self, mut child: &sema::Scope) {
		mut so := scopeOptimizer.new(child)
		so.parent = self
		so.data = self.data
		so.optimize()
	}

	// Optimizes child scope using responsive data.
	// This child optimization algorithm is safer but slower.
	// It should be used when the child scope may mutate the data,
	// because optimization may conflict and mutable data may cause issues.
	// This optimizer method will use responsive data to detect conflicts and other cases.
	//
	// For example;
	//
	//	z := getSlice()
	//	mut x := (&int)(nil)
	//	for in z {
	//		x = new(int)
	//	}
	//	println(*x)
	//
	//	In the example code above, the variable |x| may optimized to unsafe dereferencing,
	//	which is removes the nil checking. It probably will appear when the scope of the
	//	iteration optimized with the optimizeChild method. Since the using mutable data,
	//	the variable |x| will be marked as non-nil because of `new(int)` assignment.
	//	But, the iteration may not iterate even once. So, the variable |x| may still remain nil.
	//	In this case, the program behavior will be unsafe because of optimization mistake.
	//
	//	This optimizer method, uses responsive data. So handles dead variables and mutations.
	//	For example, if scope code will assign the variable |x| to nil,
	//	it remove the alive state of the variable |x|. Another example,
	//	example case is not appear when used this method. Because it uses an immutable copy,
	//	internally, so child optimizer will not mutate the checkpoint.
	//	Removes possibly dead variables if checkpoint marks as alive after child optimizer,
	//	and ignored possibly alive variables to avoid mistakes such as example case.
	fn optimizeChildHard(mut &self, mut child: &sema::Scope) {
		// Create the immutable copy of the data to determine alive and dead data.
		// As described in the method documentation.
		mut alive := data{}
		alive.loadCheckpoint(self.data.getCheckpoint())

		self.optimizeChild(child)

		// Remove possibly dead variables after child optimization.
		alive.removeDeads(self.data)

		// Load alive as data.
		self.data.loadCheckpoint(alive.getMutCheckpoint())
	}

	// Optimizes scope by enabled optimizations.
	fn optimize(mut &self) {
		self.i = 0
		for self.i < len(self.scope.Stmts); self.i++ {
			self.optimizeStmt(self.scope.Stmts[self.i])
		}
	}
}

fn isConstantValidConditionalCase(i: &sema::If): bool {
	c, ok := i.Expr.(&constant::Const)
	ret ok && c.IsBool() && c.ReadBool()
}

fn isUnreachableExpr(expr: sema::Expr): bool {
	match type expr {
	| &constant::Const:
		c := expr.(&constant::Const)
		ret c.IsBool() && !c.ReadBool()
	| &sema::BinaryExpr:
		m := expr.(&sema::BinaryExpr)
		if m.Op.ID == token::LAND {
			ret isUnreachableExpr(m.Left.Model) ||
				isUnreachableExpr(m.Right.Model)
		}
		ret false
	|:
		ret false
	}
}

fn isConstantValidMatchCase(case: &sema::Case): bool {
	for _, expr in case.Exprs {
		if expr.IsConst() && expr.Constant.IsBool() && expr.Constant.ReadBool() {
			ret true
		}
	}
	ret false
}

fn isUnreachableConditionalCase(i: &sema::If): bool {
	ret isUnreachableExpr(i.Expr)
}

fn isUnreachableMatchCase(case: &sema::Case): bool {
	for _, expr in case.Exprs {
		if !isUnreachableExpr(expr.Model) {
			ret false
		}
	}
	ret true
}