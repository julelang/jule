// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "obj"
use "std/jule/sema"

// Dead code eliminate optimizer for expressions.
struct exprDeadCode {
	mut s: &scopeDeadCode
}

impl exprDeadCode {
	static fn new(mut &s: &scopeDeadCode): exprDeadCode {
		ret exprDeadCode{
			s: s,
		}
	}

	fn optimize(self, mut &model: sema::Expr) {
		mut inspector := obj::ExprInspector.New()
		inspector.Inspect(model, fn(mut &expr: sema::Expr) {
			match type expr {
			| &sema::FuncCallExpr:
				mut m := expr.(&sema::FuncCallExpr)
				if m.Except != nil {
					unsafe { self.s.optimizeBodyChildExceptional(m.Except) }
				}
			| &sema::AnonFuncExpr:
				mut m := expr.(&sema::AnonFuncExpr)
				eliminateDeadCodeOfScope(m.Func.Scope)
			}
		})
	}
}