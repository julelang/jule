// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/constant"
use "std/jule/sema"
use "std/jule/token"

struct StrFromBytes {
	Expr: sema::Expr
}

struct ExceptionalForwardingExpr {
	Expr: &sema::FuncCallExpr
}

struct FuncCallIgnoreExceptionalExpr {
	Base: &sema::FuncCallExpr
}

struct StrConcatExpr {
	Parts: []sema::Expr
}

struct SwapExpr {
	Left:  &sema::Value
	Right: &sema::Value
}

struct EmptyCompareExpr {
	Expr: sema::Expr
	Neg:  bool
}

struct RefExpr {
	Var: &sema::Var
}

struct StrCompExpr {
	Left:  sema::Expr
	Right: &constant::Const
	NotEq: bool
}

struct MutSlicingExpr {
	Token: &token::Token
	Expr:  sema::Expr
	Left:  sema::Expr
	Right: sema::Expr
	Cap:   sema::Expr
}

struct UnsafeBinaryExpr {
	Node: &sema::BinaryExpr
}

struct UnsafeIndexingExpr {
	Node: &sema::IndexingExpr
}

struct PushToSliceExpr {
	Dest:  sema::Expr
	Elems: &sema::SliceExpr
}

struct AppendToSliceExpr {
	Dest:  sema::Expr
	Slice: sema::Expr
}

struct StrRuneIter {
	Expr: &sema::Value
	Base: &sema::RangeIter
}

struct UnsafeDerefExpr {
	Base: &sema::UnaryExpr
}

struct UnsafeCastingExpr {
	Base: &sema::CastingExpr
}

struct ArrayAsSlice {
	Expr: sema::Expr
}