// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "env"
use "handle"
use "obj"
use "obj/cxx"
use "obj/meta"
use "opt"
use "std/flag"
use "std/fmt"
use "std/jule"
use "std/jule/build"
use integ "std/jule/integrated"
use "std/jule/sema"
use "std/jule/types"
use "std/os"
use "std/os/filepath"
use "std/strings"

static mut OutDir = "dist"
static mut OutName = "ir.cpp"
static mut Out = ""

fn init() {
	// Configure compiler to default by platform
	// Compiler path will be set by compiler before compilation if still unassigned.
	env::Compiler = "clang"
}

fn openOutput(&path: str): &os::File {
	dir := filepath::Dir(path)

	os::Stat(dir) else {
		os::Mkdir(dir) else {
			handle::Throw("a problem occurs when code generation")
		}
	}

	ret os::Create(path) else {
		handle::Throw("a problem occurs when code generation")
		use nil
	}
}

// Remove generated objects for compilation.
fn clearObjects() {
	os::Remove(getCompilePath()) else {
		println("a problem occurs when object cleaning")
		ret
	}

	// All created objects are cleaned.
	// So, deletes directory if empty after cleaned all objects,
	// if not, leaves the directory.
	os::Rmdir(OutDir) else {}
}

// Compie generated IR.
fn compileIr(compiler: str, compilerCmd: str) {
	mut cmd := os::Cmd.New(compiler)
	cmd.Args = strings::Split(compilerCmd, " ")
	cmd.Spawn() else {
		handle::AnsiEscape.Print(handle::AnsiRed, "back-end compiler could not used: "+fmt::Format("{}", error))
		handle::Throw("")
	}
	status := cmd.Wait()!
	if status != 0 {
		errorMessage := "\n>>> your backend compiler (" + env::Compiler + `) reports problems
>>> please check errors above
>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose`

		handle::AnsiEscape.Print(handle::AnsiRed, errorMessage)
		handle::Throw("")
	}

	clearObjects()
}

fn isCppSourceFile(path: str): bool {
	offset := strings::LastIndexByte(path, '.')
	if offset == -1 {
		ret false
	}
	ret build::IsValidCppExt(path[offset:])
}

fn pushCompCmdClang(mut &cmd: strings::Builder) {
	// Disable all warnings.
	cmd.WriteStr("-Wno-everything ")!

	// Set C++ standard.
	cmd.WriteStr("--std=")!
	match env::CppStd {
	| "cpp14":
		cmd.WriteStr("c++14")!
	| "cpp17":
		cmd.WriteStr("c++17")!
	| "cpp20":
		cmd.WriteStr("c++20")!
	}
	cmd.WriteByte(' ')!

	if env::Production {
		cmd.WriteStr("-O3 ")!                  // Enable all optimizations.
		cmd.WriteStr("-flto ")!                // Enable LTO.
		cmd.WriteStr("-DNDEBUG ")!             // Define NDEBUG, turn off assertions.
		cmd.WriteStr("-fomit-frame-pointer ")! // Do not use frame pointer.
	} else {
		cmd.WriteStr("-O0 ")! // No optimization.
	}
}

fn pushCompCmdGcc(mut &cmd: strings::Builder) {
	// Disable all warnings.
	cmd.WriteStr("-w ")!

	// Set C++ standard.
	cmd.WriteStr("--std=")!
	match env::CppStd {
	| "cpp14":
		cmd.WriteStr("c++14")!
	| "cpp17":
		cmd.WriteStr("c++17")!
	| "cpp20":
		cmd.WriteStr("c++20")!
	}
	cmd.WriteByte(' ')!

	if env::Production {
		cmd.WriteStr("-O3 ")!                  // Enable all optimizations.
		cmd.WriteStr("-DNDEBUG ")!             // Define NDEBUG, turn off assertions.
		cmd.WriteStr("-fomit-frame-pointer ")! // Do not use frame pointer.
	} else {
		cmd.WriteStr("-O0 ")! // No optimization.
	}
}

// Generate compile command for backend-compiler.
fn genCompileCmd(sourcePath: str, &ir: &obj::IR): (str, str) {
	&compiler := env::CompilerPath
	mut cmd := strings::Builder{}
	cmd.Grow(1 << 6)

	match env::Compiler {
	| "gcc":
		pushCompCmdGcc(cmd)
	| "clang":
		pushCompCmdClang(cmd)
	}

	// Push binded source files.
	for _, u in ir.Used {
		if u.Binded && isCppSourceFile(u.Path) {
			cmd.WriteStr(u.Path)!
			cmd.WriteByte(' ')!
		}
	}

	if Out != "" {
		cmd.WriteStr("-o ")!
		cmd.WriteStr(Out)!
		cmd.WriteByte(' ')!
	}
	cmd.WriteStr(sourcePath)!

	// Push passes.
	for _, pass in ir.Passes {
		cmd.WriteByte(' ')!
		cmd.WriteStr(pass)!
	}

	// Link necessary libraries for Windows.
	if build::OS == build::DistOS.Windows {
		cmd.WriteStr(" -lshell32")!
	}

	ret compiler, cmd.Str()
}

fn getCompilePath(): str {
	// Return command-line argument form
	// instead of absolute path.
	ret filepath::Join(OutDir, OutName)
}

fn applyTargetIndependentOptimizations(mut &ir: &obj::IR) {
	mut opt := opt::Optimizer.New(ir)
	opt.Optimize()
}

fn checkCompilerFlag() {
	match env::Compiler {
	| "":
		handle::Throw("missing option value: --compiler")
	| "clang":
		if env::CompilerPath == "" {
			env::CompilerPath = "clang++"
		}
	| "gcc":
		if env::CompilerPath == "" {
			env::CompilerPath = "g++"
		}
	|:
		handle::Throw("invalid option value for --compiler: " + env::Compiler)
	}
}

fn checkTargetArch(arch: str) {
	if arch != build::DistArch.Amd64 &&
		arch != build::DistArch.Arm64 &&
		arch != build::DistArch.I386 {
		handle::Throw("--target: unsupported/undefined architecture: " + arch)
	}
}

fn checkTargetOs(os: str) {
	if os != build::DistOS.Windows &&
		os != build::DistOS.Linux &&
		os != build::DistOS.Darwin {
		handle::Throw("--target: unsupported/undefined operating system: " + os)
	}
}

fn checkTargetFlag(&target: str) {
	if target == "" {
		handle::Throw("missing option value: --target")
	}

	parts := strings::Split(target, "-")
	if len(parts) != 2 {
		handle::Throw("--target: undefined platform target format: " + target)
	}

	os, arch := parts[0], parts[1]

	if os != "native" {
		checkTargetOs(os)
		build::OS = os
	}
	if arch != "native" {
		checkTargetArch(arch)
		build::Arch = arch
	}
	types::UpdateTarget()
}

fn checkOptFlag(&opt: str) {
	if opt == "" {
		handle::Throw("missing option value: --opt")
	}

	match opt {
	| "L0":
		break
	| "L1":
		opt::PushOptLevel(opt::OptLevel.L1)
	| "L2":
		opt::PushOptLevel(opt::OptLevel.L2)
	|:
		handle::Throw("--opt: invalid optimization level: " + opt)
	}
}

fn checkCppStdFlag() {
	match env::CppStd {
	| "cpp14"
	| "cpp17"
	| "cpp20":
		break
	|:
		handle::Throw("--cppstd: invalid cpp standard: " + env::CppStd)
	}
}

fn checkFlags(&args: []str): []str {
	mut opt := "L0"
	mut target := "native-native"

	mut fs := flag::FlagSet.New()

	fs.AddVar[str](unsafe { (&str)(&opt) }, "opt", 0, "Optimization level")
	fs.AddVar[str](unsafe { (&str)(&target) }, "target", 0, "Target system")
	fs.AddVar[str](unsafe { (&str)(&Out) }, "out", 'o', "Output identifier")
	fs.AddVar[bool](unsafe { (&bool)(&env::Shadowing) }, "shadowing", 0, "Allow shadowing")
	fs.AddVar[bool](unsafe { (&bool)(&env::Transpilation) }, "transpile", 't', "Transpile code")
	fs.AddVar[str](unsafe { (&str)(&env::Compiler) }, "compiler", 0, "Backend compiler")
	fs.AddVar[str](unsafe { (&str)(&env::CompilerPath) }, "compiler-path", 0, "Path of backend compiler")
	fs.AddVar[bool](unsafe { (&bool)(&env::Production) }, "production", 'p', "Compile for production")
	fs.AddVar[bool](unsafe { (&bool)(&env::RC) }, "disable-rc", 0, "Disable reference counting")
	fs.AddVar[bool](unsafe { (&bool)(&env::Safety) }, "disable-safety", 0, "Disable safety")
	fs.AddVar[str](unsafe { (&str)(&env::CppStd) }, "cppstd", 0, "C++ standard")
	fs.AddVar[bool](unsafe { (&bool)(&opt::ZCopy) }, "opt-zcopy", 0, "Copy optimization for the built-in copy function")
	fs.AddVar[bool](unsafe { (&bool)(&opt::ZAppend) }, "opt-zappend", 0, "Append optimization for the built-in append function")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Copy) }, "opt-copy", 0, "Copy optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Deadcode) }, "opt-deadcode", 0, "Deadcode optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Append) }, "opt-append", 0, "Append optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Math) }, "opt-math", 0, "Math optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Access) }, "opt-access", 0, "Access optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Inline) }, "opt-inline", 0, "Inline optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Ptr) }, "opt-ptr", 0, "Pointer optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Cond) }, "opt-cond", 0, "Conditional optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Str) }, "opt-str", 0, "String optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Slice) }, "opt-slice", 0, "Slice optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Assign) }, "opt-assign", 0, "Assignment optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Exceptional) }, "opt-exceptional", 0, "Exceptional optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Iter) }, "opt-iter", 0, "Iterations optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Dynamic) }, "opt-dynamic", 0, "Dynamic programming optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Array) }, "opt-array", 0, "Array optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Len) }, "opt-len", 0, "Len optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::StdStrings) }, "opt-std-strings", 0, "Special optimizations for the std/strings package")
	fs.AddVar[bool](unsafe { (&bool)(&opt::StdMathCmplx) }, "opt-std-math-cmplx", 0, "Special optimizations for the std/math/cmplx package")

	mut content := fs.Parse(args) else {
		handle::Throw(str(error))
		use nil // Avoid error.
	}

	checkCompilerFlag()
	checkCppStdFlag()
	checkTargetFlag(target)
	checkOptFlag(opt)

	ret content
}

fn setupSemaFlags(mut &flags: sema::Flag) {
	if env::Shadowing {
		flags |= sema::Flag.Shadowing
	}
}

fn buildIr(&args: []str): &obj::IR {
	content := checkFlags(args)

	mut semaFlags := sema::Flag.Default
	setupSemaFlags(semaFlags)

	if len(content) == 0 {
		handle::Throw(build::Logf(build::LogMsg.MissingCompilePath))
	} else if len(content) > 1 {
		handle::Throw("undefined content: " + content[1])
	}
	mut path, ok := filepath::Abs(content[0])
	if !ok {
		handle::Throw("compile path could not processed because of a problem")
	}

	// Check standard library.
	inf := os::Stat(build::PathStdlib) else {
		handle::Throw(build::Logf(build::LogMsg.StdlibNotExist))
		ret nil // Avoid error.
	}
	if !inf.IsDir() {
		handle::Throw(build::Logf(build::LogMsg.StdlibNotExist))
	}

	mut ir, logs := obj::IR.Build(path, semaFlags)

	if ir == nil && logs == nil {
		handle::Throw(build::Logf(build::LogMsg.NoFileInEntryPackage, path))
	}

	if logs != nil {
		handle::Logger.PrintLogs(logs)
		handle::Throw("")
	}

	ret ir
}

// Process compile command by "ARGS" global.
fn compileCommand(mut &args: []str) {
	args = args[1:] // Remove program path.
	if args[0] == "test" {
		env::Test = true
		args = args[1:]
	}
	mut ir := buildIr(args)

	// Build program metadata by IR.
	meta::Program = meta::Collect(ir)

	if !env::Test {
		const Binded = false
		meta::Program.EntryPoint = ir.Main.FindFunc(jule::EntryPoint, Binded)
		if meta::Program.EntryPoint == nil {
			handle::Throw(build::Logf(build::LogMsg.NoEntryPoint))
		}
	}

	applyTargetIndependentOptimizations(ir)

	// See compiler reference (1)
	ir.Order()

	compPath := getCompilePath()
	compiler, compilerCmd := genCompileCmd(compPath, ir)

	mut oc := cxx::ObjectCoder.New(ir, cxx::SerializationInfo{
		Compiler: compiler,
		CompilerCommand: compilerCmd,
	})
	if env::Test {
		mut tc := cxx::TestCoder.New(oc)
		tc.Serialize()
	} else {
		oc.Serialize()
	}

	mut file := openOutput(compPath)
	file.Write(unsafe { oc.Buf.Buf() }) else {
		handle::Throw("object code could not write")
	}
	file.Close()!

	if !env::Transpilation {
		compileIr(compiler, compilerCmd)
	}
}