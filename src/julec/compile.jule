// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julec/env"
use "julec/handle"
use "julec/obj"
use "julec/obj/cxx"
use "julec/obj/meta"
use "julec/opt"
use "std/conv"
use "std/flag"
use "std/fmt"
use "std/jule"
use "std/jule/build"
use "std/jule/dist"
use "std/jule/sema"
use "std/jule/types"
use "std/os"
use "std/os/filepath"
use "std/runtime"
use "std/strings"

let mut OutDir = "dist"
let mut OutName = "ir.cpp"
let mut Out = ""

let targets = map[str][]str{
	"windows": ["amd64", "arm64", "i386"],
	"linux": ["amd64", "arm64", "i386"],
	"darwin": ["amd64", "arm64"],
}

fn init() {
	// Configure compiler to default by platform
	// Compiler path will be set by compiler before compilation if still unassigned.
	env::Compiler = "clang"
}

fn openOutput(path: str): &os::File {
	dir := filepath::Dir(path)

	os::Stat(dir) else {
		os::Mkdir(dir) else {
			handle::Throw("a problem occurs when code generation")
		}
	}

	ret os::Create(path) else {
		handle::Throw("a problem occurs when code generation")
		use nil
	}
}

// Remove generated objects for compilation.
fn clearObjects() {
	os::Remove(getCompilePath()) else {
		println("a problem occurs when object cleaning")
		ret
	}

	// All created objects are cleaned.
	// So, deletes directory if empty after cleaned all objects,
	// if not, leaves the directory.
	os::Rmdir(OutDir) else {}
}

// Compile generated IR.
fn compileIR(compiler: str, mut compilerArgs: []str) {
	mut cmd := os::Cmd.New(compiler, compilerArgs...)
	cmd.Stdout(os::Stdout())!
	cmd.Stderr(os::Stderr())!
	cmd.Start() else {
		handle::AnsiEscape.Print(handle::AnsiRed, "back-end compiler could not used: "+fmt::Sprint(error))
		handle::Throw("")
	}
	status := cmd.Wait()!
	if status != 0 {
		errorMessage := "\n>>> your backend compiler (" + env::Compiler + `) reports problems
>>> please check errors above
>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose`

		handle::AnsiEscape.Print(handle::AnsiRed, errorMessage)
		handle::Throw("")
	}

	clearObjects()
}

fn isCppSourceFile(path: str): bool {
	offset := strings::LastIndexByte(path, '.')
	if offset == -1 {
		ret false
	}
	ret build::IsValidCppExt(path[offset:])
}

fn pushCompCmdClang(mut args: []str): []str {
	// Disable all warnings.
	args = append(args, "-Wno-everything")

	// Set C++ standard.
	match env::CppStd {
	| "cpp14":
		args = append(args, "--std=c++14")
	| "cpp17":
		args = append(args, "--std=c++17")
	| "cpp20":
		args = append(args, "--std=c++20")
	}
	// Enable wrap around behavior.
	args = append(args, "-fwrapv")
	// The -ffloat-store flag is used to prevent excess precision issues in
	// floating-point arithmetic on certain architectures, particularly x86.
	// By default, the x87 floating-point unit (FPU) uses extended precision
	// (80-bit) for calculations, which can lead to inconsistencies when storing
	// values in 32-bit or 64-bit floating-point variables. This flag forces
	// intermediate floating-point results to be stored in memory before being
	// used again, ensuring that they conform to the expected precision
	// (32-bit float or 64-bit double). While this can improve consistency across
	// different compiler optimizations and hardware, it may also introduce a slight
	// performance overhead due to additional memory operations. But it is a
	// good tradeoff for consistency.
	args = append(args, "-ffloat-store")
	// The -fno-fast-math flag disables aggressive floating-point optimizations that may violate
	// IEEE 754 standards or alter the precise semantics of floating-point arithmetic.
	//
	// By default, some compilers enable fast-math optimizations to improve performance,
	// but these can reorder operations, ignore NaNs or infinities, or assume associativity,
	// which leads to results that are not fully IEEE 754 compliant.
	//
	// Using -fno-fast-math ensures that floating-point operations adhere strictly to
	// IEEE 754 rules, preserving correct handling of special values (NaN, infinity),
	// rounding modes, and exception behavior.
	//
	// This flag is essential when exact IEEE 754 compliance is required,
	// for example in numerical software where reproducibility and correctness are critical.
	args = append(args, "-fno-fast-math")
	// The -fexcess-precision=standard flag enforces that floating-point computations use only the
	// precision specified by the IEEE 754 standard for the given data type (e.g., f32, f64).
	//
	// Some hardware and compilers by default may use extended precision registers (like x87 FPU)
	// which hold intermediate results at higher precision than the defined type,
	// causing subtle differences in rounding and comparison results.
	//
	// This flag ensures that excess precision is not used, so calculations strictly conform
	// to the standard precision and rounding behavior, which is crucial for IEEE 754 compliance.
	//
	// Enabling this flag helps maintain consistent, predictable floating-point behavior across
	// different platforms and compilation settings, avoiding hard-to-debug numerical discrepancies.
	//
	// Pass this flag if the target operating system is not Windows.
	// Because user may use MSVC Clang on Windows, which is does not supports this flag.
	if build::OS != dist::Windows {
		args = append(args, "-fexcess-precision=standard")
	}
	// Assume rounding-mode is fixed and never will be changed.
	args = append(args, "-fno-rounding-math")
	// The -ffp-contract=fast flag enables the contraction of floating-point operations,
	// allowing the compiler to combine operations like multiply and add into a
	// fused multiply-add (FMA) instruction when supported by the target architecture.
	//
	// Fused multiply-add performs both the multiplication and the addition in a single step,
	// with only one rounding, which can improve both performance and numerical accuracy
	// compared to performing the operations separately.
	//
	// Enabling contraction may change the rounding behavior compared to separate
	// operations, as intermediate results are not rounded independently. This can lead to
	// slight differences in results but often improves precision in common use cases.
	//
	// This flag allows the compiler to apply hardware optimizations that take advantage
	// of FMA instructions, which are particularly useful in numerical computations,
	// linear algebra, and machine learning workloads.
	//
	// When strict IEEE 754 operation-by-operation semantics are not required, enabling
	// contraction is generally recommended for better performance and often better
	// overall numerical accuracy.
	args = append(args, "-ffp-contract=fast")

	if env::Production {
		args = append(args, "-O3")        // Enable all optimizations.
		args = append(args, "-flto=thin") // Enable LTO.
		if build::OS == dist::Windows {
			// For Windows, we have to do extra work to use LTO.
			// If the Clang is not MinGW, it is probably the “Clang Compiler for Windows”
			// may be installed by Microsoft Visual Studio. If so, using LTO
			// may cause compile errors due to using linker with not LTO support.
			// To avoid this issue, tell the compiler to use LLD.
			// As far as tested, the same command works for both versions of Clang.
			args = append(args, "-fuse-ld=lld")
		}
		args = append(args, "-DNDEBUG")             // Define NDEBUG, turn off assertions.
		args = append(args, "-fomit-frame-pointer") // Do not use frame pointer.
	} else {
		args = append(args, "-O0") // No optimization.
	}

	// Disable strict aliasing optimizations.
	// Unsafe Jule allows casting between different pointer types for the same address.
	// The back-end compiler may optimize this kind of code and it can lead several
	// issues on runtime such as crash, segfault, or undefined behavior.
	args = append(args, "-fno-strict-aliasing")

	ret args
}

fn pushCompCmdGcc(mut args: []str): []str {
	// Disable all warnings.
	args = append(args, "-w")

	// Set C++ standard.
	match env::CppStd {
	| "cpp14":
		args = append(args, "--std=c++14")
	| "cpp17":
		args = append(args, "--std=c++17")
	| "cpp20":
		args = append(args, "--std=c++20")
	}
	// Enable wrap around behavior.
	args = append(args, "-fwrapv")
	// The -ffloat-store flag is used to prevent excess precision issues in
	// floating-point arithmetic on certain architectures, particularly x86.
	// By default, the x87 floating-point unit (FPU) uses extended precision
	// (80-bit) for calculations, which can lead to inconsistencies when storing
	// values in 32-bit or 64-bit floating-point variables. This flag forces
	// intermediate floating-point results to be stored in memory before being
	// used again, ensuring that they conform to the expected precision
	// (32-bit float or 64-bit double). While this can improve consistency across
	// different compiler optimizations and hardware, it may also introduce a slight
	// performance overhead due to additional memory operations. But it is a
	// good tradeoff for consistency.
	args = append(args, "-ffloat-store")
	// The -fno-fast-math flag disables aggressive floating-point optimizations that may violate
	// IEEE 754 standards or alter the precise semantics of floating-point arithmetic.
	//
	// By default, some compilers enable fast-math optimizations to improve performance,
	// but these can reorder operations, ignore NaNs or infinities, or assume associativity,
	// which leads to results that are not fully IEEE 754 compliant.
	//
	// Using -fno-fast-math ensures that floating-point operations adhere strictly to
	// IEEE 754 rules, preserving correct handling of special values (NaN, infinity),
	// rounding modes, and exception behavior.
	//
	// This flag is essential when exact IEEE 754 compliance is required,
	// for example in numerical software where reproducibility and correctness are critical.
	args = append(args, "-fno-fast-math")
	// The -fexcess-precision=standard flag enforces that floating-point computations use only the
	// precision specified by the IEEE 754 standard for the given data type (e.g., f32, f64).
	//
	// Some hardware and compilers by default may use extended precision registers (like x87 FPU)
	// which hold intermediate results at higher precision than the defined type,
	// causing subtle differences in rounding and comparison results.
	//
	// This flag ensures that excess precision is not used, so calculations strictly conform
	// to the standard precision and rounding behavior, which is crucial for IEEE 754 compliance.
	//
	// Enabling this flag helps maintain consistent, predictable floating-point behavior across
	// different platforms and compilation settings, avoiding hard-to-debug numerical discrepancies.
	//
	// Pass this flag if the target operating system is not Windows.
	// Because user may use MSVC Clang on Windows, which is does not supports this flag.
	// GCC is not Clang, but it might be an alias to MCSV Clang, we do not know.
	if build::OS != dist::Windows {
		args = append(args, "-fexcess-precision=standard")
	}
	// Assume rounding-mode is fixed and never will be changed.
	args = append(args, "-fno-rounding-math")
	// The -ffp-contract=fast flag enables the contraction of floating-point operations,
	// allowing the compiler to combine operations like multiply and add into a
	// fused multiply-add (FMA) instruction when supported by the target architecture.
	//
	// Fused multiply-add performs both the multiplication and the addition in a single step,
	// with only one rounding, which can improve both performance and numerical accuracy
	// compared to performing the operations separately.
	//
	// Enabling contraction may change the rounding behavior compared to separate
	// operations, as intermediate results are not rounded independently. This can lead to
	// slight differences in results but often improves precision in common use cases.
	//
	// This flag allows the compiler to apply hardware optimizations that take advantage
	// of FMA instructions, which are particularly useful in numerical computations,
	// linear algebra, and machine learning workloads.
	//
	// When strict IEEE 754 operation-by-operation semantics are not required, enabling
	// contraction is generally recommended for better performance and often better
	// overall numerical accuracy.
	args = append(args, "-ffp-contract=fast")

	if env::Production {
		args = append(args, "-O3")                  // Enable all optimizations.
		args = append(args, "-DNDEBUG")             // Define NDEBUG, turn off assertions.
		args = append(args, "-fomit-frame-pointer") // Do not use frame pointer.
	} else {
		args = append(args, "-O0") // No optimization.
	}

	// Disable strict aliasing optimizations.
	// Unsafe Jule allows casting between different pointer types for the same address.
	// The back-end compiler may optimize this kind of code and it can lead several
	// issues on runtime such as crash, segfault, or undefined behavior.
	args = append(args, "-fno-strict-aliasing")

	ret args
}

// Generate compile command for backend-compiler.
fn genCompileCmd(sourcePath: str, ir: &obj::IR): (compiler: str, args: []str) {
	compiler = env::CompilerPath

	match env::Compiler {
	| "gcc":
		args = pushCompCmdGcc(args)
	| "clang":
		args = pushCompCmdClang(args)
	}

	// Push bind source files.
	for _, u in ir.Used {
		if u.Bind && isCppSourceFile(u.Path) {
			args = append(args, u.Path)
		}
	}

	// If output name is missing, use "main" by default.
	Out = strings::TrimSpace(Out)
	if Out == "" {
		Out = "main"
	}
	args = append(args, "-o")
	// If compiling for Windows and Out path is not have `.exe` extension, then add it.
	if build::OS == dist::Windows && filepath::Ext(Out) != ".exe" {
		Out += ".exe"
	}
	args = append(args, Out)

	args = append(args, sourcePath)

	// Push passes.
	args = append(args, ir.Passes...)

	// Link necessary libraries for Windows.
	if build::OS == dist::Windows {
		args = append(args, "-lshell32")
	}

	ret
}

fn getCompilePath(): str {
	// Return command-line argument form
	// instead of absolute path.
	ret filepath::Join(OutDir, OutName)
}

fn applyTargetIndependentOptimizations(mut ir: &obj::IR) {
	mut opt := opt::Optimizer.New(ir)
	opt.Optimize()
}

fn checkCompilerFlag() {
	match env::Compiler {
	| "":
		handle::Throw("missing option value: --compiler")
	| "clang":
		if env::CompilerPath == "" {
			env::CompilerPath = "clang++"
		}
	| "gcc":
		if env::CompilerPath == "" {
			env::CompilerPath = "g++"
		}
	|:
		handle::Throw("invalid option value for --compiler: " + env::Compiler)
	}
}

fn checkTargetArch(arch: str) {
	if arch != dist::AMD64 && arch != dist::ARM64 && arch != dist::I386 {
		handle::Throw("--target: unsupported/undefined architecture: " + arch)
	}
}

fn checkTargetOs(os: str) {
	if os != dist::Windows && os != dist::Linux && os != dist::Darwin {
		handle::Throw("--target: unsupported/undefined operating system: " + os)
	}
}

fn checkTargetPair(os: str, arch: str) {
	for _, a in targets[os] {
		if arch == a {
			ret
		}
	}
	handle::Throw("invalid target: " + os + "-" + arch)
}

fn checkTargetFlag(target: str) {
	if target == "" {
		handle::Throw("missing option value: --target")
	}

	parts := strings::Split(target, "-")
	if len(parts) != 2 {
		handle::Throw("--target: undefined platform target format: " + target)
	}

	mut os, mut arch := parts[0], parts[1]

	if os == "native" {
		os = runtime::OS
		build::OS = runtime::OS
	} else {
		checkTargetOs(os)
		build::OS = os
	}
	if arch == "native" {
		arch = runtime::Arch
		build::Arch = runtime::Arch
	} else {
		checkTargetArch(arch)
		build::Arch = arch
	}
	checkTargetPair(os, arch)
	types::UpdateTarget()
}

fn checkOptFlag(opt: str) {
	if opt == "" {
		handle::Throw("missing option value: --opt")
	}

	match opt {
	| "L0":
		break
	| "L1":
		opt::PushOptLevel(opt::L1)
	| "L2":
		opt::PushOptLevel(opt::L2)
	|:
		handle::Throw("--opt: invalid optimization level: " + opt)
	}
}

fn checkCppStdFlag() {
	match env::CppStd {
	| "cpp14"
	| "cpp17"
	| "cpp20":
		break
	|:
		handle::Throw("--cppstd: invalid cpp standard: " + env::CppStd)
	}
}

fn checkFlags(&args: *[]str): []str {
	mut opt := "L0"
	mut target := "native-native"

	mut fs := flag::FlagSet.New()

	fs.AddVar[str](unsafe { (&str)(&opt) }, "opt", 0, "Optimization level")
	fs.AddVar[str](unsafe { (&str)(&target) }, "target", 0, "Target system")
	fs.AddVar[str](unsafe { (&str)(&Out) }, "out", 'o', "Output identifier")
	fs.AddVar[bool](unsafe { (&bool)(&env::Shadowing) }, "shadowing", 0, "Allow shadowing")
	fs.AddVar[bool](unsafe { (&bool)(&env::Transpilation) }, "transpile", 't', "Transpile code")
	fs.AddVar[str](unsafe { (&str)(&env::Compiler) }, "compiler", 0, "Backend compiler")
	fs.AddVar[str](unsafe { (&str)(&env::CompilerPath) }, "compiler-path", 0, "Path of backend compiler")
	fs.AddVar[bool](unsafe { (&bool)(&env::Production) }, "production", 'p', "Compile for production")
	fs.AddVar[bool](unsafe { (&bool)(&env::RC) }, "disable-rc", 0, "Disable reference counting")
	fs.AddVar[bool](unsafe { (&bool)(&env::Safety) }, "disable-safety", 0, "Disable safety")
	fs.AddVar[str](unsafe { (&str)(&env::CppStd) }, "cppstd", 0, "C++ standard")
	fs.AddVar[bool](unsafe { (&bool)(&opt::ZCopy) }, "opt-zcopy", 0, "Copy optimization for the built-in copy function")
	fs.AddVar[bool](unsafe { (&bool)(&opt::ZAppend) }, "opt-zappend", 0, "Append optimization for the built-in append function")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Copy) }, "opt-copy", 0, "Copy optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Deadcode) }, "opt-deadcode", 0, "Deadcode optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Append) }, "opt-append", 0, "Append optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Math) }, "opt-math", 0, "Math optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Access) }, "opt-access", 0, "Access optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Inline) }, "opt-inline", 0, "Inline optimization")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Ptr) }, "opt-ptr", 0, "Pointer optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Cond) }, "opt-cond", 0, "Conditional optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Str) }, "opt-str", 0, "String optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Slice) }, "opt-slice", 0, "Slice optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Assign) }, "opt-assign", 0, "Assignment optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Exceptional) }, "opt-exceptional", 0, "Exceptional optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Iter) }, "opt-iter", 0, "Iterations optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Dynamic) }, "opt-dynamic", 0, "Dynamic programming optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Array) }, "opt-array", 0, "Array optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::Len) }, "opt-len", 0, "Len optimizations")
	fs.AddVar[bool](unsafe { (&bool)(&opt::StdStrings) }, "opt-std-strings", 0, "Special optimizations for the std/strings package")

	mut content := fs.Parse(*args) else {
		handle::Throw(error.(str))
		use nil // Avoid error.
	}

	checkCompilerFlag()
	checkCppStdFlag()
	checkTargetFlag(target)
	checkOptFlag(opt)

	ret content
}

fn setupSemaFlags(mut &flags: *int) {
	if env::Shadowing {
		*flags |= sema::Shadowing
	}
}

fn buildIR(&args: *[]str): &obj::IR {
	content := checkFlags(args)

	mut semaFlags := sema::Default
	setupSemaFlags(&semaFlags)

	if len(content) == 0 {
		handle::Throw("missing compile path")
	} else if len(content) > 1 {
		handle::Throw("undefined content: " + content[1])
	}
	mut path := filepath::Abs(content[0]) else {
		handle::Throw("compile path could not processed because of a problem")
		use "" // unreachable
	}

	// Check standard library.
	inf := os::Stat(build::PathStdlib()) else {
		handle::Throw("standard library is not exist")
		ret nil // Avoid error.
	}
	if !inf.IsDir() {
		handle::Throw("standard library is not exist")
	}

	mut ir, logs := obj::IR.Build(path, semaFlags)

	if ir == nil && logs == nil {
		handle::Throw("no file in entry package: " + conv::Quote(path))
	}

	if logs != nil {
		handle::Logger.PrintLogs(&logs)
		handle::Throw("")
	}

	ret ir
}

// Process compile command by "ARGS" global.
fn compileCommand(mut &args: *[]str) {
	*args = (*args)[1:] // Remove program path.
	if (*args)[0] == "test" {
		env::Test = true
		*args = (*args)[1:]
	}
	mut ir := buildIR(args)

	// Build program metadata by IR.
	meta::Program = meta::Collect(ir)

	if !env::Test {
		const Bind = false
		meta::Program.EntryPoint = ir.Main.FindFunc(jule::EntryPoint, Bind)
		if meta::Program.EntryPoint == nil {
			handle::Throw("entry point missing")
		}
	}

	applyTargetIndependentOptimizations(ir)

	// See compiler reference (1)
	ir.Order()

	compPath := getCompilePath()
	compiler, mut compilerArgs := genCompileCmd(compPath, ir)

	mut oc := cxx::ObjectCoder.New(ir, cxx::SerializationInfo{
		Compiler: compiler,
		CompilerArgs: compilerArgs,
	})
	if env::Test {
		mut tc := cxx::TestCoder.New(oc)
		tc.Serialize()
	} else {
		oc.Serialize()
	}

	mut file := openOutput(compPath)
	file.Write(unsafe { oc.Buf.Buf() }) else {
		handle::Throw("object code could not write")
	}
	file.Close()!

	if !env::Transpilation {
		compileIR(compiler, compilerArgs)
	}
}