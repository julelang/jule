// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// This is the main package of JuleC.

use "env"
use "handle"
use "std/fmt"
use "std/jule"
use "std/jule/build"
use "std/jule/dist"
use "std/os"
use "std/runtime"
use "std/strings"

// Compiler commands.
const (
	CmdHelp    = "help"
	CmdVersion = "version"
	CmdTool    = "tool"
	CmdJulenv  = "julenv"
	CmdMod     = "mod"
)

// Map for "julec help" command.
let HelpMap: [...][2]str = [
	[CmdHelp, "Show the list of available commands"],
	[CmdVersion, "Show version"],
	[CmdTool, "Tools for effective Jule"],
	[CmdJulenv, "Show information about native jule environment"],
	[CmdMod, "Module management"],
]

fn printErrorMessage(msg: str) {
	println(msg)
}

// Command: julec help
fn help(args: []str, pan: int) {
	if len(args) > 2 {
		printErrorMessage("invalid command: " + args[2])
		ret
	}

	mut max := len(HelpMap[0][0])
	for _, k in HelpMap {
		n := len(k[0])
		if n > max {
			max = n
		}
	}

	mut s := strings::Builder{}
	s.Grow(1 << 5)
	const Space = 5 // Space of between command name and description.
	for i, part in HelpMap {
		s.WriteStr(strings::Repeat(" ", pan))!
		s.WriteStr(part[0])!
		s.WriteStr(strings::Repeat(" ", (max-len(part[0]))+Space))!
		s.WriteStr(part[1])!
		if i+1 < len(HelpMap) {
			s.WriteByte('\n')!
		}
	}
	println(s.Str())
}

// Command: julec version
fn version(args: []str) {
	if len(args) > 2 {
		printErrorMessage("invalid command: " + args[2])
		ret
	}
	println(jule::Version)
}

// Command: julec tool targets
fn toolTargets() {
	print("supported targets:\n")
	for key, archs in targets {
		for _, arch in archs {
			fmt::Printf("{}-{}\n", key, arch)
		}
	}
}

// Command: julec tool distos
fn toolDistos() {
	print("supported operating systems:\n ")
	print(dist::Windows)
	print(" ")
	print(dist::Linux)
	print(" ")
	print(dist::Darwin)
	println("")
}

// Command: julec tool distarch
fn toolDistarch() {
	print("supported architects:\n ")
	print(dist::AMD64)
	print(" ")
	print(dist::I386)
	print(" ")
	print(dist::ARM64)
	println("")
}

// Command: julec tool
fn tool(args: []str) {
	if len(args) == 2 {
		println(`tool commands:
 targets    List all supported target pairs
 distos     List all supported operating systems
 distarch   List all supported architects`)
		ret
	} else if len(args) > 3 {
		printErrorMessage("invalid command: " + args[3])
		ret
	}

	cmd := args[2]
	match cmd {
	| "targets":
		toolTargets()
	| "distos":
		toolDistos()
	| "distarch":
		toolDistarch()
	|:
		printErrorMessage("undefined command: " + cmd)
	}
}

// Command: julec julenv
fn julenv(args: []str) {
	if len(args) > 2 {
		printErrorMessage("invalid command: " + args[2])
		ret
	}
	println("julec version: " + jule::Version)
	println("architecture: " + runtime::Arch)
	println("operating system: " + runtime::OS)
	println("default compiler: " + env::Compiler)
	println("default C++ standard: " + env::CppStd)
}

// Command: julec mod
fn mod(args: []str) {
	if len(args) == 2 {
		println("no command given, try julec mod init")
		ret
	}

	if len(args) > 3 {
		printErrorMessage("invalid command: " + args[3])
		ret
	}

	match args[2] {
	| "init": // julec mod init
		os::WriteFile(jule::ModuleFile, [], 0o660) else {
			printErrorMessage("module could not be generated")
		}
	|:
		printErrorMessage("invalid command: " + args[2])
	}
}

// Try to process compiler commands.
// Reports whether "ARGS" is command and processed.
fn processCommand(args: []str): bool {
	match args[1] {
	| CmdHelp:
		help(args, 0)
	| CmdVersion:
		version(args)
	| CmdTool:
		tool(args)
	| CmdJulenv:
		julenv(args)
	| CmdMod:
		mod(args)
	|:
		ret false
	}

	ret true
}

fn showInfo(args: []str) {
	println(
		`JuleC is the Jule programming language compiler.

Commands:`)
	help(args, 4)
	println(`
Compilation:
    julec [OPTIONS] INPUT`)
}

fn init() {
	// Set-up environment variables of the compiler.
	exec := os::Executable()
	if exec == "" {
		handle::Throw("executable file could not read")
	}
	wd := os::Getwd() else {
		handle::Throw("working directory could not read")
		panic("unreachable")
	}
	build::SetEnv(exec, wd)
}

fn main() {
	mut args := os::Args()

	// Not started with arguments.
	// Here is "2" but "args" always have one element for store program name.
	if len(args) < 2 {
		showInfo(args)
		ret
	}

	if processCommand(args) {
		ret
	}

	compileCommand(&args)
}