// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/sema"

fn IterPackages(mut ir: &IR, f: fn(mut pkg: &sema::Package)) {
	for (_, mut used) in ir.Used {
		if !used.Bind {
			f(used.Package)
		}
	}
	f(ir.Main)
}

fn IterFiles(mut pkg: &sema::Package, f: fn(mut f: &sema::SymTab)) {
	for (_, mut file) in pkg.Files {
		f(file)
	}
}

// Iterates methods of trait, including inherited methods.
// It does not checks already iterated methods.
fn IterTraitMethods(mut t: &sema::Trait, f: fn(mut m: &sema::Func)) {
	for (_, mut m) in t.Methods {
		f(m)
	}
	for (_, mut inh) in t.Inherits {
		mut it := inh.Type.Trait()
		IterTraitMethods(it, f)
	}
}

// Iterates case expressions of select.
fn IterCaseExprs(mut cases: []&sema::Case, f: fn(mut c: &sema::Case, mut v: &sema::Value)) {
	for (_, mut c) in cases {
		for (_, mut expr) in c.Exprs {
			f(c, expr)
		}
	}
}