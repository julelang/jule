// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julec/env"
use "julec/obj"
use "std/conv"
use "std/jule"
use "std/jule/build"
use "std/jule/directive"
use "std/jule/sema"
use "std/jule/token"
use "std/strings"
use "std/unicode/utf8"
use "std/unsafe"

// Identifier of initialize function caller function.
const initCallerIdent = "__jule_call_initializers"

const identSelf = "_self_"

struct identCoder{}

// Identifier coder.
impl identCoder {
	// Write identifiers to buf. If identifier contains unicode runes,
	// handle as ASCII characters. Some backend compilers are not supports
	// unicode identifiers and causes compile errors.
	fn writeIdentTo(mut &buf: *strings::Builder, name: str) {
		for _, b in name {
			if b >= utf8::RuneSelf {
				// identifier contains unicode runes.
				goto unicode
			}
		}
		// identifier is ASCII, append directly.
		buf.WriteStr(name)!
		ret
	unicode:
		for _, r in name {
			if r < utf8::RuneSelf { // ASCII
				// Cast to byte to enable compiler optimization.
				// Append directly to buf.
				buf.WriteByte(byte(r))!
				continue
			}
			// Unicode, handle as ASCII.
			buf.WriteStr(conv::FormatInt(i64(r), 0xF))!
		}
	}

	// Writes cpp output identifier form of given identifier.
	//
	// Parameters:
	//	name: Identifier.
	//	addr:  Pointer address of package file handler.
	fn toOut(mut &buf: *strings::Builder, name: str, addr: uintptr) {
		buf.WriteByte('_')!
		if addr != 0 {
			buf.WriteStr(conv::FormatUint(u64(addr), 0xF))!
			buf.WriteByte('_')!
		}
		identCoder.writeIdentTo(buf, name)
	}

	// Writes cpp output local identifier form of given identifier.
	//
	// Parameters:
	//	row:   Row of definition.
	//	col:   Column of definition.
	//	name: Identifier of definition.
	fn toLocal(mut &buf: *strings::Builder, row: int, col: int, name: str) {
		buf.WriteByte('_')!
		buf.WriteStr(conv::Itoa(row))!
		buf.WriteStr(conv::Itoa(col))!
		buf.WriteByte('_')!
		identCoder.writeIdentTo(buf, name)
	}

	fn func(mut &buf: *strings::Builder, mut f: &sema::Func) {
		match {
		| f.Bind:
			buf.WriteStr(f.Name)!
			ret
		| f.IsMethod():
			if f.Static {
				buf.WriteStr("static_")!
			}
		}
		export := obj::FindDirective(f.Directives, directive::Export)
		if export != nil {
			buf.WriteStr(export.Args[0].Kind)!
			ret
		}
		identCoder.toOut(buf, f.Name, uintptr(f))
	}

	fn funcIns(mut &buf: *strings::Builder, mut f: &sema::FuncIns) {
		if f.IsBuiltin() {
			// Do not use [identCoder.writeIdentTo] for this.
			// Built-in functions are always ASCII.
			buf.WriteStr("jule::")!
			buf.WriteStr(f.Decl.Name)!
			ret
		}
		if f.Decl.Bind || len(f.Generics) == 0 {
			identCoder.func(buf, f.Decl)
			ret
		}
		identCoder.toOut(buf, f.Decl.Name, uintptr(f))
	}

	fn traitDecl(mut &buf: *strings::Builder, t: &sema::Trait) {
		identCoder.toOut(buf, t.Name, uintptr(t))
	}

	fn param(mut &buf: *strings::Builder, p: &sema::Param) {
		if jule::IsAnon(p.Name) || jule::IsBlank(p.Name) {
			ret
		}
		if p.IsSelf() {
			buf.WriteStr(identSelf)!
			ret
		}
		if p.Token == nil {
			identCoder.toLocal(buf, 0, 0, p.Name)
			ret
		}
		identCoder.toLocal(buf, p.Token.Row, p.Token.Column, p.Name)
	}

	fn structure(mut &buf: *strings::Builder, s: &sema::Struct) {
		if s.Bind {
			if !obj::HasDirective(s.Directives, directive::Typedef) {
				buf.WriteStr("struct ")!
			}
			buf.WriteStr(s.Name)!
			ret
		}
		identCoder.toOut(buf, s.Name, uintptr(s))
	}

	fn structureIns(mut &buf: *strings::Builder, s: &sema::StructIns) {
		if s.Decl.Bind || len(s.Generics) == 0 {
			identCoder.structure(buf, s.Decl)
			ret
		}
		identCoder.toOut(buf, s.Decl.Name, uintptr(s))
	}

	fn field(mut &buf: *strings::Builder, f: &sema::Field) {
		if f.Owner.Bind {
			export, ok := f.Tags["#export"]
			if ok {
				buf.WriteStr(export)!
			} else {
				buf.WriteStr(f.Name)!
			}
			ret
		}
		buf.WriteStr("_field_")!
		if jule::IsBlank(f.Name) {
			// If the identifier is blank, there may be other fields like that.
			// So handle them with unique identifier, avoid duplication.
			buf.WriteStr(conv::FormatUint(u64(uintptr(f)), 0xF))!
			ret
		}
		identCoder.writeIdentTo(buf, f.Name)
	}

	// Returns output identifier of captured variable by anonymous function.
	fn anonFuncVar(mut &buf: *strings::Builder, mut v: &sema::Var) {
		match v.RetState {
		| Tuple:
			// This means variable one of the structure fields of multiple-return.
			// To avoid generating invalid IR code, use the variable's unique identifier.
			identCoder.toOut(buf, v.Name, uintptr(v))
		| Single:
			// Use the common identifier coder for single variable returns.
			fall
		| NA:
			// Use the common identifier coder.
			if v.Name == "error" {
				// The error variable captured, handle it as "__jule_error".
				buf.WriteStr("__jule_error")!
				ret
			}
			identCoder.var(buf, v)
		}
	}

	// Returns output identifier of variable.
	fn var(mut &buf: *strings::Builder, mut v: &sema::Var) {
		match v.RetState {
		| NA:
			// no-op
		| Tuple:
			buf.WriteStr(resultName + "." + resultArgName)!
			buf.WriteStr(conv::Itoa(v.RetOrder))!
			ret
		| Single:
			// The single return variable is just this one.
			// Return directly [resultName] because of generated with this identifier.
			buf.WriteStr(resultName)!
			ret
		}
		match {
		| v.Bind:
			buf.WriteStr(v.Name)!
		| v.Name == "error":
			buf.WriteStr("__jule_except_")!
			buf.WriteStr(conv::FormatUint(u64(uintptr(v.Scope)), 16))!
			buf.WriteStr(".error")!
		| v.Name == "self":
			buf.WriteStr(identSelf)!
		| v.Scope != nil:
			identCoder.toLocal(buf, v.Token.Row, v.Token.Column, v.Name)
		|:
			export := obj::FindDirective(v.Directives, directive::Export)
			if export != nil {
				buf.WriteStr(export.Args[0].Kind)!
				ret
			}
			identCoder.toOut(buf, v.Name, uintptr(v))
		}
	}

	fn iterBegin(mut &buf: *strings::Builder, it: uintptr) {
		buf.WriteStr("_iter_begin_")!
		buf.WriteStr(conv::FormatUint(u64(it), 0xF))!
	}

	fn iterEnd(mut &buf: *strings::Builder, it: uintptr) {
		buf.WriteStr("_iter_end_")!
		buf.WriteStr(conv::FormatUint(u64(it), 0xF))!
	}

	fn iterNext(mut &buf: *strings::Builder, it: uintptr) {
		buf.WriteStr("_iter_next_")!
		buf.WriteStr(conv::FormatUint(u64(it), 0xF))!
	}

	fn label(mut &buf: *strings::Builder, u: uintptr) {
		buf.WriteStr("_julec_label_")!
		buf.WriteStr(conv::FormatUint(u64(u), 0xF))!
	}

	fn matchEnd(mut &buf: *strings::Builder, m: uintptr) {
		buf.WriteStr("_match_end_")!
		buf.WriteStr(conv::FormatUint(u64(m), 0xF))!
	}

	fn caseBegin(mut &buf: *strings::Builder, c: uintptr) {
		buf.WriteStr("_case_begin_")!
		buf.WriteStr(conv::FormatUint(u64(c), 0xF))!
	}
}