// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julec/obj"
use "julec/obj/meta"
use "std/conv"
use "std/jule/ast"
use "std/jule/build"
use "std/jule/directive"
use "std/jule/sema"
use "std/jule/types"
use "std/strings"
use "std/unsafe"

const ctxParamType = "void*"

struct customType {
	kind: str
}

impl sema::Kind for customType {
	fn Str(*self): str {
		ret self.kind
	}

	fn Equal(&self, k: &sema::Type): bool {
		ret false
	}
}

const (
	typeAny     = "jule::Any"
	typeStr     = "jule::Str"
	typeMap     = "jule::Map"
	typePtr     = "jule::Ptr"
	typeSptr    = "jule::Sptr"
	typeSlice   = "jule::Slice"
	typeTrait   = "jule::Any"
	typeArray   = "jule::Array"
	typeFunc    = "jule::Fn"
	typeBool    = "jule::Bool"
	typeInt     = "jule::Int"
	typeUintptr = "jule::Uintptr"
	typeU8      = "jule::U8"
)

struct typeCoder {
	oc: &ObjectCoder
	rc: &resultCoder
}

impl typeCoder {
	fn new(mut oc: &ObjectCoder): &typeCoder {
		mut tc := &typeCoder{oc: oc}
		tc.rc = resultCoder.new(tc)
		ret tc
	}

	// Writes given identifier as Jule type identifier.
	fn toType(mut *self, mut &buf: *strings::Builder, mut id: str) {
		match id {
		| types::Cmplx128:
			self.structureIns(buf, meta::Program.Runtime.Cmplx128)
			ret
		| types::Cmplx64:
			self.structureIns(buf, meta::Program.Runtime.Cmplx64)
			ret
		}
		if id != types::Uintptr {
			id = types::RealKindOf(id)
		}
		buf.WriteStr("jule::")!
		if 97 <= id[0] && id[0] <= 122 {
			buf.WriteByte(id[0] - 32)! // To upper first byte.
		} else {
			buf.WriteByte(id[0])!
		}
		buf.WriteStr(id[1:])!
	}

	// Generates C++ code of Prim type.
	fn prim(mut *self, mut &buf: *strings::Builder, p: &sema::Prim) {
		self.toType(buf, p.Kind)
	}

	// Generates C++ code of Tuple type.
	fn tuple(mut *self, mut &buf: *strings::Builder, mut t: &sema::Tuple) {
		buf.WriteStr("std::tuple<")!
		for (i, mut tk) in t.Types {
			self.kind(buf, tk)
			if len(t.Types)-i > 1 {
				buf.WriteByte(',')!
			}
		}
		buf.WriteByte('>')!
	}

	// Generates C++ code of smart pointer type with element type.
	fn asSptr(mut *self, mut &buf: *strings::Builder, valueTyp: []byte) {
		buf.WriteStr(typePtr + "<")!
		buf.Write(valueTyp)!
		buf.WriteByte('>')!
	}

	// Generates C++ code of smart pointer type.
	fn sptr(mut *self, mut &buf: *strings::Builder, mut sptr: &sema::Sptr) {
		buf.WriteStr(typePtr + "<")!
		self.kind(buf, sptr.Value)
		buf.WriteByte('>')!
	}

	// Generates C++ code of Ptr type.
	fn ptr(mut *self, mut &buf: *strings::Builder, mut p: &sema::Ptr) {
		const CppPointerMask = "*"
		if p.IsUnsafe() {
			buf.WriteStr("void" + CppPointerMask)!
		} else {
			self.kind(buf, p.Value)
			buf.WriteStr(CppPointerMask)!
		}
	}

	// Generates C++ code of Enum type.
	fn enumDecl(mut *self, mut &buf: *strings::Builder, mut e: &sema::Enum) {
		self.kind(buf, e.TypeSym.Type)
	}

	// Generates C++ code of TypeEnum type.
	fn typeEnumDecl(mut *self, mut &buf: *strings::Builder, mut e: &sema::TypeEnum) {
		buf.WriteStr(typeAny)!
	}

	fn asSlice(mut *self, mut &buf: *strings::Builder, mut valueTyp: &sema::Type) {
		buf.WriteStr(typeSlice + "<")!
		self.kind(buf, valueTyp)
		buf.WriteByte('>')!
	}

	// Generates C++ code of Slice type.
	fn slice(mut *self, mut &buf: *strings::Builder, mut s: &sema::Slice) {
		self.asSlice(buf, s.Value)
	}

	// Generates C++ code of Map type.
	fn mapType(mut *self, mut &buf: *strings::Builder, mut m: &sema::Map) {
		mut ins := obj::FindStructGenericInstance(meta::Program.Runtime.Map, m.Key, m.Value)
		buf.WriteStr("jule::Ptr<")!
		identCoder.structureIns(buf, ins)
		buf.WriteStr(">")!
	}

	// Generates C++ code of Struct type.
	fn structure(mut *self, mut &buf: *strings::Builder, s: &sema::Struct) {
		identCoder.structure(buf, s)
	}

	// Generates C++ code of Struct instance type.
	fn structureIns(mut *self, mut &buf: *strings::Builder, mut s: &sema::StructIns) {
		if !s.Decl.Bind {
			if s.Source != nil {
				self.kind(buf, s.Source)
			} else {
				identCoder.structureIns(buf, s)
			}
			ret
		}
		d := obj::FindDirective(s.Decl.Directives, directive::Namespace)
		if d != nil {
			buf.Write(concatAllParts(d.Args...))!
			buf.WriteStr("::")!
		}
		identCoder.structureIns(buf, s)
		if len(s.Generics) > 0 {
			buf.WriteByte('<')!
			for (i, mut g) in s.Generics {
				self.kind(buf, g.Type)
				if len(s.Generics)-i > 1 {
					buf.WriteByte(',')!
				}
			}
			buf.WriteByte('>')!
		}
	}

	// Generates C++ code of Arr type.
	fn array(mut *self, mut &buf: *strings::Builder, mut a: &sema::Array) {
		buf.WriteStr(typeArray + "<")!
		self.kind(buf, a.Value)
		buf.WriteByte(',')!
		buf.WriteStr(conv::Itoa(a.N))!
		buf.WriteByte('>')!
	}

	// Generates C++ prototype code of parameter.
	fn param(mut *self, mut &buf: *strings::Builder, mut p: &sema::Param) {
		if p.Variadic {
			buf.WriteStr(typeSlice + "<")!
			self.kind(buf, p.TypeSym.Type)
			buf.WriteByte('>')!
		} else {
			self.kind(buf, p.TypeSym.Type)
		}
	}

	// Generates C++ prototype code of parameter instance.
	fn paramIns(mut *self, mut &buf: *strings::Builder, mut p: &sema::ParamIns) {
		if p.Decl.Variadic {
			buf.WriteStr(typeSlice + "<")!
			self.kind(buf, p.Type)
			buf.WriteByte('>')!
		} else {
			self.kind(buf, p.Type)
		}
	}

	// Generates C++ code of function's result type.
	fn funcResult(mut *self, mut &buf: *strings::Builder, mut f: &sema::Func) {
		if f.IsVoid() {
			if f.Exceptional {
				buf.WriteStr("jule::VoidExceptional")!
				ret
			}
			buf.WriteStr("void")!
		}
		if f.Exceptional {
			buf.WriteStr("jule::Exceptional<")!
			self.kind(buf, f.Result.TypeSym.Type)
			buf.WriteByte('>')!
			ret
		}
		self.kind(buf, f.Result.TypeSym.Type)
	}

	// Generates C++ code of function instance's result type.
	fn funcInsResult(mut *self, mut &s: *strings::Builder, mut f: &sema::FuncIns) {
		if f.Decl.IsVoid() {
			if f.Decl.Exceptional {
				s.WriteStr("jule::VoidExceptional")!
			} else {
				s.WriteStr("void")!
			}
			ret
		}
		if f.Decl.Exceptional {
			s.WriteStr("jule::Exceptional<")!
			self.rc.codeMut1(s, f.Result)
			s.WriteByte('>')!
			ret
		}
		self.rc.codeMut1(s, f.Result)
	}

	fn anonFunc(mut *self, mut &buf: *strings::Builder, mut f: &sema::FuncIns) {
		if f.Result != nil && f.Result.Tuple() != nil {
			self.oc.pushResultIns(f)
		}
		self.funcInsResult(buf, f)
		if len(f.Params) == 0 {
			ret
		}
		buf.WriteByte(',')!
		for (i, mut param) in f.Params {
			if param.Decl.IsSelf() {
				continue
			}
			self.paramIns(buf, param)
			if len(f.Params)-i > 1 {
				buf.WriteByte(',')!
			}
		}
	}

	// Generates C++ code of function type.
	fn func(mut *self, mut &buf: *strings::Builder, mut f: &sema::FuncIns) {
		buf.WriteStr(typeFunc + "<")!
		self.anonFunc(buf, f)
		buf.WriteByte('>')!
	}

	fn channel(mut *self, mut &buf: *strings::Builder, mut ch: &sema::Chan) {
		mut ins := obj::FindStructGenericInstance(meta::Program.Runtime.Pchan, ch.Value)
		buf.WriteStr("jule::Ptr<")!
		identCoder.structureIns(buf, ins)
		buf.WriteStr(">")!
	}

	// Generates C++ code of type.
	fn kind(mut *self, mut &buf: *strings::Builder, mut k: &sema::Type) {
		match {
		| k.Struct() != nil:
			self.structureIns(buf, k.Struct())
			ret
		| k.Bind():
			// As we can see here, bind defines use pure identifiers directly.
			// So, if you hesitate about a type that causes wrong code generation,
			// write relevant algorithms above this case.
			buf.WriteStr(obj::GetBindName(k))!
			ret
		| k.Prim() != nil:
			self.prim(buf, k.Prim())
			ret
		| k.Tuple() != nil:
			self.tuple(buf, k.Tuple())
			ret
		| k.Sptr() != nil:
			self.sptr(buf, k.Sptr())
			ret
		| k.Ptr() != nil:
			self.ptr(buf, k.Ptr())
			ret
		| k.Enum() != nil:
			self.enumDecl(buf, k.Enum())
			ret
		| k.TypeEnum() != nil:
			self.typeEnumDecl(buf, k.TypeEnum())
			ret
		| k.Slice() != nil:
			self.slice(buf, k.Slice())
			ret
		| k.Map() != nil:
			self.mapType(buf, k.Map())
			ret
		| k.Trait() != nil:
			buf.WriteStr(typeTrait)!
			ret
		| k.Array() != nil:
			self.array(buf, k.Array())
			ret
		| k.Func() != nil:
			self.func(buf, k.Func())
			ret
		| k.Chan() != nil:
			self.channel(buf, k.Chan())
			ret
		}
		match type k.Kind {
		| &customType:
			buf.WriteStr(k.Kind.(&customType).kind)!
		|:
			buf.WriteStr("[<unimplemented_type_kind>]")!
		}
	}
}

const (
	resultMap        = "m"
	resultSlice      = "s"
	resultPtr        = "p"
	resultSptr       = "x"
	resultArray      = "a"
	resultFunc       = "f"
	resultChan       = "c"
	resultBindPrefix = "b"
)

struct resultCoder {
	tc: &typeCoder
}

impl resultCoder {
	fn new(mut tc: &typeCoder): &resultCoder {
		ret &resultCoder{tc: tc}
	}

	fn ptr(mut *self, mut &s: *strings::Builder, mut p: &sema::Ptr) {
		s.WriteStr(resultPtr)!
		self.codeMut(s, p.Value)
	}

	fn sptr(mut *self, mut &s: *strings::Builder, mut p: &sema::Sptr) {
		s.WriteStr(resultSptr)!
		self.codeMut(s, p.Value)
	}

	fn mapType(mut *self, mut &s: *strings::Builder, mut p: &sema::Map) {
		s.WriteStr(resultMap)!
		self.codeMut(s, p.Key)
		self.codeMut(s, p.Value)
	}

	fn slice(mut *self, mut &s: *strings::Builder, mut slc: &sema::Slice) {
		s.WriteStr(resultSlice)!
		self.codeMut(s, slc.Value)
	}

	fn array(mut *self, mut &s: *strings::Builder, mut arr: &sema::Array) {
		s.WriteStr(resultArray)!
		s.WriteStr(conv::FormatInt(i64(arr.N), 16))!
		self.codeMut(s, arr.Value)
	}

	fn func(mut *self, mut &s: *strings::Builder, mut f: &sema::FuncIns) {
		s.WriteStr(resultFunc)!
		for (_, mut p) in f.Params {
			self.codeMut(s, p.Type)
		}
		if f.Result != nil {
			self.codeMut(s, f.Result)
		}
	}

	fn channel(mut *self, mut &s: *strings::Builder, mut ch: &sema::Chan) {
		s.WriteStr(resultChan)!
		self.codeMut(s, ch.Value)
	}

	fn tuple(mut *self, mut &s: *strings::Builder, mut tup: &sema::Tuple) {
		for (_, mut t) in tup.Types {
			s.WriteStr("__jule_tuple_")!
			self.codeMut(s, t)
		}
	}

	fn codeMut(mut *self, mut &s: *strings::Builder, mut t: &sema::Type) {
		if t.Bind() {
			// TODO:
			//	this method should be handle structures separately
			//	because they are may use namespace directive,
			//	so same identifier may exist in different namespaces
			//	this makes the result identifier is non-unique
			//	if namespace directive will not be removed in the future,
			//	fix this conflict issues
			s.WriteStr(resultBindPrefix)!
			s.WriteStr(obj::GetBindName(t))!
			ret
		}
		match type t.Kind {
		| &sema::Ptr:
			self.ptr(s, t.Kind.(&sema::Ptr))
		| &sema::Sptr:
			self.sptr(s, t.Kind.(&sema::Sptr))
		| &sema::Chan:
			self.channel(s, t.Kind.(&sema::Chan))
		| &sema::Map:
			self.mapType(s, t.Kind.(&sema::Map))
		| &sema::Slice:
			self.slice(s, t.Kind.(&sema::Slice))
		| &sema::Array:
			self.array(s, t.Kind.(&sema::Array))
		| &sema::FuncIns:
			self.func(s, t.Kind.(&sema::FuncIns))
		| &sema::Enum:
			te := t.Kind.(&sema::Enum)
			identCoder.toOut(s, te.Name, uintptr(te))
		| &sema::TypeEnum:
			te := t.Kind.(&sema::TypeEnum)
			identCoder.toOut(s, te.Name, uintptr(te))
		| &sema::StructIns:
			mut si := t.Kind.(&sema::StructIns)
			identCoder.structureIns(s, si)
		| &sema::Trait:
			mut trt := t.Kind.(&sema::Trait)
			identCoder.traitDecl(s, trt)
		| &sema::Prim:
			s.WriteStr(t.Kind.(&sema::Prim).Kind)!
		| &sema::Tuple:
			self.tuple(s, t.Kind.(&sema::Tuple))
		|:
			panic("cxx: this panic call should be unreachable")
		}
	}

	fn codeMut1(mut *self, mut &s: *strings::Builder, mut t: &sema::Type) {
		mut tup := t.Tuple()
		if tup != nil {
			self.tuple(s, tup)
		} else {
			self.tc.kind(s, t)
		}
	}

	fn code(mut *self, mut t: &sema::Type): []byte {
		mut s := strings::Builder{}
		s.Grow(20)
		self.codeMut(&s, t)
		ret unsafe { s.Buf() }
	}
}

// Reports whether type supports initialization.
fn ableToInit(mut t: &sema::Type): bool {
	ret !t.Bind()
}

// Reports whether type should initialized.
// If the type API implemented structure of something like that, initialization is redundant.
// Let the constructor do it's job.
fn shouldInitialized(mut t: &sema::Type): bool {
	if !ableToInit(t) {
		ret false
	}
	prim := t.Prim()
	if prim != nil {
		ret !prim.IsAny() && !prim.IsStr()
	}
	match {
	| t.Sptr() != nil:
		ret false
	| t.Map() != nil:
		ret false
	| t.Chan() != nil:
		ret false
	| t.Slice() != nil:
		ret false
	| t.Trait() != nil:
		ret false
	| t.Func() != nil:
		ret false
	| t.Array() != nil:
		mut arr := t.Array()
		ret ableToInit(arr.Value)
	| t.Struct() != nil:
		ret true
	|:
		ret true
	}
}