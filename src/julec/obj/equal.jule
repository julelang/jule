// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/constant"
use "std/jule/sema"

struct anyData {
	dataPtr: &uint
	typePtr: *unsafe
}

// Returns data pointer address in uintptr of Expr.
fn TypeData(&m: sema::Expr): uintptr {
	ret uintptr(unsafe { (*anyData)(&m).typePtr })
}

fn equalConst(mut l: &constant::Const, mut r: &constant::Const): bool {
	match {
	| l.IsInt():
		ret r.IsInt() && l.ReadInt().Cmp(r.ReadInt()) == 0
	| l.IsF64():
		ret r.IsF64() && l.ReadF64() == r.ReadF64()
	| l.IsStr():
		ret r.IsStr() && l.ReadStr() == r.ReadStr()
	| l.IsBool():
		ret r.IsBool() && l.ReadBool() == r.ReadBool()
	| l.IsNil():
		ret r.IsNil()
	|:
		ret false
	}
}

fn equalCasting(mut l: &sema::CastingExpr, mut r: &sema::CastingExpr): bool {
	if !l.Type.Equal(r.Type) {
		ret false
	}
	ret EqualModels(l.Expr.Model, r.Expr.Model)
}

fn equalUnary(mut l: &sema::UnaryExpr, mut r: &sema::UnaryExpr): bool {
	if l.Op.Id != r.Op.Id || l.Op.Kind != r.Op.Kind {
		ret false
	}
	ret EqualModels(l.Expr.Model, r.Expr.Model)
}

fn equalIndexing(mut l: &sema::IndexingExpr, mut r: &sema::IndexingExpr): bool {
	ret EqualModels(l.Expr.Model, r.Expr.Model) &&
		EqualModels(l.Index.Model, r.Index.Model)
}

fn equalBinary(mut l: &sema::BinaryExpr, mut r: &sema::BinaryExpr): bool {
	if l.Op.Id != r.Op.Id || l.Op.Kind != r.Op.Kind {
		ret false
	}
	ret EqualModels(l.Left.Model, r.Left.Model) &&
		EqualModels(l.Right.Model, r.Right.Model)
}

// Reports whether expressions are equal.
// Designed lvalue equality comparison oriented,
// such as swap statement value comparisons.
fn EqualModels(mut l: sema::Expr, mut r: sema::Expr): bool {
	if TypeData(l) != TypeData(r) {
		ret false
	}
	match type l {
	| &sema::Var:
		mut lv := l.(&sema::Var)
		mut rv := r.(&sema::Var)
		if !lv.Reference && !rv.Reference ||
			lv.ValueSym == nil || lv.ValueSym.Value == nil ||
			rv.ValueSym == nil || rv.ValueSym.Value == nil {
			// Variables are not reference (or points to unknown such as parameters), compare directly.
			ret lv == rv
		}
		// Dereference variables and compare the referenced values.
		if lv.Reference {
			if rv.Reference {
				ret EqualModels(lv.ValueSym.Value.Model, rv.ValueSym.Value.Model)
			}
			ret EqualModels(lv.ValueSym.Value.Model, r)
		}
		// rv.Reference = true
		if lv.Reference {
			ret EqualModels(lv.ValueSym.Value.Model, rv.ValueSym.Value.Model)
		}
		ret EqualModels(l, rv.ValueSym.Value.Model)
	| &sema::StructSubIdentExpr:
		mut li := l.(&sema::StructSubIdentExpr)
		mut ri := r.(&sema::StructSubIdentExpr)
		ret li.Field == ri.Field && EqualModels(li.Expr.Model, ri.Expr.Model)
	| &constant::Const:
		ret equalConst(l.(&constant::Const), r.(&constant::Const))
	| &sema::CastingExpr:
		ret equalCasting(l.(&sema::CastingExpr), r.(&sema::CastingExpr))
	| &sema::UnaryExpr:
		ret equalUnary(l.(&sema::UnaryExpr), r.(&sema::UnaryExpr))
	| &sema::IndexingExpr:
		ret equalIndexing(l.(&sema::IndexingExpr), r.(&sema::IndexingExpr))
	| &sema::BinaryExpr:
		ret equalBinary(l.(&sema::BinaryExpr), r.(&sema::BinaryExpr))
	|:
		ret false
	}
}