// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "obj"
use "std/comptime"
use "std/jule/sema"

// Linkpath of common packages.
const (
	linkpathRuntime = "std/runtime"
	linkpathStrings = "std/strings"
	linkpathMathCmplx = "std/math/cmplx"
)

// Program metadata for the main IR.
// All required packages use this metadata collection instead of
// transferring data between algorithms.
// It is safe to read for concurrent implementations.
// In good practice, it should be build once.
// Default value is nil, but it should be initialized before relevant algorithms.
// This variable always assumed as non-nil.
static mut Program = (&Meta)(nil)

// Metadata for the strings::Builder.
struct StrBuilder {
	Write:     &sema::FuncIns
	WriteByte: &sema::FuncIns
	WriteRune: &sema::FuncIns
	WriteStr:  &sema::FuncIns
}

// Metadata for the runtime package.
struct Runtime {
	Threads: &sema::Var
	NumCPU:  &sema::Var
	Argc:    &sema::Var
	Argv:    &sema::Var
	Envp:    &sema::Var

	// Hard initializer function of runtime.
	Init: &sema::FuncIns

	ToStr:           &sema::Func
	ArrayCmp:        &sema::Func
	DynAssertAssign: &sema::Func
	Maphash:         &sema::Func
	Memcopy:         &sema::Func
	Prememappend:    &sema::Func
	Memappend:       &sema::Func
	Zprint:          &sema::FuncIns
	Zprintln:        &sema::FuncIns
	Osyield:         &sema::FuncIns
	ChanSelect:      &sema::FuncIns
	RCAdd:           &sema::FuncIns
	RCLoad:          &sema::FuncIns
	RCDrop:          &sema::FuncIns
	RCAddAtomic:     &sema::FuncIns
	RCLoadAtomic:    &sema::FuncIns
	RCDropAtomic:    &sema::FuncIns
	RuneCount:       &sema::FuncIns
	StrBytePtr:      &sema::FuncIns
	SliceBytePtr:    &sema::FuncIns
	StrAsSlice:      &sema::FuncIns
	SliceAsStr:      &sema::FuncIns
	CloseThread:     &sema::FuncIns

	Map:         &sema::Struct
	MapIterator: &sema::Struct
	Pchan:       &sema::Struct
	Hchan:       &sema::Struct
}

// Metadata for the std/math/cmplx package.
struct MathCmplx {
	Cmplx: &sema::StructIns // Cmplx

	CmplxAdd:  &sema::FuncIns // Cmplx.Add
	CmplxSub:  &sema::FuncIns // Cmplx.Sub
	CmplxMul:  &sema::FuncIns // Cmplx.Mul
	CmplxDiv:  &sema::FuncIns // Cmplx.Div
	CmplxAddZ: &sema::FuncIns // Cmplx.add
	CmplxSubZ: &sema::FuncIns // Cmplx.sub
	CmplxMulZ: &sema::FuncIns // Cmplx.mul
	CmplxDivZ: &sema::FuncIns // Cmplx.div
}

// Metadata for common objects.
struct Meta {
	Runtime:    &Runtime
	StrBuilder: &StrBuilder
	MathCmplx:  &MathCmplx

	EntryPoint: &sema::Func
}

// Collects whole possible metadata from IR.
fn Collect(mut ir: &obj::IR): &Meta {
	mut meta := new(Meta)
	meta.Runtime = CollectRuntime(ir)
	meta.StrBuilder = CollectStrBuilder(ir)
	meta.MathCmplx = CollectMathCmplx(ir)
	ret meta
}

// Collects Runtime from IR if possible.
fn CollectRuntime(mut &ir: &obj::IR): &Runtime {
	mut p := obj::SelectImport(ir.Used, linkpathRuntime)
	if p == nil {
		ret nil
	}
	mut meta := new(Runtime)

	// Globals.
	meta.Threads = obj::RuntimeFindGlobal(p, "threads")
	meta.NumCPU = obj::RuntimeFindGlobal(p, "numcpu")
	meta.Argc = obj::RuntimeFindGlobal(p, "argc")
	meta.Argv = obj::RuntimeFindGlobal(p, "argv")
	meta.Envp = obj::RuntimeFindGlobal(p, "envp")

	// Functions.
	meta.Init = obj::RuntimeFindFunc(p, "__init").Instances[0]
	meta.ToStr = obj::RuntimeFindFunc(p, "toStr")
	meta.ArrayCmp = obj::RuntimeFindFunc(p, "arrayCmp")
	meta.DynAssertAssign = obj::RuntimeFindFunc(p, "dynAssertAssign")
	meta.Maphash = obj::RuntimeFindFunc(p, "maphash")
	meta.Memcopy = obj::RuntimeFindFunc(p, "memcopy")
	meta.Prememappend = obj::RuntimeFindFunc(p, "prememappend")
	meta.Memappend = obj::RuntimeFindFunc(p, "memappend")
	meta.Zprint = obj::RuntimeFindFunc(p, "zprint").Instances[0]
	meta.Zprintln = obj::RuntimeFindFunc(p, "zprintln").Instances[0]
	meta.Osyield = obj::RuntimeFindFunc(p, "osyield").Instances[0]
	meta.ChanSelect = obj::RuntimeFindFunc(p, "chanSelect").Instances[0]
	meta.RCAdd = obj::RuntimeFindFunc(p, "_RCAdd").Instances[0]
	meta.RCLoad = obj::RuntimeFindFunc(p, "_RCLoad").Instances[0]
	meta.RCDrop = obj::RuntimeFindFunc(p, "_RCDrop").Instances[0]
	meta.RCAddAtomic = obj::RuntimeFindFunc(p, "_RCAddAtomic").Instances[0]
	meta.RCLoadAtomic = obj::RuntimeFindFunc(p, "_RCLoadAtomic").Instances[0]
	meta.RCDropAtomic = obj::RuntimeFindFunc(p, "_RCDropAtomic").Instances[0]
	meta.RuneCount = obj::RuntimeFindFunc(p, "runeCount").Instances[0]
	meta.StrBytePtr = obj::RuntimeFindFunc(p, "strBytePtr").Instances[0]
	meta.SliceBytePtr = obj::RuntimeFindFunc(p, "sliceBytePtr").Instances[0]
	meta.StrAsSlice = obj::RuntimeFindFunc(p, "strAsSlice").Instances[0]
	meta.SliceAsStr = obj::RuntimeFindFunc(p, "sliceAsStr").Instances[0]
	meta.CloseThread = obj::RuntimeFindFunc(p, "closeThread").Instances[0]

	// Structs.
	meta.Map = obj::RuntimeFindStruct(p, "_Map")
	meta.MapIterator = obj::RuntimeFindStruct(p, "mapIterator")
	meta.Pchan = obj::RuntimeFindStruct(p, "pchan")
	meta.Hchan = obj::RuntimeFindStruct(p, "hchan")

	ret meta
}

// Collects StrBuilder from IR if possible.
fn CollectStrBuilder(mut &ir: &obj::IR): &StrBuilder {
	const Binded = false
	const Static = false
	mut p := obj::SelectImport(ir.Used, linkpathStrings)
	if p == nil {
		ret nil
	}
	mut b := p.FindStruct("Builder", Binded).Instances[0]
	mut meta := new(StrBuilder)
	const metav = comptime::ValueOf(*meta)
	const for _, f in metav.Type().Decl().Fields() {
		metav.Field(f.Name()).Unwrap() = b.FindMethod(f.Name(), Static).Instances[0]
	}
	ret meta
}

// Collects MathCmplx from IR if possible.
fn CollectMathCmplx(mut &ir: &obj::IR): &MathCmplx {
	mut p := obj::SelectImport(ir.Used, linkpathMathCmplx)
	if p == nil {
		ret nil
	}
	mut meta := new(MathCmplx)

	const Static = false
	meta.Cmplx = obj::RuntimeFindStruct(p, "Cmplx").Instances[0]
	meta.CmplxAdd = meta.Cmplx.FindMethod("Add", Static).Instances[0]
	meta.CmplxSub = meta.Cmplx.FindMethod("Sub", Static).Instances[0]
	meta.CmplxMul = meta.Cmplx.FindMethod("Mul", Static).Instances[0]
	meta.CmplxDiv = meta.Cmplx.FindMethod("Div", Static).Instances[0]
	meta.CmplxAddZ = meta.Cmplx.FindMethod("add", Static).Instances[0]
	meta.CmplxSubZ = meta.Cmplx.FindMethod("sub", Static).Instances[0]
	meta.CmplxMulZ = meta.Cmplx.FindMethod("mul", Static).Instances[0]
	meta.CmplxDivZ = meta.Cmplx.FindMethod("div", Static).Instances[0]

	ret meta
}