// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julec/obj"
use "std/comptime"
use "std/jule/sema"

// Linkpath of common packages.
const (
	linkpathRuntime = "std/runtime"
	linkpathStrings = "std/strings"
)

// Program metadata for the main IR.
// All required packages use this metadata collection instead of
// transferring data between algorithms.
// It is safe to read for concurrent implementations.
// In good practice, it should be build once.
// Default value is nil, but it should be initialized before relevant algorithms.
// This variable always assumed as non-nil.
let mut Program = (&Meta)(nil)

// Metadata for the strings::Builder.
struct StrBuilder {
	Write:     &sema::FuncIns
	WriteByte: &sema::FuncIns
	WriteRune: &sema::FuncIns
	WriteStr:  &sema::FuncIns
}

// Metadata for the runtime package.
struct Runtime {
	Threads:    &sema::Var
	NumCPU:     &sema::Var
	Argc:       &sema::Var
	Argv:       &sema::Var
	Envp:       &sema::Var
	GlobalRand: &sema::Var

	// Hard initializer function of runtime.
	Init: &sema::FuncIns

	Rand:            &sema::FuncIns
	Osyield:         &sema::FuncIns
	ToStr:           &sema::Func
	ArrayCmp:        &sema::Func
	DynAssertAssign: &sema::Func
	Maphash:         &sema::Func
	Memcopy:         &sema::Func
	Fastmemcopy:     &sema::Func
	FastmemcopyImpl: &sema::FuncIns
	Prememappend:    &sema::Func
	Memappend:       &sema::Func
	Zprint:          &sema::FuncIns
	Zprintln:        &sema::FuncIns
	Emptyselect:     &sema::FuncIns
	RCAdd:           &sema::FuncIns
	RCLoad:          &sema::FuncIns
	RCDrop:          &sema::FuncIns
	RCAddAtomic:     &sema::FuncIns
	RCLoadAtomic:    &sema::FuncIns
	RCDropAtomic:    &sema::FuncIns
	RuneCount:       &sema::FuncIns
	StrBytePtr:      &sema::FuncIns
	SliceBytePtr:    &sema::FuncIns
	StrAsSlice:      &sema::FuncIns
	SliceAsStr:      &sema::FuncIns
	CloseThread:     &sema::FuncIns
	CheckNilRef:     &sema::FuncIns
	Cmplx64Eq:       &sema::FuncIns
	Cmplx64Neg:      &sema::FuncIns
	Cmplx64Add:      &sema::FuncIns
	Cmplx64Sub:      &sema::FuncIns
	Cmplx64Mul:      &sema::FuncIns
	Cmplx64Div:      &sema::FuncIns
	Cmplx128Eq:      &sema::FuncIns
	Cmplx128Neg:     &sema::FuncIns
	Cmplx128Add:     &sema::FuncIns
	Cmplx128Sub:     &sema::FuncIns
	Cmplx128Mul:     &sema::FuncIns
	Cmplx128Div:     &sema::FuncIns
	Cmplx128cmplx64: &sema::FuncIns
	Cmplx64cmplx128: &sema::FuncIns

	Map:         &sema::Struct
	MapIterator: &sema::Struct
	Pchan:       &sema::Struct
	Cmplx64:     &sema::StructIns
	Cmplx128:    &sema::StructIns
}

// Metadata for common objects.
struct Meta {
	Runtime:    &Runtime
	StrBuilder: &StrBuilder

	EntryPoint: &sema::Func
}

// Collects whole possible metadata from IR.
fn Collect(mut ir: &obj::IR): &Meta {
	mut meta := new(Meta)
	meta.Runtime = CollectRuntime(ir)
	meta.StrBuilder = CollectStrBuilder(ir)
	ret meta
}

// Collects Runtime from IR if possible.
fn CollectRuntime(mut ir: &obj::IR): &Runtime {
	mut p := obj::SelectImport(ir.Used, linkpathRuntime)
	if p == nil {
		ret nil
	}
	mut meta := new(Runtime)

	// Globals.
	meta.Threads = obj::RuntimeFindGlobal(p, "threads")
	meta.NumCPU = obj::RuntimeFindGlobal(p, "numcpu")
	meta.Argc = obj::RuntimeFindGlobal(p, "argc")
	meta.Argv = obj::RuntimeFindGlobal(p, "argv")
	meta.Envp = obj::RuntimeFindGlobal(p, "envp")
	meta.GlobalRand = obj::RuntimeFindGlobal(p, "__rand")

	// Functions.
	meta.Init = obj::RuntimeFindFunc(p, "__init").Instances[0]
	meta.Rand = obj::RuntimeFindFunc(p, "rand").Instances[0]
	meta.Osyield = obj::RuntimeFindFunc(p, "osyield").Instances[0]
	meta.ToStr = obj::RuntimeFindFunc(p, "toStr")
	meta.ArrayCmp = obj::RuntimeFindFunc(p, "arrayCmp")
	meta.DynAssertAssign = obj::RuntimeFindFunc(p, "dynAssertAssign")
	meta.Maphash = obj::RuntimeFindFunc(p, "maphash")
	meta.Memcopy = obj::RuntimeFindFunc(p, "memcopy")
	meta.Fastmemcopy = obj::RuntimeFindFunc(p, "fastmemcopy")
	meta.FastmemcopyImpl = obj::RuntimeFindFunc(p, "fastmemcopy_impl").Instances[0]
	meta.Prememappend = obj::RuntimeFindFunc(p, "prememappend")
	meta.Memappend = obj::RuntimeFindFunc(p, "memappend")
	meta.Zprint = obj::RuntimeFindFunc(p, "zprint").Instances[0]
	meta.Zprintln = obj::RuntimeFindFunc(p, "zprintln").Instances[0]
	meta.Emptyselect = obj::RuntimeFindFunc(p, "emptyselect").Instances[0]
	meta.RCAdd = obj::RuntimeFindFunc(p, "_RCAdd").Instances[0]
	meta.RCLoad = obj::RuntimeFindFunc(p, "_RCLoad").Instances[0]
	meta.RCDrop = obj::RuntimeFindFunc(p, "_RCDrop").Instances[0]
	meta.RCAddAtomic = obj::RuntimeFindFunc(p, "_RCAddAtomic").Instances[0]
	meta.RCLoadAtomic = obj::RuntimeFindFunc(p, "_RCLoadAtomic").Instances[0]
	meta.RCDropAtomic = obj::RuntimeFindFunc(p, "_RCDropAtomic").Instances[0]
	meta.RuneCount = obj::RuntimeFindFunc(p, "runeCount").Instances[0]
	meta.StrBytePtr = obj::RuntimeFindFunc(p, "strBytePtr").Instances[0]
	meta.SliceBytePtr = obj::RuntimeFindFunc(p, "sliceBytePtr").Instances[0]
	meta.StrAsSlice = obj::RuntimeFindFunc(p, "strAsSlice").Instances[0]
	meta.SliceAsStr = obj::RuntimeFindFunc(p, "sliceAsStr").Instances[0]
	meta.CloseThread = obj::RuntimeFindFunc(p, "closeThread").Instances[0]
	meta.CheckNilRef = obj::RuntimeFindFunc(p, "checkNilRef").Instances[0]
	meta.Cmplx64Eq = obj::RuntimeFindFunc(p, "cmplx64eq").Instances[0]
	meta.Cmplx64Neg = obj::RuntimeFindFunc(p, "cmplx64neg").Instances[0]
	meta.Cmplx64Add = obj::RuntimeFindFunc(p, "cmplx64add").Instances[0]
	meta.Cmplx64Sub = obj::RuntimeFindFunc(p, "cmplx64sub").Instances[0]
	meta.Cmplx64Mul = obj::RuntimeFindFunc(p, "cmplx64mul").Instances[0]
	meta.Cmplx64Div = obj::RuntimeFindFunc(p, "cmplx64div").Instances[0]
	meta.Cmplx128Eq = obj::RuntimeFindFunc(p, "cmplx128eq").Instances[0]
	meta.Cmplx128Neg = obj::RuntimeFindFunc(p, "cmplx128neg").Instances[0]
	meta.Cmplx128Add = obj::RuntimeFindFunc(p, "cmplx128add").Instances[0]
	meta.Cmplx128Sub = obj::RuntimeFindFunc(p, "cmplx128sub").Instances[0]
	meta.Cmplx128Mul = obj::RuntimeFindFunc(p, "cmplx128mul").Instances[0]
	meta.Cmplx128Div = obj::RuntimeFindFunc(p, "cmplx128div").Instances[0]
	meta.Cmplx128cmplx64 = obj::RuntimeFindFunc(p, "cmplx128cmplx64").Instances[0]
	meta.Cmplx64cmplx128 = obj::RuntimeFindFunc(p, "cmplx64cmplx128").Instances[0]

	// Structs.
	meta.Map = obj::RuntimeFindStruct(p, "hmap")
	meta.MapIterator = obj::RuntimeFindStruct(p, "hmapiterator")
	meta.Pchan = obj::RuntimeFindStruct(p, "pchan")
	meta.Cmplx64 = obj::RuntimeFindStruct(p, "_cmplx64").Instances[0]
	meta.Cmplx128 = obj::RuntimeFindStruct(p, "_cmplx128").Instances[0]

	ret meta
}

// Collects StrBuilder from IR if possible.
fn CollectStrBuilder(mut ir: &obj::IR): &StrBuilder {
	const Binded = false
	const Static = false
	mut p := obj::SelectImport(ir.Used, linkpathStrings)
	if p == nil {
		ret nil
	}
	mut b := p.FindStruct("Builder", Binded).Instances[0]
	mut meta := new(StrBuilder)
	const metav = comptime::ValueOf(*meta)
	const for _, f in metav.Type().Decl().Fields() {
		metav.Field(f.Name()).Unwrap() = b.FindMethod(f.Name(), Static).Instances[0]
	}
	ret meta
}