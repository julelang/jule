// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/sema"

// Collection for ordered defines.
struct OrderedDefines {
	Structs: []&sema::Struct
	Globals: []&sema::Var
}

// Reports whether type in correct order by dependencies.
fn isOrdered[T](t: &T, s: []&T, partial: bool): bool {
lookup:
	for _, d in t.Depends {
		// Fast way:
		const match type T {
		| sema::Var:
			if d.Constant {
				// Skip constant variables for dependency analysis.
				// It is not cost for runtime, so it is not an real-memory dependency.
				continue
			}
		}

		if partial {
			// Dependency and referencer is not in the same package.
			// Dependency should be ordered correctly, before this reference.
			if d.Token.File.Dir() != t.Token.File.Dir() {
				continue
			}
		}

		for _, o in s {
			if d == o {
				continue lookup
			}
		}
		// Dependency is not ordered.
		// All dependencies should be ordered first.
		ret false
	}
	ret true
}

// Orders defines s by their dependencies.
// All dependencies should came before the referencer after order.
// If partial ordering enabled, it assumes the dependencies from other packages
// should ordered correctly.
fn order[T](mut s: []&T, partial: bool) {
	mut i := 0
repeat:
	mut j := i
iter:
	for j < len(s); j++ {
		mut t := s[j]
		for _, o in s[:i] {
			if t == o {
				// Do not iterate if already iterated and added to ordered list.
				continue iter
			}
		}
		if isOrdered(t, s[:i], partial) {
			if i != j {
				s[i], s[j] = s[j], s[i]
			}
			i++
		}
	}
	if i < len(s) {
		goto repeat
	}
}