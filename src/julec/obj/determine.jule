// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/build"
use "std/jule/sema"
use "std/os/filepath"
use "std/strings"

// Reports whether exceptional scope s forwards exceptional to safe place.
fn IsForwarded(&s: &sema::Scope): bool {
	last := s.Stmts[len(s.Stmts)-1]
	match type last {
	| &sema::Value:
		match type last.(&sema::Value).Model {
		| &sema::BuiltinPanicCallExpr
		| &sema::BuiltinErrorCallExpr:
			ret true
		|:
			ret false
		}
	|:
		// Return true for break, continue, goto, ret or other control flows.
		ret true
	}
}

// Reports whether expression comes from binded define.
fn IsExprComesFromBind(&v: &sema::Value): bool {
	match type v.Model {
	| &sema::Var:
		ret v.Model.(&sema::Var).Binded
	| &sema::StructSubIdentExpr:
		ret IsStructBinded(v.Model.(&sema::StructSubIdentExpr).Owner)
	|:
		ret false
	}
}

// Reports whether type is handled as <any> type.
// Except traits, because traits are not handled pure any type.
fn IsAny(mut &t: &sema::Type): bool {
	if t.TypeEnum() != nil {
		ret true
	}
	prim := t.Prim()
	ret prim != nil && prim.IsAny()
}

// Reports whether anonymous function is closure.
fn IsClosure(&m: &sema::AnonFuncExpr): bool { ret len(m.Captured) > 0 }

// Reports the f function of owner is implements a trait's method.
fn IsTraitMethod(mut &owner: &sema::StructIns, &f: &sema::FuncIns): bool {
	for (_, mut t) in owner.Decl.Implements {
		if t.FindMethod(f.Decl.Ident) != nil {
			ret true
		}
	}
	ret false
}

// Reports whether f is standard library package p.
//
// Example use:
//	IsStdPackage(f, "") for determine the whether f is standard library package
//	IsStdPackage(f, "math") for "std/math"
//	IsStdPackage(f, "math/big") for "std/math/big"
fn IsStdPackage(f: str, p: str): bool {
	// Do not handle '/' separators of p, because it
	// valid path separator for all supported platforms.
	ret strings::HasPrefix(f, filepath::Join(build::PathStdlib(), p))
}

// Reports whether imp is implicitly imported.
// See "std/jule/sema" developer reference (8).
fn IsImplicitImport(imp: &sema::ImportInfo): bool {
	ret imp.Decl.Token == nil
}

// Reports whether structure is represents binded type.
// Assumes the source type is struct if exist.
fn IsStructBinded(s: &sema::StructIns): bool {
	if s.Decl.Binded {
		ret true
	}
	if s.Source != nil {
		match type s.Source.Kind {
		| &sema::StructIns:
			ret IsStructBinded(s.Source.Kind.(&sema::StructIns))
		}
	}
	ret false
}

// Checks value v and returns nil if it is hard dynamic type.
// Otherwise returns the actual value, removes casting expressions and etc.
fn IsHardDynamicType(mut &e: sema::Expr, mut &t: &sema::Type): (sema::Expr, &sema::Type) {
	// Handle traits separately, see documentation of obj::IsAny.
	// They handled as <any> type, but not have pure any type implementation,
	// therefore we have to handle them separately.
	if t.Trait() == nil && !IsAny(t) {
		ret e, t
	}
	mut c, ok := e.(&sema::CastingExpr)
	if ok {
		ret IsHardDynamicType(c.Expr.Model, c.Expr.Type)
	}
	ret nil, nil
}