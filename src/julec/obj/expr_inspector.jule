// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/sema"

// Expression model inspector.
struct ExprInspector {
	// If it is true, skips child expression models of current handled model if exist.
	// For example, after handling binary expression, walker skips left and right operands.
	SkipChild: bool

	handler: fn(mut &m: sema::Expr)
}

impl ExprInspector {
	// Returns new inspector.
	static fn New(): &ExprInspector {
		ret new(ExprInspector)
	}

	fn args(mut self, mut args: []sema::Expr) {
		for i in args {
			// Should be guaranteed that model points to the original memory.
			self.inspect(unsafe { *(&args[i]) })
		}
	}

	fn args1(mut self, mut args: []&sema::Value) {
		for i in args {
			if args[i] == nil {
				// We may have nil data with no error.
				// For example, array expressions use nil data for filled mark.
				continue
			}
			// Should be guaranteed that model points to the original memory.
			self.inspect(unsafe { *(&args[i].Model) })
		}
	}

	// Calls internal inspect step by expression model.
	// It's unsafe because this expression is may not be in ordinary order.
	// Internal configurations may change and unexpected behavior may occur.
	// Be careful when using.
	unsafe fn InspectStep(mut self, mut &m: sema::Expr) {
		self.inspect(m)
	}

	fn inspect(mut self, mut &m: sema::Expr) {
		self.SkipChild = false
		self.handler(m)
		if self.SkipChild {
			ret
		}
		match type m {
		| &sema::BinaryExpr:
			mut b := (&sema::BinaryExpr)(m)
			self.inspect(b.Left.Model)
			self.inspect(b.Right.Model)
		| &sema::ChanRecv:
			mut cr := (&sema::ChanRecv)(m)
			self.inspect(cr.Expr.Model)
		| &sema::ChanSend:
			mut cs := (&sema::ChanSend)(m)
			self.inspect(cs.Chan.Model)
			self.inspect(cs.Data.Model)
		| &sema::BuiltinCloseCallExpr:
			mut bcc := (&sema::BuiltinCloseCallExpr)(m)
			self.inspect(bcc.Chan.Model)
		| &sema::UnaryExpr:
			mut u := (&sema::UnaryExpr)(m)
			self.inspect(u.Expr.Model)
		| &sema::StructLitExpr:
			mut lit := (&sema::StructLitExpr)(m)
			for (_, mut arg) in lit.Args {
				self.inspect(arg.Expr.Model)
			}
		| &sema::AllocStructLitExpr:
			mut lit := (&sema::AllocStructLitExpr)(m).Lit
			for (_, mut arg) in lit.Args {
				self.inspect(arg.Expr.Model)
			}
		| &sema::CastingExpr:
			mut c := (&sema::CastingExpr)(m)
			self.inspect(c.Expr.Model)
		| &sema::FuncCallExpr:
			mut fc := (&sema::FuncCallExpr)(m)
			self.inspect(fc.Expr)
			self.args(fc.Args)
		| &sema::SliceExpr:
			mut s := (&sema::SliceExpr)(m)
			self.args1(s.Elems)
		| &sema::ArrayExpr:
			mut a := (&sema::ArrayExpr)(m)
			self.args1(a.Elems)
		| &sema::IndexingExpr:
			mut i := (&sema::IndexingExpr)(m)
			self.inspect(i.Expr.Model)
			self.inspect(i.Index.Model)
		| &sema::MapExpr:
			mut mp := (&sema::MapExpr)(m)
			for (_, mut entry) in mp.Entries {
				self.inspect(entry.Key)
				self.inspect(entry.Val)
			}
		| &sema::SlicingExpr:
			mut s := (&sema::SlicingExpr)(m)
			self.inspect(s.Expr.Model)
			self.inspect(s.Left)
			if s.Right != nil {
				self.inspect(s.Right)
			}
		| &sema::TraitSubIdentExpr:
			mut t := (&sema::TraitSubIdentExpr)(m)
			self.inspect(t.Expr)
		| &sema::StructSubIdentExpr:
			mut s := (&sema::StructSubIdentExpr)(m)
			self.inspect(s.Expr.Model)
		| &sema::TupleExpr:
			mut t := (&sema::TupleExpr)(m)
			for (_, mut v) in t.Values {
				self.inspect(v.Model)
			}
		| &sema::BuiltinNewCallExpr:
			mut b := (&sema::BuiltinNewCallExpr)(m)
			if b.Init != nil {
				self.inspect(b.Init)
			}
		| &sema::BuiltinPrintCallExpr:
			mut c := (&sema::BuiltinPrintCallExpr)(m)
			self.inspect(c.Expr.Model)
		| &sema::BuiltinPrintlnCallExpr:
			mut c := (&sema::BuiltinPrintlnCallExpr)(m)
			self.inspect(c.Expr.Model)
		| &sema::BuiltinPanicCallExpr:
			mut c := (&sema::BuiltinPanicCallExpr)(m)
			self.inspect(c.Expr)
		| &sema::BuiltinErrorCallExpr:
			mut c := (&sema::BuiltinErrorCallExpr)(m)
			self.inspect(c.Err.Model)
		| &sema::BuiltinMakeCallExpr:
			mut b := (&sema::BuiltinMakeCallExpr)(m)
			if b.Len != nil {
				self.inspect(b.Len)
			}
			if b.Cap != nil {
				self.inspect(b.Cap)
			}
		| &sema::BuiltinAppendCallExpr:
			mut b := (&sema::BuiltinAppendCallExpr)(m)
			self.inspect(b.Dest)
			self.inspect(b.Elements)
		| &sema::BuiltinLenCallExpr:
			mut l := (&sema::BuiltinLenCallExpr)(m)
			self.inspect(l.Expr.Model)
		| &sema::BuiltinCapCallExpr:
			mut c := (&sema::BuiltinCapCallExpr)(m)
			self.inspect(c.Expr.Model)
		| &sema::BuiltinDeleteCallExpr:
			mut b := (&sema::BuiltinDeleteCallExpr)(m)
			self.inspect(b.Dest.Model)
			if b.Key != nil {
				self.inspect(b.Key.Model)
			}
		| &sema::SizeofExpr:
			mut s := (&sema::SizeofExpr)(m)
			self.inspect(s.Expr)
		| &sema::AlignofExpr:
			mut a := (&sema::AlignofExpr)(m)
			self.inspect(a.Expr)
		| &sema::FreeExpr:
			mut f := (&sema::FreeExpr)(m)
			self.inspect(f.Expr)
		| &sema::BackendEmitExpr:
			mut e := (&sema::BackendEmitExpr)(m)
			self.args(e.Exprs)
		}
	}

	// Inspect expression model.
	// Resets [SkipChild] to default.
	// Inspector guarantees the parameter m will always point to original model.
	fn Inspect(mut self, mut &m: sema::Expr, f: fn(mut &m: sema::Expr)) {
		self.handler = f
		self.inspect(m)
	}
}