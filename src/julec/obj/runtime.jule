// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/sema"

fn RuntimeFindGlobal(mut runtime: &sema::ImportInfo, name: str): &sema::Var {
	const Bind = false
	mut f := runtime.FindVar(name, Bind)
	if f == nil {
		panic("obj: runtime global variable is not exist, this is an implementation mistake, this panic call should be unreachable")
	}
	ret f
}

fn RuntimeFindFunc(mut runtime: &sema::ImportInfo, name: str): &sema::Func {
	const Bind = false
	mut f := runtime.FindFunc(name, Bind)
	if f == nil {
		panic("obj: runtime function is not exist, this is an implementation mistake, this panic call should be unreachable")
	}
	ret f
}

fn RuntimeFindStruct(mut runtime: &sema::ImportInfo, name: str): &sema::Struct {
	const Bind = false
	mut f := runtime.FindStruct(name, Bind)
	if f == nil {
		panic("obj: runtime struct is not exist, this is an implementation mistake, this panic call should be unreachable")
	}
	ret f
}