// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "env"
use "std/jule/ast"
use "std/jule/importer"
use "std/jule/log"
use "std/jule/sema"
use "std/jule/token"

// Intermediate representation of the code for compiler.
struct IR {
	Root:    str               // Directory of the root package.
	Passes:  []str             // All unique pass directives.
	Runtime: &sema::ImportInfo // ImportInfo instance of the "std/runtime" package.
	Ordered: OrderedDefines    //  Ordered defines, nil by default. Initialized by the Order method.

	// The main package. Not including in the Used.
	// The Last dependency of the program, root package of the program.
	Main: &sema::Package

	// Imported packages for whole program.
	// Ordered by first-to-last package.
	// So, deeply the first use declaration is 0-indexed, then comes others.
	Used: []&sema::ImportInfo
}

impl IR {
	// Returns compiler IR of source code.
	// Returned IR is lexed, parsed, and analyzed.
	//
	// - Returns (nil, nil) logs if path has not any Jule file.
	// - Returns (nil, logs) if exist any log.
	// - Returns IR and nil logs if everything is fine.
	fn Build(path: str, flags: int): (&IR, []log::Log) {
		mut importer := importer::New(buildCompileInfo())
		const UpdateMod = true // Detect and use the root module for the main package if exist.
		mut files, mut logs := importer.ImportPackage(path, UpdateMod)
		if len(logs) > 0 {
			ret nil, logs
		}
		root := path

		if len(files) == 0 {
			ret nil, nil
		}

		// Push runtime package to first file.
		// Each Jule program should import this standard package.
		mut firstFile := files[0]
		pushRuntimeToAST(firstFile)

		mut pkg, logs := sema::AnalyzePackage(files, importer, flags)
		if len(logs) > 0 {
			ret nil, logs
		}

		mut ir := &IR{
			Root: root,
			Main: pkg,
			Used: importer.AllPackages(),
		}
		ir.Passes = getAllUniquePasses(ir.Main, ir.Used)

		// Set up special packages.
		ir.Runtime = pkg.Files[0].Imports[0] // runtime package

		ret ir, nil
	}
}

impl IR {
	fn appendStructs(*self, mut p: &sema::Package, mut &buffer: *[]&sema::Struct) {
		for (_, mut f) in p.Files {
			for (_, mut s) in f.Structs {
				if !s.Bind {
					*buffer = append(*buffer, s)
				}
			}
			for (_, mut ta) in f.TypeAliases {
				if !ta.Bind && ta.Strict {
					*buffer = append(*buffer, ta.TypeSym.Type.Kind.(&sema::StructIns).Decl)
				}
			}
		}
	}

	// Returns all structures of main package and used packages.
	// Ignores binded declarations, but appends strict type alias structures also.
	// Appends used packages first, then the main package.
	fn GetAllStructures(mut *self): []&sema::Struct {
		let mut buffer: []&sema::Struct = nil
		for (_, mut u) in self.Used {
			if !u.Bind {
				self.appendStructs(u.Package, &buffer)
			}
		}
		self.appendStructs(self.Main, &buffer)
		ret buffer
	}

	fn appendGlobals(*self, mut p: &sema::Package, mut &buffer: *[]&sema::Var) {
		for (_, mut f) in p.Files {
			for (_, mut v) in f.Vars {
				if v.Token != nil && !v.Bind && !v.Constant {
					*buffer = append(*buffer, v)
				}
			}
		}
	}

	// Returns all globals of main package and used packages.
	// Ignores binded declarations and constants.
	// If orderDefs is true, orders defines of each package.
	// Appends used packages first, then the main package.
	fn GetAllGlobals(mut *self, orderDefs: bool): []&sema::Var {
		// For ordering, all variables should be easy to predict.
		// They must only have dependency from their own package or used packages.
		// So, appending globals by used (should be deeply ordered already,
		// from deeply first dependency to last dependency which is root package)
		// should be enough. Therefore, perform partial ordering, just for package.
		// Also globals should be initialized before other packages, by use order.
		// So, non-partial ordering may break this initialization order.
		// This order strategy keeps also the package initialization order.
		let mut buffer: []&sema::Var = nil
		mut n := len(buffer)
		for (_, mut u) in self.Used {
			if !u.Bind {
				self.appendGlobals(u.Package, &buffer)
				if orderDefs {
					order(buffer[n:], true)
				}
				n = len(buffer)
			}
		}
		self.appendGlobals(self.Main, &buffer)
		if orderDefs {
			order(buffer[n:], true)
		}
		ret buffer
	}

	// Order defines at update ordered field of instance.
	fn Order(mut *self) {
		// Get globals with internal ordering enabled.
		// See the GetAllGlobals for the ordering details.
		self.Ordered.Globals = self.GetAllGlobals(true)

		// Do not order like globals, because globals always have dependencies
		// from their own packages or used packages. So analysis is
		// easy to predict. But structures, since they can be generic, may
		// refer to hard to analysis things. This occurs because we have
		// internally imported packages such as runtime. And the runtime package
		// may refer to any define of the program, without dependency. So,
		// import all and order them for correct ordering.
		self.Ordered.Structs = self.GetAllStructures()
		order(self.Ordered.Structs, false)
	}
}

fn pushPasses(mut p: &sema::Package, mut &passes: *[]str) {
	for (_, mut f) in p.Files {
	push:
		for _, pass in f.Passes {
			if pass.Text == "" {
				continue
			}
			for _, cpass in *passes {
				if cpass == pass.Text {
					continue push
				}
			}
			*passes = append(*passes, pass.Text)
		}
	}
}

fn getAllUniquePasses(mut pkg: &sema::Package, mut uses: []&sema::ImportInfo): []str {
	let mut passes: []str = nil

	pushPasses(pkg, &passes)
	for (_, mut u) in uses {
		if !u.Bind {
			pushPasses(u.Package, &passes)
		}
	}

	ret passes
}

fn buildCompileInfo(): importer::CompileInfo {
	mut info := importer::CompileInfo{
		Prod: env::Production,
		Test: env::Test,
	}

	match env::Compiler {
	| importer::Compiler.Clang:
		info.Compiler = importer::Compiler.Clang
	| importer::Compiler.GCC:
		info.Compiler = importer::Compiler.GCC
	}

	match env::CppStd {
	| importer::CppStd.Cpp14:
		info.CppStd = importer::CppStd.Cpp14
	| importer::CppStd.Cpp17:
		info.CppStd = importer::CppStd.Cpp17
	| importer::CppStd.Cpp20:
		info.CppStd = importer::CppStd.Cpp20
	}

	ret info
}

// See "std/jule" developer reference (8).
fn pushRuntimeToAST(mut f: &ast::AST) {
	mut decl := &ast::Use{
		Token: nil, // Nil token is a flag for implicit declaration.
		Path: &token::Token{
			ID: token::STR,
			Kind: `"std/runtime"`,
		},
		Alias: nil,
		Bind: false,
	}
	f.UseDecls = append(f.UseDecls, decl)
	if len(f.UseDecls) > 1 {
		// If we have another use declarations, move decl to first item.
		// Import order must remain same.
		copy(f.UseDecls[1:], f.UseDecls)
		f.UseDecls[0] = decl
	}
}